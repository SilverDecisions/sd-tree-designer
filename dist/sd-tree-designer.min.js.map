{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/arrayLikeToArray.js","node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","node_modules/@babel/runtime/helpers/assertThisInitialized.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/getPrototypeOf.js","node_modules/@babel/runtime/helpers/inherits.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/iterableToArray.js","node_modules/@babel/runtime/helpers/nonIterableSpread.js","node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","node_modules/@babel/runtime/helpers/setPrototypeOf.js","node_modules/@babel/runtime/helpers/toConsumableArray.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","src/app-utils.js","src/context-menu/context-menu.js","src/context-menu/edge-context-menu.js","src/context-menu/main-context-menu.js","src/context-menu/node-context-menu.js","src/context-menu/text-context-menu.js","src/d3-extensions.js","src/d3.js","src/i18n/de.json","src/i18n/en.json","src/i18n/fr.json","src/i18n/i18n.js","src/i18n/it.json","src/i18n/pl.json","src/i18n/pt-br.json","src/index.js","src/layout.js","src/node-drag-handler.js","src/symbols/circle.js","src/symbols/triangle.js","src/templates.js","src/templates/growl_message.html","src/text-drag-handler.js","src/tooltip.js","src/tree-designer.js","index.js"],"names":["require","r","e","n","t","o","i","f","c","u","a","Error","code","p","exports","call","length","1","module","arr","len","arr2","Array","__esModule","arrayLikeToArray","isArray","self","ReferenceError","instance","Constructor","TypeError","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","subClass","superClass","create","constructor","value","obj","default","iter","Symbol","iterator","from","_typeof","assertThisInitialized","_setPrototypeOf","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","minLen","toString","slice","name","test","d3","_interopRequireWildcard","_templates","_i18n","_sdUtils","AppUtils","textD3Obj","textString","width","textObj","node","textContent","getComputedTextLength","x","getSubStringLength","substring","tooltip","placeTextWithEllipsis","on","event","d","transition","duration","style","html","pageX","pageY","element","window","getComputedStyle","getPropertyValue","transform","g","document","createElementNS","setAttributeNS","matrix","baseVal","consolidate","pathNode","point","best","bestLength","scan","scanDistance","before","after","afterLength","beforeDistance","afterDistance","pathLength","getTotalLength","precision","bestDistance","Infinity","scanLength","distance2","getPointAtLength","beforeLength","y","distance","Math","sqrt","dx","dy","message","type","arguments","undefined","position","time","Templates","get","select","selectOrAppend","append","setTimeout","remove","tag","attribs","parent","el","createElement","deepExtend","appendChild","parentNode","removeChild","text","replace","createTextNode","div","innerHTML","evt","createEvent","initEvent","dispatchEvent","fireEvent","data","CustomEvent","detail","initCustomEvent","error","Utils","isString","i18n","selection","classed","display","offsetParent","url","callback","xhr","XMLHttpRequest","open","responseType","onload","status","response","send","sanitizeHeight","height","container","parseInt","sanitizeWidth","availableHeight","margin","max","top","bottom","availableWidth","left","right","ContextMenu","menu","opts","_classCallCheck2","this","openCallback","onOpen","closeCallback","onClose","selectAll","enter","attr","elm","preventDefault","stopPropagation","ret","divider","disabled","action","title","console","_contextMenu","EdgeContextMenu","treeDesigner","_this","_super","push","injectDecisionNode","injectChanceNode","_sdModel","MainContextMenu","mousePosition","newNode","domain","DecisionNode","addNode","ChanceNode","newText","Text","addText","pasteToNewLocation","copiedNodes","selectAllNodes","clearSelection","Point","pointer","svg","move","getMainGroupTranslation","NodeContextMenu","operationsForObject","copyMenuItem","selectNode","isNodeSelected","copySelectedNodes","cutMenuItem","cutSelectedNodes","pasteMenuItem","pasteToNode","folded","deleteMenuItem","removeSelectedNodes","TerminalNode","$TYPE","addNodeConversionOptions","addDecisionNode","addChanceNode","addTerminalNode","selectSubTree","foldSubtree","operations","forEach","op","performOperation","canPerform","conversionOptions","getNodeConversionOptions","options","allAllowedTypes","childEdges","$parent","filter","getNodeConversionOption","typeToConvertTo","convertNode","TextContextMenu","selectText","removeSelectedTexts","insertSelector","selector","D3Extensions","appendSelector","selectOrInsert","operation","selectorParts","split","shift","selectorModifier","selectorItem","insertOrAppendSelector","empty","_d3Dispatch","keys","_d3Scale","_d3Selection","_d3Shape","_d3Drag","_d3Brush","_d3Array","_d3Hierarchy","_d3TimeFormat","contextMenu","main","paste","copy","cut","delete","convert","decision","chance","terminal","selectSubtree","fold","unfold","flipSubtree","payoffsTransformation","edge","validation","incompletePath","probabilityDoNotSumUpTo1","invalidProbability","invalidPayoff","growl","brushDisabled","brushEnabled","payoff","named","aggregatedPayoff","probabilityToEnter","probability","_i18next","_interopRequireDefault","en","pl","it","de","fr","pt_br","lng","language","$instance","createInstance","fallbackLng","resources","translation","pt-BR","err","opt","_d3Extensions","hasOwnProperty","_exportNames","_treeDesigner","_appUtils","_tooltip","_d","extend","_circle","_triangle","Layout","config","nodeTypeToSymbol","symbolSquare","onAutoLayoutChanged","nodeTypeOrder","treeMargin","targetSymbolSize","nodeSeparation","b","nodeSymbolSize","sort","childNode","location","isManualLayout","autoLayout","moveNodeToEmptyPlace","redraw","MANUAL_LAYOUT_NAME","getNodeMinX","getNodeMinY","gridWidth","$linePoints","redrawIfChanged","nodesSortedByX","nodes","colidingNode","stepX","nodeSize","stepY","changed","newLocation","find","findCollidingNode","moveTo","_fireOnAutoLayoutChangedCallbacks","path","nodeSymbol","symbol","size","id","each","box","getBBox","min","set","setHangingPosition","fontSize","getFontSize","items","displayValue","aggregatedPayoffs","line","dX","sign","slantStartXOffset","slantWidth","edgeSlantWidthMax","point1","point2","point3","point4","datum","previousSibling","childNodes","minX","bb","getTextD3Selection","minY","Number","MAX_SAFE_INTEGER","getMinMarginBetweenNodes","$hidden","withoutStateSaving","saveState","onUndo","setGridWidth","onRedo","update","gridHeight","setGridHeight","setNodeSize","fitNodesInPlottingRegion","getRoots","setEdgeSlantWidthMax","newLayout","currentLayout","prevTreeMaxY","root","hierarchy","map","layout","cluster","tree","separation","maxY","pivot","limit","limitNodePositioning","maxX","backupNodeLocation","getNodeMaxX","revertX","$location","updateNodePosition","texts","limitTextPositioning","getTextMinX","getTextMaxX","getTextMinY","updateTextPosition","isHidden","NodeDragHandler","stateSnapshot","drag","subject","getTranslation","dragStarted","onDrag","dragEnded","ignoreDrag","ignoredDrag","createStateSnapshot","hide","selectedNodes","getSelectedNodes","prevDragEvent","dragEventCount","draggedNode","saveStateFromSnapshot","moveNodes","redrawEdges","updatePlottingRegionSize","pi","PI","draw","context","dist","bezierCurveTo","lineTo","closePath","templateName","variables","compiled","template","imports","include","v","s","styleProp","styleName","variableName","clazz","treeDesignerSelector","treeDesignerStyles","styleRule","nodeSelector","edgeSelector","TextDragHandler","draggedText","moveTexts","Tooltip","xOffset","yOffset","getContainer","updatePosition","htmlOrFn","indexOf","isFunction","show","_mainContextMenu","_nodeContextMenu","_layout","_nodeDragHandler","_textDragHandler","_textContextMenu","_edgeContextMenu","Hammer","TreeDesignerConfig","custom","scale","fontFamily","fontWeight","fontStyle","strokeWidth","optimal","stroke","label","color","negativeColor","fill","selected","description","readOnly","disableAnimations","forceFullEdgeRedraw","hideLabels","hidePayoffs","hideProbabilities","raw","preserveFoldingOfNestedSubtrees","payoffNumberFormatter","probabilityNumberFormatter","onNodeSelected","onEdgeSelected","onTextSelected","onSelectionCleared","object","Promise","resolve","payoffNames","maxPayoffsToDisplay","TreeDesigner","dataModel","setConfig","initContainer","init","updateCustomStyles","initSvg","initLayout","initI18n","initBrush","initEdgeMarkers","initMainContextMenu","initNodeContextMenu","initEdgeContextMenu","initNodeDragHandler","initTextDragHandler","initTextContextMenu","nodeDragHandler","textDragHandler","withTransitions","redrawDiagramTitle","redrawDiagramDescription","updateScale","updateMargin","transitionPrev","redrawNodes","redrawFloatingTexts","updateValidationMessages","computeAvailableSpace","wrapperGroup","mainGroup","mc","Manager","touchAction","add","Press","pointerType","Pinch","disableBrush","waitForFinalEvent","enableBrush","group","topMargin","diagramTitle","diagramDescription","getTitleGroupHeight","clone","setMargin","setScale","containerIdOrElem","trim","startsWith","_parents","svgWidth","svgHeight","mainGroupBox","newSvgWidth","newSvgHeight","updateBrushExtent","exit","nodesEnter","labelEnter","payoffEnter","indicatorEnter","aggregatedPayoffEnter","probabilityToEnterEnter","nodesMerge","merge","isOptimal","nodesMergeT","drawNodeSymbol","nodeLabelPosition","labelMergeT","updateTextLines","payoffTspans","item","payoffTspansM","val","isNaN","attachPayoffTooltip","payoffT","nodePayoffPosition","aggregatedPayoffTspans","aggregatedPayoffTspansM","aggregatedPayoffT","nodeAggregatedPayoffPosition","attach","probabilityToEnterT","nodeProbabilityToEnterPosition","indicator","nodeIndicatorPosition","nodeContextMenu","cancelDrag","button","nodeUnfoldButtonPosition","payoffFiledName","number","lines","reverse","tspans","l","edgesContainer","edges","edgesEnter","probabilityEnter","edgesMerge","optimalClassName","edgesMergeT","edgeLineD","selectEdge","edgeLabelPosition","_","displayPayoff","payoffTextT","edgePayoffPosition","displayProbability","probabilityMerge","probabilityMergeT","edgeProbabilityPosition","raise","edgeContextMenu","POINTER_TOUCH","textsEnter","textsMerge","textsMergeT","$displayValue","replaceUrls","escapeHtml","textContextMenu","_this2","validationResults","validationResult","isValid","getOwnPropertyNames","objectIdToError","errors","nodeSelection","getNodeD3SelectionById","tooltipHtml","getValidationMessage","initArrowMarker","brush","extent","brushContainer","hoveredEdge","mainGroupTranslation","offset","m","mgt","closest","cp","closestPoint","invert","mainContextMenu","getNewChildLocation","injectNode","getInjectedNodeLocation","removeNode","removeNodes","selectedTexts","getSelectedTexts","removeTexts","notClearPrevSelection","cloneSubtree","copyNode","selectedRoots","findSubtreeRoots","copyNodes","_this3","nodesToAttach","_this4","toAttach","attached","attachSubtree","getAllDescendantNodes","_this5","then","preserveNestedFolding","getAllDescendantEdges","_this6","updateVisibility","getNodeD3Selection","getTextD3SelectionById","_this7","visibleOnly","selectedVisible","allSelected","apply","_toConsumableArray2","descendants","_this8","clearSelectionBeforeSelect","skipCallback","_this9","titleValue","titleContainer","marginTop","desc","descriptionValue","withMargins","h","_index"],"mappings":"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","file":"sd-tree-designer.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var _typeof = require(\"@babel/runtime/helpers/typeof\")[\"default\"];\n\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","import * as d3 from \"./d3\";\r\nimport {Templates} from \"./templates\";\r\nimport {i18n} from \"./i18n/i18n\";\r\nimport {Utils} from \"sd-utils\";\r\n\r\nexport class AppUtils {\r\n\r\n    static sanitizeHeight = function (height, container) {\r\n        return (height || parseInt(container.style('height'), 10) || 400);\r\n    };\r\n\r\n    static sanitizeWidth = function (width, container) {\r\n        return (width || parseInt(container.style('width'), 10) || 960);\r\n    };\r\n\r\n    static availableHeight = function (height, container, margin) {\r\n        return Math.max(0, AppUtils.sanitizeHeight(height, container) - margin.top - margin.bottom);\r\n    };\r\n\r\n    static availableWidth = function (width, container, margin) {\r\n        return Math.max(0, AppUtils.sanitizeWidth(width, container) - margin.left - margin.right);\r\n    };\r\n\r\n    //places textString in textObj, adds an ellipsis if text can't fit in width\r\n    static placeTextWithEllipsis(textD3Obj, textString, width) {\r\n        var textObj = textD3Obj.node();\r\n        textObj.textContent = textString;\r\n\r\n        var margin = 0;\r\n        var ellipsisLength = 9;\r\n        //ellipsis is needed\r\n        if (textObj.getComputedTextLength() > width + margin) {\r\n            for (var x = textString.length - 3; x > 0; x -= 1) {\r\n                if (textObj.getSubStringLength(0, x) + ellipsisLength <= width + margin) {\r\n                    textObj.textContent = textString.substring(0, x) + \"...\";\r\n                    return true;\r\n                }\r\n            }\r\n            textObj.textContent = \"...\"; //can't place at all\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static placeTextWithEllipsisAndTooltip(textD3Obj, textString, width, tooltip) {\r\n        var ellipsisPlaced = AppUtils.placeTextWithEllipsis(textD3Obj, textString, width);\r\n        if (ellipsisPlaced && tooltip) {\r\n            textD3Obj.on(\"mouseover\", function (event, d) {\r\n                tooltip.transition()\r\n                    .duration(200)\r\n                    .style(\"opacity\", .9);\r\n                tooltip.html(textString)\r\n                    .style(\"left\", (event.pageX + 5) + \"px\")\r\n                    .style(\"top\", (event.pageY - 28) + \"px\");\r\n            });\r\n\r\n            textD3Obj.on(\"mouseout\", function (event, d) {\r\n                tooltip.transition()\r\n                    .duration(500)\r\n                    .style(\"opacity\", 0);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    static getFontSize(element) {\r\n        return window.getComputedStyle(element, null).getPropertyValue(\"font-size\");\r\n    }\r\n\r\n    static getTranslation(transform) {\r\n        // Create a dummy g for calculation purposes only. This will never\r\n        // be appended to the DOM and will be discarded once this function\r\n        // returns.\r\n        var g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n\r\n        // Set the transform attribute to the provided string value.\r\n        g.setAttributeNS(null, \"transform\", transform);\r\n\r\n        // consolidate the SVGTransformList containing all transformations\r\n        // to a single SVGTransform of type SVG_TRANSFORM_MATRIX and get\r\n        // its SVGMatrix.\r\n        var matrix = g.transform.baseVal.consolidate().matrix;\r\n\r\n        // As per definition values e and f are the ones for the translation.\r\n        return [matrix.e, matrix.f];\r\n    }\r\n\r\n\r\n    static closestPoint(pathNode, point) {\r\n        var pathLength = pathNode.getTotalLength(),\r\n            precision = 8,\r\n            best,\r\n            bestLength,\r\n            bestDistance = Infinity;\r\n\r\n        // linear scan for coarse approximation\r\n        for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\r\n            if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\r\n                best = scan, bestLength = scanLength, bestDistance = scanDistance;\r\n            }\r\n        }\r\n\r\n        // binary search for precise estimate\r\n        precision /= 2;\r\n        while (precision > 0.5) {\r\n            var before,\r\n                after,\r\n                beforeLength,\r\n                afterLength,\r\n                beforeDistance,\r\n                afterDistance;\r\n            if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\r\n                best = before, bestLength = beforeLength, bestDistance = beforeDistance;\r\n            } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\r\n                best = after, bestLength = afterLength, bestDistance = afterDistance;\r\n            } else {\r\n                precision /= 2;\r\n            }\r\n        }\r\n\r\n        best = [best.x, best.y];\r\n        best.distance = Math.sqrt(bestDistance);\r\n        return best;\r\n\r\n        function distance2(p) {\r\n            var dx = p.x - point[0],\r\n                dy = p.y - point[1];\r\n            return dx * dx + dy * dy;\r\n        }\r\n    }\r\n\r\n    static growl(message, type='info', position='right', time = 2000){\r\n        var html = Templates.get('growl', {message:message, type:type})\r\n\r\n        var g = d3.select('body').selectOrAppend('div.sd-growl-list.'+position).append('div').html(html);\r\n        setTimeout(function(){\r\n            g.remove();\r\n        }, time)\r\n    }\r\n\r\n\r\n    static createElement(tag, attribs, parent) {\r\n        var el = document.createElement(tag);\r\n\r\n        if (attribs) {\r\n            AppUtils.deepExtend(el, attribs);\r\n        }\r\n        if (parent) {\r\n            parent.appendChild(el);\r\n        }\r\n        return el;\r\n    };\r\n\r\n    static removeElement(element) {\r\n        element.parentNode.removeChild(element);\r\n    }\r\n\r\n    static replaceUrls(text){\r\n        if(!text){\r\n            return text;\r\n        }\r\n        var urlRegexp = /((ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?)/\r\n\r\n        return text.replace(urlRegexp, '<a href=\"$1\" target=\"_blank\">$1</a>');\r\n    }\r\n\r\n    static escapeHtml(html)\r\n    {\r\n        var text = document.createTextNode(html);\r\n        var div = document.createElement('div');\r\n        div.appendChild(text);\r\n        return div.innerHTML;\r\n    }\r\n\r\n    static dispatchHtmlEvent(element, name){\r\n        if (\"createEvent\" in document) {\r\n            var evt = document.createEvent(\"HTMLEvents\");\r\n            evt.initEvent(name, false, true);\r\n            element.dispatchEvent(evt);\r\n        }\r\n        else\r\n            element.fireEvent(\"on\"+name);\r\n    }\r\n\r\n    static dispatchEvent(name, data){\r\n        var event;\r\n        try{\r\n            event = new  CustomEvent(name,{ 'detail': data });\r\n        }catch (e){ //IE\r\n            event = document.createEvent('CustomEvent');\r\n            event.initCustomEvent(name, false, false, data);\r\n        }\r\n        document.dispatchEvent(event);\r\n    }\r\n\r\n    static getValidationMessage(error){\r\n        if(Utils.isString(error)){\r\n            error = {name: error};\r\n        }\r\n        var key = 'validation.' + error.name;\r\n        return i18n.t(key, error.data);\r\n    }\r\n\r\n    static hide(selection){\r\n        selection.classed('sd-hidden', true);\r\n    }\r\n\r\n    static show(selection, show=true){\r\n        selection.classed('sd-hidden', !show);\r\n    }\r\n\r\n\r\n\r\n    static isHidden(el, exact = true) {\r\n        if(!el){\r\n            return true;\r\n        }\r\n        if(exact){\r\n            var style = window.getComputedStyle(el);\r\n            return (style.display === 'none')\r\n        }\r\n        return (el.offsetParent === null)\r\n    }\r\n\r\n    static getJSON(url, callback) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open('get', url, true);\r\n        xhr.responseType = 'json';\r\n        xhr.onload = function () {\r\n            var status = xhr.status;\r\n            if (status == 200) {\r\n                callback(xhr.response, null);\r\n            } else {\r\n                callback(null, status);\r\n            }\r\n        };\r\n        xhr.send();\r\n    }\r\n}\r\n","import * as d3 from '../d3'\r\n\r\n/*based on:\r\n * github.com/patorjk/d3-context-menu */\r\n\r\nexport class ContextMenu {\r\n    openCallback;\r\n    closeCallback;\r\n\r\n    constructor(menu, opts) {\r\n        var self = this;\r\n\r\n        if (typeof opts === 'function') {\r\n            self.openCallback = opts;\r\n        } else {\r\n            opts = opts || {};\r\n            self.openCallback = opts.onOpen;\r\n            self.closeCallback = opts.onClose;\r\n        }\r\n\r\n        // create the div element that will hold the context menu\r\n        d3.selectAll('.d3-context-menu').data([1])\r\n            .enter()\r\n            .append('div')\r\n            .attr('class', 'd3-context-menu');\r\n\r\n        // close menu\r\n        d3.select('body').on('click.d3-context-menu', function () {\r\n            d3.select('.d3-context-menu').style('display', 'none');\r\n            if (self.closeCallback) {\r\n                self.closeCallback();\r\n            }\r\n        });\r\n\r\n        // this gets executed when a contextmenu event occurs\r\n        return function (event, data) {\r\n            var elm = this;\r\n\r\n            d3.selectAll('.d3-context-menu').html('');\r\n            var list = d3.selectAll('.d3-context-menu')\r\n                .on('contextmenu', function (event, d) {\r\n                    d3.select('.d3-context-menu').style('display', 'none');\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                })\r\n                .append('ul');\r\n            list.selectAll('li').data(typeof menu === 'function' ? menu(data) : menu).enter()\r\n                .append('li')\r\n                .attr('class', function (d) {\r\n                    var ret = '';\r\n                    if (d.divider) {\r\n                        ret += ' is-divider';\r\n                    }\r\n                    if (d.disabled) {\r\n                        ret += ' is-disabled';\r\n                    }\r\n                    if (!d.action) {\r\n                        ret += ' is-header';\r\n                    }\r\n                    return ret;\r\n                })\r\n                .html(function (d) {\r\n                    if (d.divider) {\r\n                        return '<hr>';\r\n                    }\r\n                    if (!d.title) {\r\n                        console.error('No title attribute set. Check the spelling of your options.');\r\n                    }\r\n                    return (typeof d.title === 'string') ? d.title : d.title(data);\r\n                })\r\n                .on('click', function (event, d) {\r\n                    if (d.disabled) return; // do nothing if disabled\r\n                    if (!d.action) return; // headers have no \"action\"\r\n                    d.action(elm, data);\r\n                    d3.select('.d3-context-menu').style('display', 'none');\r\n\r\n                    if (self.closeCallback) {\r\n                        self.closeCallback();\r\n                    }\r\n                });\r\n\r\n            // the openCallback allows an action to fire before the menu is displayed\r\n            // an example usage would be closing a tooltip\r\n            if (self.openCallback) {\r\n                if (self.openCallback(event, data) === false) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // display context menu\r\n            d3.select('.d3-context-menu')\r\n                .style('left', (event.pageX - 2) + 'px')\r\n                .style('top', (event.pageY - 2) + 'px')\r\n                .style('display', 'block');\r\n\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        };\r\n    };\r\n\r\n    static hide() {\r\n        d3.select('.d3-context-menu').style('display', 'none');\r\n    }\r\n\r\n}\r\n","import {ContextMenu} from './context-menu'\r\nimport {i18n} from \"../i18n/i18n\";\r\n\r\nexport class EdgeContextMenu extends ContextMenu {\r\n    treeDesigner;\r\n\r\n    constructor(treeDesigner) {\r\n        var menu = function (d) {\r\n\r\n            var menu = [];\r\n\r\n            menu.push({\r\n                title: i18n.t('contextMenu.edge.injectDecisionNode'),\r\n                action: function (elm, d, i) {\r\n                    treeDesigner.injectDecisionNode(d)\r\n                }\r\n            });\r\n            menu.push({\r\n                title: i18n.t('contextMenu.edge.injectChanceNode'),\r\n                action: function (elm, d, i) {\r\n                    treeDesigner.injectChanceNode(d)\r\n                }\r\n            });\r\n\r\n\r\n            return menu;\r\n        };\r\n\r\n        super(menu);\r\n        this.treeDesigner = treeDesigner;\r\n    }\r\n}\r\n","import {ContextMenu} from './context-menu'\r\nimport {domain as model} from 'sd-model'\r\nimport * as d3 from '../d3'\r\nimport {i18n} from \"../i18n/i18n\";\r\n\r\nexport class MainContextMenu extends ContextMenu {\r\n    treeDesigner;\r\n\r\n    constructor(treeDesigner) {\r\n        var mousePosition = null;\r\n        var menu = function (d) {\r\n\r\n            var menu = [];\r\n            menu.push({\r\n                title: i18n.t('contextMenu.main.addDecisionNode'),\r\n                action: function (elm, d) {\r\n                    var newNode = new model.DecisionNode(mousePosition);\r\n                    treeDesigner.addNode(newNode)\r\n                }\r\n            });\r\n            menu.push({\r\n                title: i18n.t('contextMenu.main.addChanceNode'),\r\n                action: function (elm, d) {\r\n                    var newNode = new model.ChanceNode(mousePosition);\r\n                    treeDesigner.addNode(newNode)\r\n                }\r\n            });\r\n            menu.push({divider: true});\r\n            menu.push({\r\n                title: i18n.t('contextMenu.main.addText'),\r\n                action: function (elm, d) {\r\n                    var newText = new model.Text(mousePosition);\r\n                    treeDesigner.addText(newText);\r\n                },\r\n\r\n            });\r\n            menu.push({divider: true});\r\n            menu.push({\r\n                title: i18n.t('contextMenu.main.paste'),\r\n                action: function (elm, d) {\r\n                    treeDesigner.pasteToNewLocation(mousePosition);\r\n                },\r\n                disabled: !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\r\n\r\n            });\r\n            menu.push({divider: true});\r\n\r\n            menu.push({\r\n                title: i18n.t('contextMenu.main.selectAllNodes'),\r\n                action: function (elm, d) {\r\n                    treeDesigner.selectAllNodes();\r\n                }\r\n            });\r\n            return menu;\r\n        };\r\n\r\n        super(menu, {onOpen: (event) => {\r\n            treeDesigner.clearSelection();\r\n            mousePosition = new model.Point(d3.pointer(event, treeDesigner.svg.node())).move(treeDesigner.getMainGroupTranslation(true));\r\n\r\n        }});\r\n        this.treeDesigner = treeDesigner;\r\n    }\r\n}\r\n","import {ContextMenu} from './context-menu'\r\nimport {domain as model} from 'sd-model'\r\nimport {i18n} from \"../i18n/i18n\";\r\n\r\nexport class NodeContextMenu extends ContextMenu {\r\n    treeDesigner;\r\n\r\n    constructor(treeDesigner, operationsForObject) {\r\n        var menu = function (d) {\r\n\r\n            var copyMenuItem = {\r\n                title: i18n.t('contextMenu.node.copy'),\r\n                action: function (elm, d, i) {\r\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\r\n                    treeDesigner.copySelectedNodes();\r\n                }\r\n            };\r\n            var cutMenuItem = {\r\n                title: i18n.t('contextMenu.node.cut'),\r\n                action: function (elm, d, i) {\r\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\r\n                    treeDesigner.cutSelectedNodes();\r\n                }\r\n            };\r\n            var pasteMenuItem = {\r\n                title: i18n.t('contextMenu.node.paste'),\r\n                action: function (elm, d, i) {\r\n                    treeDesigner.pasteToNode(d);\r\n                },\r\n                disabled: d.folded || !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\r\n\r\n            };\r\n            var deleteMenuItem = {\r\n                title: i18n.t('contextMenu.node.delete'),\r\n                action: function (elm, d, i) {\r\n\r\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\r\n                    treeDesigner.removeSelectedNodes();\r\n\r\n                }\r\n            };\r\n\r\n            var menu = [];\r\n            if (d.type == model.TerminalNode.$TYPE) {\r\n                menu = [copyMenuItem, cutMenuItem, deleteMenuItem];\r\n                NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\r\n                return menu;\r\n            }\r\n\r\n            if(!d.folded){\r\n                menu.push({\r\n                    title: i18n.t('contextMenu.node.addDecisionNode'),\r\n                    action: function (elm, d) {\r\n                        treeDesigner.addDecisionNode(d)\r\n                    }\r\n                });\r\n                menu.push({\r\n                    title: i18n.t('contextMenu.node.addChanceNode'),\r\n                    action: function (elm, d) {\r\n                        treeDesigner.addChanceNode(d)\r\n                    }\r\n                });\r\n                menu.push({\r\n                    title: i18n.t('contextMenu.node.addTerminalNode'),\r\n                    action: function (elm, d) {\r\n                        treeDesigner.addTerminalNode(d)\r\n                    }\r\n                });\r\n                menu.push({divider: true});\r\n            }\r\n\r\n            menu.push(copyMenuItem);\r\n            menu.push(cutMenuItem);\r\n            menu.push(pasteMenuItem);\r\n            menu.push(deleteMenuItem);\r\n\r\n            NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\r\n            menu.push({divider: true});\r\n            menu.push({\r\n                title: i18n.t('contextMenu.node.selectSubtree'),\r\n                action: function (elm, d) {\r\n                    treeDesigner.selectSubTree(d, true);\r\n                }\r\n            });\r\n\r\n            if(!d.folded){\r\n                menu.push({\r\n                    title: i18n.t('contextMenu.node.fold'),\r\n                    action: function (elm, d) {\r\n                        treeDesigner.foldSubtree(d);\r\n                    }\r\n                });\r\n            }else{\r\n                menu.push({\r\n                    title: i18n.t('contextMenu.node.unfold'),\r\n                    action: function (elm, d) {\r\n                        treeDesigner.foldSubtree(d, false);\r\n                    }\r\n                });\r\n            }\r\n\r\n            if(operationsForObject){\r\n                var operations = operationsForObject(d);\r\n                if(operations.length) {\r\n                    menu.push({divider: true});\r\n                    operations.forEach(op=>{\r\n                        menu.push({\r\n                            title: i18n.t('contextMenu.node.'+op.name),\r\n                            action: function (elm, d) {\r\n                                treeDesigner.performOperation(d, op);\r\n                            },\r\n                            disabled: !op.canPerform(d)\r\n                        });\r\n                    })\r\n                }\r\n            }\r\n\r\n            return menu;\r\n        };\r\n\r\n        super(menu);\r\n        this.treeDesigner = treeDesigner;\r\n    }\r\n\r\n    static addNodeConversionOptions(d, menu, treeDesigner){\r\n        var conversionOptions = NodeContextMenu.getNodeConversionOptions(d, treeDesigner);\r\n        if(conversionOptions.length){\r\n            menu.push({divider: true});\r\n            conversionOptions.forEach(o=>menu.push(o));\r\n\r\n        }\r\n    }\r\n\r\n    static getNodeConversionOptions(d, treeDesigner){\r\n        var options = [];\r\n\r\n        if(d.folded){\r\n            return [];\r\n        }\r\n\r\n        var allAllowedTypes = [model.DecisionNode.$TYPE, model.ChanceNode.$TYPE, model.TerminalNode.$TYPE];\r\n\r\n        if(!d.childEdges.length && d.$parent){\r\n            allAllowedTypes.filter(t=>t!==d.type).forEach(type=>{\r\n                options.push(NodeContextMenu.getNodeConversionOption(type, treeDesigner))\r\n            })\r\n        }else{\r\n            if(d instanceof model.DecisionNode){\r\n                options.push(NodeContextMenu.getNodeConversionOption(model.ChanceNode.$TYPE, treeDesigner))\r\n            }else{\r\n                options.push(NodeContextMenu.getNodeConversionOption(model.DecisionNode.$TYPE, treeDesigner))\r\n            }\r\n        }\r\n        return options;\r\n    }\r\n\r\n    static getNodeConversionOption(typeToConvertTo, treeDesigner){\r\n        return {\r\n            title: i18n.t('contextMenu.node.convert.'+typeToConvertTo),\r\n            action: function (elm, d) {\r\n                treeDesigner.convertNode(d, typeToConvertTo);\r\n            },\r\n        }\r\n    }\r\n}\r\n","import {ContextMenu} from './context-menu'\r\nimport {i18n} from \"../i18n/i18n\";\r\n\r\nexport class TextContextMenu extends ContextMenu {\r\n    treeDesigner;\r\n\r\n    constructor(treeDesigner) {\r\n        var menu = function (d) {\r\n\r\n\r\n            var deleteMenuItem = {\r\n                title: i18n.t('contextMenu.text.delete'),\r\n                action: function (elm, d, i) {\r\n\r\n                    treeDesigner.selectText(d, true, true);\r\n                    treeDesigner.removeSelectedTexts()\r\n\r\n                }\r\n            };\r\n            var menu = [];\r\n            menu.push(deleteMenuItem);\r\n            return menu;\r\n        };\r\n\r\n        super(menu);\r\n        this.treeDesigner = treeDesigner;\r\n    }\r\n}\r\n","import * as d3 from './d3'\r\n\r\nexport class D3Extensions {\r\n\r\n    static extend() {\r\n\r\n        d3.selection.prototype.enter.prototype.insertSelector =\r\n            d3.selection.prototype.insertSelector = function (selector, before) {\r\n                return D3Extensions.insertSelector(this, selector, before);\r\n            };\r\n\r\n\r\n        d3.selection.prototype.enter.prototype.appendSelector =\r\n            d3.selection.prototype.appendSelector = function (selector) {\r\n                return D3Extensions.appendSelector(this, selector);\r\n            };\r\n\r\n        d3.selection.prototype.enter.prototype.selectOrAppend =\r\n            d3.selection.prototype.selectOrAppend = function (selector) {\r\n                return D3Extensions.selectOrAppend(this, selector);\r\n            };\r\n\r\n        d3.selection.prototype.enter.prototype.selectOrInsert =\r\n            d3.selection.prototype.selectOrInsert = function (selector, before) {\r\n                return D3Extensions.selectOrInsert(this, selector, before);\r\n            };\r\n\r\n\r\n    }\r\n\r\n    static insertOrAppendSelector(parent, selector, operation, before) {\r\n\r\n        var selectorParts = selector.split(/([\\.\\#])/);\r\n        var element = parent[operation](selectorParts.shift(), before);//\":first-child\"\r\n\r\n        while (selectorParts.length > 1) {\r\n            var selectorModifier = selectorParts.shift();\r\n            var selectorItem = selectorParts.shift();\r\n            if (selectorModifier === \".\") {\r\n                element = element.classed(selectorItem, true);\r\n            } else if (selectorModifier === \"#\") {\r\n                element = element.attr('id', selectorItem);\r\n            }\r\n        }\r\n        return element;\r\n    }\r\n\r\n    static insertSelector(parent, selector, before) {\r\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"insert\", before);\r\n    }\r\n\r\n    static appendSelector(parent, selector) {\r\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"append\");\r\n    }\r\n\r\n    static selectOrAppend(parent, selector, element) {\r\n        var selection = parent.select(selector);\r\n        if (selection.empty()) {\r\n            if (element) {\r\n                return parent.append(element);\r\n            }\r\n            return D3Extensions.appendSelector(parent, selector);\r\n\r\n        }\r\n        return selection;\r\n    };\r\n\r\n    static selectOrInsert(parent, selector, before) {\r\n        var selection = parent.select(selector);\r\n        if (selection.empty()) {\r\n            return D3Extensions.insertSelector(parent, selector, before);\r\n        }\r\n        return selection;\r\n    };\r\n}\r\n","export * from 'd3-dispatch';\r\nexport * from 'd3-scale';\r\nexport * from 'd3-selection';\r\nexport * from 'd3-shape'\r\nexport * from 'd3-drag';\r\nexport * from 'd3-brush'\r\nexport * from 'd3-array'\r\nexport * from 'd3-hierarchy'\r\nexport * from 'd3-time-format'\r\n","module.exports={\r\n    \"contextMenu\":{\r\n        \"main\":{\r\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\r\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\r\n            \"addText\": \"Text hinzufügen \",\r\n            \"paste\": \"Einfügen\",\r\n            \"selectAllNodes\": \"Alle Knoten auswählen\"\r\n        },\r\n        \"node\":{\r\n            \"copy\": \"Kopieren\",\r\n            \"cut\": \"Ausschneiden\",\r\n            \"paste\": \"Einfügen\",\r\n            \"delete\": \"Löschen\",\r\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\r\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\r\n            \"addTerminalNode\": \"Endknotten hinzufügen\",\r\n            \"convert\":{\r\n                \"decision\": \"Als Entscheidungsknoten\",\r\n                \"chance\": \"Als Zufall Knoten\",\r\n                \"terminal\": \"Als Endknoten\"\r\n            },\r\n            \"selectSubtree\": \"Teilbaum wählen\",\r\n            \"fold\": \"Teilbaum falten\",\r\n            \"unfold\": \"Teilbaum entfalten\",\r\n\r\n            \"flipSubtree\": \"Teilbaum umdrehen\",\r\n            \"payoffsTransformation\": \"Auszahlungen transformieren\"\r\n        },\r\n        \"edge\":{\r\n            \"injectDecisionNode\": \"Entscheidungsknoten Injizieren\",\r\n            \"injectChanceNode\": \"Zufall Knoten Injizieren\"\r\n        },\r\n        \"text\":{\r\n            \"delete\": \"Löschen\"\r\n        }\r\n    },\r\n    \"validation\":{\r\n        \"incompletePath\": \"Pfad, der nicht mit dem Endknoten endet\",\r\n        \"probabilityDoNotSumUpTo1\": \"Die Summe der Wahrscheinlichkeiten ist nicht gleich 1\",\r\n        \"invalidProbability\": \"Ungültige Wahrscheinlichkeit im Zweig #{{number}}\",\r\n        \"invalidPayoff\": \"Ungültige Auszahlung in Zweig #{{number}}\"\r\n    },\r\n    \"growl\":{\r\n        \"brushDisabled\": \"Auswahlbürste deaktiviert\",\r\n        \"brushEnabled\": \"Auswahlbürste aktiviert\"\r\n    },\r\n    \"tooltip\":{\r\n        \"node\":{\r\n            \"payoff\": {\r\n                \"default\": \"Auszahlung {{number}}\",\r\n                \"named\": \"{{name}}\"\r\n            },\r\n            \"aggregatedPayoff\": {\r\n                \"default\": \"Aggregierte Auszahlung {{number}}\",\r\n                \"named\": \"Aggregierte {{name}}\"\r\n            },\r\n            \"probabilityToEnter\": \"Wahrscheinlichkeit\"\r\n        },\r\n        \"edge\":{\r\n            \"payoff\": {\r\n                \"default\": \"Auszahlung {{number}}: {{value}}\",\r\n                \"named\": \"{{name}}: {{value}}\"\r\n            },\r\n            \"probability\": \"Wahrscheinlichkeit: {{value}}\"\r\n        }\r\n    }\r\n}\r\n","module.exports={\r\n    \"contextMenu\":{\r\n        \"main\":{\r\n            \"addDecisionNode\": \"Add Decision Node\",\r\n            \"addChanceNode\": \"Add Chance Node\",\r\n            \"addText\": \"Add Text\",\r\n            \"paste\": \"Paste\",\r\n            \"selectAllNodes\": \"Select all nodes\"\r\n        },\r\n        \"node\":{\r\n            \"copy\": \"Copy\",\r\n            \"cut\": \"Cut\",\r\n            \"paste\": \"Paste\",\r\n            \"delete\": \"Delete\",\r\n            \"addDecisionNode\": \"Add Decision Node\",\r\n            \"addChanceNode\": \"Add Chance Node\",\r\n            \"addTerminalNode\": \"Add Terminal Node\",\r\n            \"convert\":{\r\n                \"decision\": \"As Decision Node\",\r\n                \"chance\": \"As Chance Node\",\r\n                \"terminal\": \"As Terminal Node\"\r\n            },\r\n            \"selectSubtree\": \"Select subtree\",\r\n            \"fold\": \"Fold subtree\",\r\n            \"unfold\": \"Unfold subtree\",\r\n            \"flipSubtree\": \"Flip subtree\",\r\n            \"payoffsTransformation\": \"Transform payoffs\"\r\n        },\r\n        \"edge\":{\r\n            \"injectDecisionNode\": \"Inject Decision Node\",\r\n            \"injectChanceNode\": \"Inject Chance Node\"\r\n        },\r\n        \"text\":{\r\n            \"delete\": \"Delete\"\r\n        }\r\n    },\r\n    \"validation\":{\r\n        \"incompletePath\": \"Path not ending with terminal node\",\r\n        \"probabilityDoNotSumUpTo1\": \"Probabilities do not sum up to 1\",\r\n        \"invalidProbability\": \"Invalid probability in edge #{{number}}\",\r\n        \"invalidPayoff\": \"Invalid payoff in edge #{{number}}\"\r\n    },\r\n    \"growl\":{\r\n        \"brushDisabled\": \"Selection brush disabled\",\r\n        \"brushEnabled\": \"Selection brush enabled\"\r\n    },\r\n    \"tooltip\":{\r\n        \"node\":{\r\n            \"payoff\": {\r\n                \"default\": \"Payoff {{number}}\",\r\n                \"named\": \"{{name}}\"\r\n            },\r\n            \"aggregatedPayoff\": {\r\n                \"default\": \"Aggregated Payoff {{number}}\",\r\n                \"named\": \"Aggregated {{name}}\"\r\n            },\r\n            \"probabilityToEnter\": \"Probability to enter\"\r\n        },\r\n        \"edge\":{\r\n            \"payoff\": {\r\n                \"default\": \"Payoff {{number}}: {{value}}\",\r\n                \"named\": \"{{name}}: {{value}}\"\r\n            },\r\n            \"probability\": \"Probability: {{value}}\"\r\n        }\r\n    }\r\n}\r\n","module.exports={\r\n    \"contextMenu\":{\r\n        \"main\":{\r\n            \"addDecisionNode\": \"Ajouter noud de décision\",\r\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\r\n            \"addText\": \"Ajouter du texte\",\r\n            \"paste\": \"Coller\",\r\n            \"selectAllNodes\": \"Sélectionner tous les nouds\"\r\n        },\r\n        \"node\":{\r\n            \"copy\": \"Copie\",\r\n            \"cut\": \"Couper\",\r\n            \"paste\": \"Coller\",\r\n            \"delete\": \"Effacer\",\r\n            \"addDecisionNode\": \"Ajouter noud de décision\",\r\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\r\n            \"addTerminalNode\": \"Ajouter un noeud terminal\",\r\n            \"convert\":{\r\n                \"decision\": \"Comme noud de décision\",\r\n                \"chance\": \"Comme noud aléatoire\",\r\n                \"terminal\": \"Comme un noeud terminal\"\r\n            },\r\n            \"selectSubtree\": \"Sélectionner une sous-arborescence\",\r\n            \"fold\": \"Plier sous-arbre\",\r\n            \"unfold\": \"Déplier arbre sous-arbre\",\r\n            \"flipSubtree\": \"Basculer sous-arbre\",\r\n            \"payoffsTransformation\": \"Transformez les gains\"\r\n        },\r\n        \"edge\":{\r\n            \"injectDecisionNode\": \"Injecter un noeud de décision\",\r\n            \"injectChanceNode\": \"Injecter un noeud de chance\"\r\n        },\r\n        \"text\":{\r\n            \"delete\": \"Effacer\"\r\n        }\r\n    },\r\n    \"validation\":{\r\n        \"incompletePath\": \"Parcours non terminé par noeud terminal\",\r\n        \"probabilityDoNotSumUpTo1\": \"La somme des probabilités n'est pas 1 ou plus\",\r\n        \"invalidProbability\": \"Probabilité invalide - le bord #{{number}}\",\r\n        \"invalidPayoff\": \"Avantage invalide - le bord #{{number}}\"\r\n    },\r\n    \"growl\":{\r\n        \"brushDisabled\": \"Brosse de sélection désactivée\",\r\n        \"brushEnabled\": \"Brosse de sélection activée\"\r\n    },\r\n    \"tooltip\":{\r\n        \"node\":{\r\n            \"payoff\": {\r\n                \"default\": \"Avantage {{number}}\",\r\n                \"named\": \"{{name}}\"\r\n            },\r\n            \"aggregatedPayoff\": {\r\n                \"default\": \"Avantage agrégé {{number}}\",\r\n                \"named\": \"Agrégé  {{name}}\"\r\n            },\r\n            \"probabilityToEnter\": \"Probabilité d'entrée\"\r\n        },\r\n        \"edge\":{\r\n            \"payoff\": {\r\n                \"default\": \"Avantage {{number}}: {{value}}\",\r\n                \"named\": \"{{name}}: {{value}}\"\r\n            },\r\n            \"probability\": \"Probabilité: {{value}}\"\r\n        }\r\n    }\r\n}\r\n","import i18next from 'i18next';\r\nimport * as en from './en.json'\r\nimport * as pl from './pl.json'\r\nimport * as it from './it.json'\r\nimport * as de from './de.json'\r\nimport * as fr from './fr.json'\r\nimport * as pt_br from './pt-br.json'\r\n\r\nexport class i18n{\r\n\r\n    static $instance;\r\n    static language;\r\n\r\n    static init(lng){\r\n        i18n.language = lng;\r\n        let resources = {\r\n            en: {\r\n                translation: en\r\n            },\r\n            pl: {\r\n                translation: pl\r\n            },\r\n            it: {\r\n                translation: it\r\n            },\r\n            de: {\r\n                translation: de\r\n            },\r\n            fr: {\r\n                translation: fr\r\n            },\r\n            'pt-BR': {\r\n                translation: pt_br\r\n            }\r\n        };\r\n        i18n.$instance = i18next.createInstance({\r\n            lng: lng,\r\n            fallbackLng: 'en',\r\n            resources: resources\r\n        }, (err, t) => {\r\n        });\r\n    }\r\n\r\n    static t(key, opt){\r\n        return i18n.$instance.t(key, opt)\r\n    }\r\n}\r\n","module.exports={\r\n    \"contextMenu\":{\r\n        \"main\":{\r\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\r\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\r\n            \"addText\": \"Aggiungi testo\",\r\n            \"paste\": \"Incolla\",\r\n            \"selectAllNodes\": \"Seleziona tutti i nodi\"\r\n        },\r\n        \"node\":{\r\n            \"copy\": \"Copia\",\r\n            \"cut\": \"Taglia\",\r\n            \"paste\": \"Incolla\",\r\n            \"delete\": \"Cancella\",\r\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\r\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\r\n            \"addTerminalNode\": \"Aggiungi un nodo terminale\",\r\n            \"convert\":{\r\n                \"decision\": \"Come Decision Node\",\r\n                \"chance\": \"Come Chance Node\",\r\n                \"terminal\": \"Come Terminal Node\"\r\n            },\r\n            \"selectSubtree\": \"Seleziona Sotto-albero\",\r\n            \"fold\": \"Piega sotto-albero\",\r\n            \"unfold\": \"Dispiegarsi sotto-albero\",\r\n            \"flipSubtree\": \"Ribalta sotto-albero\",\r\n            \"payoffsTransformation\": \"Trasforma i profitti\"\r\n        },\r\n        \"edge\":{\r\n            \"injectDecisionNode\": \"Inietta nodo di decisione\",\r\n            \"injectChanceNode\": \"Inietta nodo opportunità\"\r\n        },\r\n        \"text\":{\r\n            \"delete\": \"Cancella\"\r\n        }\r\n    },\r\n    \"validation\":{\r\n        \"incompletePath\": \"Percorso senza nodo terminale\",\r\n        \"probabilityDoNotSumUpTo1\": \"La somma delle probabilità è diversa da 1\",\r\n        \"invalidProbability\": \"Probabilità non valida - bordo #{{number}}\",\r\n        \"invalidPayoff\": \"Saldo non valido - bordo #{{number}}\"\r\n    },\r\n    \"growl\":{\r\n        \"brushDisabled\": \"Selezione pennello disabilitata\",\r\n        \"brushEnabled\": \"Selezione pennello abilitata\"\r\n    },\r\n    \"tooltip\":{\r\n        \"node\":{\r\n            \"payoff\": {\r\n                \"default\": \"Saldo {{number}}\",\r\n                \"named\": \"{{name}}\"\r\n            },\r\n            \"aggregatedPayoff\": {\r\n                \"default\": \"Saldo aggregato {{number}}\",\r\n                \"named\": \"Aggregato {{name}}\"\r\n            },\r\n            \"probabilityToEnter\": \"Probabilità da inserire\"\r\n        },\r\n        \"edge\":{\r\n            \"payoff\": {\r\n                \"default\": \"Saldo {{number}}: {{value}}\",\r\n                \"named\": \"{{name}}: {{value}}\"\r\n            },\r\n            \"probability\": \"Probabilità: {{value}}\"\r\n        }\r\n    }\r\n}\r\n","module.exports={\r\n\r\n    \"contextMenu\":{\r\n        \"main\":{\r\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\r\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\r\n            \"addText\": \"Dodaj Tekst\",\r\n            \"paste\": \"Wklej\",\r\n            \"selectAllNodes\": \"Zaznacz wszystkie węzły\"\r\n        },\r\n        \"node\":{\r\n            \"copy\": \"Kopiuj\",\r\n            \"cut\": \"Wytnij\",\r\n            \"paste\": \"Wklej\",\r\n            \"delete\": \"Usuń\",\r\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\r\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\r\n            \"addTerminalNode\": \"Dodaj Węzeł Końcowy\",\r\n            \"convert\":{\r\n                \"decision\": \"Jako Węzeł Decyzyjny\",\r\n                \"chance\": \"Jako Węzeł Losowy\",\r\n                \"terminal\": \"Jako Węzeł Końcowy\"\r\n            },\r\n            \"selectSubtree\": \"Zaznacz poddrzewo\",\r\n            \"fold\": \"Zwiń poddrzewo\",\r\n            \"unfold\": \"Rozwiń poddrzewo\",\r\n            \"flipSubtree\": \"Przewróć poddrzewo\",\r\n            \"payoffsTransformation\": \"Przekształć wypłaty\"\r\n        },\r\n        \"edge\":{\r\n            \"injectDecisionNode\": \"Wstrzyknij Węzeł Decyzyjny\",\r\n            \"injectChanceNode\": \"Wstrzyknij Węzeł Losowy\"\r\n        },\r\n        \"text\":{\r\n            \"delete\": \"Usuń\"\r\n        }\r\n    },\r\n\r\n    \"validation\":{\r\n        \"incompletePath\": \"Ostatnim węzłem w ścieżce powinien być Węzeł Końcowy\",\r\n        \"probabilityDoNotSumUpTo1\": \"Prawdopodobieństwa nie sumują sie do 1\",\r\n        \"invalidProbability\": \"Niepoprawne prawdopodobieństwo na krawędzi #{{number}}\",\r\n        \"invalidPayoff\": \"Niepoprawna wypłata na krawędzi #{{number}}\"\r\n    },\r\n    \"growl\":{\r\n        \"brushDisabled\": \"Zaznaczanie wyłączone\",\r\n        \"brushEnabled\": \"Zaznaczanie włączone\"\r\n    },\r\n    \"tooltip\":{\r\n        \"node\":{\r\n            \"payoff\": {\r\n                \"default\": \"Wypłata {{number}}\",\r\n                \"named\": \"{{name}}\"\r\n            },\r\n            \"aggregatedPayoff\": {\r\n                \"default\": \"Zagregowana wypłata {{number}}\",\r\n                \"named\": \"Zagregowana {{name}}\"\r\n            },\r\n            \"probabilityToEnter\": \"Prawdopodobieństwo wejścia\"\r\n        },\r\n        \"edge\":{\r\n            \"payoff\": {\r\n                \"default\": \"Wypłata {{number}}: {{value}}\",\r\n                \"named\": \"{{name}}: {{value}}\"\r\n            },\r\n            \"probability\": \"Prawdopodobieństwo: {{value}}\"\r\n        }\r\n    }\r\n}\r\n","module.exports={\r\n    \"contextMenu\":{\r\n        \"main\":{\r\n            \"addDecisionNode\": \"Adicionar nó de decisão\",\r\n            \"addChanceNode\": \"Adicionar Nó de probabilidade\",\r\n            \"addText\": \"Adicionar Texto\",\r\n            \"paste\": \"Colar\",\r\n            \"selectAllNodes\": \"Selecionar todos os nós\"\r\n        },\r\n        \"node\":{\r\n            \"copy\": \"Copiar\",\r\n            \"cut\": \"Cortar\",\r\n            \"paste\": \"Colar\",\r\n            \"delete\": \"Excluir\",\r\n            \"addDecisionNode\": \"Adicionar nó de decisão\",\r\n            \"addChanceNode\": \"Adicionar Nó de chance\",\r\n            \"addTerminalNode\": \"Adicionar Nó Terminal\",\r\n            \"convert\":{\r\n                \"decision\": \"Como nó de decisão\",\r\n                \"chance\": \"Como Nó de Chance\",\r\n                \"terminal\": \"Como Nó Terminal\"\r\n            },\r\n            \"selectSubtree\": \"Selecionar subárvore\",\r\n            \"fold\": \"Dobrar subárvore\",\r\n            \"unfold\": \"Desdobrar subárvore\",\r\n            \"flipSubtree\": \"Inverter subárvore\",\r\n            \"payoffsTransformation\": \"Transformar pesos\"\r\n        },\r\n        \"edge\":{\r\n            \"injectDecisionNode\": \"Injetar Nó de Decisão\",\r\n            \"injectChanceNode\": \"Injetar Nó de Chance\"\r\n        },\r\n        \"text\":{\r\n            \"delete\": \"Excluir\"\r\n        }\r\n    },\r\n    \"validation\":{\r\n        \"incompletePath\": \"O caminho não termina com o nó terminal\",\r\n        \"probabilityDoNotSumUpTo1\": \"Probabilidades não somam até 1\",\r\n        \"invalidProbability\": \"Probabilidade inválida na borda # {{number}}\",\r\n        \"invalidPayoff\": \"Pagamento inválido na borda # {{number}}\"\r\n    },\r\n    \"growl\":{\r\n        \"brushDisabled\": \"Pincel de seleção desativado\",\r\n        \"brushEnabled\": \"Pincel de seleção habilitado\"\r\n    },\r\n    \"tooltip\":{\r\n        \"node\":{\r\n            \"payoff\": {\r\n                \"default\": \"Pagar {{number}}\",\r\n                \"named\": \"{{name}}\"\r\n            },\r\n            \"aggregatedPayoff\": {\r\n                \"default\": \"Pagar agregado {{number}}\",\r\n                \"named\": \"Agregado {{name}}\"\r\n            },\r\n            \"probabilityToEnter\": \"Probabilidade de entrar\"\r\n        },\r\n        \"edge\":{\r\n            \"payoff\": {\r\n                \"default\": \"Pagar {{number}}: {{value}}\",\r\n                \"named\": \"{{name}}: {{value}}\"\r\n            },\r\n            \"probability\": \"Probabilidade: {{value}}\"\r\n        }\r\n    }\r\n}\r\n","import {D3Extensions} from './d3-extensions'\r\nD3Extensions.extend();\r\n\r\nexport * from './tree-designer'\r\nexport * from './app-utils'\r\nexport * from './templates'\r\nexport * from './tooltip'\r\nexport * from './d3-extensions'\r\nexport {default as d3} from './d3'\r\n\r\n\r\n","import {Utils} from 'sd-utils'\r\nimport {domain as model} from 'sd-model'\r\nimport * as d3 from './d3'\r\nimport circleSymbol from './symbols/circle'\r\nimport triangleSymbol from './symbols/triangle'\r\nimport {AppUtils} from \"./app-utils\";\r\n\r\n/*Tree layout manager*/\r\nexport class Layout{\r\n\r\n    treeDesigner;\r\n    data;\r\n    config;\r\n\r\n    nodeTypeToSymbol = {\r\n        'decision': d3.symbolSquare,\r\n        'chance': circleSymbol,\r\n        \"terminal\": triangleSymbol\r\n    };\r\n\r\n    static MANUAL_LAYOUT_NAME = 'manual';\r\n\r\n\r\n    onAutoLayoutChanged=[];\r\n\r\n    nodeTypeOrder = {\r\n        'decision' : 0,\r\n        'chance': 0,\r\n        'terminal': 1\r\n    };\r\n\r\n    treeMargin = 50;\r\n    targetSymbolSize={};\r\n    nodeSeparation = (a, b) => a.parent === b.parent ? 1 : 1.2\r\n\r\n    constructor(treeDesigner, data, config){\r\n        this.treeDesigner = treeDesigner;\r\n        this.data = data;\r\n        this.config = config;\r\n\r\n    }\r\n\r\n    update(node){\r\n        if(node && node.$parent){\r\n            node.$parent.childEdges.sort((a,b)=>a.childNode.location.y - b.childNode.location.y)\r\n        }\r\n        if(!this.isManualLayout()){\r\n            return this.autoLayout(this.config.type, true);\r\n        }\r\n        if(node){\r\n            this.moveNodeToEmptyPlace(node);\r\n        }else{\r\n            this.treeDesigner.redraw(true);\r\n        }\r\n    }\r\n\r\n    isManualLayout(){\r\n        return this.config.type === Layout.MANUAL_LAYOUT_NAME;\r\n    }\r\n\r\n    getNewChildLocation(parent){\r\n        if(!parent){\r\n            return new model.Point(this.getNodeMinX(), this.getNodeMinY())\r\n        }\r\n        var x = parent.location.x + this.config.gridWidth;\r\n        var y = parent.location.y;\r\n        if(parent.childEdges.length){\r\n            y = parent.childEdges[parent.childEdges.length-1].childNode.location.y+1;\r\n        }\r\n\r\n        return new model.Point(x, y)\r\n    }\r\n\r\n    getInjectedNodeLocation(edge){\r\n\r\n        var p = edge.$linePoints[2];\r\n\r\n        return new model.Point(p[0], p[1])\r\n    }\r\n\r\n    moveNodeToEmptyPlace(node, redrawIfChanged=true){\r\n        var positionMap = {};\r\n        var self = this;\r\n        node.location.x = Math.max(this.getNodeMinX(node), node.location.x);\r\n        node.location.y = Math.max(this.getNodeMinY(node), node.location.y);\r\n\r\n\r\n        this.nodesSortedByX = this.data.nodes.slice();\r\n        this.nodesSortedByX.sort((a,b)=>a.location.x - b.location.x);\r\n\r\n        function findCollidingNode(node, location){\r\n            return Utils.find(self.nodesSortedByX, n=>{\r\n                if(node == n){\r\n                    return false;\r\n                }\r\n\r\n                var margin = self.config.nodeSize/3;\r\n                var x = n.location.x;\r\n                var y = n.location.y;\r\n\r\n                return (location.x - margin <= x && location.x + margin >= x\r\n                    && location.y - margin <= y && location.y + margin >= y)\r\n            });\r\n        }\r\n\r\n        var stepX = this.config.nodeSize/2;\r\n        var stepY = this.config.nodeSize+10;\r\n        var stepXsameParent = 0;\r\n        var stepYsameParent = 75;\r\n        var changed = false;\r\n        var colidingNode;\r\n        var newLocation = new model.Point(node.location);\r\n        while(colidingNode = findCollidingNode(node, newLocation)){\r\n            changed=true;\r\n            var sameParent = node.$parent && colidingNode.$parent && node.$parent===colidingNode.$parent;\r\n            if(sameParent){\r\n                newLocation.move(stepXsameParent, stepYsameParent);\r\n            }else{\r\n                newLocation.move(stepX, stepY);\r\n            }\r\n        }\r\n        if(changed){\r\n            node.moveTo(newLocation.x,newLocation.y, true);\r\n            if(redrawIfChanged){\r\n                this.treeDesigner.redraw(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    disableAutoLayout(){\r\n        this.config.type = Layout.MANUAL_LAYOUT_NAME;\r\n        this._fireOnAutoLayoutChangedCallbacks();\r\n    }\r\n\r\n\r\n    nodeSymbolSize = {};\r\n    drawNodeSymbol(path, transition){\r\n\r\n        var self = this;\r\n        var nodeSize = this.config.nodeSize;\r\n        this.nodeSymbol = d3.symbol().type(d=> self.nodeTypeToSymbol[d.type])\r\n            .size(d=>self.nodeSymbolSize[d.id] ? Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", 64) : 64);\r\n\r\n        path\r\n            .each(function (d) {\r\n                var path = d3.select(this);\r\n                var prev = path.attr(\"d\");\r\n                if(!prev){\r\n                    path.attr(\"d\", self.nodeSymbol);\r\n                }\r\n                var size = Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\");\r\n                if(!size){\r\n                    var box = path.node().getBBox();\r\n                    var error = Math.min(nodeSize / box.width, nodeSize / box.height);\r\n                    size = error * error * (self.nodeSymbolSize[d.id]||64);\r\n                    Utils.set(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", size);\r\n                }\r\n                if(transition){\r\n                    path =  path.transition();\r\n\r\n                }else{\r\n                    self.nodeSymbolSize[d.id] = size;\r\n                }\r\n                path.attr(\"d\", self.nodeSymbol);\r\n                if(transition){\r\n                    self.nodeSymbolSize[d.id] = size;\r\n                }\r\n            });\r\n    }\r\n\r\n    nodeLabelPosition(selection) {\r\n        return selection\r\n            .attr('x', 0)\r\n            .attr('y', -this.config.nodeSize / 2 - 7)\r\n    }\r\n\r\n    nodePayoffPosition(selection) {\r\n        return Layout.setHangingPosition(selection)\r\n            .attr('x', 0)\r\n            .attr('y', this.config.nodeSize / 2 + 7)\r\n            .attr('text-anchor', 'middle')\r\n    }\r\n\r\n    nodeAggregatedPayoffPosition(selection) {\r\n        var x = this.config.nodeSize / 2 + 7;\r\n        var self = this;\r\n        selection\r\n            .attr('x', x)\r\n            .attr('y', function(d){\r\n                let fontSize = parseInt(AppUtils.getFontSize(this));\r\n                let items = d.displayValue('aggregatedPayoff');\r\n                let number = Utils.isArray(items) ? items.filter(it=>it !== undefined).length : 1;\r\n                if(number>1){\r\n                    return -this.getBBox().height/2 + fontSize/2;\r\n                }\r\n                return -Math.max(2, 1.8* self.config.nodeSize/fontSize);\r\n            });\r\n\r\n        selection.selectAll('tspan').attr('x', x);\r\n        return selection;\r\n            // .attr('text-anchor', 'middle')\r\n            // .attr('dominant-baseline', 'hanging')\r\n    }\r\n\r\n    nodeProbabilityToEnterPosition(selection) {\r\n        var self = this;\r\n\r\n        return Layout.setHangingPosition(selection)\r\n            .attr('x', this.config.nodeSize / 2 + 7)\r\n            .attr('y', function(d){\r\n                let fontSize = parseInt(AppUtils.getFontSize(this));\r\n                let aggregatedPayoffs = d.displayValue('aggregatedPayoff');\r\n                let aggregatedPayoffsNumber = Utils.isArray(aggregatedPayoffs) ? aggregatedPayoffs.filter(it=>it !== undefined).length : 1;\r\n                if(aggregatedPayoffsNumber>1){\r\n\r\n                    return fontSize*0.6\r\n                }\r\n\r\n                return Math.max(2, 1.8* self.config.nodeSize/fontSize);\r\n            })\r\n            // .attr('text-anchor', 'middle')\r\n            // .attr('dominant-baseline', 'central')\r\n    }\r\n\r\n    nodeIndicatorPosition(selection) {\r\n        return selection\r\n            .attr('x', this.config.nodeSize / 2 + 8)\r\n            .attr('y', - this.config.nodeSize/2)\r\n            .attr('dominant-baseline', 'central')\r\n            .attr('text-anchor', 'middle')\r\n    }\r\n\r\n    nodeUnfoldButtonPosition(selection) {\r\n\r\n        return selection\r\n            .attr('x', this.config.nodeSize / 2 + 5)\r\n            .attr('y', 0)\r\n            .attr('dominant-baseline', 'central')\r\n    }\r\n\r\n    edgeLineD(edge){\r\n        var line = d3.line()\r\n            .x(d=> d[0])\r\n            .y(d=> d[1]);\r\n        // .curve(d3.curveCatmullRom.alpha(0.5));\r\n\r\n\r\n        var parentNode = edge.parentNode;\r\n        var childNode = edge.childNode;\r\n\r\n        var dX = childNode.location.x - parentNode.location.x;\r\n        var dY = childNode.location.y - parentNode.location.y;\r\n\r\n        var sign = dX>=0 ? 1 : -1;\r\n\r\n        var slantStartXOffset = Math.min(dX/2, this.config.nodeSize/2+10);\r\n        var slantWidth = Math.min(this.config.edgeSlantWidthMax, Math.max(dX/2 - slantStartXOffset, 0));\r\n\r\n        var point1 = [parentNode.location.x +this.config.nodeSize/2 + 1, parentNode.location.y];\r\n        var point2 = [Math.max(parentNode.location.x+slantStartXOffset, point1[0]), parentNode.location.y];\r\n        var point3 = [parentNode.location.x+slantStartXOffset+slantWidth, childNode.location.y];\r\n        var point4 = [childNode.location.x - (sign*(Math.max(0, Math.min(this.config.nodeSize/2+8, dX/2)))), childNode.location.y];\r\n        // var point2 = [parentNode.location.x+dX/2-slantWidth/2, parentNode.location.y];\r\n        // var point3 = [childNode.location.x-(dX/2-slantWidth/2), childNode.location.y];\r\n\r\n        edge.$linePoints = [point1, point2, point3, point4];\r\n        return line(edge.$linePoints);\r\n    }\r\n\r\n    edgePayoffPosition(selection) {\r\n        Layout.setHangingPosition(selection)\r\n            .attr('x', d=>d.$linePoints[2][0] + 2)\r\n            .attr('y', d=>d.$linePoints[2][1] + 7);\r\n\r\n        selection.selectAll('tspan').attr('x', function(d){\r\n            return d3.select(this.parentNode).datum().$linePoints[2][0] + 2\r\n        });\r\n        return selection;\r\n\r\n    }\r\n\r\n    edgeLabelPosition(selection) {\r\n        return selection\r\n            .attr('transform', d=>'translate('+(d.$linePoints[2][0] + 2)+','+(d.$linePoints[2][1] - 7)+')')\r\n            // .attr('x', d=>d.$linePoints[2][0] + 2)\r\n            // .attr('y', d=>d.$linePoints[2][1] - 7)\r\n\r\n    }\r\n\r\n    edgeProbabilityPosition(selection) {\r\n        return Layout.setHangingPosition(selection)\r\n            .attr('x', function (d) {\r\n                var len = this.getComputedTextLength();\r\n                var min = d.$linePoints[2][0] + 2 + this.previousSibling.childNodes[0].getComputedTextLength() + 7 + len;\r\n                return Math.max(min, d.$linePoints[3][0] - 8);\r\n            })\r\n            .attr('y', d=>d.$linePoints[2][1] + 7)\r\n    }\r\n\r\n    getMinMarginBetweenNodes(){\r\n      return this.config.nodeSize + 30;\r\n    }\r\n\r\n    getTextMinX(d){\r\n        let minX = 0;\r\n        if(d){\r\n            let bb = this.treeDesigner.getTextD3Selection(d).select('text').node().getBBox();\r\n            if (bb.x < 0) {\r\n                minX -= bb.x;\r\n            }\r\n        }\r\n        return minX;\r\n    }\r\n\r\n    getTextMinY(d){\r\n        let minY = 0;\r\n        if(d){\r\n            let bb = this.treeDesigner.getTextD3Selection(d).select('text').node().getBBox();\r\n            if (bb.y < 0) {\r\n                minY -= bb.y;\r\n            }\r\n        }\r\n        return minY;\r\n    }\r\n\r\n    getTextMaxX(d){\r\n        return Number.MAX_SAFE_INTEGER;\r\n    }\r\n\r\n\r\n    getNodeMinX(d){\r\n        var self = this;\r\n        if(d && d.$parent){// && !self.isNodeSelected(d.$parent)\r\n            return d.$parent.location.x + self.getMinMarginBetweenNodes();\r\n        }\r\n        return self.config.nodeSize/2;\r\n    }\r\n\r\n    getNodeMinY(d){\r\n        return this.config.nodeSize/2;\r\n    }\r\n\r\n    getNodeMaxX(d){\r\n        var self = this;\r\n\r\n        if(d && d.childEdges.length){\r\n            return d3.min(d.childEdges, e=>!e.childNode.$hidden ? e.childNode.location.x : 9999999)-self.getMinMarginBetweenNodes();\r\n        }\r\n        return Number.MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    setGridWidth(width, withoutStateSaving){\r\n        var self=this;\r\n        if(this.config.gridWidth===width){\r\n            return;\r\n        }\r\n        if(!withoutStateSaving){\r\n            this.data.saveState({\r\n                data:{\r\n                    gridWidth: self.config.gridWidth\r\n                },\r\n                onUndo: (data)=> {\r\n                    self.setGridWidth(data.gridWidth, true);\r\n                },\r\n                onRedo: (data)=> {\r\n                    self.setGridWidth(width, true);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.config.gridWidth=width;\r\n        this.update();\r\n    }\r\n\r\n    setGridHeight(gridHeight, withoutStateSaving){\r\n        var self=this;\r\n        if(this.config.gridHeight===gridHeight){\r\n            return;\r\n        }\r\n        if(!withoutStateSaving){\r\n            this.data.saveState({\r\n                data:{\r\n                    gridHeight: self.config.gridHeight\r\n                },\r\n                onUndo: (data)=> {\r\n                    self.setGridHeight(data.gridHeight, true);\r\n                },\r\n                onRedo: (data)=> {\r\n                    self.setGridHeight(gridHeight, true);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.config.gridHeight=gridHeight;\r\n        this.update();\r\n    }\r\n\r\n    setNodeSize(nodeSize, withoutStateSaving){\r\n        var self=this;\r\n        if(this.config.nodeSize===nodeSize){\r\n            return;\r\n        }\r\n        if(!withoutStateSaving){\r\n            this.data.saveState({\r\n                data:{\r\n                    nodeSize: self.config.nodeSize\r\n                },\r\n                onUndo: (data)=> {\r\n                    self.setNodeSize(data.nodeSize, true);\r\n                },\r\n                onRedo: (data)=> {\r\n                    self.setNodeSize(nodeSize, true);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.config.nodeSize=nodeSize;\r\n        this.update();\r\n        if(this.isManualLayout()){\r\n            this.fitNodesInPlottingRegion(self.data.getRoots());\r\n            this.treeDesigner.redraw(true);\r\n        }\r\n    }\r\n\r\n    setEdgeSlantWidthMax(width, withoutStateSaving){\r\n        var self=this;\r\n        if(this.config.edgeSlantWidthMax===width){\r\n            return;\r\n        }\r\n        if(!withoutStateSaving){\r\n            this.data.saveState({\r\n                data:{\r\n                    edgeSlantWidthMax: self.config.edgeSlantWidthMax\r\n                },\r\n                onUndo: (data)=> {\r\n                    self.setEdgeSlantWidthMax(data.edgeSlantWidthMax, true);\r\n                },\r\n                onRedo: (data)=> {\r\n                    self.setEdgeSlantWidthMax(width, true);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.config.edgeSlantWidthMax=width;\r\n        this.treeDesigner.redraw(true);\r\n    }\r\n\r\n    autoLayout(type, withoutStateSaving){\r\n        var self=this;\r\n\r\n\r\n\r\n        if(!withoutStateSaving){\r\n            this.data.saveState({\r\n                data:{\r\n                    newLayout: type,\r\n                    currentLayout: self.config.type\r\n                },\r\n                onUndo: (data)=> {\r\n                    self.config.type = data.currentLayout;\r\n                    self._fireOnAutoLayoutChangedCallbacks();\r\n                },\r\n                onRedo: (data)=> {\r\n                    self.autoLayout(data.newLayout, true);\r\n                }\r\n            });\r\n        }\r\n        this.config.type = type;\r\n        if(!this.data.nodes.length){\r\n            this._fireOnAutoLayoutChangedCallbacks();\r\n            return;\r\n        }\r\n\r\n        var prevTreeMaxY = self.getNodeMinY();\r\n        this.data.getRoots().forEach(r=>{\r\n            var root = d3.hierarchy(r, d=>{\r\n                return d.childEdges.filter(e=>!e.$hidden).map(e=>e.childNode);\r\n            });\r\n\r\n            // root.sort((a,b)=>self.nodeTypeOrder[a.data.type]-self.nodeTypeOrder[b.data.type]);\r\n            root.sort((a,b)=>a.data.location.y - b.data.location.y);\r\n\r\n\r\n            var layout;\r\n            if(type==='cluster'){\r\n                layout = d3.cluster();\r\n            }else{\r\n                layout = d3.tree();\r\n            }\r\n            layout.nodeSize([self.config.gridHeight, self.config.gridWidth]);\r\n            layout.separation(self.nodeSeparation);\r\n\r\n            layout(root);\r\n            var minY = 999999999;\r\n            root.each(d=>{\r\n                minY = Math.min(minY, d.x);\r\n            });\r\n\r\n            var dy = root.x - minY + prevTreeMaxY;\r\n            var dx = self.getNodeMinX();\r\n            var maxY=0;\r\n            root.each(d=>{\r\n                d.data.location.x = d.y + dx;\r\n                d.data.location.y = d.x + dy;\r\n\r\n                maxY = Math.max(maxY, d.data.location.y);\r\n            });\r\n\r\n            prevTreeMaxY = maxY + self.config.nodeSize+self.treeMargin;\r\n        });\r\n\r\n\r\n        // this.transition = true;\r\n        this.treeDesigner.redraw(true);\r\n        // this.transition = false;\r\n\r\n        this._fireOnAutoLayoutChangedCallbacks();\r\n        return this;\r\n    }\r\n\r\n    fitNodesInPlottingRegion(nodes){\r\n        var self = this;\r\n        var topY = d3.min(nodes, n=>n.location.y);\r\n        var minY = self.getNodeMinY();\r\n        var dy = topY - minY;\r\n\r\n        var minX = d3.min(nodes, n=>n.location.x);\r\n        var dx = minX - self.getNodeMinX();\r\n\r\n        if(dy<0 ||  dx<0){\r\n            nodes.forEach(n=>n.move(-dx, -dy));\r\n        }\r\n    }\r\n\r\n    moveNodes(nodes, dx, dy, pivot){\r\n        var self = this;\r\n        var limit = self.config.limitNodePositioning;\r\n        if(limit){\r\n            if(dx<0){\r\n                nodes.sort((a,b)=>a.location.x-b.location.x);\r\n            }else{\r\n                nodes.sort((a,b)=>b.location.x-a.location.x);\r\n            }\r\n        }\r\n\r\n\r\n        var minY = d3.min(nodes, d=>d.location.y);\r\n        if(minY + dy < self.getNodeMinY()){\r\n            dy = self.getNodeMinY() - minY;\r\n        }\r\n\r\n        nodes.forEach(d=>{\r\n            if(limit){\r\n                Layout.backupNodeLocation(d);\r\n                var minX = self.getNodeMinX(d);\r\n                var maxX = self.getNodeMaxX(d);\r\n\r\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\r\n                d.location.y += dy;\r\n            }else{\r\n                d.location.x +=dx;\r\n                d.location.y += dy;\r\n            }\r\n\r\n        });\r\n\r\n\r\n        var revertX = pivot && self.config.limitNodePositioning && (pivot.location.x === pivot.$location.x);\r\n\r\n        nodes.forEach(d=>{\r\n            if(revertX){\r\n                d.location.x = d.$location.x;\r\n            }\r\n            self.treeDesigner.updateNodePosition(d);\r\n        });\r\n\r\n\r\n    }\r\n\r\n    moveTexts(texts, dx, dy){\r\n        let self = this;\r\n        let limit = self.config.limitTextPositioning;\r\n        if(limit){\r\n            if(dx<0){\r\n                texts.sort((a,b)=>a.location.x-b.location.x);\r\n            }else{\r\n                texts.sort((a,b)=>b.location.x-a.location.x);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        texts.forEach(d=>{\r\n\r\n\r\n\r\n\r\n            if(limit){\r\n                let minX = self.getTextMinX(d);\r\n                let maxX = self.getTextMaxX(d);\r\n                let minY = self.getTextMinY(d);\r\n\r\n\r\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\r\n                d.location.y = Math.max(d.location.y+dy, minY);\r\n\r\n            }else{\r\n                d.location.move(dx, dy);\r\n            }\r\n            self.treeDesigner.updateTextPosition(d);\r\n\r\n        });\r\n\r\n    }\r\n\r\n    static backupNodeLocation(node) {\r\n        node.$location = new model.Point(node.location);\r\n    }\r\n\r\n    _fireOnAutoLayoutChangedCallbacks(){\r\n        this.onAutoLayoutChanged.forEach(c=>c(this.config.type));\r\n    }\r\n\r\n    static setHangingPosition(selection){\r\n        // window.setTimeout(function(){\r\n        //     selection.each(function(){\r\n        //         var h =  this.getBBox().height;\r\n        //         d3.select(this).attr('dy', h);\r\n        //     });\r\n        // },0);\r\n\r\n        if(AppUtils.isHidden(selection.node())){ // setting hanging position of hidden elements fails on firefox\r\n            return selection;\r\n        }\r\n\r\n\r\n        selection.each(function(){\r\n            var h =  this.getBBox().height;\r\n            d3.select(this).attr('dy', '0.75em');\r\n        });\r\n\r\n        return selection;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import {AppUtils} from './app-utils'\r\nimport * as d3 from './d3'\r\nimport {ContextMenu} from './context-menu/context-menu'\r\n\r\nexport class NodeDragHandler{\r\n\r\n    treeDesigner;\r\n    data;\r\n    config;\r\n\r\n    drag;\r\n    stateSnapshot = null;\r\n\r\n\r\n    constructor(treeDesigner, data){\r\n        this.treeDesigner = treeDesigner;\r\n        this.data = data;\r\n\r\n        var self = this;\r\n        this.drag = d3.drag()\r\n            .subject(function(event, d) {\r\n                if(d==null){\r\n                    return  {\r\n                        x: event.x,\r\n                        y: event.y\r\n                    };\r\n                }\r\n                var t = d3.select(this);\r\n                return {\r\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\r\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\r\n                };\r\n            })\r\n            .on(\"start\", function(event, d){\r\n                self.dragStarted.call(this, event, d, self)\r\n            })\r\n            .on(\"drag\", function (event, d) {\r\n                self.onDrag.call(this, event, d, self);\r\n            })\r\n            .on(\"end\", function (event, d) {\r\n                self.dragEnded.call(this, event, d, self);\r\n            })\r\n    }\r\n\r\n\r\n    dragStarted(event, d, self) {\r\n        if(self.ignoreDrag){\r\n            self.ignoreDrag=false;\r\n            self.ignoredDrag=true;\r\n            return;\r\n        }\r\n        self.ignoredDrag=false;\r\n        self.stateSnapshot = self.data.createStateSnapshot();\r\n\r\n        // self.treeDesigner.layout.disableAutoLayout();\r\n        ContextMenu.hide();\r\n        var node = d3.select(this);\r\n        if(!node.classed(\"selected\")){\r\n            self.treeDesigner.clearSelection();\r\n        }\r\n\r\n        self.treeDesigner.selectNode(d);\r\n        node.classed(\"selected dragging\", true);\r\n        self.selectedNodes = self.treeDesigner.getSelectedNodes(true);\r\n        self.prevDragEvent = event;\r\n        self.dragEventCount = 0;\r\n    }\r\n\r\n    onDrag(event, draggedNode, self){\r\n        if(self.ignoredDrag){\r\n            return;\r\n        }\r\n\r\n        if(self.dragEventCount===2 && self.stateSnapshot){\r\n            self.data.saveStateFromSnapshot(self.stateSnapshot); // TODO save only if something has really changed\r\n            self.stateSnapshot = null;\r\n        }\r\n        self.dragEventCount++;\r\n        if(self.selectedNodes.length>5 && self.dragEventCount%2!==1){\r\n            return;\r\n        }\r\n\r\n        var dx = event.x - self.prevDragEvent.x;\r\n        var dy = event.y- self.prevDragEvent.y;\r\n        self.treeDesigner.layout.moveNodes(self.selectedNodes, dx, dy, draggedNode);\r\n\r\n\r\n        self.prevDragEvent = event;\r\n        self.treeDesigner.redrawEdges();\r\n        self.treeDesigner.updatePlottingRegionSize();\r\n    }\r\n\r\n    dragEnded(event, draggedNode, self){\r\n        var node = d3.select(this).classed(\"dragging\", false);\r\n        if(self.ignoredDrag){\r\n            return;\r\n        }\r\n        self.treeDesigner.layout.update(draggedNode)\r\n    }\r\n\r\n    cancelDrag(){\r\n        this.ignoreDrag = true;\r\n    }\r\n\r\n}\r\n\r\n\r\n","var epsilon = 1e-12;\r\nvar pi = Math.PI;\r\nvar halfPi = pi / 2;\r\nvar tau = 2 * pi;\r\n\r\nexport default {\r\n    /*draw: function(context, size) {\r\n        var r = Math.sqrt(size / pi);\r\n        context.moveTo(r, 0);\r\n        context.arc(0, 0, r, 0, tau);\r\n    }*/\r\n    draw: function(context, size) {\r\n\r\n        var r = Math.sqrt(size / pi);\r\n        var dist =0.552284749831 * r;\r\n\r\n        context.moveTo(-r, 0)\r\n        // context.lineTo(2*r, 2*r)\r\n        // context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\r\n        context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\r\n\r\n        context.bezierCurveTo(dist, -r, r, -dist, r,0);\r\n\r\n        context.bezierCurveTo(r, dist, dist, r, 0, r);\r\n\r\n        context.bezierCurveTo(-dist, r, -r, dist, -r, 0);\r\n    }\r\n};\r\n","var sqrt3 = Math.sqrt(3);\r\n\r\nexport default {\r\n    draw: function(context, size) {\r\n        var r = Math.sqrt(size / Math.PI);\r\n        context.moveTo(-r, 0);\r\n        context.lineTo(0.9*r, -r);\r\n        context.lineTo(0.9*r, r);\r\n        context.closePath();\r\n    }\r\n};\r\n","import {Utils} from \"sd-utils\";\r\nimport {i18n} from './i18n/i18n'\r\n\r\nexport class Templates{\r\n\r\n    static growl = require('./templates/growl_message.html');\r\n\r\n    static get(templateName, variables){\r\n        var compiled = Utils.template(Templates[templateName],{ 'imports': { 'i18n': i18n, 'Templates': Templates, 'include': function(n, v) {return Templates.get(n, v)} } });\r\n        if(variables){\r\n            variables.variables = variables;\r\n        }else{\r\n            variables = {variables:{}}\r\n        }\r\n        return compiled(variables)\r\n\r\n    }\r\n\r\n    static styleRule(selector, props){\r\n        var s = selector+ '{';\r\n        props.forEach(p=> s+=Templates.styleProp(p[0], p[1]));\r\n        s+='} ';\r\n        return s;\r\n    }\r\n    static styleProp(styleName, variableName){\r\n        return  styleName+': <%= '+variableName+' %>; '\r\n    }\r\n\r\n    static treeDesignerSelector = 'svg.sd-tree-designer';\r\n    static nodeSelector(type, clazz){\r\n        var s = Templates.treeDesignerSelector+' .node';\r\n        if(type){\r\n            s+='.'+type+'-node';\r\n        }\r\n        if(clazz){\r\n            s+='.'+clazz;\r\n        }\r\n        return s;\r\n    }\r\n    static edgeSelector(clazz){\r\n        var s = Templates.treeDesignerSelector+' .edge';\r\n        if(clazz){\r\n            s+='.'+clazz;\r\n        }\r\n        return s;\r\n    }\r\n\r\n    static treeDesignerStyles =\r\n\r\n        Templates.styleRule(Templates.treeDesignerSelector,[\r\n            ['font-size', 'fontSize'],\r\n            ['font-family', 'fontFamily'],\r\n            ['font-weight', 'fontWeight'],\r\n            ['font-style', 'fontStyle']\r\n        ])+\r\n        //   node\r\n        Templates.styleRule(Templates.nodeSelector()+' path',[\r\n            ['fill', 'node.fill'],\r\n            ['stroke-width', 'node.strokeWidth']\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector('decision', 'optimal')+' path, '+Templates.nodeSelector('chance', 'optimal')+' path,' +Templates.nodeSelector('terminal', 'optimal')+' path',[\r\n            ['stroke', 'node.optimal.stroke'],\r\n            ['stroke-width', 'node.optimal.strokeWidth']\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector()+' .label',[\r\n            ['font-size', 'node.label.fontSize'],\r\n            ['fill', 'node.label.color']\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector()+' .payoff',[\r\n            ['font-size', 'node.payoff.fontSize'],\r\n            ['fill', 'node.payoff.color'],\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector()+' .payoff.negative',[\r\n            ['fill', 'node.payoff.negativeColor'],\r\n        ])+\r\n\r\n        //    decision node\r\n        Templates.styleRule(Templates.nodeSelector('decision')+' path',[\r\n            ['fill', 'node.decision.fill'],\r\n            ['stroke', 'node.decision.stroke']\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector('decision', 'selected')+' path',[\r\n            ['fill', 'node.decision.selected.fill']\r\n        ])+\r\n\r\n        //    chance node\r\n        Templates.styleRule(Templates.nodeSelector('chance')+' path',[\r\n            ['fill', 'node.chance.fill'],\r\n            ['stroke', 'node.chance.stroke']\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector('chance', 'selected')+' path',[\r\n            ['fill', 'node.chance.selected.fill']\r\n        ])+\r\n\r\n        //    terminal node\r\n        Templates.styleRule(Templates.nodeSelector('terminal')+' path',[\r\n            ['fill', 'node.terminal.fill'],\r\n            ['stroke', 'node.terminal.stroke']\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector('terminal', 'selected')+' path',[\r\n            ['fill', 'node.terminal.selected.fill']\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff',[\r\n            ['font-size', 'node.terminal.payoff.fontSize'],\r\n            ['fill', 'node.terminal.payoff.color'],\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff.negative',[\r\n            ['fill', 'node.terminal.payoff.negativeColor'],\r\n        ])+\r\n\r\n\r\n        //probability\r\n        Templates.styleRule(Templates.treeDesignerSelector+' .node .probability-to-enter, '+Templates.treeDesignerSelector+' .edge .probability',[\r\n            ['font-size', 'probability.fontSize'],\r\n            ['fill', 'probability.color']\r\n        ])+\r\n\r\n        //edge\r\n        Templates.styleRule(Templates.edgeSelector()+' path',[\r\n            ['stroke', 'edge.stroke'],\r\n            ['stroke-width', 'edge.strokeWidth']\r\n        ])+\r\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow path',[\r\n            ['fill', 'edge.stroke'],\r\n        ])+\r\n        Templates.styleRule(Templates.edgeSelector('optimal')+' path',[\r\n            ['stroke', 'edge.optimal.stroke'],\r\n            ['stroke-width', 'edge.optimal.strokeWidth']\r\n        ])+\r\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-optimal path',[\r\n            ['fill', 'edge.optimal.stroke'],\r\n        ])+\r\n\r\n        Templates.styleRule(Templates.edgeSelector('selected')+' path',[\r\n            ['stroke', 'edge.selected.stroke'],\r\n            ['stroke-width', 'edge.selected.strokeWidth']\r\n        ])+\r\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-selected path',[\r\n            ['fill', 'edge.selected.stroke'],\r\n        ])+\r\n\r\n        Templates.styleRule(Templates.edgeSelector()+' .label',[\r\n            ['font-size', 'edge.label.fontSize'],\r\n            ['fill', 'edge.label.color']\r\n        ])+\r\n\r\n        Templates.styleRule(Templates.edgeSelector()+' .payoff',[\r\n            ['font-size', 'edge.payoff.fontSize'],\r\n            ['fill', 'edge.payoff.color'],\r\n        ])+\r\n        Templates.styleRule(Templates.edgeSelector()+' .payoff.negative',[\r\n            ['fill', 'edge.payoff.negativeColor'],\r\n        ])+\r\n\r\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-title',[\r\n            ['font-size', 'title.fontSize'],\r\n            ['font-weight', 'title.fontWeight'],\r\n            ['font-style', 'title.fontStyle'],\r\n            ['fill', 'title.color']\r\n        ]) +\r\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-description',[\r\n            ['font-size', 'description.fontSize'],\r\n            ['font-weight', 'description.fontWeight'],\r\n            ['font-style', 'description.fontStyle'],\r\n            ['fill', 'description.color']\r\n        ])\r\n}\r\n\r\n\r\n\r\n\r\n","module.exports = \"module.exports = \\\"<div class=\\\\\\\"sd-growl-message <%=type%>\\\\\\\">\\\\r\\\\n    <div class=\\\\\\\"sd-growl-message-text\\\\\\\">\\\\r\\\\n        <%= message %>\\\\r\\\\n    </div>\\\\r\\\\n</div>\\\\r\\\\n\\\";\\n\";\n","import {AppUtils} from './app-utils'\r\nimport * as d3 from './d3'\r\nimport {ContextMenu} from './context-menu/context-menu'\r\n\r\nexport class TextDragHandler{\r\n\r\n    treeDesigner;\r\n    data;\r\n    config;\r\n\r\n    drag;\r\n\r\n\r\n    constructor(treeDesigner, data){\r\n        this.treeDesigner = treeDesigner;\r\n        this.data = data;\r\n\r\n        var self = this;\r\n        this.drag = d3.drag()\r\n            .subject(function(event, d) {\r\n                if(d==null){\r\n                    return  {\r\n                        x: event.x,\r\n                        y: event.y\r\n                    };\r\n                }\r\n                var t = d3.select(this);\r\n                return {\r\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\r\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\r\n                };\r\n            })\r\n            .on(\"start\", function(event, d){\r\n                self.dragStarted.call(this, event, d, self)\r\n            })\r\n            .on(\"drag\", function (event, d) {\r\n                self.onDrag.call(this, event, d, self);\r\n            })\r\n            .on(\"end\", function (event, d) {\r\n                self.dragEnded.call(this, event, d, self);\r\n            })\r\n    }\r\n\r\n\r\n    dragStarted(event, d,self) {\r\n        // self.treeDesigner.layout.disableAutoLayout();\r\n        ContextMenu.hide();\r\n        var text = d3.select(this);\r\n        if(!text.classed(\"selected\")){\r\n            self.treeDesigner.clearSelection();\r\n        }\r\n\r\n        self.treeDesigner.selectText(d);\r\n        text.classed(\"selected dragging\", true);\r\n        self.selectedNodes = self.treeDesigner.getSelectedNodes();\r\n        self.prevDragEvent = event;\r\n        self.dragEventCount = 0;\r\n    }\r\n\r\n    onDrag(event, draggedText, self){\r\n        if(self.dragEventCount==2){\r\n            self.data.saveState();\r\n        }\r\n        self.dragEventCount++;\r\n\r\n        var dx = event.x - self.prevDragEvent.x;\r\n        var dy = event.y- self.prevDragEvent.y;\r\n\r\n        self.treeDesigner.layout.moveTexts([draggedText], dx, dy);\r\n\r\n        self.prevDragEvent = event;\r\n        self.treeDesigner.updatePlottingRegionSize();\r\n    }\r\n\r\n    dragEnded(event, draggedNode, self){\r\n         d3.select(this).classed(\"dragging\", false);\r\n    }\r\n\r\n}\r\n\r\n\r\n","import * as d3 from './d3'\r\nimport {Utils} from 'sd-utils'\r\n\r\nexport class Tooltip {\r\n    static getContainer(){\r\n        return d3.select(\"body\").selectOrAppend('div.sd-tooltip');\r\n    }\r\n\r\n    static show(html, xOffset = 5, yOffset = 28, event, duration=null) {\r\n        var container = Tooltip.getContainer()\r\n            .style(\"opacity\", 0);\r\n        container.transition()\r\n            .duration(200)\r\n            .style(\"opacity\", .98);\r\n        container.html(html);\r\n        Tooltip.updatePosition(xOffset, yOffset, event);\r\n        if(duration){\r\n            setTimeout(function(){\r\n                Tooltip.hide();\r\n            }, duration)\r\n        }\r\n    }\r\n\r\n    static updatePosition(xOffset = 5, yOffset = 28, event) {\r\n        Tooltip.getContainer()\r\n            .style(\"left\", (event.pageX + xOffset) + \"px\")\r\n            .style(\"top\", (event.pageY - yOffset) + \"px\");\r\n    }\r\n\r\n    static hide(duration = 500) {\r\n        var t = Tooltip.getContainer();\r\n        if(duration){\r\n            t = t.transition().duration(duration)\r\n        }\r\n        t.style(\"opacity\", 0);\r\n    }\r\n\r\n    static attach(target, htmlOrFn, xOffset, yOffset) {\r\n        target.on('mouseover', function (event, d) {\r\n            const i = target.nodes().indexOf(this);\r\n            var html = null;\r\n            if (Utils.isFunction(htmlOrFn)) {\r\n                html = htmlOrFn(d, i);\r\n            } else {\r\n                html = htmlOrFn;\r\n            }\r\n\r\n            if (html !== null && html !== undefined && html !== '') {\r\n                Tooltip.show(html, xOffset, yOffset, event);\r\n            }else{\r\n                Tooltip.hide(0);\r\n            }\r\n\r\n        }).on('mousemove', function (event, d) {\r\n            Tooltip.updatePosition(xOffset, yOffset, event);\r\n        }).on(\"mouseout\", function (event, d) {\r\n            Tooltip.hide();\r\n        });\r\n    }\r\n}\r\n","import * as d3 from \"./d3\";\r\nimport {Utils} from \"sd-utils\";\r\nimport {AppUtils} from \"./app-utils\";\r\nimport {domain as model} from \"sd-model\";\r\nimport {ContextMenu} from \"./context-menu/context-menu\";\r\nimport {MainContextMenu} from \"./context-menu/main-context-menu\";\r\nimport {NodeContextMenu} from \"./context-menu/node-context-menu\";\r\nimport {Layout} from \"./layout\";\r\nimport {NodeDragHandler} from \"./node-drag-handler\";\r\nimport {Tooltip} from \"./tooltip\";\r\nimport {Templates} from \"./templates\";\r\nimport {TextDragHandler} from \"./text-drag-handler\";\r\nimport {TextContextMenu} from \"./context-menu/text-context-menu\";\r\nimport {EdgeContextMenu} from \"./context-menu/edge-context-menu\";\r\nimport * as Hammer from \"hammerjs\";\r\nimport {i18n} from \"./i18n/i18n\";\r\n\r\n\r\nexport class TreeDesignerConfig {\r\n    width = undefined;\r\n    height = undefined;\r\n    margin = {\r\n        left: 25,\r\n        right: 25,\r\n        top: 25,\r\n        bottom: 25\r\n    };\r\n    scale = 1;\r\n    lng = 'en';\r\n    layout= {\r\n        type: 'tree',\r\n        nodeSize: 40,\r\n        limitNodePositioning: true,\r\n        limitTextPositioning: true,\r\n        gridHeight: 75,\r\n        gridWidth: 150,\r\n        edgeSlantWidthMax: 20\r\n    };\r\n    fontFamily = 'sans-serif';\r\n    fontSize = '12px';\r\n    fontWeight = 'normal';\r\n    fontStyle = 'normal';\r\n    node = {\r\n        strokeWidth: '1px',\r\n        optimal: {\r\n            stroke: '#006f00',\r\n            strokeWidth: '1.5px',\r\n        },\r\n        label: {\r\n            fontSize: '1em',\r\n            color: 'black'\r\n        },\r\n        payoff: {\r\n            fontSize: '1em',\r\n            color: 'black',\r\n            negativeColor: '#b60000'\r\n        },\r\n        decision: {\r\n            fill: '#ff7777',\r\n            stroke: '#660000',\r\n\r\n            selected: {\r\n                fill: '#aa3333',\r\n                // stroke: '#666600'\r\n            }\r\n        },\r\n        chance: {\r\n            fill: '#ffff44',\r\n            stroke: '#666600',\r\n\r\n            selected: {\r\n                fill: '#aaaa00',\r\n                // stroke: '#666600'\r\n            }\r\n        },\r\n        terminal:{\r\n            fill: '#44ff44',\r\n            stroke: 'black',\r\n            selected: {\r\n                fill: '#00aa00',\r\n                // stroke: 'black'\r\n            },\r\n            payoff: {\r\n                fontSize: '1em',\r\n                color: 'black',\r\n                negativeColor: '#b60000'\r\n            },\r\n        }\r\n    };\r\n    edge={\r\n        stroke: '#424242',\r\n        strokeWidth: '1.5',\r\n        optimal:{\r\n            stroke: '#006f00',\r\n            strokeWidth: '2.4',\r\n        },\r\n        selected:{\r\n            stroke: '#045ad1',\r\n            strokeWidth: '3.5',\r\n        },\r\n        label: {\r\n            fontSize: '1em',\r\n            color: 'back'\r\n        },\r\n        payoff:{\r\n            fontSize: '1em',\r\n            color: 'black',\r\n            negativeColor: '#b60000'\r\n        }\r\n\r\n    };\r\n    probability = {\r\n        fontSize: '1em',\r\n        color: '#0000d7'\r\n    };\r\n    title = {\r\n        fontSize: '16px',\r\n        fontWeight: 'bold',\r\n        fontStyle: 'normal',\r\n        color: '#000000',\r\n        margin:{\r\n            top: 15,\r\n            bottom: 10\r\n        }\r\n    };\r\n    description = {\r\n        show: true,\r\n        fontSize: '12px',\r\n        fontWeight: 'bold',\r\n        fontStyle: 'normal',\r\n        color: '#000000',\r\n        margin:{\r\n            top: 5,\r\n            bottom: 10\r\n        }\r\n    };\r\n\r\n    readOnly= false;\r\n    disableAnimations=false;\r\n    forceFullEdgeRedraw=false;\r\n    hideLabels=false;\r\n    hidePayoffs=false;\r\n    hideProbabilities=false;\r\n    raw=false;\r\n    preserveFoldingOfNestedSubtrees = true;\r\n\r\n\r\n    payoffNumberFormatter = (v, i)=> v;\r\n    probabilityNumberFormatter  = (v)=> v;\r\n\r\n    onNodeSelected = (node) => {};\r\n    onEdgeSelected = (edge) => {};\r\n    onTextSelected = (text) => {};\r\n    onSelectionCleared = () => {};\r\n\r\n    operationsForObject = (o) => [];\r\n    performOperation = (object, operation) => Promise.resolve();\r\n\r\n    payoffNames = [null, null];\r\n    maxPayoffsToDisplay = 1;\r\n\r\n    constructor(custom) {\r\n        if (custom) {\r\n            Utils.deepExtend(this, custom);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class TreeDesigner {\r\n\r\n    config;\r\n    container;\r\n    data; //data model manager\r\n    svg;\r\n\r\n    constructor(container, dataModel, config){\r\n        this.setConfig(config);\r\n        this.data = dataModel;\r\n        this.initContainer(container);\r\n        this.init();\r\n    }\r\n\r\n    setConfig(config) {\r\n        this.config = new TreeDesignerConfig(config);\r\n        if(this.layout){\r\n            this.layout.config=this.config.layout;\r\n        }\r\n        this.updateCustomStyles();\r\n        return this;\r\n    }\r\n\r\n    init(){\r\n\r\n        this.initSvg();\r\n        this.initLayout();\r\n        this.initI18n();\r\n        this.initBrush();\r\n        this.initEdgeMarkers();\r\n\r\n        this.updateCustomStyles();\r\n        if(!this.config.readOnly){\r\n            this.initMainContextMenu();\r\n            this.initNodeContextMenu();\r\n            this.initEdgeContextMenu();\r\n            this.initNodeDragHandler();\r\n            this.initTextDragHandler();\r\n            this.initTextContextMenu();\r\n        }\r\n        this.redraw();\r\n    }\r\n\r\n    initI18n() {\r\n        i18n.init(this.config.lng);\r\n    }\r\n\r\n\r\n    updateCustomStyles(){\r\n        d3.select('head').selectOrAppend('style#sd-tree-designer-style').html(Templates.get('treeDesignerStyles', this.config));\r\n        return this;\r\n    }\r\n\r\n    initLayout(){\r\n        this.layout = new Layout(this, this.data, this.config.layout);\r\n    }\r\n\r\n    initNodeDragHandler(){\r\n        this.nodeDragHandler = new NodeDragHandler(this, this.data);\r\n    }\r\n\r\n    initTextDragHandler(){\r\n        this.textDragHandler = new TextDragHandler(this, this.data);\r\n    }\r\n\r\n    redraw(withTransitions=false){\r\n\r\n        var self = this;\r\n        withTransitions = !self.config.disableAnimations && withTransitions;\r\n        this.redrawDiagramTitle();\r\n        this.redrawDiagramDescription();\r\n        this.updateScale(withTransitions);\r\n        this.updateMargin(withTransitions);\r\n        if(withTransitions){\r\n            self.transitionPrev = self.transition;\r\n            self.transition = true;\r\n        }\r\n        this.redrawNodes();\r\n        this.redrawEdges();\r\n        this.redrawFloatingTexts();\r\n        this.updateValidationMessages();\r\n        if(withTransitions){\r\n            self.transition =  self.transitionPrev;\r\n        }\r\n        setTimeout(function(){\r\n            self.updatePlottingRegionSize();\r\n        },10);\r\n\r\n        return this;\r\n    }\r\n\r\n    computeAvailableSpace(){\r\n        this.availableHeight = AppUtils.sanitizeHeight(this.config.height, this.container, this.config.margin);\r\n        this.availableWidth = AppUtils.sanitizeWidth(this.config.width, this.container, this.config.margin);\r\n    }\r\n\r\n    initSvg() {\r\n        var c = this;\r\n        var self = this;\r\n        this.computeAvailableSpace();\r\n        this.svg = this.container.selectOrAppend('svg.sd-tree-designer');\r\n        this.svg.attr('width', this.availableWidth).attr('height', this.availableHeight);\r\n\r\n        this.wrapperGroup = this.svg.selectOrAppend('g.sd-wrapper-group');\r\n        this.mainGroup = this.wrapperGroup.selectOrAppend('g.main-group');\r\n        this.updateScale();\r\n        this.updateMargin();\r\n\r\n\r\n        if (!this.config.width) {\r\n            d3.select(window)\r\n                .on(\"resize.tree-designer\", function () {\r\n                    self.updatePlottingRegionSize();\r\n                    self.redrawDiagramTitle();\r\n                });\r\n        }\r\n\r\n        var mc = new Hammer.Manager(this.svg.node(), {touchAction : 'auto'});\r\n        mc.add(new Hammer.Press({\r\n            pointerType: 'touch'\r\n        }));\r\n\r\n        mc.add(new Hammer.Pinch({\r\n            pointerType: 'touch'\r\n        }));\r\n\r\n        var cancel;\r\n        mc.on('pinchstart', function(){\r\n            self.disableBrush();\r\n        })\r\n        mc.on('pinch', function(){\r\n            cancel = Utils.waitForFinalEvent(()=>self.enableBrush(), 'pinchend', 5000)\r\n        })\r\n    }\r\n\r\n    updateMargin(withTransitions){\r\n        var self = this;\r\n        var margin = this.config.margin;\r\n        var group = this.mainGroup;\r\n        if(withTransitions){\r\n            group = group.transition();\r\n        }\r\n\r\n        this.topMargin = margin.top;\r\n        if(this.diagramTitle||this.diagramDescription){\r\n            this.topMargin = parseInt(this.diagramTitle ? this.config.title.margin.top : 0) + this.getTitleGroupHeight()\r\n                +  Math.max(this.topMargin, parseInt(this.config.title.margin.bottom));\r\n        }\r\n\r\n        group.attr(\"transform\", \"translate(\" + margin.left + \",\" + this.topMargin + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\r\n    }\r\n\r\n    setMargin(margin, withoutStateSaving){\r\n        var self=this;\r\n        if(!withoutStateSaving){\r\n            this.data.saveState({\r\n                data:{\r\n                    margin: Utils.clone(self.config.margin)\r\n                },\r\n                onUndo: (data)=> {\r\n                    self.setMargin(data.margin, true);\r\n                },\r\n                onRedo: (data)=> {\r\n                    self.setMargin(margin, true);\r\n                }\r\n            });\r\n        }\r\n        Utils.deepExtend(this.config.margin, margin);\r\n        this.redrawDiagramTitle();\r\n        this.updateMargin(true);\r\n    }\r\n\r\n\r\n    updateScale(withTransitions){\r\n        var self = this;\r\n        var scale = this.config.scale;\r\n        var group = this.wrapperGroup;\r\n        if(withTransitions){\r\n            group = group.transition();\r\n        }\r\n\r\n        group.attr(\"transform\", \"scale(\" + scale + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\r\n    }\r\n\r\n    setScale(scale, withoutStateSaving){\r\n        var self=this;\r\n        if(!withoutStateSaving){\r\n            this.data.saveState({\r\n                data:{\r\n                    scale: Utils.clone(self.config.scale)\r\n                },\r\n                onUndo: (data)=> {\r\n                    self.setScale(data.scale, true);\r\n                },\r\n                onRedo: (data)=> {\r\n                    self.setScale(scale, true);\r\n                }\r\n            });\r\n        }\r\n        this.config.scale = scale;\r\n        this.updateScale(true);\r\n    }\r\n\r\n    initContainer(containerIdOrElem) {\r\n        if (Utils.isString(containerIdOrElem)) {\r\n            var selector = containerIdOrElem.trim();\r\n\r\n            if (!Utils.startsWith(selector, '#') && !Utils.startsWith(selector, '.')) {\r\n                selector = '#' + selector;\r\n            }\r\n            this.container = d3.select(selector);\r\n        } else if(containerIdOrElem._parents){\r\n            this.container = containerIdOrElem\r\n        }else{\r\n            this.container = d3.select(containerIdOrElem);\r\n        }\r\n    }\r\n\r\n    updatePlottingRegionSize() {\r\n        var changed = false;\r\n        this.computeAvailableSpace();\r\n        var margin = this.config.margin;\r\n        var svgWidth = this.svg.attr('width');\r\n        var svgHeight = this.svg.attr('height');\r\n        var mainGroupBox = this.mainGroup.node().getBBox();\r\n        let boxWidth = mainGroupBox.width;\r\n        var newSvgWidth = boxWidth+mainGroupBox.x+margin.left+margin.right;\r\n        newSvgWidth  *= this.config.scale;\r\n        this.container.classed('with-overflow-x', newSvgWidth>=this.availableWidth);\r\n        newSvgWidth = Math.max(newSvgWidth, this.availableWidth);\r\n        if(svgWidth!=newSvgWidth){\r\n            changed = true;\r\n            this.svg.attr('width', newSvgWidth);\r\n        }\r\n        let boxHeight = mainGroupBox.height;\r\n        var newSvgHeight = boxHeight+mainGroupBox.y+this.topMargin+margin.bottom;\r\n        newSvgHeight *= this.config.scale;\r\n        this.container.classed('with-overflow-y', newSvgHeight>=this.availableHeight);\r\n        newSvgHeight = Math.max(newSvgHeight, this.availableHeight);\r\n        if(svgHeight!=newSvgHeight){\r\n            changed=true;\r\n            this.svg.attr('height', newSvgHeight);\r\n        }\r\n        if(changed){\r\n            this.updateBrushExtent()\r\n        }\r\n\r\n\r\n    }\r\n\r\n    redrawNodes() {\r\n        var self = this;\r\n\r\n\r\n        var nodesContainer = this.mainGroup.selectOrAppend('g.nodes');\r\n        var nodes = nodesContainer.selectAll('.node').data(this.data.nodes.filter(d=>!d.$hidden), (d,i)=> d.id);\r\n        nodes.exit().remove();\r\n        var nodesEnter = nodes.enter().append('g')\r\n            .attr('id', d=>'node-'+d.id)\r\n            .attr('class', d=>d.type+'-node node')\r\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\r\n        nodesEnter.append('path');\r\n\r\n        var labelEnter = nodesEnter.append('text').attr('class', 'label');\r\n        var payoffEnter = nodesEnter.append('text').attr('class', 'payoff computed');\r\n        var indicatorEnter = nodesEnter.append('text').attr('class', 'error-indicator').text('!!');\r\n        var aggregatedPayoffEnter = nodesEnter.append('text').attr('class', 'aggregated-payoff');\r\n        var probabilityToEnterEnter = nodesEnter.append('text').attr('class', 'probability-to-enter');\r\n\r\n        var nodesMerge = nodesEnter.merge(nodes);\r\n        nodesMerge.classed('optimal', (d)=>self.isOptimal(d));\r\n\r\n        var nodesMergeT = nodesMerge;\r\n        if(this.transition){\r\n            nodesMergeT = nodesMerge.transition();\r\n            nodesMergeT.on('end', ()=> self.updatePlottingRegionSize())\r\n        }\r\n        nodesMergeT\r\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')')\r\n\r\n        var path = nodesMerge.select('path');\r\n        this.layout.drawNodeSymbol(path,this.transition);\r\n\r\n        /*path\r\n            .style('fill', d=> {\r\n                // if(self.isNodeSelected(d)){\r\n                //     return self.config.node[d.type].selected.fill\r\n                // }\r\n                return self.config.node[d.type].fill\r\n            })\r\n            .style('stroke', d=> self.config.node[d.type].stroke)\r\n            .style('stroke-width', d=> {\r\n                if(self.config.node[d.type].strokeWidth!==undefined){\r\n                    return self.config.node[d.type].strokeWidth;\r\n                }\r\n                return self.config.node.strokeWidth;\r\n            });\r\n        */\r\n        this.layout.nodeLabelPosition(labelEnter);\r\n        var labelMerge = nodesMerge.select('text.label');\r\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\r\n        var labelMergeT = nodesMergeT.select('text.label');\r\n        labelMergeT.each(this.updateTextLines);\r\n        this.layout.nodeLabelPosition(labelMergeT)\r\n            .attr('text-anchor', 'middle')\r\n\r\n        var payoff = nodesMerge.select('text.payoff');\r\n\r\n        var payoffTspans = payoff.selectAll('tspan').data(d=>{\r\n            let item = d.displayValue('childrenPayoff');\r\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\r\n        });\r\n        payoffTspans.exit().remove();\r\n\r\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\r\n        payoffTspansM\r\n            // .attr('dominant-baseline', 'hanging')\r\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\r\n            .attr('x', '0')\r\n            .classed('negative', d=> {\r\n                return d!==null && d<0;\r\n            })\r\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\r\n            .text((d, i)=> {\r\n                var val = d\r\n\r\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\r\n            });\r\n        this.attachPayoffTooltip(payoffTspansM);\r\n\r\n\r\n        var payoffT = payoff;\r\n        if(this.transition){\r\n            payoffT = payoff.transition();\r\n        }\r\n\r\n        this.layout.nodePayoffPosition(payoffEnter);\r\n        this.layout.nodePayoffPosition(payoffT);\r\n\r\n        var aggregatedPayoff = nodesMerge.select('text.aggregated-payoff');\r\n        var aggregatedPayoffTspans = aggregatedPayoff.selectAll('tspan').data(d=>{\r\n            let item = d.displayValue('aggregatedPayoff');\r\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\r\n        });\r\n        aggregatedPayoffTspans.exit().remove();\r\n        var aggregatedPayoffTspansM = aggregatedPayoffTspans.enter().append('tspan').merge(aggregatedPayoffTspans)\r\n            .attr('dy', (d,i)=>i>0 ? '0.95em': undefined)\r\n            .classed('negative', d=> {\r\n                return d!==null && d<0;\r\n            })\r\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\r\n            .text((val, i)=> {\r\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\r\n            });\r\n\r\n        this.attachPayoffTooltip(aggregatedPayoffTspansM, 'aggregatedPayoff');\r\n\r\n        var aggregatedPayoffT = aggregatedPayoff;\r\n        if(this.transition){\r\n            aggregatedPayoffT = aggregatedPayoff.transition();\r\n        }\r\n\r\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffEnter);\r\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffT);\r\n\r\n        var probabilityToEnter = nodesMerge.select('text.probability-to-enter')\r\n            .text(d=>{\r\n                var val = d.displayValue('probabilityToEnter');\r\n                return val!==null ? (isNaN(val) ? val : self.config.probabilityNumberFormatter(val)): ''\r\n            })\r\n            .classed('sd-hidden', this.config.hideProbabilities || this.config.raw);\r\n        Tooltip.attach(probabilityToEnter, i18n.t('tooltip.node.probabilityToEnter'));\r\n\r\n\r\n        var probabilityToEnterT = probabilityToEnter;\r\n        if(this.transition){\r\n            probabilityToEnterT = probabilityToEnter.transition();\r\n        }\r\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterEnter);\r\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterT);\r\n\r\n\r\n        var indicator = nodesMerge.select('text.error-indicator');\r\n        indicator.classed('sd-hidden', this.config.raw)\r\n        this.layout.nodeIndicatorPosition(indicatorEnter);\r\n        this.layout.nodeIndicatorPosition(indicator);\r\n\r\n        if(this.nodeDragHandler){\r\n            nodesMerge.call(this.nodeDragHandler.drag);\r\n        }\r\n\r\n        nodesMerge.on('contextmenu', this.nodeContextMenu);\r\n        nodesMerge.on('dblclick', this.nodeContextMenu)\r\n        nodesMerge.each(function(d, i){\r\n            var nodeElem = this;\r\n            var mc = new Hammer.Manager(nodeElem);\r\n            mc.add(new Hammer.Press({\r\n                pointerType: 'touch'\r\n            }));\r\n            mc.on('press', function(e){\r\n                if(e.pointerType=='touch'){\r\n                    self.nodeDragHandler.cancelDrag();\r\n                }\r\n            })\r\n\r\n\r\n            if(d.folded){\r\n                let button = d3.select(nodeElem).selectOrAppend('text.sd-unfold-button')\r\n                    .text(\"[+]\")\r\n                    .on('click dbclick mousedown', ()=>self.foldSubtree(d, false)); //firefox detects only mousedown event - related to drag handler\r\n\r\n                self.layout.nodeUnfoldButtonPosition(button);\r\n                Tooltip.attach(button, i18n.t('contextMenu.node.unfold'));\r\n            }else{\r\n                d3.select(nodeElem).select('.sd-unfold-button').remove();\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    attachPayoffTooltip(selection, payoffFiledName = 'payoff', object='node'){\r\n        var self = this;\r\n        Tooltip.attach(selection, (d, i)=>{\r\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\r\n                return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.named',{value: d.payoff, number: i+1, name: self.config.payoffNames[i]})\r\n            }\r\n            return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.default',{value: d.payoff, number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\r\n        });\r\n    }\r\n\r\n    updateTextLines(d){ //helper method for splitting text to tspans\r\n        let value = d.displayValue(\"name\") || d.name;\r\n        var lines = value ? value.split('\\n') : [];\r\n        lines.reverse();\r\n        var tspans = d3.select(this).selectAll('tspan').data(lines);\r\n        tspans.enter().append('tspan')\r\n            .merge(tspans)\r\n            .text(l=>l)\r\n            .attr('dy', (d,i)=>i>0 ? '-1.1em': undefined)\r\n            .attr('x', '0');\r\n\r\n        tspans.exit().remove();\r\n    }\r\n\r\n    isOptimal(d){\r\n        return d.displayValue('optimal');\r\n    }\r\n\r\n    redrawEdges() {\r\n        var self = this;\r\n        var edgesContainer = this.mainGroup.selectOrAppend('g.edges');\r\n        if(self.config.forceFullEdgeRedraw){\r\n            edgesContainer.selectAll(\"*\").remove();\r\n        }\r\n\r\n        var edges = edgesContainer.selectAll('.edge').data(this.data.edges.filter(e=>!e.$hidden), (d,i)=> d.id);\r\n        edges.exit().remove();\r\n        var edgesEnter = edges.enter().append('g')\r\n            .attr('id', d=>'edge-'+d.id)\r\n            .attr('class', 'edge');\r\n\r\n\r\n        edgesEnter.append('path');\r\n        var labelEnter = edgesEnter.appendSelector('g.label-group');\r\n        labelEnter.append('text').attr('class', 'label');\r\n        var payoffEnter = edgesEnter.append('text').attr('class', 'payoff');\r\n        var probabilityEnter = edgesEnter.append('text').attr('class', 'probability');\r\n\r\n\r\n        var edgesMerge = edgesEnter.merge(edges);\r\n\r\n\r\n        var optimalClassName = 'optimal';\r\n        edgesMerge.classed(optimalClassName, (d)=>self.isOptimal(d));\r\n\r\n        var edgesMergeT = edgesMerge;\r\n        if(this.transition){\r\n            edgesMergeT = edgesMerge.transition();\r\n        }\r\n\r\n        edgesMergeT.select('path')\r\n            .attr('d', d=> this.layout.edgeLineD(d))\r\n            // .attr(\"stroke\", \"black\")\r\n            // .attr(\"stroke-width\", 2)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"marker-end\", function(d) {\r\n                var suffix = d3.select(this.parentNode).classed('selected') ? '-selected' : (self.isOptimal(d)?'-optimal':'');\r\n                return \"url(#arrow\"+ suffix+\")\"\r\n            });\r\n            // .attr(\"shape-rendering\", \"optimizeQuality\")\r\n\r\n\r\n        edgesMerge.on('click', (event, d) => {\r\n            self.selectEdge(d, true)\r\n        });\r\n\r\n        this.layout.edgeLabelPosition(labelEnter);\r\n        edgesMergeT.select('text.label').each(this.updateTextLines);\r\n        var labelMerge = edgesMerge.select('g.label-group');\r\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\r\n        var labelMergeT = edgesMergeT.select('g.label-group');\r\n        this.layout.edgeLabelPosition(labelMergeT);\r\n            // .text(d=>d.name);\r\n\r\n        var payoff = edgesMerge.select('text.payoff');\r\n\r\n        var payoffTspans = payoff.selectAll('tspan').data(d => {\r\n            let item = d.displayValue('payoff');\r\n            return Utils.isArray(item) ? item.slice(0, Math.min(item.length, self.config.maxPayoffsToDisplay)).map(_=>d) : [d];\r\n        });\r\n        payoffTspans.exit().remove();\r\n\r\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\r\n        payoffTspansM\r\n        // .attr('dominant-baseline', 'hanging')\r\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\r\n            // .attr('x', '0')\r\n\r\n            // .attr('dominant-baseline', 'hanging')\r\n            .classed('negative', (d, i)=> {\r\n                var val = d.displayPayoff(undefined, i);\r\n                return val!==null && val<0;\r\n            })\r\n            .classed('sd-hidden', this.config.hidePayoffs)\r\n            // .text(d=> isNaN(d.payoff) ? d.payoff : self.config.payoffNumberFormatter(d.payoff))\r\n            .text((d, i)=>{\r\n                if(this.config.raw){\r\n                    return d.payoff[i];\r\n                }\r\n\r\n                let item = d.displayValue('payoff');\r\n                let items = Utils.isArray(item) ? item : [item];\r\n\r\n                let val = items[i];\r\n                if (val !== null) {\r\n                    if (!isNaN(val)) {\r\n                        return self.config.payoffNumberFormatter(val, i);\r\n                    }\r\n                    if (Utils.isString(val)) {\r\n                        return val;\r\n                    }\r\n                }\r\n\r\n                if (d.payoff[i] !== null && !isNaN(d.payoff[i]))\r\n                    return self.config.payoffNumberFormatter(d.payoff[i], i);\r\n\r\n                return d.payoff[i];\r\n\r\n            });\r\n\r\n        Tooltip.attach(payoffTspansM, (d, i)=>{\r\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\r\n                return i18n.t('tooltip.edge.payoff.named',{value: d.payoff[i], number: i+1, name: self.config.payoffNames[i]})\r\n            }\r\n            return i18n.t('tooltip.edge.payoff.default',{value: d.payoff[i], number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\r\n        });\r\n\r\n        var payoffTextT = payoff;\r\n        if(this.transition){\r\n            payoffTextT = payoff.transition();\r\n        }\r\n        this.layout.edgePayoffPosition(payoffEnter);\r\n        this.layout.edgePayoffPosition(payoffTextT);\r\n\r\n        Tooltip.attach(edgesMerge.select('text.probability'), d=>i18n.t('tooltip.edge.probability',{value: d.probability=== undefined ? d.displayProbability() : d.probability}));\r\n\r\n        edgesMerge.select('text.probability')\r\n            .classed('sd-hidden', this.config.hideProbabilities);\r\n        var probabilityMerge = edgesMerge.select('text.probability');\r\n        probabilityMerge\r\n            .attr('text-anchor', 'end')\r\n            .text(d=>{\r\n                if(this.config.raw){\r\n                    return d.probability;\r\n                }\r\n                var val = d.displayProbability();\r\n\r\n                if(val!==null){\r\n                    if(!isNaN(val)){\r\n                        return self.config.probabilityNumberFormatter(val);\r\n                    }\r\n                    if(Utils.isString(val)){\r\n                        return val;\r\n                    }\r\n                }\r\n\r\n                if(d.probability!==null && !isNaN(d.probability))\r\n                    return self.config.probabilityNumberFormatter(d.probability);\r\n\r\n                return d.probability;\r\n            });\r\n        var probabilityMergeT = probabilityMerge;\r\n        if(this.transition){\r\n            probabilityMergeT = probabilityMerge.transition();\r\n        }\r\n\r\n        this.layout.edgeProbabilityPosition(probabilityEnter);\r\n        this.layout.edgeProbabilityPosition(probabilityMergeT);\r\n\r\n\r\n        edgesContainer.selectAll('.edge.'+optimalClassName).raise();\r\n\r\n        edgesMerge.on('contextmenu', this.edgeContextMenu);\r\n        edgesMerge.on('dblclick', this.edgeContextMenu);\r\n        edgesMerge.each(function(d, i){\r\n            var elem = this;\r\n            var mc = new Hammer.Manager(elem);\r\n            mc.add(new Hammer.Press({\r\n                pointerType: Hammer.POINTER_TOUCH\r\n            }));\r\n        })\r\n    }\r\n\r\n    redrawFloatingTexts() {\r\n        var self = this;\r\n\r\n\r\n        var textsContainer = this.mainGroup.selectOrAppend('g.floating-texts');\r\n        var texts = textsContainer.selectAll('.floating-text').data(this.data.texts, (d,i)=> d.id);\r\n        texts.exit().remove();\r\n        var textsEnter = texts.enter().appendSelector('g.floating-text')\r\n            .attr('id', d=>'text-'+d.id);\r\n\r\n\r\n        var rectWidth = 40;\r\n        var rectHeight = 20;\r\n\r\n        textsEnter.append('rect').attr('x', -5).attr('y', -16).attr('fill-opacity', 0);\r\n        textsEnter.append('text');\r\n\r\n        var textsMerge = textsEnter.merge(texts);\r\n        var textsMergeT = textsMerge;\r\n        if(this.transition){\r\n            textsMergeT = textsMerge.transition();\r\n        }\r\n\r\n        textsMergeT.attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\r\n\r\n        var tspans = textsMerge.select('text').selectAll('tspan').data(d=>{\r\n            let value = d.$displayValue || d.value;\r\n            return value ? value.split('\\n') : []\r\n        });\r\n\r\n        tspans.enter().append('tspan')\r\n            .merge(tspans)\r\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\r\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\r\n            .attr('x', '0');\r\n\r\n        tspans.exit().remove();\r\n        textsMerge.classed('sd-empty', d=>!d.value || !d.value.trim());\r\n        textsMerge.select('rect').attr('width', rectWidth).attr('height', rectHeight);\r\n\r\n        textsMerge.each(function(d){\r\n            if(!d.value){\r\n                return;\r\n            }\r\n            var bb = d3.select(this).select('text').node().getBBox();\r\n           d3.select(this).select('rect')\r\n               .attr('y', bb.y-5)\r\n               .attr('width', Math.max(bb.width+10, rectWidth))\r\n               .attr('height', Math.max(bb.height+10, rectHeight))\r\n        });\r\n\r\n        if(this.textDragHandler){\r\n            textsMerge.call(this.textDragHandler.drag);\r\n        }\r\n        textsMerge.on('contextmenu', this.textContextMenu);\r\n        textsMerge.on('dblclick', this.textContextMenu);\r\n        textsMerge.each(function(d, i){\r\n            var elem = this;\r\n            var mc = new Hammer.Manager(elem);\r\n            mc.add(new Hammer.Press({\r\n                pointerType: 'touch'\r\n            }));\r\n        })\r\n\r\n    }\r\n\r\n    updateValidationMessages() {\r\n        var nodes = this.mainGroup.selectAll('.node');\r\n        nodes.classed('error', false);\r\n\r\n        this.data.validationResults.forEach(validationResult=>{\r\n            if(validationResult.isValid()){\r\n                return;\r\n            }\r\n\r\n            Object.getOwnPropertyNames(validationResult.objectIdToError).forEach(id=>{\r\n                var errors = validationResult.objectIdToError[id];\r\n                var nodeSelection = this.getNodeD3SelectionById(id);\r\n                nodeSelection.classed('error', true);\r\n                var tooltipHtml = '';\r\n                errors.forEach(e=>{\r\n                    if(tooltipHtml){\r\n                        tooltipHtml+='<br/>'\r\n                    }\r\n                    tooltipHtml+=AppUtils.getValidationMessage(e);\r\n                });\r\n\r\n                Tooltip.attach(nodeSelection.select('.error-indicator'), tooltipHtml);\r\n\r\n\r\n            })\r\n        });\r\n    }\r\n\r\n\r\n    initEdgeMarkers() {\r\n        var defs = this.svg.append(\"svg:defs\");\r\n\r\n        this.initArrowMarker(\"arrow\");\r\n        this.initArrowMarker(\"arrow-optimal\");\r\n        this.initArrowMarker(\"arrow-selected\");\r\n    }\r\n\r\n    initArrowMarker(id) {\r\n\r\n        var defs = this.svg.select(\"defs\");\r\n        defs.append(\"marker\")\r\n            .attr(\"id\",id)\r\n            .attr(\"viewBox\",\"0 -5 10 10\")\r\n            .attr(\"refX\",5)\r\n            .attr(\"refY\",0)\r\n            .attr(\"markerWidth\",4)\r\n            .attr(\"markerHeight\",4)\r\n            .attr(\"orient\",\"auto\")\r\n            .append(\"path\")\r\n            .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n            .attr(\"class\",\"arrowHead\");\r\n    }\r\n\r\n    updateBrushExtent() {\r\n        var self =this;\r\n        this.brush.extent([[0, 0], [self.svg.attr('width'), self.svg.attr('height')]]);\r\n        this.brushContainer.call(this.brush);\r\n    }\r\n    initBrush() {\r\n        var self = this;\r\n\r\n        var brushContainer = self.brushContainer = this.brushContainer= this.wrapperGroup.selectOrInsert(\"g.brush\", \":first-child\")\r\n            .attr(\"class\", \"brush\");\r\n\r\n        var brush = this.brush = d3.brush()\r\n            .on(\"start\", brushstart)\r\n            .on(\"brush\", brushmove)\r\n            .on(\"end\", brushend);\r\n\r\n\r\n\r\n        this.updateBrushExtent();\r\n\r\n        brushContainer.select('.overlay').on(\"mousemove.edgeSelection\", mousemoved);\r\n        function mousemoved(event) {\r\n            var m = d3.pointer(event);\r\n            var mgt = self.getMainGroupTranslation();\r\n            var margin = 10;\r\n\r\n            var closest = [null, 999999999];\r\n            var closeEdges = [];\r\n            self.mainGroup.selectAll('.edge').each(function(d){\r\n                var selection = d3.select(this);\r\n                selection.classed('sd-hover', false);\r\n                var pathNode = selection.select('path').node();\r\n                var b = pathNode.getBBox();\r\n                if(b.x+mgt[0] <=m[0] && b.x+b.width+mgt[0] >= m[0] &&\r\n                   b.y+mgt[1]-margin <=m[1] && b.y+b.height+mgt[1]+margin >= m[1]){\r\n\r\n                    var cp = AppUtils.closestPoint(pathNode, [m[0]-mgt[0], m[1]-mgt[1]]);\r\n                    if(cp.distance < margin && cp.distance<closest[1]){\r\n                        closest = [selection, cp.distance];\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n            self.hoveredEdge = null;\r\n            if(closest[0]){\r\n                closest[0].classed('sd-hover', true);\r\n                self.hoveredEdge = closest[0];\r\n            }\r\n\r\n        }\r\n\r\n        function brushstart(event) {\r\n            if (!event.selection) return;\r\n            if(self.hoveredEdge){\r\n                self.selectEdge(self.hoveredEdge.datum(), true)\r\n            }else{\r\n                self.clearSelection();\r\n            }\r\n            ContextMenu.hide();\r\n        }\r\n\r\n        // Highlight the selected nodes.\r\n        function brushmove(event) {\r\n            var s = event.selection;\r\n            if(!s)return;\r\n\r\n            self.mainGroup.selectAll(\".node\").classed('selected', function (d) {\r\n                var mainGroupTranslation = self.getMainGroupTranslation();\r\n                var x = d.location.x+mainGroupTranslation[0];\r\n                var y = d.location.y+mainGroupTranslation[1];\r\n                var nodeSize = self.config.layout.nodeSize;\r\n                var offset = nodeSize*0.25;\r\n                return s[0][0] <= x+offset && x-offset <= s[1][0]\r\n                    && s[0][1] <= y+offset && y-offset <= s[1][1];\r\n            });\r\n        }\r\n        // If the brush is empty, select all circles.\r\n        function brushend(event) {\r\n            if (!event.selection) return;\r\n            brush.move(brushContainer, null);\r\n\r\n            var selectedNodes = self.getSelectedNodes();\r\n            if(selectedNodes && selectedNodes.length === 1){\r\n                self.selectNode(selectedNodes[0]);\r\n            }\r\n            // if (!d3.event.selection) self.mainGroup.selectAll(\".selected\").classed('selected', false);\r\n        }\r\n    }\r\n\r\n    disableBrush(){\r\n        if(!this.brushDisabled){\r\n            AppUtils.growl(i18n.t('growl.brushDisabled'), 'info', 'left')\r\n        }\r\n        this.brushDisabled = true;\r\n        this.brushContainer.remove();\r\n    }\r\n\r\n    enableBrush(){\r\n        if(this.brushDisabled){\r\n            AppUtils.growl(i18n.t('growl.brushEnabled'), 'info', 'left')\r\n            this.initBrush();\r\n            this.brushDisabled = false;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    getMainGroupTranslation(invert) {\r\n        var translation = AppUtils.getTranslation(this.mainGroup.attr(\"transform\"));\r\n        if(invert){\r\n            translation[0] = -translation[0];\r\n            translation[1] = -translation[1]\r\n        }\r\n        return translation;\r\n    }\r\n\r\n    initNodeContextMenu() {\r\n        this.nodeContextMenu = new NodeContextMenu(this, this.config.operationsForObject);\r\n    }\r\n\r\n    initEdgeContextMenu() {\r\n        this.edgeContextMenu = new EdgeContextMenu(this);\r\n    }\r\n\r\n    initTextContextMenu() {\r\n        this.textContextMenu = new TextContextMenu(this);\r\n    }\r\n\r\n\r\n\r\n    initMainContextMenu() {\r\n        this.mainContextMenu = new MainContextMenu(this);\r\n        this.svg.on('contextmenu',this.mainContextMenu);\r\n        this.svg.on('dblclick',this.mainContextMenu);\r\n    }\r\n\r\n    addText(text){\r\n        this.data.saveState();\r\n        this.data.addText(text);\r\n        this.redraw();\r\n        this.selectText(text);\r\n    }\r\n\r\n    addNode(node, parent, redraw=false){\r\n        this.data.saveState();\r\n        this.data.addNode(node, parent);\r\n        this.redraw(true);\r\n        this.layout.update(node);\r\n        return node;\r\n    }\r\n\r\n    addDecisionNode(parent){\r\n        var newNode = new model.DecisionNode(this.layout.getNewChildLocation(parent));\r\n        this.addNode(newNode, parent)\r\n    }\r\n    addChanceNode(parent){\r\n        var newNode = new model.ChanceNode(this.layout.getNewChildLocation(parent));\r\n        this.addNode(newNode, parent)\r\n    }\r\n    addTerminalNode(parent){\r\n        var newNode = new model.TerminalNode(this.layout.getNewChildLocation(parent));\r\n        this.addNode(newNode, parent)\r\n    }\r\n\r\n    injectNode(node, edge){\r\n        this.data.saveState();\r\n        this.data.injectNode(node, edge);\r\n        this.redraw();\r\n        this.layout.update(node);\r\n        return node;\r\n    }\r\n\r\n    injectDecisionNode(edge){\r\n        var newNode = new model.DecisionNode(this.layout.getInjectedNodeLocation(edge));\r\n        this.injectNode(newNode, edge);\r\n\r\n    }\r\n\r\n    injectChanceNode(edge){\r\n        var newNode = new model.ChanceNode(this.layout.getInjectedNodeLocation(edge));\r\n        this.injectNode(newNode, edge);\r\n    }\r\n\r\n    removeNode(node) {\r\n        this.data.saveState();\r\n        this.data.removeNode(node);\r\n\r\n\r\n        if(!this.layout.isManualLayout()){\r\n            this.layout.update();\r\n        }else{\r\n            this.redraw();\r\n        }\r\n    }\r\n\r\n    removeSelectedNodes() {\r\n        var selectedNodes = this.getSelectedNodes();\r\n        if(!selectedNodes.length){\r\n            return;\r\n        }\r\n        this.data.saveState();\r\n        this.data.removeNodes(selectedNodes);\r\n        this.clearSelection();\r\n        this.redraw();\r\n        this.layout.update();\r\n    }\r\n\r\n    removeSelectedTexts(){\r\n        var selectedTexts = this.getSelectedTexts();\r\n\r\n        if(!selectedTexts.length){\r\n            return;\r\n        }\r\n        this.data.saveState();\r\n        this.data.removeTexts(selectedTexts);\r\n        this.clearSelection();\r\n        this.redraw();\r\n    }\r\n\r\n    copyNode(d, notClearPrevSelection) {\r\n        var clone = this.data.cloneSubtree(d);\r\n        if(notClearPrevSelection){\r\n            if(!this.copiedNodes){\r\n                this.copiedNodes=[];\r\n            }\r\n            this.copiedNodes.push(clone);\r\n        }else{\r\n            this.copiedNodes = [clone];\r\n        }\r\n\r\n    }\r\n\r\n    cutNode(d) {\r\n        this.copyNode(d);\r\n        this.removeNode(d);\r\n    }\r\n\r\n    cutSelectedNodes(){\r\n        var selectedNodes = this.getSelectedNodes();\r\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\r\n        this.copyNodes(selectedRoots);\r\n        this.removeSelectedNodes();\r\n    }\r\n\r\n    copySelectedNodes() {\r\n        var self;\r\n        var selectedNodes = this.getSelectedNodes();\r\n\r\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\r\n        this.copyNodes(selectedRoots);\r\n\r\n\r\n    }\r\n\r\n    copyNodes(nodes){\r\n        this.copiedNodes = nodes.map(d=>this.data.cloneSubtree(d));\r\n    }\r\n\r\n\r\n\r\n    pasteToNode(node) {\r\n        if(!this.copiedNodes || !this.copiedNodes.length){\r\n            return;\r\n        }\r\n        this.data.saveState();\r\n        var self = this;\r\n        self.clearSelection();\r\n        var nodesToAttach = this.copiedNodes;\r\n        self.copyNodes(this.copiedNodes);\r\n        nodesToAttach.forEach(toAttach=>{\r\n            var attached = this.data.attachSubtree(toAttach, node).childNode;\r\n            if(attached.folded){\r\n                self.foldSubtree(attached, attached.folded, false);\r\n            }\r\n            var location = self.layout.getNewChildLocation(node);\r\n            attached.moveTo(location.x, location.y, true);\r\n            self.layout.moveNodeToEmptyPlace(attached, false);\r\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\r\n\r\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\r\n        });\r\n\r\n        if(node.folded){\r\n            self.foldSubtree(node, node.folded, false);\r\n        }\r\n\r\n        setTimeout(function(){\r\n            self.redraw();\r\n            self.layout.update();\r\n        },10)\r\n\r\n    }\r\n\r\n    pasteToNewLocation(point) {\r\n        this.data.saveState();\r\n        var self = this;\r\n        self.clearSelection();\r\n        var nodesToAttach = this.copiedNodes;\r\n        self.copyNodes(this.copiedNodes);\r\n        nodesToAttach.forEach(toAttach=> {\r\n            var attached = this.data.attachSubtree(toAttach);\r\n            if(attached.folded){\r\n                self.foldSubtree(attached, attached.folded, false);\r\n            }\r\n            attached.moveTo(point.x, point.y, true);\r\n            self.layout.moveNodeToEmptyPlace(attached, false);\r\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\r\n\r\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\r\n        });\r\n\r\n        setTimeout(function(){\r\n            self.redraw();\r\n            self.layout.update();\r\n        },10)\r\n\r\n    }\r\n\r\n    convertNode(node, typeToConvertTo){\r\n        const self = this;\r\n        this.data.saveState();\r\n        this.data.convertNode(node, typeToConvertTo);\r\n        setTimeout(function(){\r\n            self.redraw(true);\r\n        },10)\r\n    }\r\n\r\n    performOperation(object, operation){\r\n        const self = this;\r\n        this.data.saveState();\r\n        this.config.performOperation(object, operation).then(() => {\r\n            setTimeout(function(){\r\n                self.redraw();\r\n                self.layout.update();\r\n            },10)\r\n        });\r\n    }\r\n\r\n    foldSubtree(node, fold = true, redraw = true) {\r\n        const self = this;\r\n        node.folded = fold;\r\n        const preserveNestedFolding = self.config.preserveFoldingOfNestedSubtrees;\r\n\r\n        this.data.getAllDescendantNodes(node).forEach(n => {\r\n            n.$hidden = fold || (n.$parent && (n.$parent.folded || n.$parent.$hidden));\r\n            if (!preserveNestedFolding) {\r\n                n.folded = false;\r\n            }\r\n        });\r\n        this.data.getAllDescendantEdges(node).forEach(e => e.$hidden = e.parentNode.folded || e.parentNode.$hidden);\r\n\r\n        if (!redraw) {\r\n            return;\r\n        }\r\n        setTimeout(function () {\r\n            self.redraw();\r\n            self.layout.update();\r\n        }, 10)\r\n    }\r\n\r\n    updateVisibility(node = null){\r\n        if(!node){\r\n            this.data.getRoots().forEach(n=>this.updateVisibility(n));\r\n            return;\r\n        }\r\n\r\n        if(node.folded){\r\n            this.foldSubtree(node, true, false);\r\n            return;\r\n        }\r\n\r\n        node.childEdges.forEach(e => this.updateVisibility(e.childNode));\r\n\r\n    }\r\n\r\n    moveNodeTo(x,y){\r\n\r\n    }\r\n\r\n    updateNodePosition(node) {\r\n        this.getNodeD3Selection(node).raise().attr('transform', 'translate('+node.location.x+' '+node.location.y+')');\r\n    }\r\n\r\n    updateTextPosition(text) {\r\n        this.getTextD3Selection(text).raise().attr('transform', 'translate('+text.location.x+' '+text.location.y+')');\r\n    }\r\n\r\n    getNodeD3Selection(node){\r\n        return this.getNodeD3SelectionById(node.id);\r\n    }\r\n\r\n    getNodeD3SelectionById(id){\r\n        return this.mainGroup.select('#node-'+id);\r\n    }\r\n    getTextD3Selection(text){\r\n        return this.getTextD3SelectionById(text.id);\r\n    }\r\n    getTextD3SelectionById(id){\r\n        return this.mainGroup.select('#text-'+id);\r\n    }\r\n\r\n    getSelectedNodes(visibleOnly = false) {\r\n        let selectedVisible = this.mainGroup.selectAll(\".node.selected\").data();\r\n        if(visibleOnly){\r\n            return selectedVisible;\r\n        }\r\n\r\n        let allSelected  = [];\r\n        allSelected.push(...selectedVisible);\r\n\r\n        selectedVisible.forEach(n=>{\r\n            if(n.folded){\r\n                let descendants = this.data.getAllDescendantNodes(n);\r\n                if(descendants){\r\n                    allSelected.push(...descendants);\r\n                }\r\n            }\r\n        });\r\n\r\n        return allSelected;\r\n    }\r\n\r\n    getSelectedTexts(){\r\n        return this.mainGroup.selectAll(\".floating-text.selected\").data();\r\n    }\r\n\r\n    clearSelection(){\r\n        this.mainGroup.selectAll(\".edge.selected\").select('path').attr(\"marker-end\", d => \"url(#arrow\"+(this.isOptimal(d)?'-optimal':'')+\")\")\r\n        this.mainGroup.selectAll(\".selected\").classed('selected', false);\r\n        this.config.onSelectionCleared();\r\n    }\r\n\r\n    selectEdge(edge, clearSelectionBeforeSelect){\r\n        if(clearSelectionBeforeSelect){\r\n            this.clearSelection();\r\n        }\r\n        this.config.onEdgeSelected(edge);\r\n        this.mainGroup.select('#edge-'+edge.id)\r\n            .classed('selected', true)\r\n            .select('path')\r\n            .attr(\"marker-end\", d => \"url(#arrow-selected)\")\r\n    }\r\n\r\n    isNodeSelected(node){\r\n        return this.getNodeD3Selection(node).classed('selected');\r\n    }\r\n\r\n    selectNode(node, clearSelectionBeforeSelect, skipCallback){\r\n        if(clearSelectionBeforeSelect){\r\n            this.clearSelection();\r\n        }\r\n\r\n        if(!skipCallback){\r\n            this.config.onNodeSelected(node);\r\n        }\r\n\r\n        this.getNodeD3SelectionById(node.id).classed('selected', true);\r\n    }\r\n\r\n    selectText(text, clearSelectionBeforeSelect, skipCallback){\r\n        if(clearSelectionBeforeSelect){\r\n            this.clearSelection();\r\n        }\r\n\r\n        if(!skipCallback){\r\n            this.config.onTextSelected(text)\r\n        }\r\n\r\n        this.getTextD3SelectionById(text.id).classed('selected', true);\r\n    }\r\n\r\n    selectSubTree(node, clearSelectionBeforeSelect,skipCallback) {\r\n        if(clearSelectionBeforeSelect){\r\n            this.clearSelection();\r\n        }\r\n        this.selectNode(node, false, skipCallback);\r\n        node.childEdges.forEach(e=>this.selectSubTree(e.childNode, false, true));\r\n    }\r\n\r\n    selectAllNodes() {\r\n        this.mainGroup.selectAll(\".node\").classed('selected', true);\r\n    }\r\n\r\n    autoLayout(type, withoutStateSaving){\r\n        this.layout.autoLayout(type, withoutStateSaving);\r\n    }\r\n\r\n    updateDiagramTitle(titleValue){\r\n        if(!titleValue){\r\n            titleValue = '';\r\n        }\r\n        this.diagramTitle = titleValue;\r\n        this.redrawDiagramTitle();\r\n        this.redrawDiagramDescription();\r\n        this.updateMargin(true);\r\n    }\r\n\r\n    redrawDiagramTitle(){\r\n        var svgWidth = this.svg.attr('width');\r\n        var svgHeight = this.svg.attr('height');\r\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\r\n\r\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\r\n        title.text(this.diagramTitle);\r\n        Layout.setHangingPosition(title);\r\n\r\n        var marginTop = parseInt(this.config.title.margin.top);\r\n        this.titleContainer.attr('transform', 'translate('+(svgWidth/2)+','+( marginTop)+')');\r\n    }\r\n    redrawDiagramDescription(){\r\n        var svgWidth = this.svg.attr('width');\r\n        var svgHeight = this.svg.attr('height');\r\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\r\n\r\n        var desc = this.titleContainer.selectOrAppend('text.sd-description');\r\n\r\n        if(!this.config.description.show){\r\n            desc.remove();\r\n            return;\r\n        }\r\n\r\n        var lines = this.diagramDescription ? this.diagramDescription.split('\\n') : [];\r\n        var tspans = desc.selectAll('tspan').data(lines);\r\n        tspans.enter().append('tspan')\r\n            .merge(tspans)\r\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\r\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\r\n            .attr('x', '0');\r\n\r\n        tspans.exit().remove();\r\n        Layout.setHangingPosition(desc);\r\n\r\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\r\n\r\n        var marginTop = 0;\r\n        if(this.diagramTitle){\r\n            marginTop += title.node().getBBox().height;\r\n            marginTop+= Math.max(parseInt(this.config.description.margin.top), 0);\r\n        }\r\n\r\n\r\n        desc.attr('transform', 'translate(0,'+( marginTop)+')');\r\n    }\r\n\r\n    updateDiagramDescription(descriptionValue){\r\n        if(!descriptionValue){\r\n            descriptionValue = '';\r\n        }\r\n        this.diagramDescription = descriptionValue;\r\n        this.redrawDiagramTitle();\r\n        this.redrawDiagramDescription();\r\n        this.updateMargin(true);\r\n    }\r\n\r\n\r\n    getTitleGroupHeight(withMargins){\r\n        if(!this.titleContainer){\r\n            return 0;\r\n        }\r\n        var h = this.titleContainer.node().getBBox().height;\r\n        if(withMargins){\r\n            h+= parseInt(this.config.title.margin.bottom);\r\n            h+= parseInt(this.config.title.margin.top);\r\n        }\r\n        return h;\r\n    }\r\n\r\n}\r\n","export * from './src/index'\r\n"]}