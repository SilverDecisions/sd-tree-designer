{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app-utils.js","src/context-menu/context-menu.js","src/context-menu/edge-context-menu.js","src/context-menu/main-context-menu.js","src/context-menu/node-context-menu.js","src/context-menu/text-context-menu.js","src/d3-extensions.js","src/d3.js","src/i18n/de.json","src/i18n/en.json","src/i18n/fr.json","src/i18n/i18n.js","src/i18n/it.json","src/i18n/pl.json","src/index.js","src/layout.js","src/node-drag-handler.js","src/symbols/circle.js","src/symbols/triangle.js","src/templates.js","src/templates/growl_message.html","src/text-drag-handler.js","src/tooltip.js","src/tree-designer.js","index.js"],"names":["require","r","e","n","t","o","i","f","c","u","a","Error","code","p","exports","call","length","1","module","d3","_interopRequireWildcard","_templates","_i18n","_sdUtils","AppUtils","textD3Obj","textString","width","textObj","node","textContent","getComputedTextLength","x","getSubStringLength","substring","tooltip","placeTextWithEllipsis","on","d","transition","duration","style","html","event","pageX","pageY","element","window","getComputedStyle","getPropertyValue","transform","g","document","createElementNS","setAttributeNS","matrix","baseVal","consolidate","pathNode","point","best","bestLength","scan","scanDistance","pathLength","getTotalLength","precision","bestDistance","Infinity","scanLength","distance2","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","y","distance","Math","sqrt","dx","dy","message","type","arguments","undefined","position","time","Templates","get","select","selectOrAppend","append","setTimeout","remove","tag","attribs","parent","el","createElement","deepExtend","appendChild","parentNode","removeChild","text","replace","createTextNode","div","innerHTML","name","evt","createEvent","initEvent","dispatchEvent","fireEvent","data","CustomEvent","detail","initCustomEvent","error","Utils","isString","key","i18n","selection","classed","_show","offsetParent","display","url","callback","xhr","XMLHttpRequest","open","responseType","onload","status","response","send","sanitizeHeight","height","container","parseInt","sanitizeWidth","availableHeight","margin","max","top","bottom","availableWidth","left","right","ContextMenu","menu","opts","_classCallCheck","this","self","openCallback","onOpen","closeCallback","onClose","selectAll","enter","attr","index","elm","preventDefault","stopPropagation","ret","divider","disabled","action","title","console","_contextMenu","EdgeContextMenu","treeDesigner","_this","_possibleConstructorReturn","_getPrototypeOf","push","injectDecisionNode","injectChanceNode","_sdModel","MainContextMenu","mousePosition","newNode","domain","DecisionNode","addNode","ChanceNode","newText","Text","addText","pasteToNewLocation","copiedNodes","selectAllNodes","clearSelection","Point","mouse","svg","move","getMainGroupTranslation","NodeContextMenu","operationsForObject","copyMenuItem","selectNode","isNodeSelected","copySelectedNodes","cutMenuItem","cutSelectedNodes","pasteMenuItem","pasteToNode","folded","deleteMenuItem","removeSelectedNodes","TerminalNode","$TYPE","addNodeConversionOptions","addDecisionNode","addChanceNode","addTerminalNode","selectSubTree","foldSubtree","operations","forEach","op","performOperation","canPerform","conversionOptions","getNodeConversionOptions","options","allAllowedTypes","childEdges","$parent","filter","getNodeConversionOption","typeToConvertTo","convertNode","TextContextMenu","selectText","removeSelectedTexts","D3Extensions","prototype","insertSelector","selector","appendSelector","selectOrInsert","operation","selectorParts","split","shift","selectorModifier","selectorItem","insertOrAppendSelector","empty","_d3Dispatch","Object","keys","defineProperty","enumerable","_d3Scale","_d3Selection","_d3Shape","_d3Drag","_d3Brush","_d3Array","_d3Hierarchy","_d3TimeFormat","contextMenu","main","paste","copy","cut","delete","convert","decision","chance","terminal","selectSubtree","fold","unfold","flipSubtree","edge","validation","incompletePath","probabilityDoNotSumUpTo1","invalidProbability","invalidPayoff","growl","brushDisabled","brushEnabled","payoff","default","named","aggregatedPayoff","probabilityToEnter","probability","payoffsTransformation","_i18next","en","pl","it","de","fr","lng","language","resources","translation","$instance","createInstance","fallbackLng","err","opt","_d3Extensions","hasOwnProperty","_exportNames","_treeDesigner","_appUtils","_tooltip","_d","extend","_circle","_interopRequireDefault","_triangle","Layout","config","nodeTypeToSymbol","symbolSquare","onAutoLayoutChanged","nodeTypeOrder","treeMargin","targetSymbolSize","nodeSeparation","b","nodeSymbolSize","sort","childNode","location","isManualLayout","autoLayout","moveNodeToEmptyPlace","redraw","MANUAL_LAYOUT_NAME","getNodeMinX","getNodeMinY","gridWidth","$linePoints","redrawIfChanged","findCollidingNode","find","nodesSortedByX","nodeSize","nodes","slice","colidingNode","stepX","stepY","changed","newLocation","moveTo","_fireOnAutoLayoutChangedCallbacks","path","nodeSymbol","symbol","size","id","each","box","getBBox","min","set","setHangingPosition","fontSize","getFontSize","items","displayValue","isArray","aggregatedPayoffs","line","dX","sign","slantStartXOffset","slantWidth","edgeSlantWidthMax","point1","point2","point3","point4","datum","len","previousSibling","childNodes","minX","bb","getTextD3Selection","minY","Number","MAX_SAFE_INTEGER","getMinMarginBetweenNodes","$hidden","withoutStateSaving","saveState","onUndo","setGridWidth","onRedo","update","gridHeight","setGridHeight","setNodeSize","fitNodesInPlottingRegion","getRoots","setEdgeSlantWidthMax","newLayout","currentLayout","prevTreeMaxY","layout","root","hierarchy","map","cluster","tree","separation","maxY","pivot","limit","limitNodePositioning","backupNodeLocation","maxX","getNodeMaxX","revertX","$location","updateNodePosition","texts","limitTextPositioning","getTextMinX","getTextMaxX","getTextMinY","updateTextPosition","isHidden","NodeDragHandler","stateSnapshot","drag","subject","getTranslation","dragStarted","onDrag","dragEnded","ignoreDrag","ignoredDrag","createStateSnapshot","hide","selectedNodes","getSelectedNodes","prevDragEvent","dragEventCount","draggedNode","saveStateFromSnapshot","moveNodes","redrawEdges","updatePlottingRegionSize","pi","PI","draw","context","dist","bezierCurveTo","lineTo","closePath","templateName","variables","compiled","template","imports","include","v","props","s","styleProp","styleName","variableName","clazz","treeDesignerSelector","treeDesignerStyles","styleRule","nodeSelector","edgeSelector","TextDragHandler","draggedText","moveTexts","Tooltip","xOffset","yOffset","getContainer","updatePosition","target","htmlOrFn","isFunction","show","_mainContextMenu","_nodeContextMenu","_layout","_nodeDragHandler","_textDragHandler","_textContextMenu","_edgeContextMenu","Hammer","TreeDesignerConfig","custom","scale","fontFamily","fontWeight","fontStyle","strokeWidth","optimal","stroke","label","color","negativeColor","fill","selected","description","readOnly","disableAnimations","forceFullEdgeRedraw","hideLabels","hidePayoffs","hideProbabilities","raw","payoffNumberFormatter","probabilityNumberFormatter","onNodeSelected","onEdgeSelected","onTextSelected","onSelectionCleared","object","Promise","resolve","payoffNames","maxPayoffsToDisplay","TreeDesigner","dataModel","setConfig","initContainer","init","updateCustomStyles","initSvg","initLayout","initI18n","initBrush","initEdgeMarkers","initMainContextMenu","initNodeContextMenu","initEdgeContextMenu","initNodeDragHandler","initTextDragHandler","initTextContextMenu","nodeDragHandler","textDragHandler","withTransitions","redrawDiagramTitle","redrawDiagramDescription","updateScale","updateMargin","transitionPrev","redrawNodes","redrawFloatingTexts","updateValidationMessages","computeAvailableSpace","wrapperGroup","mainGroup","mc","Manager","touchAction","add","Press","pointerType","Pinch","disableBrush","waitForFinalEvent","enableBrush","group","topMargin","diagramTitle","diagramDescription","getTitleGroupHeight","clone","setMargin","setScale","containerIdOrElem","trim","startsWith","_parents","svgWidth","svgHeight","mainGroupBox","newSvgWidth","newSvgHeight","updateBrushExtent","exit","nodesEnter","labelEnter","payoffEnter","indicatorEnter","aggregatedPayoffEnter","probabilityToEnterEnter","nodesMerge","merge","isOptimal","nodesMergeT","drawNodeSymbol","nodeLabelPosition","labelMergeT","updateTextLines","payoffTspans","item","payoffTspansM","val","isNaN","attachPayoffTooltip","payoffT","nodePayoffPosition","aggregatedPayoffTspans","aggregatedPayoffTspansM","aggregatedPayoffT","nodeAggregatedPayoffPosition","attach","probabilityToEnterT","nodeProbabilityToEnterPosition","indicator","nodeIndicatorPosition","nodeContextMenu","cancelDrag","button","nodeUnfoldButtonPosition","payoffFiledName","value","number","lines","reverse","tspans","l","edgesContainer","edges","edgesEnter","probabilityEnter","edgesMerge","optimalClassName","edgesMergeT","edgeLineD","selectEdge","edgeLabelPosition","_","displayPayoff","payoffTextT","edgePayoffPosition","displayProbability","probabilityMerge","probabilityMergeT","edgeProbabilityPosition","raise","edgeContextMenu","POINTER_TOUCH","textsEnter","textsMerge","textsMergeT","replaceUrls","escapeHtml","textContextMenu","_this2","validationResults","validationResult","isValid","getOwnPropertyNames","objectIdToError","errors","nodeSelection","getNodeD3SelectionById","tooltipHtml","getValidationMessage","initArrowMarker","brush","extent","brushContainer","hoveredEdge","mainGroupTranslation","offset","m","mgt","closest","cp","closestPoint","invert","mainContextMenu","getNewChildLocation","injectNode","getInjectedNodeLocation","removeNode","removeNodes","selectedTexts","getSelectedTexts","removeTexts","notClearPrevSelection","cloneSubtree","copyNode","selectedRoots","findSubtreeRoots","copyNodes","_this3","_this4","nodesToAttach","toAttach","attached","attachSubtree","getAllDescendantNodes","_this5","then","getAllDescendantEdges","_this6","updateVisibility","getNodeD3Selection","getTextD3SelectionById","_this7","visibleOnly","selectedVisible","allSelected","apply","_toConsumableArray","descendants","_this8","clearSelectionBeforeSelect","skipCallback","_this9","titleValue","titleContainer","marginTop","desc","descriptionValue","withMargins","h","_index"],"mappings":"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","file":"sd-tree-designer.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import * as d3 from \"./d3\";\nimport {Templates} from \"./templates\";\nimport {i18n} from \"./i18n/i18n\";\nimport {Utils} from \"sd-utils\";\n\nexport class AppUtils {\n\n    static sanitizeHeight = function (height, container) {\n        return (height || parseInt(container.style('height'), 10) || 400);\n    };\n\n    static sanitizeWidth = function (width, container) {\n        return (width || parseInt(container.style('width'), 10) || 960);\n    };\n\n    static availableHeight = function (height, container, margin) {\n        return Math.max(0, AppUtils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n    };\n\n    static availableWidth = function (width, container, margin) {\n        return Math.max(0, AppUtils.sanitizeWidth(width, container) - margin.left - margin.right);\n    };\n\n    //places textString in textObj, adds an ellipsis if text can't fit in width\n    static placeTextWithEllipsis(textD3Obj, textString, width) {\n        var textObj = textD3Obj.node();\n        textObj.textContent = textString;\n\n        var margin = 0;\n        var ellipsisLength = 9;\n        //ellipsis is needed\n        if (textObj.getComputedTextLength() > width + margin) {\n            for (var x = textString.length - 3; x > 0; x -= 1) {\n                if (textObj.getSubStringLength(0, x) + ellipsisLength <= width + margin) {\n                    textObj.textContent = textString.substring(0, x) + \"...\";\n                    return true;\n                }\n            }\n            textObj.textContent = \"...\"; //can't place at all\n            return true;\n        }\n        return false;\n    }\n\n    static placeTextWithEllipsisAndTooltip(textD3Obj, textString, width, tooltip) {\n        var ellipsisPlaced = AppUtils.placeTextWithEllipsis(textD3Obj, textString, width);\n        if (ellipsisPlaced && tooltip) {\n            textD3Obj.on(\"mouseover\", function (d) {\n                tooltip.transition()\n                    .duration(200)\n                    .style(\"opacity\", .9);\n                tooltip.html(textString)\n                    .style(\"left\", (d3.event.pageX + 5) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            });\n\n            textD3Obj.on(\"mouseout\", function (d) {\n                tooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0);\n            });\n        }\n\n    }\n\n    static getFontSize(element) {\n        return window.getComputedStyle(element, null).getPropertyValue(\"font-size\");\n    }\n\n    static getTranslation(transform) {\n        // Create a dummy g for calculation purposes only. This will never\n        // be appended to the DOM and will be discarded once this function\n        // returns.\n        var g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n\n        // Set the transform attribute to the provided string value.\n        g.setAttributeNS(null, \"transform\", transform);\n\n        // consolidate the SVGTransformList containing all transformations\n        // to a single SVGTransform of type SVG_TRANSFORM_MATRIX and get\n        // its SVGMatrix.\n        var matrix = g.transform.baseVal.consolidate().matrix;\n\n        // As per definition values e and f are the ones for the translation.\n        return [matrix.e, matrix.f];\n    }\n\n\n    static closestPoint(pathNode, point) {\n        var pathLength = pathNode.getTotalLength(),\n            precision = 8,\n            best,\n            bestLength,\n            bestDistance = Infinity;\n\n        // linear scan for coarse approximation\n        for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n            if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n                best = scan, bestLength = scanLength, bestDistance = scanDistance;\n            }\n        }\n\n        // binary search for precise estimate\n        precision /= 2;\n        while (precision > 0.5) {\n            var before,\n                after,\n                beforeLength,\n                afterLength,\n                beforeDistance,\n                afterDistance;\n            if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n                best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n            } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n                best = after, bestLength = afterLength, bestDistance = afterDistance;\n            } else {\n                precision /= 2;\n            }\n        }\n\n        best = [best.x, best.y];\n        best.distance = Math.sqrt(bestDistance);\n        return best;\n\n        function distance2(p) {\n            var dx = p.x - point[0],\n                dy = p.y - point[1];\n            return dx * dx + dy * dy;\n        }\n    }\n\n    static growl(message, type='info', position='right', time = 2000){\n        var html = Templates.get('growl', {message:message, type:type})\n\n        var g = d3.select('body').selectOrAppend('div.sd-growl-list.'+position).append('div').html(html);\n        setTimeout(function(){\n            g.remove();\n        }, time)\n    }\n\n\n    static createElement(tag, attribs, parent) {\n        var el = document.createElement(tag);\n\n        if (attribs) {\n            AppUtils.deepExtend(el, attribs);\n        }\n        if (parent) {\n            parent.appendChild(el);\n        }\n        return el;\n    };\n\n    static removeElement(element) {\n        element.parentNode.removeChild(element);\n    }\n\n    static replaceUrls(text){\n        if(!text){\n            return text;\n        }\n        var urlRegexp = /((ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?)/\n\n        return text.replace(urlRegexp, '<a href=\"$1\" target=\"_blank\">$1</a>');\n    }\n\n    static escapeHtml(html)\n    {\n        var text = document.createTextNode(html);\n        var div = document.createElement('div');\n        div.appendChild(text);\n        return div.innerHTML;\n    }\n\n    static dispatchHtmlEvent(element, name){\n        if (\"createEvent\" in document) {\n            var evt = document.createEvent(\"HTMLEvents\");\n            evt.initEvent(name, false, true);\n            element.dispatchEvent(evt);\n        }\n        else\n            element.fireEvent(\"on\"+name);\n    }\n\n    static dispatchEvent(name, data){\n        var event;\n        try{\n            event = new  CustomEvent(name,{ 'detail': data });\n        }catch (e){ //IE\n            event = document.createEvent('CustomEvent');\n            event.initCustomEvent(name, false, false, data);\n        }\n        document.dispatchEvent(event);\n    }\n\n    static getValidationMessage(error){\n        if(Utils.isString(error)){\n            error = {name: error};\n        }\n        var key = 'validation.' + error.name;\n        return i18n.t(key, error.data);\n    }\n\n    static hide(selection){\n        selection.classed('sd-hidden', true);\n    }\n\n    static show(selection, show=true){\n        selection.classed('sd-hidden', !show);\n    }\n\n\n\n    static isHidden(el, exact = true) {\n        if(!el){\n            return true;\n        }\n        if(exact){\n            var style = window.getComputedStyle(el);\n            return (style.display === 'none')\n        }\n        return (el.offsetParent === null)\n    }\n\n    static getJSON(url, callback) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('get', url, true);\n        xhr.responseType = 'json';\n        xhr.onload = function () {\n            var status = xhr.status;\n            if (status == 200) {\n                callback(xhr.response, null);\n            } else {\n                callback(null, status);\n            }\n        };\n        xhr.send();\n    }\n}\n","import * as d3 from '../d3'\n\n/*based on:\n * github.com/patorjk/d3-context-menu */\n\nexport class ContextMenu {\n    openCallback;\n    closeCallback;\n\n    constructor(menu, opts) {\n        var self = this;\n\n        if (typeof opts === 'function') {\n            self.openCallback = opts;\n        } else {\n            opts = opts || {};\n            self.openCallback = opts.onOpen;\n            self.closeCallback = opts.onClose;\n        }\n\n        // create the div element that will hold the context menu\n        d3.selectAll('.d3-context-menu').data([1])\n            .enter()\n            .append('div')\n            .attr('class', 'd3-context-menu');\n\n        // close menu\n        d3.select('body').on('click.d3-context-menu', function () {\n            d3.select('.d3-context-menu').style('display', 'none');\n            if (self.closeCallback) {\n                self.closeCallback();\n            }\n        });\n\n        // this gets executed when a contextmenu event occurs\n        return function (data, index) {\n            var elm = this;\n\n            d3.selectAll('.d3-context-menu').html('');\n            var list = d3.selectAll('.d3-context-menu')\n                .on('contextmenu', function (d) {\n                    d3.select('.d3-context-menu').style('display', 'none');\n                    d3.event.preventDefault();\n                    d3.event.stopPropagation();\n                })\n                .append('ul');\n            list.selectAll('li').data(typeof menu === 'function' ? menu(data) : menu).enter()\n                .append('li')\n                .attr('class', function (d) {\n                    var ret = '';\n                    if (d.divider) {\n                        ret += ' is-divider';\n                    }\n                    if (d.disabled) {\n                        ret += ' is-disabled';\n                    }\n                    if (!d.action) {\n                        ret += ' is-header';\n                    }\n                    return ret;\n                })\n                .html(function (d) {\n                    if (d.divider) {\n                        return '<hr>';\n                    }\n                    if (!d.title) {\n                        console.error('No title attribute set. Check the spelling of your options.');\n                    }\n                    return (typeof d.title === 'string') ? d.title : d.title(data);\n                })\n                .on('click', function (d, i) {\n                    if (d.disabled) return; // do nothing if disabled\n                    if (!d.action) return; // headers have no \"action\"\n                    d.action(elm, data, index);\n                    d3.select('.d3-context-menu').style('display', 'none');\n\n                    if (self.closeCallback) {\n                        self.closeCallback();\n                    }\n                });\n\n            // the openCallback allows an action to fire before the menu is displayed\n            // an example usage would be closing a tooltip\n            if (self.openCallback) {\n                if (self.openCallback(data, index) === false) {\n                    return;\n                }\n            }\n\n            // display context menu\n            d3.select('.d3-context-menu')\n                .style('left', (d3.event.pageX - 2) + 'px')\n                .style('top', (d3.event.pageY - 2) + 'px')\n                .style('display', 'block');\n\n            d3.event.preventDefault();\n            d3.event.stopPropagation();\n        };\n    };\n\n    static hide() {\n        d3.select('.d3-context-menu').style('display', 'none');\n    }\n\n}\n","import {ContextMenu} from './context-menu'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class EdgeContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var menu = function (d) {\n\n            var menu = [];\n\n            menu.push({\n                title: i18n.t('contextMenu.edge.injectDecisionNode'),\n                action: function (elm, d, i) {\n                    treeDesigner.injectDecisionNode(d)\n                }\n            });\n            menu.push({\n                title: i18n.t('contextMenu.edge.injectChanceNode'),\n                action: function (elm, d, i) {\n                    treeDesigner.injectChanceNode(d)\n                }\n            });\n\n\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {domain as model} from 'sd-model'\nimport * as d3 from '../d3'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class MainContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var mousePosition = null;\n        var menu = function (d) {\n\n            var menu = [];\n            menu.push({\n                title: i18n.t('contextMenu.main.addDecisionNode'),\n                action: function (elm, d, i) {\n                    var newNode = new model.DecisionNode(mousePosition);\n                    treeDesigner.addNode(newNode)\n                }\n            });\n            menu.push({\n                title: i18n.t('contextMenu.main.addChanceNode'),\n                action: function (elm, d, i) {\n                    var newNode = new model.ChanceNode(mousePosition);\n                    treeDesigner.addNode(newNode)\n                }\n            });\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.main.addText'),\n                action: function (elm, d, i) {\n                    var newText = new model.Text(mousePosition);\n                    treeDesigner.addText(newText);\n                },\n\n            });\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.main.paste'),\n                action: function (elm, d, i) {\n                    treeDesigner.pasteToNewLocation(mousePosition);\n                },\n                disabled: !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\n\n            });\n            menu.push({divider: true});\n\n            menu.push({\n                title: i18n.t('contextMenu.main.selectAllNodes'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectAllNodes();\n                }\n            });\n            return menu;\n        };\n\n        super(menu, {onOpen: () => {\n            treeDesigner.clearSelection();\n            mousePosition = new model.Point(d3.mouse(treeDesigner.svg.node())).move(treeDesigner.getMainGroupTranslation(true));\n\n        }});\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {domain as model} from 'sd-model'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class NodeContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner, operationsForObject) {\n        var menu = function (d) {\n\n            var copyMenuItem = {\n                title: i18n.t('contextMenu.node.copy'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.copySelectedNodes();\n                }\n            };\n            var cutMenuItem = {\n                title: i18n.t('contextMenu.node.cut'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.cutSelectedNodes();\n                }\n            };\n            var pasteMenuItem = {\n                title: i18n.t('contextMenu.node.paste'),\n                action: function (elm, d, i) {\n                    treeDesigner.pasteToNode(d);\n                },\n                disabled: d.folded || !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\n\n            };\n            var deleteMenuItem = {\n                title: i18n.t('contextMenu.node.delete'),\n                action: function (elm, d, i) {\n\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.removeSelectedNodes();\n\n                }\n            };\n\n            var menu = [];\n            if (d.type == model.TerminalNode.$TYPE) {\n                menu = [copyMenuItem, cutMenuItem, deleteMenuItem];\n                NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\n                return menu;\n            }\n\n            if(!d.folded){\n                menu.push({\n                    title: i18n.t('contextMenu.node.addDecisionNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addDecisionNode(d)\n                    }\n                });\n                menu.push({\n                    title: i18n.t('contextMenu.node.addChanceNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addChanceNode(d)\n                    }\n                });\n                menu.push({\n                    title: i18n.t('contextMenu.node.addTerminalNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addTerminalNode(d)\n                    }\n                });\n                menu.push({divider: true});\n            }\n\n            menu.push(copyMenuItem);\n            menu.push(cutMenuItem);\n            menu.push(pasteMenuItem);\n            menu.push(deleteMenuItem);\n\n            NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.node.selectSubtree'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectSubTree(d, true);\n                }\n            });\n\n            if(!d.folded){\n                menu.push({\n                    title: i18n.t('contextMenu.node.fold'),\n                    action: function (elm, d, i) {\n                        treeDesigner.foldSubtree(d);\n                    }\n                });\n            }else{\n                menu.push({\n                    title: i18n.t('contextMenu.node.unfold'),\n                    action: function (elm, d, i) {\n                        treeDesigner.foldSubtree(d, false);\n                    }\n                });\n            }\n\n            if(operationsForObject){\n                var operations = operationsForObject(d);\n                if(operations.length) {\n                    menu.push({divider: true});\n                    operations.forEach(op=>{\n                        menu.push({\n                            title: i18n.t('contextMenu.node.'+op.name),\n                            action: function (elm, d, i) {\n                                treeDesigner.performOperation(d, op);\n                            },\n                            disabled: !op.canPerform(d)\n                        });\n                    })\n                }\n            }\n\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n\n    static addNodeConversionOptions(d, menu, treeDesigner){\n        var conversionOptions = NodeContextMenu.getNodeConversionOptions(d, treeDesigner);\n        if(conversionOptions.length){\n            menu.push({divider: true});\n            conversionOptions.forEach(o=>menu.push(o));\n\n        }\n    }\n\n    static getNodeConversionOptions(d, treeDesigner){\n        var options = [];\n\n        if(d.folded){\n            return [];\n        }\n\n        var allAllowedTypes = [model.DecisionNode.$TYPE, model.ChanceNode.$TYPE, model.TerminalNode.$TYPE];\n\n        if(!d.childEdges.length && d.$parent){\n            allAllowedTypes.filter(t=>t!==d.type).forEach(type=>{\n                options.push(NodeContextMenu.getNodeConversionOption(type, treeDesigner))\n            })\n        }else{\n            if(d instanceof model.DecisionNode){\n                options.push(NodeContextMenu.getNodeConversionOption(model.ChanceNode.$TYPE, treeDesigner))\n            }else{\n                options.push(NodeContextMenu.getNodeConversionOption(model.DecisionNode.$TYPE, treeDesigner))\n            }\n        }\n        return options;\n    }\n\n    static getNodeConversionOption(typeToConvertTo, treeDesigner){\n        return {\n            title: i18n.t('contextMenu.node.convert.'+typeToConvertTo),\n            action: function (elm, d, i) {\n                treeDesigner.convertNode(d, typeToConvertTo);\n            },\n        }\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class TextContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var menu = function (d) {\n\n\n            var deleteMenuItem = {\n                title: i18n.t('contextMenu.text.delete'),\n                action: function (elm, d, i) {\n\n                    treeDesigner.selectText(d, true, true);\n                    treeDesigner.removeSelectedTexts()\n\n                }\n            };\n            var menu = [];\n            menu.push(deleteMenuItem);\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import * as d3 from './d3'\n\nexport class D3Extensions {\n\n    static extend() {\n\n        d3.selection.prototype.enter.prototype.insertSelector =\n            d3.selection.prototype.insertSelector = function (selector, before) {\n                return D3Extensions.insertSelector(this, selector, before);\n            };\n\n\n        d3.selection.prototype.enter.prototype.appendSelector =\n            d3.selection.prototype.appendSelector = function (selector) {\n                return D3Extensions.appendSelector(this, selector);\n            };\n\n        d3.selection.prototype.enter.prototype.selectOrAppend =\n            d3.selection.prototype.selectOrAppend = function (selector) {\n                return D3Extensions.selectOrAppend(this, selector);\n            };\n\n        d3.selection.prototype.enter.prototype.selectOrInsert =\n            d3.selection.prototype.selectOrInsert = function (selector, before) {\n                return D3Extensions.selectOrInsert(this, selector, before);\n            };\n\n\n    }\n\n    static insertOrAppendSelector(parent, selector, operation, before) {\n\n        var selectorParts = selector.split(/([\\.\\#])/);\n        var element = parent[operation](selectorParts.shift(), before);//\":first-child\"\n\n        while (selectorParts.length > 1) {\n            var selectorModifier = selectorParts.shift();\n            var selectorItem = selectorParts.shift();\n            if (selectorModifier === \".\") {\n                element = element.classed(selectorItem, true);\n            } else if (selectorModifier === \"#\") {\n                element = element.attr('id', selectorItem);\n            }\n        }\n        return element;\n    }\n\n    static insertSelector(parent, selector, before) {\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"insert\", before);\n    }\n\n    static appendSelector(parent, selector) {\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"append\");\n    }\n\n    static selectOrAppend(parent, selector, element) {\n        var selection = parent.select(selector);\n        if (selection.empty()) {\n            if (element) {\n                return parent.append(element);\n            }\n            return D3Extensions.appendSelector(parent, selector);\n\n        }\n        return selection;\n    };\n\n    static selectOrInsert(parent, selector, before) {\n        var selection = parent.select(selector);\n        if (selection.empty()) {\n            return D3Extensions.insertSelector(parent, selector, before);\n        }\n        return selection;\n    };\n}\n","export * from 'd3-dispatch';\nexport * from 'd3-scale';\nexport * from 'd3-selection';\nexport * from 'd3-shape'\nexport * from 'd3-drag';\nexport * from 'd3-brush'\nexport * from 'd3-array'\nexport * from 'd3-hierarchy'\nexport * from 'd3-time-format'\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\n            \"addText\": \"Text hinzufügen \",\n            \"paste\": \"Einfügen\",\n            \"selectAllNodes\": \"Alle Knoten auswählen\"\n        },\n        \"node\":{\n            \"copy\": \"Kopieren\",\n            \"cut\": \"Ausschneiden\",\n            \"paste\": \"Einfügen\",\n            \"delete\": \"Löschen\",\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\n            \"addTerminalNode\": \"Endknotten hinzufügen\",\n            \"convert\":{\n                \"decision\": \"Als Entscheidungsknoten\",\n                \"chance\": \"Als Zufall Knoten\",\n                \"terminal\": \"Als Endknoten\"\n            },\n            \"selectSubtree\": \"Teilbaum wählen\",\n            \"fold\": \"Teilbaum falten\",\n            \"unfold\": \"Teilbaum entfalten\",\n\t\t\t\n            \"flipSubtree\": \"Teilbaum umdrehen\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Entscheidungsknoten Injizieren\",\n            \"injectChanceNode\": \"Zufall Knoten Injizieren\"\n        },\n        \"text\":{\n            \"delete\": \"Löschen\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Pfad, der nicht mit dem Endknoten endet\",\n        \"probabilityDoNotSumUpTo1\": \"Die Summe der Wahrscheinlichkeiten ist nicht gleich 1\",\n        \"invalidProbability\": \"Ungültige Wahrscheinlichkeit im Zweig #{{number}}\",\n        \"invalidPayoff\": \"Ungültige Auszahlung in Zweig #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Auswahlbürste deaktiviert\",\n        \"brushEnabled\": \"Auswahlbürste aktiviert\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Auszahlung {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Aggregierte Auszahlung {{number}}\",\n                \"named\": \"Aggregierte {{name}}\"\n            },\n            \"probabilityToEnter\": \"Wahrscheinlichkeit\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Auszahlung {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Wahrscheinlichkeit: {{value}}\"\n        }\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Add Decision Node\",\n            \"addChanceNode\": \"Add Chance Node\",\n            \"addText\": \"Add Text\",\n            \"paste\": \"Paste\",\n            \"selectAllNodes\": \"Select all nodes\"\n        },\n        \"node\":{\n            \"copy\": \"Copy\",\n            \"cut\": \"Cut\",\n            \"paste\": \"Paste\",\n            \"delete\": \"Delete\",\n            \"addDecisionNode\": \"Add Decision Node\",\n            \"addChanceNode\": \"Add Chance Node\",\n            \"addTerminalNode\": \"Add Terminal Node\",\n            \"convert\":{\n                \"decision\": \"As Decision Node\",\n                \"chance\": \"As Chance Node\",\n                \"terminal\": \"As Terminal Node\"\n            },\n            \"selectSubtree\": \"Select subtree\",\n            \"fold\": \"Fold subtree\",\n            \"unfold\": \"Unfold subtree\",\n            \"flipSubtree\": \"Flip subtree\",\n            \"payoffsTransformation\": \"Transform payoffs\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Inject Decision Node\",\n            \"injectChanceNode\": \"Inject Chance Node\"\n        },\n        \"text\":{\n            \"delete\": \"Delete\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Path not ending with terminal node\",\n        \"probabilityDoNotSumUpTo1\": \"Probabilities do not sum up to 1\",\n        \"invalidProbability\": \"Invalid probability in edge #{{number}}\",\n        \"invalidPayoff\": \"Invalid payoff in edge #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Selection brush disabled\",\n        \"brushEnabled\": \"Selection brush enabled\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Payoff {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Aggregated Payoff {{number}}\",\n                \"named\": \"Aggregated {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probability to enter\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Payoff {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probability: {{value}}\"\n        }\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Ajouter noud de décision\",\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\n            \"addText\": \"Ajouter du texte\",\n            \"paste\": \"Coller\",\n            \"selectAllNodes\": \"Sélectionner tous les nouds\"\n        },\n        \"node\":{\n            \"copy\": \"Copie\",\n            \"cut\": \"Couper\",\n            \"paste\": \"Coller\",\n            \"delete\": \"Effacer\",\n            \"addDecisionNode\": \"Ajouter noud de décision\",\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\n            \"addTerminalNode\": \"Ajouter un noeud terminal\",\n            \"convert\":{\n                \"decision\": \"Comme noud de décision\",\n                \"chance\": \"Comme noud aléatoire\",\n                \"terminal\": \"Comme un noeud terminal\"\n            },\n            \"selectSubtree\": \"Sélectionner une sous-arborescence\",\n            \"fold\": \"Plier sous-arbre\",\n            \"unfold\": \"Déplier arbre sous-arbre\",\n            \"flipSubtree\": \"Basculer sous-arbre\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Injecter un noeud de décision\",\n            \"injectChanceNode\": \"Injecter un noeud de chance\"\n        },\n        \"text\":{\n            \"delete\": \"Effacer\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Parcours non terminé par noeud terminal\",\n        \"probabilityDoNotSumUpTo1\": \"La somme des probabilités n'est pas 1 ou plus\",\n        \"invalidProbability\": \"Probabilité invalide - le bord #{{number}}\",\n        \"invalidPayoff\": \"Avantage invalide - le bord #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Brosse de sélection désactivée\",\n        \"brushEnabled\": \"Brosse de sélection activée\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Avantage {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Avantage agrégé {{number}}\",\n                \"named\": \"Agrégé  {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probabilité d'entrée\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Avantage {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probabilité: {{value}}\"\n        }\n    }\n}\n","import i18next from 'i18next';\nimport * as en from './en.json'\nimport * as pl from './pl.json'\nimport * as it from './it.json'\nimport * as de from './de.json'\nimport * as fr from './fr.json'\n\nexport class i18n{\n\n    static $instance;\n    static language;\n\n    static init(lng){\n        i18n.language = lng;\n        let resources = {\n            en: {\n                translation: en\n            },\n            pl: {\n                translation: pl\n            },\n            it: {\n                translation: it\n            },\n            de: {\n                translation: de\n            },\n            fr: {\n                translation: fr\n            }\n        };\n        i18n.$instance = i18next.createInstance({\n            lng: lng,\n            fallbackLng: 'en',\n            resources: resources\n        }, (err, t) => {\n        });\n    }\n\n    static t(key, opt){\n        return i18n.$instance.t(key, opt)\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\n            \"addText\": \"Aggiungi testo\",\n            \"paste\": \"Incolla\",\n            \"selectAllNodes\": \"Seleziona tutti i nodi\"\n        },\n        \"node\":{\n            \"copy\": \"Copia\",\n            \"cut\": \"Taglia\",\n            \"paste\": \"Incolla\",\n            \"delete\": \"Cancella\",\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\n            \"addTerminalNode\": \"Aggiungi un nodo terminale\",\n            \"convert\":{\n                \"decision\": \"Come Decision Node\",\n                \"chance\": \"Come Chance Node\",\n                \"terminal\": \"Come Terminal Node\"\n            },\n            \"selectSubtree\": \"Seleziona Sotto-albero\",\n            \"fold\": \"Piega sotto-albero\",\n            \"unfold\": \"Dispiegarsi sotto-albero\",\t\t\t\n            \"flipSubtree\": \"Ribalta sotto-albero\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Inietta nodo di decisione\",\n            \"injectChanceNode\": \"Inietta nodo opportunità\"\n        },\n        \"text\":{\n            \"delete\": \"Cancella\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Percorso senza nodo terminale\",\n        \"probabilityDoNotSumUpTo1\": \"La somma delle probabilità è diversa da 1\",\n        \"invalidProbability\": \"Probabilità non valida - bordo #{{number}}\",\n        \"invalidPayoff\": \"Saldo non valido - bordo #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Selezione pennello disabilitata\",\n        \"brushEnabled\": \"Selezione pennello abilitata\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Saldo {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Saldo aggregato {{number}}\",\n                \"named\": \"Aggregato {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probabilità da inserire\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Saldo {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probabilità: {{value}}\"\n        }\n    }\n}\n","module.exports={\n\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\n            \"addText\": \"Dodaj Tekst\",\n            \"paste\": \"Wklej\",\n            \"selectAllNodes\": \"Zaznacz wszystkie węzły\"\n        },\n        \"node\":{\n            \"copy\": \"Kopiuj\",\n            \"cut\": \"Wytnij\",\n            \"paste\": \"Wklej\",\n            \"delete\": \"Usuń\",\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\n            \"addTerminalNode\": \"Dodaj Węzeł Końcowy\",\n            \"convert\":{\n                \"decision\": \"Jako Węzeł Decyzyjny\",\n                \"chance\": \"Jako Węzeł Losowy\",\n                \"terminal\": \"Jako Węzeł Końcowy\"\n            },\n            \"selectSubtree\": \"Zaznacz poddrzewo\",\n            \"fold\": \"Zwiń poddrzewo\",\n            \"unfold\": \"Rozwiń poddrzewo\",\n            \"flipSubtree\": \"Przewróć poddrzewo\",\n            \"payoffsTransformation\": \"Przekształć wypłaty\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Wstrzyknij Węzeł Decyzyjny\",\n            \"injectChanceNode\": \"Wstrzyknij Węzeł Losowy\"\n        },\n        \"text\":{\n            \"delete\": \"Usuń\"\n        }\n    },\n\n    \"validation\":{\n        \"incompletePath\": \"Ostatnim węzłem w ścieżce powinien być Węzeł Końcowy\",\n        \"probabilityDoNotSumUpTo1\": \"Prawdopodobieństwa nie sumują sie do 1\",\n        \"invalidProbability\": \"Niepoprawne prawdopodobieństwo na krawędzi #{{number}}\",\n        \"invalidPayoff\": \"Niepoprawna wypłata na krawędzi #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Zaznaczanie wyłączone\",\n        \"brushEnabled\": \"Zaznaczanie włączone\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Wypłata {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Zagregowana wypłata {{number}}\",\n                \"named\": \"Zagregowana {{name}}\"\n            },\n            \"probabilityToEnter\": \"Prawdopodobieństwo wejścia\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Wypłata {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Prawdopodobieństwo: {{value}}\"\n        }\n    }\n}\n","import {D3Extensions} from './d3-extensions'\nD3Extensions.extend();\n\nexport * from './tree-designer'\nexport * from './app-utils'\nexport * from './templates'\nexport * from './tooltip'\nexport * from './d3-extensions'\nexport {default as d3} from './d3'\n\n\n","import {Utils} from 'sd-utils'\nimport {domain as model} from 'sd-model'\nimport * as d3 from './d3'\nimport circleSymbol from './symbols/circle'\nimport triangleSymbol from './symbols/triangle'\nimport {AppUtils} from \"./app-utils\";\n\n/*Tree layout manager*/\nexport class Layout{\n\n    treeDesigner;\n    data;\n    config;\n\n    nodeTypeToSymbol = {\n        'decision': d3.symbolSquare,\n        'chance': circleSymbol,\n        \"terminal\": triangleSymbol\n    };\n\n    static MANUAL_LAYOUT_NAME = 'manual';\n\n\n    onAutoLayoutChanged=[];\n\n    nodeTypeOrder = {\n        'decision' : 0,\n        'chance': 0,\n        'terminal': 1\n    };\n\n    treeMargin = 50;\n    targetSymbolSize={};\n    nodeSeparation = (a, b) => a.parent === b.parent ? 1 : 1.2\n\n    constructor(treeDesigner, data, config){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n        this.config = config;\n\n    }\n\n    update(node){\n        if(node && node.$parent){\n            node.$parent.childEdges.sort((a,b)=>a.childNode.location.y - b.childNode.location.y)\n        }\n        if(!this.isManualLayout()){\n            return this.autoLayout(this.config.type, true);\n        }\n        if(node){\n            this.moveNodeToEmptyPlace(node);\n        }else{\n            this.treeDesigner.redraw(true);\n        }\n    }\n\n    isManualLayout(){\n        return this.config.type === Layout.MANUAL_LAYOUT_NAME;\n    }\n\n    getNewChildLocation(parent){\n        if(!parent){\n            return new model.Point(this.getNodeMinX(), this.getNodeMinY())\n        }\n        var x = parent.location.x + this.config.gridWidth;\n        var y = parent.location.y;\n        if(parent.childEdges.length){\n            y = parent.childEdges[parent.childEdges.length-1].childNode.location.y+1;\n        }\n\n        return new model.Point(x, y)\n    }\n\n    getInjectedNodeLocation(edge){\n\n        var p = edge.$linePoints[2];\n\n        return new model.Point(p[0], p[1])\n    }\n\n    moveNodeToEmptyPlace(node, redrawIfChanged=true){\n        var positionMap = {};\n        var self = this;\n        node.location.x = Math.max(this.getNodeMinX(node), node.location.x);\n        node.location.y = Math.max(this.getNodeMinY(node), node.location.y);\n\n\n        this.nodesSortedByX = this.data.nodes.slice();\n        this.nodesSortedByX.sort((a,b)=>a.location.x - b.location.x);\n\n        function findCollidingNode(node, location){\n            return Utils.find(self.nodesSortedByX, n=>{\n                if(node == n){\n                    return false;\n                }\n\n                var margin = self.config.nodeSize/3;\n                var x = n.location.x;\n                var y = n.location.y;\n\n                return (location.x - margin <= x && location.x + margin >= x\n                    && location.y - margin <= y && location.y + margin >= y)\n            });\n        }\n\n        var stepX = this.config.nodeSize/2;\n        var stepY = this.config.nodeSize+10;\n        var stepXsameParent = 0;\n        var stepYsameParent = 75;\n        var changed = false;\n        var colidingNode;\n        var newLocation = new model.Point(node.location);\n        while(colidingNode = findCollidingNode(node, newLocation)){\n            changed=true;\n            var sameParent = node.$parent && colidingNode.$parent && node.$parent===colidingNode.$parent;\n            if(sameParent){\n                newLocation.move(stepXsameParent, stepYsameParent);\n            }else{\n                newLocation.move(stepX, stepY);\n            }\n        }\n        if(changed){\n            node.moveTo(newLocation.x,newLocation.y, true);\n            if(redrawIfChanged){\n                this.treeDesigner.redraw(true);\n            }\n        }\n    }\n\n    disableAutoLayout(){\n        this.config.type = Layout.MANUAL_LAYOUT_NAME;\n        this._fireOnAutoLayoutChangedCallbacks();\n    }\n\n\n    nodeSymbolSize = {};\n    drawNodeSymbol(path, transition){\n\n        var self = this;\n        var nodeSize = this.config.nodeSize;\n        this.nodeSymbol = d3.symbol().type(d=> self.nodeTypeToSymbol[d.type])\n            .size(d=>self.nodeSymbolSize[d.id] ? Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", 64) : 64);\n\n        path\n            .each(function (d) {\n                var path = d3.select(this);\n                var prev = path.attr(\"d\");\n                if(!prev){\n                    path.attr(\"d\", self.nodeSymbol);\n                }\n                var size = Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\");\n                if(!size){\n                    var box = path.node().getBBox();\n                    var error = Math.min(nodeSize / box.width, nodeSize / box.height);\n                    size = error * error * (self.nodeSymbolSize[d.id]||64);\n                    Utils.set(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", size);\n                }\n                if(transition){\n                    path =  path.transition();\n\n                }else{\n                    self.nodeSymbolSize[d.id] = size;\n                }\n                path.attr(\"d\", self.nodeSymbol);\n                if(transition){\n                    self.nodeSymbolSize[d.id] = size;\n                }\n            });\n    }\n\n    nodeLabelPosition(selection) {\n        return selection\n            .attr('x', 0)\n            .attr('y', -this.config.nodeSize / 2 - 7)\n    }\n\n    nodePayoffPosition(selection) {\n        return Layout.setHangingPosition(selection)\n            .attr('x', 0)\n            .attr('y', this.config.nodeSize / 2 + 7)\n            .attr('text-anchor', 'middle')\n    }\n\n    nodeAggregatedPayoffPosition(selection) {\n        var x = this.config.nodeSize / 2 + 7;\n        var self = this;\n        selection\n            .attr('x', x)\n            .attr('y', function(d){\n                let fontSize = parseInt(AppUtils.getFontSize(this));\n                let items = d.displayValue('aggregatedPayoff');\n                let number = Utils.isArray(items) ? items.filter(it=>it !== undefined).length : 1;\n                if(number>1){\n                    return -this.getBBox().height/2 + fontSize/2;\n                }\n                return -Math.max(2, 1.8* self.config.nodeSize/fontSize);\n            });\n\n        selection.selectAll('tspan').attr('x', x);\n        return selection;\n            // .attr('text-anchor', 'middle')\n            // .attr('dominant-baseline', 'hanging')\n    }\n\n    nodeProbabilityToEnterPosition(selection) {\n        var self = this;\n\n        return Layout.setHangingPosition(selection)\n            .attr('x', this.config.nodeSize / 2 + 7)\n            .attr('y', function(d){\n                let fontSize = parseInt(AppUtils.getFontSize(this));\n                let aggregatedPayoffs = d.displayValue('aggregatedPayoff');\n                let aggregatedPayoffsNumber = Utils.isArray(aggregatedPayoffs) ? aggregatedPayoffs.filter(it=>it !== undefined).length : 1;\n                if(aggregatedPayoffsNumber>1){\n\n                    return fontSize*0.6\n                }\n\n                return Math.max(2, 1.8* self.config.nodeSize/fontSize);\n            })\n            // .attr('text-anchor', 'middle')\n            // .attr('dominant-baseline', 'central')\n    }\n\n    nodeIndicatorPosition(selection) {\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 8)\n            .attr('y', - this.config.nodeSize/2)\n            .attr('dominant-baseline', 'central')\n            .attr('text-anchor', 'middle')\n    }\n\n    nodeUnfoldButtonPosition(selection) {\n\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 5)\n            .attr('y', 0)\n            .attr('dominant-baseline', 'central')\n    }\n\n    edgeLineD(edge){\n        var line = d3.line()\n            .x(d=> d[0])\n            .y(d=> d[1]);\n        // .curve(d3.curveCatmullRom.alpha(0.5));\n\n\n        var parentNode = edge.parentNode;\n        var childNode = edge.childNode;\n\n        var dX = childNode.location.x - parentNode.location.x;\n        var dY = childNode.location.y - parentNode.location.y;\n\n        var sign = dX>=0 ? 1 : -1;\n\n        var slantStartXOffset = Math.min(dX/2, this.config.nodeSize/2+10);\n        var slantWidth = Math.min(this.config.edgeSlantWidthMax, Math.max(dX/2 - slantStartXOffset, 0));\n\n        var point1 = [parentNode.location.x +this.config.nodeSize/2 + 1, parentNode.location.y];\n        var point2 = [Math.max(parentNode.location.x+slantStartXOffset, point1[0]), parentNode.location.y];\n        var point3 = [parentNode.location.x+slantStartXOffset+slantWidth, childNode.location.y];\n        var point4 = [childNode.location.x - (sign*(Math.max(0, Math.min(this.config.nodeSize/2+8, dX/2)))), childNode.location.y];\n        // var point2 = [parentNode.location.x+dX/2-slantWidth/2, parentNode.location.y];\n        // var point3 = [childNode.location.x-(dX/2-slantWidth/2), childNode.location.y];\n\n        edge.$linePoints = [point1, point2, point3, point4];\n        return line(edge.$linePoints);\n    }\n\n    edgePayoffPosition(selection) {\n        Layout.setHangingPosition(selection)\n            .attr('x', d=>d.$linePoints[2][0] + 2)\n            .attr('y', d=>d.$linePoints[2][1] + 7);\n\n        selection.selectAll('tspan').attr('x', function(d){\n            return d3.select(this.parentNode).datum().$linePoints[2][0] + 2\n        });\n        return selection;\n\n    }\n\n    edgeLabelPosition(selection) {\n        return selection\n            .attr('transform', d=>'translate('+(d.$linePoints[2][0] + 2)+','+(d.$linePoints[2][1] - 7)+')')\n            // .attr('x', d=>d.$linePoints[2][0] + 2)\n            // .attr('y', d=>d.$linePoints[2][1] - 7)\n\n    }\n\n    edgeProbabilityPosition(selection) {\n        return Layout.setHangingPosition(selection)\n            .attr('x', function (d) {\n                var len = this.getComputedTextLength();\n                var min = d.$linePoints[2][0] + 2 + this.previousSibling.childNodes[0].getComputedTextLength() + 7 + len;\n                return Math.max(min, d.$linePoints[3][0] - 8);\n            })\n            .attr('y', d=>d.$linePoints[2][1] + 7)\n    }\n\n    getMinMarginBetweenNodes(){\n      return this.config.nodeSize + 30;\n    }\n\n    getTextMinX(d){\n        let minX = 0;\n        if(d){\n            let bb = this.treeDesigner.getTextD3Selection(d).select('text').node().getBBox();\n            if (bb.x < 0) {\n                minX -= bb.x;\n            }\n        }\n        return minX;\n    }\n\n    getTextMinY(d){\n        let minY = 0;\n        if(d){\n            let bb = this.treeDesigner.getTextD3Selection(d).select('text').node().getBBox();\n            if (bb.y < 0) {\n                minY -= bb.y;\n            }\n        }\n        return minY;\n    }\n\n    getTextMaxX(d){\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n\n    getNodeMinX(d){\n        var self = this;\n        if(d && d.$parent){// && !self.isNodeSelected(d.$parent)\n            return d.$parent.location.x + self.getMinMarginBetweenNodes();\n        }\n        return self.config.nodeSize/2;\n    }\n\n    getNodeMinY(d){\n        return this.config.nodeSize/2;\n    }\n\n    getNodeMaxX(d){\n        var self = this;\n\n        if(d && d.childEdges.length){\n            return d3.min(d.childEdges, e=>!e.childNode.$hidden ? e.childNode.location.x : 9999999)-self.getMinMarginBetweenNodes();\n        }\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    setGridWidth(width, withoutStateSaving){\n        var self=this;\n        if(this.config.gridWidth===width){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    gridWidth: self.config.gridWidth\n                },\n                onUndo: (data)=> {\n                    self.setGridWidth(data.gridWidth, true);\n                },\n                onRedo: (data)=> {\n                    self.setGridWidth(width, true);\n                }\n            });\n        }\n\n        this.config.gridWidth=width;\n        this.update();\n    }\n\n    setGridHeight(gridHeight, withoutStateSaving){\n        var self=this;\n        if(this.config.gridHeight===gridHeight){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    gridHeight: self.config.gridHeight\n                },\n                onUndo: (data)=> {\n                    self.setGridHeight(data.gridHeight, true);\n                },\n                onRedo: (data)=> {\n                    self.setGridHeight(gridHeight, true);\n                }\n            });\n        }\n\n        this.config.gridHeight=gridHeight;\n        this.update();\n    }\n\n    setNodeSize(nodeSize, withoutStateSaving){\n        var self=this;\n        if(this.config.nodeSize===nodeSize){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    nodeSize: self.config.nodeSize\n                },\n                onUndo: (data)=> {\n                    self.setNodeSize(data.nodeSize, true);\n                },\n                onRedo: (data)=> {\n                    self.setNodeSize(nodeSize, true);\n                }\n            });\n        }\n\n        this.config.nodeSize=nodeSize;\n        this.update();\n        if(this.isManualLayout()){\n            this.fitNodesInPlottingRegion(self.data.getRoots());\n            this.treeDesigner.redraw(true);\n        }\n    }\n\n    setEdgeSlantWidthMax(width, withoutStateSaving){\n        var self=this;\n        if(this.config.edgeSlantWidthMax===width){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    edgeSlantWidthMax: self.config.edgeSlantWidthMax\n                },\n                onUndo: (data)=> {\n                    self.setEdgeSlantWidthMax(data.edgeSlantWidthMax, true);\n                },\n                onRedo: (data)=> {\n                    self.setEdgeSlantWidthMax(width, true);\n                }\n            });\n        }\n\n        this.config.edgeSlantWidthMax=width;\n        this.treeDesigner.redraw(true);\n    }\n\n    autoLayout(type, withoutStateSaving){\n        var self=this;\n\n\n\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    newLayout: type,\n                    currentLayout: self.config.type\n                },\n                onUndo: (data)=> {\n                    self.config.type = data.currentLayout;\n                    self._fireOnAutoLayoutChangedCallbacks();\n                },\n                onRedo: (data)=> {\n                    self.autoLayout(data.newLayout, true);\n                }\n            });\n        }\n        this.config.type = type;\n        if(!this.data.nodes.length){\n            this._fireOnAutoLayoutChangedCallbacks();\n            return;\n        }\n\n        var prevTreeMaxY = self.getNodeMinY();\n        this.data.getRoots().forEach(r=>{\n            var root = d3.hierarchy(r, d=>{\n                return d.childEdges.filter(e=>!e.$hidden).map(e=>e.childNode);\n            });\n\n            // root.sort((a,b)=>self.nodeTypeOrder[a.data.type]-self.nodeTypeOrder[b.data.type]);\n            root.sort((a,b)=>a.data.location.y - b.data.location.y);\n\n\n            var layout;\n            if(type==='cluster'){\n                layout = d3.cluster();\n            }else{\n                layout = d3.tree();\n            }\n            layout.nodeSize([self.config.gridHeight, self.config.gridWidth]);\n            layout.separation(self.nodeSeparation);\n\n            layout(root);\n            var minY = 999999999;\n            root.each(d=>{\n                minY = Math.min(minY, d.x);\n            });\n\n            var dy = root.x - minY + prevTreeMaxY;\n            var dx = self.getNodeMinX();\n            var maxY=0;\n            root.each(d=>{\n                d.data.location.x = d.y + dx;\n                d.data.location.y = d.x + dy;\n\n                maxY = Math.max(maxY, d.data.location.y);\n            });\n\n            prevTreeMaxY = maxY + self.config.nodeSize+self.treeMargin;\n        });\n\n\n        // this.transition = true;\n        this.treeDesigner.redraw(true);\n        // this.transition = false;\n\n        this._fireOnAutoLayoutChangedCallbacks();\n        return this;\n    }\n\n    fitNodesInPlottingRegion(nodes){\n        var self = this;\n        var topY = d3.min(nodes, n=>n.location.y);\n        var minY = self.getNodeMinY();\n        var dy = topY - minY;\n\n        var minX = d3.min(nodes, n=>n.location.x);\n        var dx = minX - self.getNodeMinX();\n\n        if(dy<0 ||  dx<0){\n            nodes.forEach(n=>n.move(-dx, -dy));\n        }\n    }\n\n    moveNodes(nodes, dx, dy, pivot){\n        var self = this;\n        var limit = self.config.limitNodePositioning;\n        if(limit){\n            if(dx<0){\n                nodes.sort((a,b)=>a.location.x-b.location.x);\n            }else{\n                nodes.sort((a,b)=>b.location.x-a.location.x);\n            }\n        }\n\n\n        var minY = d3.min(nodes, d=>d.location.y);\n        if(minY + dy < self.getNodeMinY()){\n            dy = self.getNodeMinY() - minY;\n        }\n\n        nodes.forEach(d=>{\n            if(limit){\n                Layout.backupNodeLocation(d);\n                var minX = self.getNodeMinX(d);\n                var maxX = self.getNodeMaxX(d);\n\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\n                d.location.y += dy;\n            }else{\n                d.location.x +=dx;\n                d.location.y += dy;\n            }\n\n        });\n\n\n        var revertX = pivot && self.config.limitNodePositioning && (pivot.location.x === pivot.$location.x);\n\n        nodes.forEach(d=>{\n            if(revertX){\n                d.location.x = d.$location.x;\n            }\n            self.treeDesigner.updateNodePosition(d);\n        });\n\n\n    }\n\n    moveTexts(texts, dx, dy){\n        let self = this;\n        let limit = self.config.limitTextPositioning;\n        if(limit){\n            if(dx<0){\n                texts.sort((a,b)=>a.location.x-b.location.x);\n            }else{\n                texts.sort((a,b)=>b.location.x-a.location.x);\n            }\n        }\n\n\n\n        texts.forEach(d=>{\n\n\n\n\n            if(limit){\n                let minX = self.getTextMinX(d);\n                let maxX = self.getTextMaxX(d);\n                let minY = self.getTextMinY(d);\n\n\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\n                d.location.y = Math.max(d.location.y+dy, minY);\n\n            }else{\n                d.location.move(dx, dy);\n            }\n            self.treeDesigner.updateTextPosition(d);\n\n        });\n\n    }\n\n    static backupNodeLocation(node) {\n        node.$location = new model.Point(node.location);\n    }\n\n    _fireOnAutoLayoutChangedCallbacks(){\n        this.onAutoLayoutChanged.forEach(c=>c(this.config.type));\n    }\n\n    static setHangingPosition(selection){\n        // window.setTimeout(function(){\n        //     selection.each(function(){\n        //         var h =  this.getBBox().height;\n        //         d3.select(this).attr('dy', h);\n        //     });\n        // },0);\n\n        if(AppUtils.isHidden(selection.node())){ // setting hanging position of hidden elements fails on firefox\n            return selection;\n        }\n\n\n        selection.each(function(){\n            var h =  this.getBBox().height;\n            d3.select(this).attr('dy', '0.75em');\n        });\n\n        return selection;\n    }\n\n}\n\n\n","import {AppUtils} from './app-utils'\nimport * as d3 from './d3'\nimport {ContextMenu} from './context-menu/context-menu'\n\nexport class NodeDragHandler{\n\n    treeDesigner;\n    data;\n    config;\n\n    drag;\n    stateSnapshot = null;\n\n\n    constructor(treeDesigner, data){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n\n        var self = this;\n        this.drag = d3.drag()\n            .subject(function(d) {\n                if(d==null){\n                    return  {\n                        x: event.x,\n                        y: event.y\n                    };\n                }\n                var t = d3.select(this);\n                return {\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\n                };\n            })\n            .on(\"start\", function(d){\n                self.dragStarted.call(this,d, self)\n            })\n            .on(\"drag\", function (d) {\n                self.onDrag.call(this, d, self);\n            })\n            .on(\"end\", function (d) {\n                self.dragEnded.call(this, d, self);\n            })\n    }\n\n\n    dragStarted(d,self) {\n        if(self.ignoreDrag){\n            self.ignoreDrag=false;\n            self.ignoredDrag=true;\n            return;\n        }\n        self.ignoredDrag=false;\n        self.stateSnapshot = self.data.createStateSnapshot();\n\n        // self.treeDesigner.layout.disableAutoLayout();\n        ContextMenu.hide();\n        var node = d3.select(this);\n        if(!node.classed(\"selected\")){\n            self.treeDesigner.clearSelection();\n        }\n\n        self.treeDesigner.selectNode(d);\n        node.classed(\"selected dragging\", true);\n        self.selectedNodes = self.treeDesigner.getSelectedNodes(true);\n        self.prevDragEvent = d3.event;\n        self.dragEventCount = 0;\n    }\n\n    onDrag(draggedNode, self){\n        if(self.ignoredDrag){\n            return;\n        }\n\n        if(self.dragEventCount===2 && self.stateSnapshot){\n            self.data.saveStateFromSnapshot(self.stateSnapshot); // TODO save only if something has really changed\n            self.stateSnapshot = null;\n        }\n        self.dragEventCount++;\n        if(self.selectedNodes.length>5 && self.dragEventCount%2!==1){\n            return;\n        }\n\n        var dx = d3.event.x - self.prevDragEvent.x;\n        var dy = d3.event.y- self.prevDragEvent.y;\n        self.treeDesigner.layout.moveNodes(self.selectedNodes, dx, dy, draggedNode);\n\n\n        self.prevDragEvent = d3.event;\n        self.treeDesigner.redrawEdges();\n        self.treeDesigner.updatePlottingRegionSize();\n    }\n\n    dragEnded(draggedNode, self){\n        var node = d3.select(this).classed(\"dragging\", false);\n        if(self.ignoredDrag){\n            return;\n        }\n        self.treeDesigner.layout.update(draggedNode)\n    }\n\n    cancelDrag(){\n        this.ignoreDrag = true;\n    }\n\n}\n\n\n","var epsilon = 1e-12;\nvar pi = Math.PI;\nvar halfPi = pi / 2;\nvar tau = 2 * pi;\n\nexport default {\n    /*draw: function(context, size) {\n        var r = Math.sqrt(size / pi);\n        context.moveTo(r, 0);\n        context.arc(0, 0, r, 0, tau);\n    }*/\n    draw: function(context, size) {\n\n        var r = Math.sqrt(size / pi);\n        var dist =0.552284749831 * r;\n\n        context.moveTo(-r, 0)\n        // context.lineTo(2*r, 2*r)\n        // context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\n        context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\n\n        context.bezierCurveTo(dist, -r, r, -dist, r,0);\n\n        context.bezierCurveTo(r, dist, dist, r, 0, r);\n\n        context.bezierCurveTo(-dist, r, -r, dist, -r, 0);\n    }\n};\n","var sqrt3 = Math.sqrt(3);\n\nexport default {\n    draw: function(context, size) {\n        var r = Math.sqrt(size / Math.PI);\n        context.moveTo(-r, 0);\n        context.lineTo(0.9*r, -r);\n        context.lineTo(0.9*r, r);\n        context.closePath();\n    }\n};\n","import {Utils} from \"sd-utils\";\nimport {i18n} from './i18n/i18n'\n\nexport class Templates{\n\n    static growl = require('./templates/growl_message.html');\n\n    static get(templateName, variables){\n        var compiled = Utils.template(Templates[templateName],{ 'imports': { 'i18n': i18n, 'Templates': Templates, 'include': function(n, v) {return Templates.get(n, v)} } });\n        if(variables){\n            variables.variables = variables;\n        }else{\n            variables = {variables:{}}\n        }\n        return compiled(variables)\n\n    }\n\n    static styleRule(selector, props){\n        var s = selector+ '{';\n        props.forEach(p=> s+=Templates.styleProp(p[0], p[1]));\n        s+='} ';\n        return s;\n    }\n    static styleProp(styleName, variableName){\n        return  styleName+': <%= '+variableName+' %>; '\n    }\n\n    static treeDesignerSelector = 'svg.sd-tree-designer';\n    static nodeSelector(type, clazz){\n        var s = Templates.treeDesignerSelector+' .node';\n        if(type){\n            s+='.'+type+'-node';\n        }\n        if(clazz){\n            s+='.'+clazz;\n        }\n        return s;\n    }\n    static edgeSelector(clazz){\n        var s = Templates.treeDesignerSelector+' .edge';\n        if(clazz){\n            s+='.'+clazz;\n        }\n        return s;\n    }\n\n    static treeDesignerStyles =\n\n        Templates.styleRule(Templates.treeDesignerSelector,[\n            ['font-size', 'fontSize'],\n            ['font-family', 'fontFamily'],\n            ['font-weight', 'fontWeight'],\n            ['font-style', 'fontStyle']\n        ])+\n        //   node\n        Templates.styleRule(Templates.nodeSelector()+' path',[\n            ['fill', 'node.fill'],\n            ['stroke-width', 'node.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('decision', 'optimal')+' path, '+Templates.nodeSelector('chance', 'optimal')+' path,' +Templates.nodeSelector('terminal', 'optimal')+' path',[\n            ['stroke', 'node.optimal.stroke'],\n            ['stroke-width', 'node.optimal.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .label',[\n            ['font-size', 'node.label.fontSize'],\n            ['fill', 'node.label.color']\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .payoff',[\n            ['font-size', 'node.payoff.fontSize'],\n            ['fill', 'node.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .payoff.negative',[\n            ['fill', 'node.payoff.negativeColor'],\n        ])+\n\n        //    decision node\n        Templates.styleRule(Templates.nodeSelector('decision')+' path',[\n            ['fill', 'node.decision.fill'],\n            ['stroke', 'node.decision.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('decision', 'selected')+' path',[\n            ['fill', 'node.decision.selected.fill']\n        ])+\n\n        //    chance node\n        Templates.styleRule(Templates.nodeSelector('chance')+' path',[\n            ['fill', 'node.chance.fill'],\n            ['stroke', 'node.chance.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('chance', 'selected')+' path',[\n            ['fill', 'node.chance.selected.fill']\n        ])+\n\n        //    terminal node\n        Templates.styleRule(Templates.nodeSelector('terminal')+' path',[\n            ['fill', 'node.terminal.fill'],\n            ['stroke', 'node.terminal.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal', 'selected')+' path',[\n            ['fill', 'node.terminal.selected.fill']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff',[\n            ['font-size', 'node.terminal.payoff.fontSize'],\n            ['fill', 'node.terminal.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff.negative',[\n            ['fill', 'node.terminal.payoff.negativeColor'],\n        ])+\n\n\n        //probability\n        Templates.styleRule(Templates.treeDesignerSelector+' .node .probability-to-enter, '+Templates.treeDesignerSelector+' .edge .probability',[\n            ['font-size', 'probability.fontSize'],\n            ['fill', 'probability.color']\n        ])+\n\n        //edge\n        Templates.styleRule(Templates.edgeSelector()+' path',[\n            ['stroke', 'edge.stroke'],\n            ['stroke-width', 'edge.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow path',[\n            ['fill', 'edge.stroke'],\n        ])+\n        Templates.styleRule(Templates.edgeSelector('optimal')+' path',[\n            ['stroke', 'edge.optimal.stroke'],\n            ['stroke-width', 'edge.optimal.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-optimal path',[\n            ['fill', 'edge.optimal.stroke'],\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector('selected')+' path',[\n            ['stroke', 'edge.selected.stroke'],\n            ['stroke-width', 'edge.selected.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-selected path',[\n            ['fill', 'edge.selected.stroke'],\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector()+' .label',[\n            ['font-size', 'edge.label.fontSize'],\n            ['fill', 'edge.label.color']\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector()+' .payoff',[\n            ['font-size', 'edge.payoff.fontSize'],\n            ['fill', 'edge.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.edgeSelector()+' .payoff.negative',[\n            ['fill', 'edge.payoff.negativeColor'],\n        ])+\n\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-title',[\n            ['font-size', 'title.fontSize'],\n            ['font-weight', 'title.fontWeight'],\n            ['font-style', 'title.fontStyle'],\n            ['fill', 'title.color']\n        ]) +\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-description',[\n            ['font-size', 'description.fontSize'],\n            ['font-weight', 'description.fontWeight'],\n            ['font-style', 'description.fontStyle'],\n            ['fill', 'description.color']\n        ])\n}\n\n\n\n\n","module.exports = \"module.exports = \\\"<div class=\\\\\\\"sd-growl-message <%=type%>\\\\\\\">\\\\n    <div class=\\\\\\\"sd-growl-message-text\\\\\\\">\\\\n        <%= message %>\\\\n    </div>\\\\n</div>\\\\n\\\";\\n\";\n","import {AppUtils} from './app-utils'\nimport * as d3 from './d3'\nimport {ContextMenu} from './context-menu/context-menu'\n\nexport class TextDragHandler{\n\n    treeDesigner;\n    data;\n    config;\n\n    drag;\n\n\n    constructor(treeDesigner, data){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n\n        var self = this;\n        this.drag = d3.drag()\n            .subject(function(d) {\n                if(d==null){\n                    return  {\n                        x: event.x,\n                        y: event.y\n                    };\n                }\n                var t = d3.select(this);\n                return {\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\n                };\n            })\n            .on(\"start\", function(d){\n                self.dragStarted.call(this,d, self)\n            })\n            .on(\"drag\", function (d) {\n                self.onDrag.call(this, d, self);\n            })\n            .on(\"end\", function (d) {\n                self.dragEnded.call(this, d, self);\n            })\n    }\n\n\n    dragStarted(d,self) {\n        // self.treeDesigner.layout.disableAutoLayout();\n        ContextMenu.hide();\n        var text = d3.select(this);\n        if(!text.classed(\"selected\")){\n            self.treeDesigner.clearSelection();\n        }\n\n        self.treeDesigner.selectText(d);\n        text.classed(\"selected dragging\", true);\n        self.selectedNodes = self.treeDesigner.getSelectedNodes();\n        self.prevDragEvent = d3.event;\n        self.dragEventCount = 0;\n    }\n\n    onDrag(draggedText, self){\n        if(self.dragEventCount==2){\n            self.data.saveState();\n        }\n        self.dragEventCount++;\n\n        var dx = d3.event.x - self.prevDragEvent.x;\n        var dy = d3.event.y- self.prevDragEvent.y;\n\n        self.treeDesigner.layout.moveTexts([draggedText], dx, dy);\n\n        self.prevDragEvent = d3.event;\n        self.treeDesigner.updatePlottingRegionSize();\n    }\n\n    dragEnded(draggedNode, self){\n         d3.select(this).classed(\"dragging\", false);\n    }\n\n}\n\n\n","import * as d3 from './d3'\nimport {Utils} from 'sd-utils'\n\nexport class Tooltip {\n    static getContainer(){\n        return d3.select(\"body\").selectOrAppend('div.sd-tooltip');\n    }\n\n    static show(html, xOffset = 5, yOffset = 28, event, duration=null) {\n        var container = Tooltip.getContainer()\n            .style(\"opacity\", 0);\n        container.transition()\n            .duration(200)\n            .style(\"opacity\", .98);\n        container.html(html);\n        Tooltip.updatePosition(xOffset, yOffset, event);\n        if(duration){\n            setTimeout(function(){\n                Tooltip.hide();\n            }, duration)\n        }\n    }\n\n    static updatePosition(xOffset = 5, yOffset = 28, event) {\n        event = event || d3.event;\n        Tooltip.getContainer()\n            .style(\"left\", (event.pageX + xOffset) + \"px\")\n            .style(\"top\", (event.pageY - yOffset) + \"px\");\n    }\n\n    static hide(duration = 500) {\n        var t = Tooltip.getContainer();\n        if(duration){\n            t = t.transition().duration(duration)\n        }\n        t.style(\"opacity\", 0);\n    }\n\n    static attach(target, htmlOrFn, xOffset, yOffset) {\n        target.on('mouseover', function (d, i) {\n            var html = null;\n            if (Utils.isFunction(htmlOrFn)) {\n                html = htmlOrFn(d, i);\n            } else {\n                html = htmlOrFn;\n            }\n\n            if (html !== null && html !== undefined && html !== '') {\n                Tooltip.show(html, xOffset, yOffset);\n            }else{\n                Tooltip.hide(0);\n            }\n\n        }).on('mousemove', function (d) {\n            Tooltip.updatePosition(xOffset, yOffset);\n        }).on(\"mouseout\", function (d) {\n            Tooltip.hide();\n        });\n    }\n}\n","import * as d3 from \"./d3\";\nimport {Utils} from \"sd-utils\";\nimport {AppUtils} from \"./app-utils\";\nimport {domain as model} from \"sd-model\";\nimport {ContextMenu} from \"./context-menu/context-menu\";\nimport {MainContextMenu} from \"./context-menu/main-context-menu\";\nimport {NodeContextMenu} from \"./context-menu/node-context-menu\";\nimport {Layout} from \"./layout\";\nimport {NodeDragHandler} from \"./node-drag-handler\";\nimport {Tooltip} from \"./tooltip\";\nimport {Templates} from \"./templates\";\nimport {TextDragHandler} from \"./text-drag-handler\";\nimport {TextContextMenu} from \"./context-menu/text-context-menu\";\nimport {EdgeContextMenu} from \"./context-menu/edge-context-menu\";\nimport * as Hammer from \"hammerjs\";\nimport {i18n} from \"./i18n/i18n\";\n\n\nexport class TreeDesignerConfig {\n    width = undefined;\n    height = undefined;\n    margin = {\n        left: 25,\n        right: 25,\n        top: 25,\n        bottom: 25\n    };\n    scale = 1;\n    lng = 'en';\n    layout= {\n        type: 'tree',\n        nodeSize: 40,\n        limitNodePositioning: true,\n        limitTextPositioning: true,\n        gridHeight: 75,\n        gridWidth: 150,\n        edgeSlantWidthMax: 20\n    };\n    fontFamily = 'sans-serif';\n    fontSize = '12px';\n    fontWeight = 'normal';\n    fontStyle = 'normal';\n    node = {\n        strokeWidth: '1px',\n        optimal: {\n            stroke: '#006f00',\n            strokeWidth: '1.5px',\n        },\n        label: {\n            fontSize: '1em',\n            color: 'black'\n        },\n        payoff: {\n            fontSize: '1em',\n            color: 'black',\n            negativeColor: '#b60000'\n        },\n        decision: {\n            fill: '#ff7777',\n            stroke: '#660000',\n\n            selected: {\n                fill: '#aa3333',\n                // stroke: '#666600'\n            }\n        },\n        chance: {\n            fill: '#ffff44',\n            stroke: '#666600',\n\n            selected: {\n                fill: '#aaaa00',\n                // stroke: '#666600'\n            }\n        },\n        terminal:{\n            fill: '#44ff44',\n            stroke: 'black',\n            selected: {\n                fill: '#00aa00',\n                // stroke: 'black'\n            },\n            payoff: {\n                fontSize: '1em',\n                color: 'black',\n                negativeColor: '#b60000'\n            },\n        }\n    };\n    edge={\n        stroke: '#424242',\n        strokeWidth: '1.5',\n        optimal:{\n            stroke: '#006f00',\n            strokeWidth: '2.4',\n        },\n        selected:{\n            stroke: '#045ad1',\n            strokeWidth: '3.5',\n        },\n        label: {\n            fontSize: '1em',\n            color: 'back'\n        },\n        payoff:{\n            fontSize: '1em',\n            color: 'black',\n            negativeColor: '#b60000'\n        }\n\n    };\n    probability = {\n        fontSize: '1em',\n        color: '#0000d7'\n    };\n    title = {\n        fontSize: '16px',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        color: '#000000',\n        margin:{\n            top: 15,\n            bottom: 10\n        }\n    };\n    description = {\n        show: true,\n        fontSize: '12px',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        color: '#000000',\n        margin:{\n            top: 5,\n            bottom: 10\n        }\n    };\n\n    readOnly= false;\n    disableAnimations=false;\n    forceFullEdgeRedraw=false;\n    hideLabels=false;\n    hidePayoffs=false;\n    hideProbabilities=false;\n    raw=false;\n\n\n    payoffNumberFormatter = (v, i)=> v;\n    probabilityNumberFormatter  = (v)=> v;\n\n    onNodeSelected = (node) => {};\n    onEdgeSelected = (edge) => {};\n    onTextSelected = (text) => {};\n    onSelectionCleared = () => {};\n\n    operationsForObject = (o) => [];\n    performOperation = (object, operation) => Promise.resolve();\n\n    payoffNames = [null, null];\n    maxPayoffsToDisplay = 1;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n\nexport class TreeDesigner {\n\n    config;\n    container;\n    data; //data model manager\n    svg;\n\n    constructor(container, dataModel, config){\n        this.setConfig(config);\n        this.data = dataModel;\n        this.initContainer(container);\n        this.init();\n    }\n\n    setConfig(config) {\n        this.config = new TreeDesignerConfig(config);\n        if(this.layout){\n            this.layout.config=this.config.layout;\n        }\n        this.updateCustomStyles();\n        return this;\n    }\n\n    init(){\n\n        this.initSvg();\n        this.initLayout();\n        this.initI18n();\n        this.initBrush();\n        this.initEdgeMarkers();\n\n        this.updateCustomStyles();\n        if(!this.config.readOnly){\n            this.initMainContextMenu();\n            this.initNodeContextMenu();\n            this.initEdgeContextMenu();\n            this.initNodeDragHandler();\n            this.initTextDragHandler();\n            this.initTextContextMenu();\n        }\n        this.redraw();\n    }\n\n    initI18n() {\n        i18n.init(this.config.lng);\n    }\n\n\n    updateCustomStyles(){\n        d3.select('head').selectOrAppend('style#sd-tree-designer-style').html(Templates.get('treeDesignerStyles', this.config));\n        return this;\n    }\n\n    initLayout(){\n        this.layout = new Layout(this, this.data, this.config.layout);\n    }\n\n    initNodeDragHandler(){\n        this.nodeDragHandler = new NodeDragHandler(this, this.data);\n    }\n\n    initTextDragHandler(){\n        this.textDragHandler = new TextDragHandler(this, this.data);\n    }\n\n    redraw(withTransitions=false){\n\n        var self = this;\n        withTransitions = !self.config.disableAnimations && withTransitions;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateScale(withTransitions);\n        this.updateMargin(withTransitions);\n        if(withTransitions){\n            self.transitionPrev = self.transition;\n            self.transition = true;\n        }\n        this.redrawNodes();\n        this.redrawEdges();\n        this.redrawFloatingTexts();\n        this.updateValidationMessages();\n        if(withTransitions){\n            self.transition =  self.transitionPrev;\n        }\n        setTimeout(function(){\n            self.updatePlottingRegionSize();\n        },10);\n\n        return this;\n    }\n\n    computeAvailableSpace(){\n        this.availableHeight = AppUtils.sanitizeHeight(this.config.height, this.container, this.config.margin);\n        this.availableWidth = AppUtils.sanitizeWidth(this.config.width, this.container, this.config.margin);\n    }\n\n    initSvg() {\n        var c = this;\n        var self = this;\n        this.computeAvailableSpace();\n        this.svg = this.container.selectOrAppend('svg.sd-tree-designer');\n        this.svg.attr('width', this.availableWidth).attr('height', this.availableHeight);\n\n        this.wrapperGroup = this.svg.selectOrAppend('g.sd-wrapper-group');\n        this.mainGroup = this.wrapperGroup.selectOrAppend('g.main-group');\n        this.updateScale();\n        this.updateMargin();\n\n\n        if (!this.config.width) {\n            d3.select(window)\n                .on(\"resize.tree-designer\", function () {\n                    self.updatePlottingRegionSize();\n                    self.redrawDiagramTitle();\n                });\n        }\n\n        var mc = new Hammer.Manager(this.svg.node(), {touchAction : 'auto'});\n        mc.add(new Hammer.Press({\n            pointerType: 'touch'\n        }));\n\n        mc.add(new Hammer.Pinch({\n            pointerType: 'touch'\n        }));\n\n        var cancel;\n        mc.on('pinchstart', function(){\n            self.disableBrush();\n        })\n        mc.on('pinch', function(){\n            cancel = Utils.waitForFinalEvent(()=>self.enableBrush(), 'pinchend', 5000)\n        })\n    }\n\n    updateMargin(withTransitions){\n        var self = this;\n        var margin = this.config.margin;\n        var group = this.mainGroup;\n        if(withTransitions){\n            group = group.transition();\n        }\n\n        this.topMargin = margin.top;\n        if(this.diagramTitle||this.diagramDescription){\n            this.topMargin = parseInt(this.diagramTitle ? this.config.title.margin.top : 0) + this.getTitleGroupHeight()\n                +  Math.max(this.topMargin, parseInt(this.config.title.margin.bottom));\n        }\n\n        group.attr(\"transform\", \"translate(\" + margin.left + \",\" + this.topMargin + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\n    }\n\n    setMargin(margin, withoutStateSaving){\n        var self=this;\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    margin: Utils.clone(self.config.margin)\n                },\n                onUndo: (data)=> {\n                    self.setMargin(data.margin, true);\n                },\n                onRedo: (data)=> {\n                    self.setMargin(margin, true);\n                }\n            });\n        }\n        Utils.deepExtend(this.config.margin, margin);\n        this.redrawDiagramTitle();\n        this.updateMargin(true);\n    }\n\n\n    updateScale(withTransitions){\n        var self = this;\n        var scale = this.config.scale;\n        var group = this.wrapperGroup;\n        if(withTransitions){\n            group = group.transition();\n        }\n\n        group.attr(\"transform\", \"scale(\" + scale + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\n    }\n\n    setScale(scale, withoutStateSaving){\n        var self=this;\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    scale: Utils.clone(self.config.scale)\n                },\n                onUndo: (data)=> {\n                    self.setScale(data.scale, true);\n                },\n                onRedo: (data)=> {\n                    self.setScale(scale, true);\n                }\n            });\n        }\n        this.config.scale = scale;\n        this.updateScale(true);\n    }\n\n    initContainer(containerIdOrElem) {\n        if (Utils.isString(containerIdOrElem)) {\n            var selector = containerIdOrElem.trim();\n\n            if (!Utils.startsWith(selector, '#') && !Utils.startsWith(selector, '.')) {\n                selector = '#' + selector;\n            }\n            this.container = d3.select(selector);\n        } else if(containerIdOrElem._parents){\n            this.container = containerIdOrElem\n        }else{\n            this.container = d3.select(containerIdOrElem);\n        }\n    }\n\n    updatePlottingRegionSize() {\n        var changed = false;\n        this.computeAvailableSpace();\n        var margin = this.config.margin;\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        var mainGroupBox = this.mainGroup.node().getBBox();\n        let boxWidth = mainGroupBox.width;\n        var newSvgWidth = boxWidth+mainGroupBox.x+margin.left+margin.right;\n        newSvgWidth  *= this.config.scale;\n        this.container.classed('with-overflow-x', newSvgWidth>=this.availableWidth);\n        newSvgWidth = Math.max(newSvgWidth, this.availableWidth);\n        if(svgWidth!=newSvgWidth){\n            changed = true;\n            this.svg.attr('width', newSvgWidth);\n        }\n        let boxHeight = mainGroupBox.height;\n        var newSvgHeight = boxHeight+mainGroupBox.y+this.topMargin+margin.bottom;\n        newSvgHeight *= this.config.scale;\n        this.container.classed('with-overflow-y', newSvgHeight>=this.availableHeight);\n        newSvgHeight = Math.max(newSvgHeight, this.availableHeight);\n        if(svgHeight!=newSvgHeight){\n            changed=true;\n            this.svg.attr('height', newSvgHeight);\n        }\n        if(changed){\n            this.updateBrushExtent()\n        }\n\n\n    }\n\n    redrawNodes() {\n        var self = this;\n\n\n        var nodesContainer = this.mainGroup.selectOrAppend('g.nodes');\n        var nodes = nodesContainer.selectAll('.node').data(this.data.nodes.filter(d=>!d.$hidden), (d,i)=> d.id);\n        nodes.exit().remove();\n        var nodesEnter = nodes.enter().append('g')\n            .attr('id', d=>'node-'+d.id)\n            .attr('class', d=>d.type+'-node node')\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\n        nodesEnter.append('path');\n\n        var labelEnter = nodesEnter.append('text').attr('class', 'label');\n        var payoffEnter = nodesEnter.append('text').attr('class', 'payoff computed');\n        var indicatorEnter = nodesEnter.append('text').attr('class', 'error-indicator').text('!!');\n        var aggregatedPayoffEnter = nodesEnter.append('text').attr('class', 'aggregated-payoff');\n        var probabilityToEnterEnter = nodesEnter.append('text').attr('class', 'probability-to-enter');\n\n        var nodesMerge = nodesEnter.merge(nodes);\n        nodesMerge.classed('optimal', (d)=>self.isOptimal(d));\n\n        var nodesMergeT = nodesMerge;\n        if(this.transition){\n            nodesMergeT = nodesMerge.transition();\n            nodesMergeT.on('end', ()=> self.updatePlottingRegionSize())\n        }\n        nodesMergeT\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')')\n\n        var path = nodesMerge.select('path');\n        this.layout.drawNodeSymbol(path,this.transition);\n\n        /*path\n            .style('fill', d=> {\n                // if(self.isNodeSelected(d)){\n                //     return self.config.node[d.type].selected.fill\n                // }\n                return self.config.node[d.type].fill\n            })\n            .style('stroke', d=> self.config.node[d.type].stroke)\n            .style('stroke-width', d=> {\n                if(self.config.node[d.type].strokeWidth!==undefined){\n                    return self.config.node[d.type].strokeWidth;\n                }\n                return self.config.node.strokeWidth;\n            });\n        */\n        this.layout.nodeLabelPosition(labelEnter);\n        var labelMerge = nodesMerge.select('text.label');\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\n        var labelMergeT = nodesMergeT.select('text.label');\n        labelMergeT.each(this.updateTextLines);\n        this.layout.nodeLabelPosition(labelMergeT)\n            .attr('text-anchor', 'middle')\n\n        var payoff = nodesMerge.select('text.payoff');\n\n        var payoffTspans = payoff.selectAll('tspan').data(d=>{\n            let item = d.displayValue('childrenPayoff');\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\n        });\n        payoffTspans.exit().remove();\n\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\n        payoffTspansM\n            // .attr('dominant-baseline', 'hanging')\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0')\n            .classed('negative', d=> {\n                return d!==null && d<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\n            .text((d, i)=> {\n                var val = d\n\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\n            });\n        this.attachPayoffTooltip(payoffTspansM);\n\n\n        var payoffT = payoff;\n        if(this.transition){\n            payoffT = payoff.transition();\n        }\n\n        this.layout.nodePayoffPosition(payoffEnter);\n        this.layout.nodePayoffPosition(payoffT);\n\n        var aggregatedPayoff = nodesMerge.select('text.aggregated-payoff');\n        var aggregatedPayoffTspans = aggregatedPayoff.selectAll('tspan').data(d=>{\n            let item = d.displayValue('aggregatedPayoff');\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\n        });\n        aggregatedPayoffTspans.exit().remove();\n        var aggregatedPayoffTspansM = aggregatedPayoffTspans.enter().append('tspan').merge(aggregatedPayoffTspans)\n            .attr('dy', (d,i)=>i>0 ? '0.95em': undefined)\n            .classed('negative', d=> {\n                return d!==null && d<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\n            .text((val, i)=> {\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\n            });\n\n        this.attachPayoffTooltip(aggregatedPayoffTspansM, 'aggregatedPayoff');\n\n        var aggregatedPayoffT = aggregatedPayoff;\n        if(this.transition){\n            aggregatedPayoffT = aggregatedPayoff.transition();\n        }\n\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffEnter);\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffT);\n\n        var probabilityToEnter = nodesMerge.select('text.probability-to-enter')\n            .text(d=>{\n                var val = d.displayValue('probabilityToEnter');\n                return val!==null ? (isNaN(val) ? val : self.config.probabilityNumberFormatter(val)): ''\n            })\n            .classed('sd-hidden', this.config.hideProbabilities || this.config.raw);\n        Tooltip.attach(probabilityToEnter, i18n.t('tooltip.node.probabilityToEnter'));\n\n\n        var probabilityToEnterT = probabilityToEnter;\n        if(this.transition){\n            probabilityToEnterT = probabilityToEnter.transition();\n        }\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterEnter);\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterT);\n\n\n        var indicator = nodesMerge.select('text.error-indicator');\n        indicator.classed('sd-hidden', this.config.raw)\n        this.layout.nodeIndicatorPosition(indicatorEnter);\n        this.layout.nodeIndicatorPosition(indicator);\n\n        if(this.nodeDragHandler){\n            nodesMerge.call(this.nodeDragHandler.drag);\n        }\n\n        nodesMerge.on('contextmenu', this.nodeContextMenu);\n        nodesMerge.on('dblclick', this.nodeContextMenu)\n        nodesMerge.each(function(d, i){\n            var nodeElem = this;\n            var mc = new Hammer.Manager(nodeElem);\n            mc.add(new Hammer.Press({\n                pointerType: 'touch'\n            }));\n            mc.on('press', function(e){\n                if(e.pointerType=='touch'){\n                    self.nodeDragHandler.cancelDrag();\n                }\n            })\n\n\n            if(d.folded){\n                let button = d3.select(nodeElem).selectOrAppend('text.sd-unfold-button')\n                    .text(\"[+]\")\n                    .on('click dbclick mousedown', ()=>self.foldSubtree(d, false)); //firefox detects only mousedown event - related to drag handler\n\n                self.layout.nodeUnfoldButtonPosition(button);\n                Tooltip.attach(button, i18n.t('contextMenu.node.unfold'));\n            }else{\n                d3.select(nodeElem).select('.sd-unfold-button').remove();\n            }\n\n        })\n    }\n\n    attachPayoffTooltip(selection, payoffFiledName = 'payoff', object='node'){\n        var self = this;\n        Tooltip.attach(selection, (d, i)=>{\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\n                return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.named',{value: d.payoff, number: i+1, name: self.config.payoffNames[i]})\n            }\n            return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.default',{value: d.payoff, number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\n        });\n    }\n\n    updateTextLines(d){ //helper method for splitting text to tspans\n        var lines = d.name ? d.name.split('\\n') : [];\n        lines.reverse();\n        var tspans = d3.select(this).selectAll('tspan').data(lines);\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .text(l=>l)\n            .attr('dy', (d,i)=>i>0 ? '-1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n    }\n\n    isOptimal(d){\n        return d.displayValue('optimal');\n    }\n\n    redrawEdges() {\n        var self = this;\n        var edgesContainer = this.mainGroup.selectOrAppend('g.edges');\n        if(self.config.forceFullEdgeRedraw){\n            edgesContainer.selectAll(\"*\").remove();\n        }\n\n        var edges = edgesContainer.selectAll('.edge').data(this.data.edges.filter(e=>!e.$hidden), (d,i)=> d.id);\n        edges.exit().remove();\n        var edgesEnter = edges.enter().append('g')\n            .attr('id', d=>'edge-'+d.id)\n            .attr('class', 'edge');\n\n\n        edgesEnter.append('path');\n        var labelEnter = edgesEnter.appendSelector('g.label-group');\n        labelEnter.append('text').attr('class', 'label');\n        var payoffEnter = edgesEnter.append('text').attr('class', 'payoff');\n        var probabilityEnter = edgesEnter.append('text').attr('class', 'probability');\n\n\n        var edgesMerge = edgesEnter.merge(edges);\n\n\n        var optimalClassName = 'optimal';\n        edgesMerge.classed(optimalClassName, (d)=>self.isOptimal(d));\n\n        var edgesMergeT = edgesMerge;\n        if(this.transition){\n            edgesMergeT = edgesMerge.transition();\n        }\n\n        edgesMergeT.select('path')\n            .attr('d', d=> this.layout.edgeLineD(d))\n            // .attr(\"stroke\", \"black\")\n            // .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .attr(\"marker-end\", function(d) {\n                var suffix = d3.select(this.parentNode).classed('selected') ? '-selected' : (self.isOptimal(d)?'-optimal':'');\n                return \"url(#arrow\"+ suffix+\")\"\n            });\n            // .attr(\"shape-rendering\", \"optimizeQuality\")\n\n\n        edgesMerge.on('click', d=>{\n            self.selectEdge(d, true)\n        });\n\n        this.layout.edgeLabelPosition(labelEnter);\n        edgesMergeT.select('text.label').each(this.updateTextLines);\n        var labelMerge = edgesMerge.select('g.label-group');\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\n        var labelMergeT = edgesMergeT.select('g.label-group');\n        this.layout.edgeLabelPosition(labelMergeT);\n            // .text(d=>d.name);\n\n        var payoff = edgesMerge.select('text.payoff');\n\n        var payoffTspans = payoff.selectAll('tspan').data(d => {\n            let item = d.displayValue('payoff');\n            return Utils.isArray(item) ? item.slice(0, Math.min(item.length, self.config.maxPayoffsToDisplay)).map(_=>d) : [d];\n        });\n        payoffTspans.exit().remove();\n\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\n        payoffTspansM\n        // .attr('dominant-baseline', 'hanging')\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            // .attr('x', '0')\n\n            // .attr('dominant-baseline', 'hanging')\n            .classed('negative', (d, i)=> {\n                var val = d.displayPayoff(undefined, i);\n                return val!==null && val<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs)\n            // .text(d=> isNaN(d.payoff) ? d.payoff : self.config.payoffNumberFormatter(d.payoff))\n            .text((d, i)=>{\n                if(this.config.raw){\n                    return d.payoff[i];\n                }\n\n                let item = d.displayValue('payoff');\n                let items = Utils.isArray(item) ? item : [item];\n\n                let val = items[i];\n                if (val !== null) {\n                    if (!isNaN(val)) {\n                        return self.config.payoffNumberFormatter(val, i);\n                    }\n                    if (Utils.isString(val)) {\n                        return val;\n                    }\n                }\n\n                if (d.payoff[i] !== null && !isNaN(d.payoff[i]))\n                    return self.config.payoffNumberFormatter(d.payoff[i], i);\n\n                return d.payoff[i];\n\n            });\n\n        Tooltip.attach(payoffTspansM, (d, i)=>{\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\n                return i18n.t('tooltip.edge.payoff.named',{value: d.payoff[i], number: i+1, name: self.config.payoffNames[i]})\n            }\n            return i18n.t('tooltip.edge.payoff.default',{value: d.payoff[i], number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\n        });\n\n        var payoffTextT = payoff;\n        if(this.transition){\n            payoffTextT = payoff.transition();\n        }\n        this.layout.edgePayoffPosition(payoffEnter);\n        this.layout.edgePayoffPosition(payoffTextT);\n\n        Tooltip.attach(edgesMerge.select('text.probability'), d=>i18n.t('tooltip.edge.probability',{value: d.probability=== undefined ? d.displayProbability() : d.probability}));\n\n        edgesMerge.select('text.probability')\n            .classed('sd-hidden', this.config.hideProbabilities);\n        var probabilityMerge = edgesMerge.select('text.probability');\n        probabilityMerge\n            .attr('text-anchor', 'end')\n            .text(d=>{\n                if(this.config.raw){\n                    return d.probability;\n                }\n                var val = d.displayProbability();\n\n                if(val!==null){\n                    if(!isNaN(val)){\n                        return self.config.probabilityNumberFormatter(val);\n                    }\n                    if(Utils.isString(val)){\n                        return val;\n                    }\n                }\n\n                if(d.probability!==null && !isNaN(d.probability))\n                    return self.config.probabilityNumberFormatter(d.probability);\n\n                return d.probability;\n            });\n        var probabilityMergeT = probabilityMerge;\n        if(this.transition){\n            probabilityMergeT = probabilityMerge.transition();\n        }\n\n        this.layout.edgeProbabilityPosition(probabilityEnter);\n        this.layout.edgeProbabilityPosition(probabilityMergeT);\n\n\n        edgesContainer.selectAll('.edge.'+optimalClassName).raise();\n\n        edgesMerge.on('contextmenu', this.edgeContextMenu);\n        edgesMerge.on('dblclick', this.edgeContextMenu);\n        edgesMerge.each(function(d, i){\n            var elem = this;\n            var mc = new Hammer.Manager(elem);\n            mc.add(new Hammer.Press({\n                pointerType: Hammer.POINTER_TOUCH\n            }));\n        })\n    }\n\n    redrawFloatingTexts() {\n        var self = this;\n\n\n        var textsContainer = this.mainGroup.selectOrAppend('g.floating-texts');\n        var texts = textsContainer.selectAll('.floating-text').data(this.data.texts, (d,i)=> d.id);\n        texts.exit().remove();\n        var textsEnter = texts.enter().appendSelector('g.floating-text')\n            .attr('id', d=>'text-'+d.id);\n\n\n        var rectWidth = 40;\n        var rectHeight = 20;\n\n        textsEnter.append('rect').attr('x', -5).attr('y', -16).attr('fill-opacity', 0);\n        textsEnter.append('text');\n\n        var textsMerge = textsEnter.merge(texts);\n        var textsMergeT = textsMerge;\n        if(this.transition){\n            textsMergeT = textsMerge.transition();\n        }\n\n        textsMergeT.attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\n\n        var tspans = textsMerge.select('text').selectAll('tspan').data(d=>d.value ? d.value.split('\\n') : []);\n\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n        textsMerge.classed('sd-empty', d=>!d.value || !d.value.trim());\n        textsMerge.select('rect').attr('width', rectWidth).attr('height', rectHeight);\n\n        textsMerge.each(function(d){\n            if(!d.value){\n                return;\n            }\n            var bb = d3.select(this).select('text').node().getBBox();\n           d3.select(this).select('rect')\n               .attr('y', bb.y-5)\n               .attr('width', Math.max(bb.width+10, rectWidth))\n               .attr('height', Math.max(bb.height+10, rectHeight))\n        });\n\n        if(this.textDragHandler){\n            textsMerge.call(this.textDragHandler.drag);\n        }\n        textsMerge.on('contextmenu', this.textContextMenu);\n        textsMerge.on('dblclick', this.textContextMenu);\n        textsMerge.each(function(d, i){\n            var elem = this;\n            var mc = new Hammer.Manager(elem);\n            mc.add(new Hammer.Press({\n                pointerType: 'touch'\n            }));\n        })\n\n    }\n\n    updateValidationMessages() {\n        var nodes = this.mainGroup.selectAll('.node');\n        nodes.classed('error', false);\n\n        this.data.validationResults.forEach(validationResult=>{\n            if(validationResult.isValid()){\n                return;\n            }\n\n            Object.getOwnPropertyNames(validationResult.objectIdToError).forEach(id=>{\n                var errors = validationResult.objectIdToError[id];\n                var nodeSelection = this.getNodeD3SelectionById(id);\n                nodeSelection.classed('error', true);\n                var tooltipHtml = '';\n                errors.forEach(e=>{\n                    if(tooltipHtml){\n                        tooltipHtml+='<br/>'\n                    }\n                    tooltipHtml+=AppUtils.getValidationMessage(e);\n                });\n\n                Tooltip.attach(nodeSelection.select('.error-indicator'), tooltipHtml);\n\n\n            })\n        });\n    }\n\n\n    initEdgeMarkers() {\n        var defs = this.svg.append(\"svg:defs\");\n\n        this.initArrowMarker(\"arrow\");\n        this.initArrowMarker(\"arrow-optimal\");\n        this.initArrowMarker(\"arrow-selected\");\n    }\n\n    initArrowMarker(id) {\n\n        var defs = this.svg.select(\"defs\");\n        defs.append(\"marker\")\n            .attr(\"id\",id)\n            .attr(\"viewBox\",\"0 -5 10 10\")\n            .attr(\"refX\",5)\n            .attr(\"refY\",0)\n            .attr(\"markerWidth\",4)\n            .attr(\"markerHeight\",4)\n            .attr(\"orient\",\"auto\")\n            .append(\"path\")\n            .attr(\"d\", \"M0,-5L10,0L0,5\")\n            .attr(\"class\",\"arrowHead\");\n    }\n\n    updateBrushExtent() {\n        var self =this;\n        this.brush.extent([[0, 0], [self.svg.attr('width'), self.svg.attr('height')]]);\n        this.brushContainer.call(this.brush);\n    }\n    initBrush() {\n        var self = this;\n\n        var brushContainer = self.brushContainer = this.brushContainer= this.wrapperGroup.selectOrInsert(\"g.brush\", \":first-child\")\n            .attr(\"class\", \"brush\");\n\n        var brush = this.brush = d3.brush()\n            .on(\"start\", brushstart)\n            .on(\"brush\", brushmove)\n            .on(\"end\", brushend);\n\n\n\n        this.updateBrushExtent();\n\n        brushContainer.select('.overlay').on(\"mousemove.edgeSelection\", mousemoved);\n        function mousemoved() {\n            var m = d3.mouse(this);\n            var mgt = self.getMainGroupTranslation();\n            var margin = 10;\n\n            var closest = [null, 999999999];\n            var closeEdges = [];\n            self.mainGroup.selectAll('.edge').each(function(d){\n                var selection = d3.select(this);\n                selection.classed('sd-hover', false);\n                var pathNode = selection.select('path').node();\n                var b = pathNode.getBBox();\n                if(b.x+mgt[0] <=m[0] && b.x+b.width+mgt[0] >= m[0] &&\n                   b.y+mgt[1]-margin <=m[1] && b.y+b.height+mgt[1]+margin >= m[1]){\n\n                    var cp = AppUtils.closestPoint(pathNode, [m[0]-mgt[0], m[1]-mgt[1]]);\n                    if(cp.distance < margin && cp.distance<closest[1]){\n                        closest = [selection, cp.distance];\n                    }\n                }\n\n            });\n\n            self.hoveredEdge = null;\n            if(closest[0]){\n                closest[0].classed('sd-hover', true);\n                self.hoveredEdge = closest[0];\n            }\n\n        }\n\n        function brushstart() {\n            if (!d3.event.selection) return;\n            if(self.hoveredEdge){\n                self.selectEdge(self.hoveredEdge.datum(), true)\n            }else{\n                self.clearSelection();\n            }\n            ContextMenu.hide();\n        }\n\n        // Highlight the selected nodes.\n        function brushmove() {\n            var s = d3.event.selection;\n            if(!s)return;\n\n            self.mainGroup.selectAll(\".node\").classed('selected', function (d) {\n                var mainGroupTranslation = self.getMainGroupTranslation();\n                var x = d.location.x+mainGroupTranslation[0];\n                var y = d.location.y+mainGroupTranslation[1];\n                var nodeSize = self.config.layout.nodeSize;\n                var offset = nodeSize*0.25;\n                return s[0][0] <= x+offset && x-offset <= s[1][0]\n                    && s[0][1] <= y+offset && y-offset <= s[1][1];\n            });\n        }\n        // If the brush is empty, select all circles.\n        function brushend() {\n            if (!d3.event.selection) return;\n            brush.move(brushContainer, null);\n\n            var selectedNodes = self.getSelectedNodes();\n            if(selectedNodes && selectedNodes.length === 1){\n                self.selectNode(selectedNodes[0]);\n            }\n            // if (!d3.event.selection) self.mainGroup.selectAll(\".selected\").classed('selected', false);\n        }\n    }\n\n    disableBrush(){\n        if(!this.brushDisabled){\n            AppUtils.growl(i18n.t('growl.brushDisabled'), 'info', 'left')\n        }\n        this.brushDisabled = true;\n        this.brushContainer.remove();\n    }\n\n    enableBrush(){\n        if(this.brushDisabled){\n            AppUtils.growl(i18n.t('growl.brushEnabled'), 'info', 'left')\n            this.initBrush();\n            this.brushDisabled = false;\n        }\n\n\n    }\n\n    getMainGroupTranslation(invert) {\n        var translation = AppUtils.getTranslation(this.mainGroup.attr(\"transform\"));\n        if(invert){\n            translation[0] = -translation[0];\n            translation[1] = -translation[1]\n        }\n        return translation;\n    }\n\n    initNodeContextMenu() {\n        this.nodeContextMenu = new NodeContextMenu(this, this.config.operationsForObject);\n    }\n\n    initEdgeContextMenu() {\n        this.edgeContextMenu = new EdgeContextMenu(this);\n    }\n\n    initTextContextMenu() {\n        this.textContextMenu = new TextContextMenu(this);\n    }\n\n\n\n    initMainContextMenu() {\n        this.mainContextMenu = new MainContextMenu(this);\n        this.svg.on('contextmenu',this.mainContextMenu);\n        this.svg.on('dblclick',this.mainContextMenu);\n    }\n\n    addText(text){\n        this.data.saveState();\n        this.data.addText(text);\n        this.redraw();\n        this.selectText(text);\n    }\n\n    addNode(node, parent, redraw=false){\n        this.data.saveState();\n        this.data.addNode(node, parent);\n        this.redraw(true);\n        this.layout.update(node);\n        return node;\n    }\n\n    addDecisionNode(parent){\n        var newNode = new model.DecisionNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n    addChanceNode(parent){\n        var newNode = new model.ChanceNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n    addTerminalNode(parent){\n        var newNode = new model.TerminalNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n\n    injectNode(node, edge){\n        this.data.saveState();\n        this.data.injectNode(node, edge);\n        this.redraw();\n        this.layout.update(node);\n        return node;\n    }\n\n    injectDecisionNode(edge){\n        var newNode = new model.DecisionNode(this.layout.getInjectedNodeLocation(edge));\n        this.injectNode(newNode, edge);\n\n    }\n\n    injectChanceNode(edge){\n        var newNode = new model.ChanceNode(this.layout.getInjectedNodeLocation(edge));\n        this.injectNode(newNode, edge);\n    }\n\n    removeNode(node) {\n        this.data.saveState();\n        this.data.removeNode(node);\n\n\n        if(!this.layout.isManualLayout()){\n            this.layout.update();\n        }else{\n            this.redraw();\n        }\n    }\n\n    removeSelectedNodes() {\n        var selectedNodes = this.getSelectedNodes();\n        if(!selectedNodes.length){\n            return;\n        }\n        this.data.saveState();\n        this.data.removeNodes(selectedNodes);\n        this.clearSelection();\n        this.redraw();\n        this.layout.update();\n    }\n\n    removeSelectedTexts(){\n        var selectedTexts = this.getSelectedTexts();\n\n        if(!selectedTexts.length){\n            return;\n        }\n        this.data.saveState();\n        this.data.removeTexts(selectedTexts);\n        this.clearSelection();\n        this.redraw();\n    }\n\n    copyNode(d, notClearPrevSelection) {\n        var clone = this.data.cloneSubtree(d);\n        if(notClearPrevSelection){\n            if(!this.copiedNodes){\n                this.copiedNodes=[];\n            }\n            this.copiedNodes.push(clone);\n        }else{\n            this.copiedNodes = [clone];\n        }\n\n    }\n\n    cutNode(d) {\n        this.copyNode(d);\n        this.removeNode(d);\n    }\n\n    cutSelectedNodes(){\n        var selectedNodes = this.getSelectedNodes();\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\n        this.copyNodes(selectedRoots);\n        this.removeSelectedNodes();\n    }\n\n    copySelectedNodes() {\n        var self;\n        var selectedNodes = this.getSelectedNodes();\n\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\n        this.copyNodes(selectedRoots);\n\n\n    }\n\n    copyNodes(nodes){\n        this.copiedNodes = nodes.map(d=>this.data.cloneSubtree(d));\n    }\n\n\n\n    pasteToNode(node) {\n        if(!this.copiedNodes || !this.copiedNodes.length){\n            return;\n        }\n        this.data.saveState();\n        var self = this;\n        self.clearSelection();\n        var nodesToAttach = this.copiedNodes;\n        self.copyNodes(this.copiedNodes);\n        nodesToAttach.forEach(toAttach=>{\n            var attached = this.data.attachSubtree(toAttach, node).childNode;\n            if(attached.folded){\n                self.foldSubtree(attached, attached.folded, false);\n            }\n            var location = self.layout.getNewChildLocation(node);\n            attached.moveTo(location.x, location.y, true);\n            self.layout.moveNodeToEmptyPlace(attached, false);\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\n\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\n        });\n\n        if(node.folded){\n            self.foldSubtree(node, node.folded, false);\n        }\n\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n\n    }\n\n    pasteToNewLocation(point) {\n        this.data.saveState();\n        var self = this;\n        self.clearSelection();\n        var nodesToAttach = this.copiedNodes;\n        self.copyNodes(this.copiedNodes);\n        nodesToAttach.forEach(toAttach=> {\n            var attached = this.data.attachSubtree(toAttach);\n            if(attached.folded){\n                self.foldSubtree(attached, attached.folded, false);\n            }\n            attached.moveTo(point.x, point.y, true);\n            self.layout.moveNodeToEmptyPlace(attached, false);\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\n\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\n        });\n\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n\n    }\n\n    convertNode(node, typeToConvertTo){\n        const self = this;\n        this.data.saveState();\n        this.data.convertNode(node, typeToConvertTo);\n        setTimeout(function(){\n            self.redraw(true);\n        },10)\n    }\n\n    performOperation(object, operation){\n        const self = this;\n        this.data.saveState();\n        this.config.performOperation(object, operation).then(() => {\n            setTimeout(function(){\n                self.redraw();\n                self.layout.update();\n            },10)\n        });\n    }\n\n    foldSubtree(node, fold = true, redraw=true){\n        const self = this;\n        node.folded = fold;\n\n        this.data.getAllDescendantNodes(node).forEach(n=>{\n            n.$hidden = fold;\n            n.folded = false;\n        });\n        this.data.getAllDescendantEdges(node).forEach(e=>e.$hidden = fold);\n\n        if(!redraw){\n            return;\n        }\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n    }\n\n    updateVisibility(node = null){\n        if(!node){\n            this.data.getRoots().forEach(n=>this.updateVisibility(n));\n            return;\n        }\n\n        if(node.folded){\n            this.foldSubtree(node, true, false);\n            return;\n        }\n\n        node.childEdges.forEach(e => this.updateVisibility(e.childNode));\n\n    }\n\n    moveNodeTo(x,y){\n\n    }\n\n    updateNodePosition(node) {\n        this.getNodeD3Selection(node).raise().attr('transform', 'translate('+node.location.x+' '+node.location.y+')');\n    }\n\n    updateTextPosition(text) {\n        this.getTextD3Selection(text).raise().attr('transform', 'translate('+text.location.x+' '+text.location.y+')');\n    }\n\n    getNodeD3Selection(node){\n        return this.getNodeD3SelectionById(node.id);\n    }\n\n    getNodeD3SelectionById(id){\n        return this.mainGroup.select('#node-'+id);\n    }\n    getTextD3Selection(text){\n        return this.getTextD3SelectionById(text.id);\n    }\n    getTextD3SelectionById(id){\n        return this.mainGroup.select('#text-'+id);\n    }\n\n    getSelectedNodes(visibleOnly = false) {\n        let selectedVisible = this.mainGroup.selectAll(\".node.selected\").data();\n        if(visibleOnly){\n            return selectedVisible;\n        }\n\n        let allSelected  = [];\n        allSelected.push(...selectedVisible);\n\n        selectedVisible.forEach(n=>{\n            if(n.folded){\n                let descendants = this.data.getAllDescendantNodes(n);\n                if(descendants){\n                    allSelected.push(...descendants);\n                }\n            }\n        });\n\n        return allSelected;\n    }\n\n    getSelectedTexts(){\n        return this.mainGroup.selectAll(\".floating-text.selected\").data();\n    }\n\n    clearSelection(){\n        this.mainGroup.selectAll(\".edge.selected\").select('path').attr(\"marker-end\", d => \"url(#arrow\"+(this.isOptimal(d)?'-optimal':'')+\")\")\n        this.mainGroup.selectAll(\".selected\").classed('selected', false);\n        this.config.onSelectionCleared();\n    }\n\n    selectEdge(edge, clearSelectionBeforeSelect){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n        this.config.onEdgeSelected(edge);\n        this.mainGroup.select('#edge-'+edge.id)\n            .classed('selected', true)\n            .select('path')\n            .attr(\"marker-end\", d => \"url(#arrow-selected)\")\n    }\n\n    isNodeSelected(node){\n        return this.getNodeD3Selection(node).classed('selected');\n    }\n\n    selectNode(node, clearSelectionBeforeSelect, skipCallback){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n\n        if(!skipCallback){\n            this.config.onNodeSelected(node);\n        }\n\n        this.getNodeD3SelectionById(node.id).classed('selected', true);\n    }\n\n    selectText(text, clearSelectionBeforeSelect, skipCallback){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n\n        if(!skipCallback){\n            this.config.onTextSelected(text)\n        }\n\n        this.getTextD3SelectionById(text.id).classed('selected', true);\n    }\n\n    selectSubTree(node, clearSelectionBeforeSelect,skipCallback) {\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n        this.selectNode(node, false, skipCallback);\n        node.childEdges.forEach(e=>this.selectSubTree(e.childNode, false, true));\n    }\n\n    selectAllNodes() {\n        this.mainGroup.selectAll(\".node\").classed('selected', true);\n    }\n\n    autoLayout(type, withoutStateSaving){\n        this.layout.autoLayout(type, withoutStateSaving);\n    }\n\n    updateDiagramTitle(titleValue){\n        if(!titleValue){\n            titleValue = '';\n        }\n        this.diagramTitle = titleValue;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(true);\n    }\n\n    redrawDiagramTitle(){\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\n\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\n        title.text(this.diagramTitle);\n        Layout.setHangingPosition(title);\n\n        var marginTop = parseInt(this.config.title.margin.top);\n        this.titleContainer.attr('transform', 'translate('+(svgWidth/2)+','+( marginTop)+')');\n    }\n    redrawDiagramDescription(){\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\n\n        var desc = this.titleContainer.selectOrAppend('text.sd-description');\n\n        if(!this.config.description.show){\n            desc.remove();\n            return;\n        }\n\n        var lines = this.diagramDescription ? this.diagramDescription.split('\\n') : [];\n        var tspans = desc.selectAll('tspan').data(lines);\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n        Layout.setHangingPosition(desc);\n\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\n\n        var marginTop = 0;\n        if(this.diagramTitle){\n            marginTop += title.node().getBBox().height;\n            marginTop+= Math.max(parseInt(this.config.description.margin.top), 0);\n        }\n\n\n        desc.attr('transform', 'translate(0,'+( marginTop)+')');\n    }\n\n    updateDiagramDescription(descriptionValue){\n        if(!descriptionValue){\n            descriptionValue = '';\n        }\n        this.diagramDescription = descriptionValue;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(true);\n    }\n\n\n    getTitleGroupHeight(withMargins){\n        if(!this.titleContainer){\n            return 0;\n        }\n        var h = this.titleContainer.node().getBBox().height;\n        if(withMargins){\n            h+= parseInt(this.config.title.margin.bottom);\n            h+= parseInt(this.config.title.margin.top);\n        }\n        return h;\n    }\n\n}\n","export * from './src/index'\n"]}