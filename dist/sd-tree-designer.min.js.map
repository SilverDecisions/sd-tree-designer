{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app-utils.js","src/context-menu/context-menu.js","src/context-menu/edge-context-menu.js","src/context-menu/main-context-menu.js","src/context-menu/node-context-menu.js","src/context-menu/text-context-menu.js","src/d3-extensions.js","src/d3.js","src/i18n/de.json","src/i18n/en.json","src/i18n/fr.json","src/i18n/i18n.js","src/i18n/it.json","src/i18n/pl.json","src/index.js","src/layout.js","src/node-drag-handler.js","src/symbols/circle.js","src/symbols/triangle.js","src/templates.js","src/templates/growl_message.html","src/text-drag-handler.js","src/tooltip.js","src/tree-designer.js","index.js"],"names":["require","r","e","n","t","o","i","f","c","u","a","Error","code","p","exports","call","length","1","module","d3","_interopRequireWildcard","_templates","_i18n","_sdUtils","AppUtils","textD3Obj","textString","width","textObj","node","textContent","getComputedTextLength","x","getSubStringLength","substring","tooltip","placeTextWithEllipsis","on","d","transition","duration","style","html","event","pageX","pageY","element","window","getComputedStyle","getPropertyValue","transform","g","document","createElementNS","setAttributeNS","matrix","baseVal","consolidate","pathNode","point","best","bestLength","scan","scanDistance","before","after","afterLength","beforeDistance","afterDistance","pathLength","getTotalLength","precision","bestDistance","Infinity","scanLength","distance2","getPointAtLength","beforeLength","y","distance","Math","sqrt","dx","dy","message","type","arguments","undefined","position","time","Templates","get","select","selectOrAppend","append","setTimeout","remove","tag","attribs","parent","el","createElement","deepExtend","appendChild","parentNode","removeChild","text","replace","createTextNode","div","innerHTML","name","evt","createEvent","initEvent","dispatchEvent","fireEvent","data","CustomEvent","detail","initCustomEvent","error","key","Utils","isString","i18n","selection","classed","display","offsetParent","url","callback","xhr","XMLHttpRequest","open","responseType","onload","status","response","send","sanitizeHeight","height","container","parseInt","sanitizeWidth","availableHeight","margin","max","top","bottom","availableWidth","left","right","ContextMenu","menu","opts","_classCallCheck","this","self","openCallback","onOpen","closeCallback","onClose","selectAll","enter","attr","index","elm","preventDefault","stopPropagation","ret","divider","disabled","action","title","console","_contextMenu","EdgeContextMenu","treeDesigner","_this","_super","push","injectDecisionNode","injectChanceNode","_sdModel","MainContextMenu","mousePosition","newNode","domain","DecisionNode","addNode","ChanceNode","newText","Text","addText","pasteToNewLocation","copiedNodes","selectAllNodes","clearSelection","Point","mouse","svg","move","getMainGroupTranslation","NodeContextMenu","operationsForObject","copyMenuItem","selectNode","isNodeSelected","copySelectedNodes","cutMenuItem","cutSelectedNodes","pasteMenuItem","pasteToNode","folded","deleteMenuItem","removeSelectedNodes","TerminalNode","$TYPE","addNodeConversionOptions","addDecisionNode","addChanceNode","addTerminalNode","selectSubTree","foldSubtree","operations","forEach","op","performOperation","canPerform","conversionOptions","getNodeConversionOptions","options","allAllowedTypes","childEdges","$parent","filter","getNodeConversionOption","typeToConvertTo","convertNode","TextContextMenu","selectText","removeSelectedTexts","prototype","insertSelector","selector","D3Extensions","appendSelector","selectOrInsert","operation","selectorParts","split","shift","selectorModifier","selectorItem","insertOrAppendSelector","empty","_d3Dispatch","Object","keys","defineProperty","enumerable","_d3Scale","_d3Selection","_d3Shape","_d3Drag","_d3Brush","_d3Array","_d3Hierarchy","_d3TimeFormat","contextMenu","main","paste","copy","cut","delete","convert","decision","chance","terminal","selectSubtree","fold","unfold","flipSubtree","payoffsTransformation","edge","validation","incompletePath","probabilityDoNotSumUpTo1","invalidProbability","invalidPayoff","growl","brushDisabled","brushEnabled","payoff","default","named","aggregatedPayoff","probabilityToEnter","probability","_i18next","en","pl","it","de","fr","lng","language","$instance","createInstance","fallbackLng","resources","translation","err","opt","_d3Extensions","hasOwnProperty","_exportNames","_treeDesigner","_appUtils","_tooltip","_d","extend","_circle","_interopRequireDefault","_triangle","Layout","config","nodeTypeToSymbol","symbolSquare","onAutoLayoutChanged","nodeTypeOrder","treeMargin","targetSymbolSize","nodeSeparation","b","nodeSymbolSize","$location","location","isHidden","each","getBBox","sort","childNode","isManualLayout","autoLayout","moveNodeToEmptyPlace","redraw","MANUAL_LAYOUT_NAME","getNodeMinX","getNodeMinY","gridWidth","$linePoints","redrawIfChanged","nodesSortedByX","nodes","slice","colidingNode","stepX","nodeSize","stepY","changed","newLocation","find","findCollidingNode","moveTo","_fireOnAutoLayoutChangedCallbacks","path","nodeSymbol","symbol","size","id","box","min","set","setHangingPosition","fontSize","getFontSize","items","displayValue","isArray","aggregatedPayoffs","line","dX","sign","slantStartXOffset","slantWidth","edgeSlantWidthMax","point1","point2","point3","point4","datum","len","previousSibling","childNodes","minX","bb","getTextD3Selection","minY","Number","MAX_SAFE_INTEGER","getMinMarginBetweenNodes","$hidden","withoutStateSaving","saveState","onUndo","setGridWidth","onRedo","update","gridHeight","setGridHeight","setNodeSize","fitNodesInPlottingRegion","getRoots","setEdgeSlantWidthMax","newLayout","currentLayout","prevTreeMaxY","root","hierarchy","map","layout","cluster","tree","separation","maxY","pivot","limit","limitNodePositioning","maxX","backupNodeLocation","getNodeMaxX","revertX","updateNodePosition","texts","limitTextPositioning","getTextMinX","getTextMaxX","getTextMinY","updateTextPosition","NodeDragHandler","stateSnapshot","drag","subject","getTranslation","dragStarted","onDrag","dragEnded","ignoreDrag","ignoredDrag","createStateSnapshot","hide","selectedNodes","getSelectedNodes","prevDragEvent","dragEventCount","draggedNode","saveStateFromSnapshot","moveNodes","redrawEdges","updatePlottingRegionSize","pi","PI","draw","context","dist","bezierCurveTo","lineTo","closePath","templateName","variables","compiled","template","imports","include","v","props","s","styleProp","styleName","variableName","clazz","treeDesignerSelector","treeDesignerStyles","styleRule","nodeSelector","edgeSelector","TextDragHandler","draggedText","moveTexts","Tooltip","xOffset","yOffset","getContainer","updatePosition","target","htmlOrFn","isFunction","show","_mainContextMenu","_nodeContextMenu","_layout","_nodeDragHandler","_textDragHandler","_textContextMenu","_edgeContextMenu","Hammer","TreeDesignerConfig","custom","scale","fontFamily","fontWeight","fontStyle","strokeWidth","optimal","stroke","label","color","negativeColor","fill","selected","description","readOnly","disableAnimations","forceFullEdgeRedraw","hideLabels","hidePayoffs","hideProbabilities","raw","payoffNumberFormatter","probabilityNumberFormatter","onNodeSelected","onEdgeSelected","onTextSelected","onSelectionCleared","object","Promise","resolve","payoffNames","maxPayoffsToDisplay","TreeDesigner","dataModel","setConfig","initContainer","init","updateCustomStyles","initSvg","initLayout","initI18n","initBrush","initEdgeMarkers","initMainContextMenu","initNodeContextMenu","initEdgeContextMenu","initNodeDragHandler","initTextDragHandler","initTextContextMenu","nodeDragHandler","textDragHandler","withTransitions","redrawDiagramTitle","redrawDiagramDescription","updateScale","updateMargin","transitionPrev","redrawNodes","redrawFloatingTexts","updateValidationMessages","computeAvailableSpace","wrapperGroup","mainGroup","mc","Manager","touchAction","add","Press","pointerType","Pinch","disableBrush","waitForFinalEvent","enableBrush","group","topMargin","diagramTitle","diagramDescription","getTitleGroupHeight","clone","setMargin","setScale","containerIdOrElem","trim","startsWith","_parents","svgWidth","svgHeight","mainGroupBox","newSvgWidth","newSvgHeight","updateBrushExtent","exit","nodesEnter","labelEnter","payoffEnter","indicatorEnter","aggregatedPayoffEnter","probabilityToEnterEnter","nodesMerge","merge","isOptimal","nodesMergeT","drawNodeSymbol","nodeLabelPosition","labelMergeT","updateTextLines","payoffTspans","item","payoffTspansM","val","isNaN","attachPayoffTooltip","payoffT","nodePayoffPosition","aggregatedPayoffTspans","aggregatedPayoffTspansM","aggregatedPayoffT","nodeAggregatedPayoffPosition","attach","probabilityToEnterT","nodeProbabilityToEnterPosition","indicator","nodeIndicatorPosition","nodeContextMenu","cancelDrag","button","nodeUnfoldButtonPosition","payoffFiledName","value","number","lines","reverse","tspans","l","edgesContainer","edges","edgesEnter","probabilityEnter","edgesMerge","optimalClassName","edgesMergeT","edgeLineD","selectEdge","edgeLabelPosition","_","displayPayoff","payoffTextT","edgePayoffPosition","displayProbability","probabilityMerge","probabilityMergeT","edgeProbabilityPosition","raise","edgeContextMenu","POINTER_TOUCH","textsEnter","textsMerge","textsMergeT","replaceUrls","escapeHtml","textContextMenu","_this2","validationResults","validationResult","isValid","getOwnPropertyNames","objectIdToError","errors","nodeSelection","getNodeD3SelectionById","tooltipHtml","getValidationMessage","initArrowMarker","brush","extent","brushContainer","hoveredEdge","mainGroupTranslation","offset","m","mgt","closest","cp","closestPoint","invert","mainContextMenu","getNewChildLocation","injectNode","getInjectedNodeLocation","removeNode","removeNodes","selectedTexts","getSelectedTexts","removeTexts","notClearPrevSelection","cloneSubtree","copyNode","selectedRoots","findSubtreeRoots","copyNodes","_this3","nodesToAttach","_this4","toAttach","attached","attachSubtree","getAllDescendantNodes","_this5","then","getAllDescendantEdges","_this6","updateVisibility","getNodeD3Selection","getTextD3SelectionById","_this7","visibleOnly","selectedVisible","allSelected","apply","_toConsumableArray","descendants","_this8","clearSelectionBeforeSelect","skipCallback","_this9","titleValue","titleContainer","marginTop","desc","descriptionValue","withMargins","h","_index"],"mappings":"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","file":"sd-tree-designer.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import * as d3 from \"./d3\";\r\nimport {Templates} from \"./templates\";\r\nimport {i18n} from \"./i18n/i18n\";\r\nimport {Utils} from \"sd-utils\";\r\n\r\nexport class AppUtils {\r\n\r\n    static sanitizeHeight = function (height, container) {\r\n        return (height || parseInt(container.style('height'), 10) || 400);\r\n    };\r\n\r\n    static sanitizeWidth = function (width, container) {\r\n        return (width || parseInt(container.style('width'), 10) || 960);\r\n    };\r\n\r\n    static availableHeight = function (height, container, margin) {\r\n        return Math.max(0, AppUtils.sanitizeHeight(height, container) - margin.top - margin.bottom);\r\n    };\r\n\r\n    static availableWidth = function (width, container, margin) {\r\n        return Math.max(0, AppUtils.sanitizeWidth(width, container) - margin.left - margin.right);\r\n    };\r\n\r\n    //places textString in textObj, adds an ellipsis if text can't fit in width\r\n    static placeTextWithEllipsis(textD3Obj, textString, width) {\r\n        var textObj = textD3Obj.node();\r\n        textObj.textContent = textString;\r\n\r\n        var margin = 0;\r\n        var ellipsisLength = 9;\r\n        //ellipsis is needed\r\n        if (textObj.getComputedTextLength() > width + margin) {\r\n            for (var x = textString.length - 3; x > 0; x -= 1) {\r\n                if (textObj.getSubStringLength(0, x) + ellipsisLength <= width + margin) {\r\n                    textObj.textContent = textString.substring(0, x) + \"...\";\r\n                    return true;\r\n                }\r\n            }\r\n            textObj.textContent = \"...\"; //can't place at all\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static placeTextWithEllipsisAndTooltip(textD3Obj, textString, width, tooltip) {\r\n        var ellipsisPlaced = AppUtils.placeTextWithEllipsis(textD3Obj, textString, width);\r\n        if (ellipsisPlaced && tooltip) {\r\n            textD3Obj.on(\"mouseover\", function (d) {\r\n                tooltip.transition()\r\n                    .duration(200)\r\n                    .style(\"opacity\", .9);\r\n                tooltip.html(textString)\r\n                    .style(\"left\", (d3.event.pageX + 5) + \"px\")\r\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\r\n            });\r\n\r\n            textD3Obj.on(\"mouseout\", function (d) {\r\n                tooltip.transition()\r\n                    .duration(500)\r\n                    .style(\"opacity\", 0);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    static getFontSize(element) {\r\n        return window.getComputedStyle(element, null).getPropertyValue(\"font-size\");\r\n    }\r\n\r\n    static getTranslation(transform) {\r\n        // Create a dummy g for calculation purposes only. This will never\r\n        // be appended to the DOM and will be discarded once this function\r\n        // returns.\r\n        var g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\r\n\r\n        // Set the transform attribute to the provided string value.\r\n        g.setAttributeNS(null, \"transform\", transform);\r\n\r\n        // consolidate the SVGTransformList containing all transformations\r\n        // to a single SVGTransform of type SVG_TRANSFORM_MATRIX and get\r\n        // its SVGMatrix.\r\n        var matrix = g.transform.baseVal.consolidate().matrix;\r\n\r\n        // As per definition values e and f are the ones for the translation.\r\n        return [matrix.e, matrix.f];\r\n    }\r\n\r\n\r\n    static closestPoint(pathNode, point) {\r\n        var pathLength = pathNode.getTotalLength(),\r\n            precision = 8,\r\n            best,\r\n            bestLength,\r\n            bestDistance = Infinity;\r\n\r\n        // linear scan for coarse approximation\r\n        for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\r\n            if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\r\n                best = scan, bestLength = scanLength, bestDistance = scanDistance;\r\n            }\r\n        }\r\n\r\n        // binary search for precise estimate\r\n        precision /= 2;\r\n        while (precision > 0.5) {\r\n            var before,\r\n                after,\r\n                beforeLength,\r\n                afterLength,\r\n                beforeDistance,\r\n                afterDistance;\r\n            if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\r\n                best = before, bestLength = beforeLength, bestDistance = beforeDistance;\r\n            } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\r\n                best = after, bestLength = afterLength, bestDistance = afterDistance;\r\n            } else {\r\n                precision /= 2;\r\n            }\r\n        }\r\n\r\n        best = [best.x, best.y];\r\n        best.distance = Math.sqrt(bestDistance);\r\n        return best;\r\n\r\n        function distance2(p) {\r\n            var dx = p.x - point[0],\r\n                dy = p.y - point[1];\r\n            return dx * dx + dy * dy;\r\n        }\r\n    }\r\n\r\n    static growl(message, type='info', position='right', time = 2000){\r\n        var html = Templates.get('growl', {message:message, type:type})\r\n\r\n        var g = d3.select('body').selectOrAppend('div.sd-growl-list.'+position).append('div').html(html);\r\n        setTimeout(function(){\r\n            g.remove();\r\n        }, time)\r\n    }\r\n\r\n\r\n    static createElement(tag, attribs, parent) {\r\n        var el = document.createElement(tag);\r\n\r\n        if (attribs) {\r\n            AppUtils.deepExtend(el, attribs);\r\n        }\r\n        if (parent) {\r\n            parent.appendChild(el);\r\n        }\r\n        return el;\r\n    };\r\n\r\n    static removeElement(element) {\r\n        element.parentNode.removeChild(element);\r\n    }\r\n\r\n    static replaceUrls(text){\r\n        if(!text){\r\n            return text;\r\n        }\r\n        var urlRegexp = /((ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?)/\r\n\r\n        return text.replace(urlRegexp, '<a href=\"$1\" target=\"_blank\">$1</a>');\r\n    }\r\n\r\n    static escapeHtml(html)\r\n    {\r\n        var text = document.createTextNode(html);\r\n        var div = document.createElement('div');\r\n        div.appendChild(text);\r\n        return div.innerHTML;\r\n    }\r\n\r\n    static dispatchHtmlEvent(element, name){\r\n        if (\"createEvent\" in document) {\r\n            var evt = document.createEvent(\"HTMLEvents\");\r\n            evt.initEvent(name, false, true);\r\n            element.dispatchEvent(evt);\r\n        }\r\n        else\r\n            element.fireEvent(\"on\"+name);\r\n    }\r\n\r\n    static dispatchEvent(name, data){\r\n        var event;\r\n        try{\r\n            event = new  CustomEvent(name,{ 'detail': data });\r\n        }catch (e){ //IE\r\n            event = document.createEvent('CustomEvent');\r\n            event.initCustomEvent(name, false, false, data);\r\n        }\r\n        document.dispatchEvent(event);\r\n    }\r\n\r\n    static getValidationMessage(error){\r\n        if(Utils.isString(error)){\r\n            error = {name: error};\r\n        }\r\n        var key = 'validation.' + error.name;\r\n        return i18n.t(key, error.data);\r\n    }\r\n\r\n    static hide(selection){\r\n        selection.classed('sd-hidden', true);\r\n    }\r\n\r\n    static show(selection, show=true){\r\n        selection.classed('sd-hidden', !show);\r\n    }\r\n\r\n\r\n\r\n    static isHidden(el, exact = true) {\r\n        if(!el){\r\n            return true;\r\n        }\r\n        if(exact){\r\n            var style = window.getComputedStyle(el);\r\n            return (style.display === 'none')\r\n        }\r\n        return (el.offsetParent === null)\r\n    }\r\n\r\n    static getJSON(url, callback) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open('get', url, true);\r\n        xhr.responseType = 'json';\r\n        xhr.onload = function () {\r\n            var status = xhr.status;\r\n            if (status == 200) {\r\n                callback(xhr.response, null);\r\n            } else {\r\n                callback(null, status);\r\n            }\r\n        };\r\n        xhr.send();\r\n    }\r\n}\r\n","import * as d3 from '../d3'\r\n\r\n/*based on:\r\n * github.com/patorjk/d3-context-menu */\r\n\r\nexport class ContextMenu {\r\n    openCallback;\r\n    closeCallback;\r\n\r\n    constructor(menu, opts) {\r\n        var self = this;\r\n\r\n        if (typeof opts === 'function') {\r\n            self.openCallback = opts;\r\n        } else {\r\n            opts = opts || {};\r\n            self.openCallback = opts.onOpen;\r\n            self.closeCallback = opts.onClose;\r\n        }\r\n\r\n        // create the div element that will hold the context menu\r\n        d3.selectAll('.d3-context-menu').data([1])\r\n            .enter()\r\n            .append('div')\r\n            .attr('class', 'd3-context-menu');\r\n\r\n        // close menu\r\n        d3.select('body').on('click.d3-context-menu', function () {\r\n            d3.select('.d3-context-menu').style('display', 'none');\r\n            if (self.closeCallback) {\r\n                self.closeCallback();\r\n            }\r\n        });\r\n\r\n        // this gets executed when a contextmenu event occurs\r\n        return function (data, index) {\r\n            var elm = this;\r\n\r\n            d3.selectAll('.d3-context-menu').html('');\r\n            var list = d3.selectAll('.d3-context-menu')\r\n                .on('contextmenu', function (d) {\r\n                    d3.select('.d3-context-menu').style('display', 'none');\r\n                    d3.event.preventDefault();\r\n                    d3.event.stopPropagation();\r\n                })\r\n                .append('ul');\r\n            list.selectAll('li').data(typeof menu === 'function' ? menu(data) : menu).enter()\r\n                .append('li')\r\n                .attr('class', function (d) {\r\n                    var ret = '';\r\n                    if (d.divider) {\r\n                        ret += ' is-divider';\r\n                    }\r\n                    if (d.disabled) {\r\n                        ret += ' is-disabled';\r\n                    }\r\n                    if (!d.action) {\r\n                        ret += ' is-header';\r\n                    }\r\n                    return ret;\r\n                })\r\n                .html(function (d) {\r\n                    if (d.divider) {\r\n                        return '<hr>';\r\n                    }\r\n                    if (!d.title) {\r\n                        console.error('No title attribute set. Check the spelling of your options.');\r\n                    }\r\n                    return (typeof d.title === 'string') ? d.title : d.title(data);\r\n                })\r\n                .on('click', function (d, i) {\r\n                    if (d.disabled) return; // do nothing if disabled\r\n                    if (!d.action) return; // headers have no \"action\"\r\n                    d.action(elm, data, index);\r\n                    d3.select('.d3-context-menu').style('display', 'none');\r\n\r\n                    if (self.closeCallback) {\r\n                        self.closeCallback();\r\n                    }\r\n                });\r\n\r\n            // the openCallback allows an action to fire before the menu is displayed\r\n            // an example usage would be closing a tooltip\r\n            if (self.openCallback) {\r\n                if (self.openCallback(data, index) === false) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // display context menu\r\n            d3.select('.d3-context-menu')\r\n                .style('left', (d3.event.pageX - 2) + 'px')\r\n                .style('top', (d3.event.pageY - 2) + 'px')\r\n                .style('display', 'block');\r\n\r\n            d3.event.preventDefault();\r\n            d3.event.stopPropagation();\r\n        };\r\n    };\r\n\r\n    static hide() {\r\n        d3.select('.d3-context-menu').style('display', 'none');\r\n    }\r\n\r\n}\r\n","import {ContextMenu} from './context-menu'\r\nimport {i18n} from \"../i18n/i18n\";\r\n\r\nexport class EdgeContextMenu extends ContextMenu {\r\n    treeDesigner;\r\n\r\n    constructor(treeDesigner) {\r\n        var menu = function (d) {\r\n\r\n            var menu = [];\r\n\r\n            menu.push({\r\n                title: i18n.t('contextMenu.edge.injectDecisionNode'),\r\n                action: function (elm, d, i) {\r\n                    treeDesigner.injectDecisionNode(d)\r\n                }\r\n            });\r\n            menu.push({\r\n                title: i18n.t('contextMenu.edge.injectChanceNode'),\r\n                action: function (elm, d, i) {\r\n                    treeDesigner.injectChanceNode(d)\r\n                }\r\n            });\r\n\r\n\r\n            return menu;\r\n        };\r\n\r\n        super(menu);\r\n        this.treeDesigner = treeDesigner;\r\n    }\r\n}\r\n","import {ContextMenu} from './context-menu'\r\nimport {domain as model} from 'sd-model'\r\nimport * as d3 from '../d3'\r\nimport {i18n} from \"../i18n/i18n\";\r\n\r\nexport class MainContextMenu extends ContextMenu {\r\n    treeDesigner;\r\n\r\n    constructor(treeDesigner) {\r\n        var mousePosition = null;\r\n        var menu = function (d) {\r\n\r\n            var menu = [];\r\n            menu.push({\r\n                title: i18n.t('contextMenu.main.addDecisionNode'),\r\n                action: function (elm, d, i) {\r\n                    var newNode = new model.DecisionNode(mousePosition);\r\n                    treeDesigner.addNode(newNode)\r\n                }\r\n            });\r\n            menu.push({\r\n                title: i18n.t('contextMenu.main.addChanceNode'),\r\n                action: function (elm, d, i) {\r\n                    var newNode = new model.ChanceNode(mousePosition);\r\n                    treeDesigner.addNode(newNode)\r\n                }\r\n            });\r\n            menu.push({divider: true});\r\n            menu.push({\r\n                title: i18n.t('contextMenu.main.addText'),\r\n                action: function (elm, d, i) {\r\n                    var newText = new model.Text(mousePosition);\r\n                    treeDesigner.addText(newText);\r\n                },\r\n\r\n            });\r\n            menu.push({divider: true});\r\n            menu.push({\r\n                title: i18n.t('contextMenu.main.paste'),\r\n                action: function (elm, d, i) {\r\n                    treeDesigner.pasteToNewLocation(mousePosition);\r\n                },\r\n                disabled: !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\r\n\r\n            });\r\n            menu.push({divider: true});\r\n\r\n            menu.push({\r\n                title: i18n.t('contextMenu.main.selectAllNodes'),\r\n                action: function (elm, d, i) {\r\n                    treeDesigner.selectAllNodes();\r\n                }\r\n            });\r\n            return menu;\r\n        };\r\n\r\n        super(menu, {onOpen: () => {\r\n            treeDesigner.clearSelection();\r\n            mousePosition = new model.Point(d3.mouse(treeDesigner.svg.node())).move(treeDesigner.getMainGroupTranslation(true));\r\n\r\n        }});\r\n        this.treeDesigner = treeDesigner;\r\n    }\r\n}\r\n","import {ContextMenu} from './context-menu'\r\nimport {domain as model} from 'sd-model'\r\nimport {i18n} from \"../i18n/i18n\";\r\n\r\nexport class NodeContextMenu extends ContextMenu {\r\n    treeDesigner;\r\n\r\n    constructor(treeDesigner, operationsForObject) {\r\n        var menu = function (d) {\r\n\r\n            var copyMenuItem = {\r\n                title: i18n.t('contextMenu.node.copy'),\r\n                action: function (elm, d, i) {\r\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\r\n                    treeDesigner.copySelectedNodes();\r\n                }\r\n            };\r\n            var cutMenuItem = {\r\n                title: i18n.t('contextMenu.node.cut'),\r\n                action: function (elm, d, i) {\r\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\r\n                    treeDesigner.cutSelectedNodes();\r\n                }\r\n            };\r\n            var pasteMenuItem = {\r\n                title: i18n.t('contextMenu.node.paste'),\r\n                action: function (elm, d, i) {\r\n                    treeDesigner.pasteToNode(d);\r\n                },\r\n                disabled: d.folded || !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\r\n\r\n            };\r\n            var deleteMenuItem = {\r\n                title: i18n.t('contextMenu.node.delete'),\r\n                action: function (elm, d, i) {\r\n\r\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\r\n                    treeDesigner.removeSelectedNodes();\r\n\r\n                }\r\n            };\r\n\r\n            var menu = [];\r\n            if (d.type == model.TerminalNode.$TYPE) {\r\n                menu = [copyMenuItem, cutMenuItem, deleteMenuItem];\r\n                NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\r\n                return menu;\r\n            }\r\n\r\n            if(!d.folded){\r\n                menu.push({\r\n                    title: i18n.t('contextMenu.node.addDecisionNode'),\r\n                    action: function (elm, d, i) {\r\n                        treeDesigner.addDecisionNode(d)\r\n                    }\r\n                });\r\n                menu.push({\r\n                    title: i18n.t('contextMenu.node.addChanceNode'),\r\n                    action: function (elm, d, i) {\r\n                        treeDesigner.addChanceNode(d)\r\n                    }\r\n                });\r\n                menu.push({\r\n                    title: i18n.t('contextMenu.node.addTerminalNode'),\r\n                    action: function (elm, d, i) {\r\n                        treeDesigner.addTerminalNode(d)\r\n                    }\r\n                });\r\n                menu.push({divider: true});\r\n            }\r\n\r\n            menu.push(copyMenuItem);\r\n            menu.push(cutMenuItem);\r\n            menu.push(pasteMenuItem);\r\n            menu.push(deleteMenuItem);\r\n\r\n            NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\r\n            menu.push({divider: true});\r\n            menu.push({\r\n                title: i18n.t('contextMenu.node.selectSubtree'),\r\n                action: function (elm, d, i) {\r\n                    treeDesigner.selectSubTree(d, true);\r\n                }\r\n            });\r\n\r\n            if(!d.folded){\r\n                menu.push({\r\n                    title: i18n.t('contextMenu.node.fold'),\r\n                    action: function (elm, d, i) {\r\n                        treeDesigner.foldSubtree(d);\r\n                    }\r\n                });\r\n            }else{\r\n                menu.push({\r\n                    title: i18n.t('contextMenu.node.unfold'),\r\n                    action: function (elm, d, i) {\r\n                        treeDesigner.foldSubtree(d, false);\r\n                    }\r\n                });\r\n            }\r\n\r\n            if(operationsForObject){\r\n                var operations = operationsForObject(d);\r\n                if(operations.length) {\r\n                    menu.push({divider: true});\r\n                    operations.forEach(op=>{\r\n                        menu.push({\r\n                            title: i18n.t('contextMenu.node.'+op.name),\r\n                            action: function (elm, d, i) {\r\n                                treeDesigner.performOperation(d, op);\r\n                            },\r\n                            disabled: !op.canPerform(d)\r\n                        });\r\n                    })\r\n                }\r\n            }\r\n\r\n            return menu;\r\n        };\r\n\r\n        super(menu);\r\n        this.treeDesigner = treeDesigner;\r\n    }\r\n\r\n    static addNodeConversionOptions(d, menu, treeDesigner){\r\n        var conversionOptions = NodeContextMenu.getNodeConversionOptions(d, treeDesigner);\r\n        if(conversionOptions.length){\r\n            menu.push({divider: true});\r\n            conversionOptions.forEach(o=>menu.push(o));\r\n\r\n        }\r\n    }\r\n\r\n    static getNodeConversionOptions(d, treeDesigner){\r\n        var options = [];\r\n\r\n        if(d.folded){\r\n            return [];\r\n        }\r\n\r\n        var allAllowedTypes = [model.DecisionNode.$TYPE, model.ChanceNode.$TYPE, model.TerminalNode.$TYPE];\r\n\r\n        if(!d.childEdges.length && d.$parent){\r\n            allAllowedTypes.filter(t=>t!==d.type).forEach(type=>{\r\n                options.push(NodeContextMenu.getNodeConversionOption(type, treeDesigner))\r\n            })\r\n        }else{\r\n            if(d instanceof model.DecisionNode){\r\n                options.push(NodeContextMenu.getNodeConversionOption(model.ChanceNode.$TYPE, treeDesigner))\r\n            }else{\r\n                options.push(NodeContextMenu.getNodeConversionOption(model.DecisionNode.$TYPE, treeDesigner))\r\n            }\r\n        }\r\n        return options;\r\n    }\r\n\r\n    static getNodeConversionOption(typeToConvertTo, treeDesigner){\r\n        return {\r\n            title: i18n.t('contextMenu.node.convert.'+typeToConvertTo),\r\n            action: function (elm, d, i) {\r\n                treeDesigner.convertNode(d, typeToConvertTo);\r\n            },\r\n        }\r\n    }\r\n}\r\n","import {ContextMenu} from './context-menu'\r\nimport {i18n} from \"../i18n/i18n\";\r\n\r\nexport class TextContextMenu extends ContextMenu {\r\n    treeDesigner;\r\n\r\n    constructor(treeDesigner) {\r\n        var menu = function (d) {\r\n\r\n\r\n            var deleteMenuItem = {\r\n                title: i18n.t('contextMenu.text.delete'),\r\n                action: function (elm, d, i) {\r\n\r\n                    treeDesigner.selectText(d, true, true);\r\n                    treeDesigner.removeSelectedTexts()\r\n\r\n                }\r\n            };\r\n            var menu = [];\r\n            menu.push(deleteMenuItem);\r\n            return menu;\r\n        };\r\n\r\n        super(menu);\r\n        this.treeDesigner = treeDesigner;\r\n    }\r\n}\r\n","import * as d3 from './d3'\r\n\r\nexport class D3Extensions {\r\n\r\n    static extend() {\r\n\r\n        d3.selection.prototype.enter.prototype.insertSelector =\r\n            d3.selection.prototype.insertSelector = function (selector, before) {\r\n                return D3Extensions.insertSelector(this, selector, before);\r\n            };\r\n\r\n\r\n        d3.selection.prototype.enter.prototype.appendSelector =\r\n            d3.selection.prototype.appendSelector = function (selector) {\r\n                return D3Extensions.appendSelector(this, selector);\r\n            };\r\n\r\n        d3.selection.prototype.enter.prototype.selectOrAppend =\r\n            d3.selection.prototype.selectOrAppend = function (selector) {\r\n                return D3Extensions.selectOrAppend(this, selector);\r\n            };\r\n\r\n        d3.selection.prototype.enter.prototype.selectOrInsert =\r\n            d3.selection.prototype.selectOrInsert = function (selector, before) {\r\n                return D3Extensions.selectOrInsert(this, selector, before);\r\n            };\r\n\r\n\r\n    }\r\n\r\n    static insertOrAppendSelector(parent, selector, operation, before) {\r\n\r\n        var selectorParts = selector.split(/([\\.\\#])/);\r\n        var element = parent[operation](selectorParts.shift(), before);//\":first-child\"\r\n\r\n        while (selectorParts.length > 1) {\r\n            var selectorModifier = selectorParts.shift();\r\n            var selectorItem = selectorParts.shift();\r\n            if (selectorModifier === \".\") {\r\n                element = element.classed(selectorItem, true);\r\n            } else if (selectorModifier === \"#\") {\r\n                element = element.attr('id', selectorItem);\r\n            }\r\n        }\r\n        return element;\r\n    }\r\n\r\n    static insertSelector(parent, selector, before) {\r\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"insert\", before);\r\n    }\r\n\r\n    static appendSelector(parent, selector) {\r\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"append\");\r\n    }\r\n\r\n    static selectOrAppend(parent, selector, element) {\r\n        var selection = parent.select(selector);\r\n        if (selection.empty()) {\r\n            if (element) {\r\n                return parent.append(element);\r\n            }\r\n            return D3Extensions.appendSelector(parent, selector);\r\n\r\n        }\r\n        return selection;\r\n    };\r\n\r\n    static selectOrInsert(parent, selector, before) {\r\n        var selection = parent.select(selector);\r\n        if (selection.empty()) {\r\n            return D3Extensions.insertSelector(parent, selector, before);\r\n        }\r\n        return selection;\r\n    };\r\n}\r\n","export * from 'd3-dispatch';\r\nexport * from 'd3-scale';\r\nexport * from 'd3-selection';\r\nexport * from 'd3-shape'\r\nexport * from 'd3-drag';\r\nexport * from 'd3-brush'\r\nexport * from 'd3-array'\r\nexport * from 'd3-hierarchy'\r\nexport * from 'd3-time-format'\r\n","module.exports={\r\n    \"contextMenu\":{\r\n        \"main\":{\r\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\r\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\r\n            \"addText\": \"Text hinzufügen \",\r\n            \"paste\": \"Einfügen\",\r\n            \"selectAllNodes\": \"Alle Knoten auswählen\"\r\n        },\r\n        \"node\":{\r\n            \"copy\": \"Kopieren\",\r\n            \"cut\": \"Ausschneiden\",\r\n            \"paste\": \"Einfügen\",\r\n            \"delete\": \"Löschen\",\r\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\r\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\r\n            \"addTerminalNode\": \"Endknotten hinzufügen\",\r\n            \"convert\":{\r\n                \"decision\": \"Als Entscheidungsknoten\",\r\n                \"chance\": \"Als Zufall Knoten\",\r\n                \"terminal\": \"Als Endknoten\"\r\n            },\r\n            \"selectSubtree\": \"Teilbaum wählen\",\r\n            \"fold\": \"Teilbaum falten\",\r\n            \"unfold\": \"Teilbaum entfalten\",\r\n\r\n            \"flipSubtree\": \"Teilbaum umdrehen\",\r\n            \"payoffsTransformation\": \"Auszahlungen transformieren\"\r\n        },\r\n        \"edge\":{\r\n            \"injectDecisionNode\": \"Entscheidungsknoten Injizieren\",\r\n            \"injectChanceNode\": \"Zufall Knoten Injizieren\"\r\n        },\r\n        \"text\":{\r\n            \"delete\": \"Löschen\"\r\n        }\r\n    },\r\n    \"validation\":{\r\n        \"incompletePath\": \"Pfad, der nicht mit dem Endknoten endet\",\r\n        \"probabilityDoNotSumUpTo1\": \"Die Summe der Wahrscheinlichkeiten ist nicht gleich 1\",\r\n        \"invalidProbability\": \"Ungültige Wahrscheinlichkeit im Zweig #{{number}}\",\r\n        \"invalidPayoff\": \"Ungültige Auszahlung in Zweig #{{number}}\"\r\n    },\r\n    \"growl\":{\r\n        \"brushDisabled\": \"Auswahlbürste deaktiviert\",\r\n        \"brushEnabled\": \"Auswahlbürste aktiviert\"\r\n    },\r\n    \"tooltip\":{\r\n        \"node\":{\r\n            \"payoff\": {\r\n                \"default\": \"Auszahlung {{number}}\",\r\n                \"named\": \"{{name}}\"\r\n            },\r\n            \"aggregatedPayoff\": {\r\n                \"default\": \"Aggregierte Auszahlung {{number}}\",\r\n                \"named\": \"Aggregierte {{name}}\"\r\n            },\r\n            \"probabilityToEnter\": \"Wahrscheinlichkeit\"\r\n        },\r\n        \"edge\":{\r\n            \"payoff\": {\r\n                \"default\": \"Auszahlung {{number}}: {{value}}\",\r\n                \"named\": \"{{name}}: {{value}}\"\r\n            },\r\n            \"probability\": \"Wahrscheinlichkeit: {{value}}\"\r\n        }\r\n    }\r\n}\r\n","module.exports={\r\n    \"contextMenu\":{\r\n        \"main\":{\r\n            \"addDecisionNode\": \"Add Decision Node\",\r\n            \"addChanceNode\": \"Add Chance Node\",\r\n            \"addText\": \"Add Text\",\r\n            \"paste\": \"Paste\",\r\n            \"selectAllNodes\": \"Select all nodes\"\r\n        },\r\n        \"node\":{\r\n            \"copy\": \"Copy\",\r\n            \"cut\": \"Cut\",\r\n            \"paste\": \"Paste\",\r\n            \"delete\": \"Delete\",\r\n            \"addDecisionNode\": \"Add Decision Node\",\r\n            \"addChanceNode\": \"Add Chance Node\",\r\n            \"addTerminalNode\": \"Add Terminal Node\",\r\n            \"convert\":{\r\n                \"decision\": \"As Decision Node\",\r\n                \"chance\": \"As Chance Node\",\r\n                \"terminal\": \"As Terminal Node\"\r\n            },\r\n            \"selectSubtree\": \"Select subtree\",\r\n            \"fold\": \"Fold subtree\",\r\n            \"unfold\": \"Unfold subtree\",\r\n            \"flipSubtree\": \"Flip subtree\",\r\n            \"payoffsTransformation\": \"Transform payoffs\"\r\n        },\r\n        \"edge\":{\r\n            \"injectDecisionNode\": \"Inject Decision Node\",\r\n            \"injectChanceNode\": \"Inject Chance Node\"\r\n        },\r\n        \"text\":{\r\n            \"delete\": \"Delete\"\r\n        }\r\n    },\r\n    \"validation\":{\r\n        \"incompletePath\": \"Path not ending with terminal node\",\r\n        \"probabilityDoNotSumUpTo1\": \"Probabilities do not sum up to 1\",\r\n        \"invalidProbability\": \"Invalid probability in edge #{{number}}\",\r\n        \"invalidPayoff\": \"Invalid payoff in edge #{{number}}\"\r\n    },\r\n    \"growl\":{\r\n        \"brushDisabled\": \"Selection brush disabled\",\r\n        \"brushEnabled\": \"Selection brush enabled\"\r\n    },\r\n    \"tooltip\":{\r\n        \"node\":{\r\n            \"payoff\": {\r\n                \"default\": \"Payoff {{number}}\",\r\n                \"named\": \"{{name}}\"\r\n            },\r\n            \"aggregatedPayoff\": {\r\n                \"default\": \"Aggregated Payoff {{number}}\",\r\n                \"named\": \"Aggregated {{name}}\"\r\n            },\r\n            \"probabilityToEnter\": \"Probability to enter\"\r\n        },\r\n        \"edge\":{\r\n            \"payoff\": {\r\n                \"default\": \"Payoff {{number}}: {{value}}\",\r\n                \"named\": \"{{name}}: {{value}}\"\r\n            },\r\n            \"probability\": \"Probability: {{value}}\"\r\n        }\r\n    }\r\n}\r\n","module.exports={\r\n    \"contextMenu\":{\r\n        \"main\":{\r\n            \"addDecisionNode\": \"Ajouter noud de décision\",\r\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\r\n            \"addText\": \"Ajouter du texte\",\r\n            \"paste\": \"Coller\",\r\n            \"selectAllNodes\": \"Sélectionner tous les nouds\"\r\n        },\r\n        \"node\":{\r\n            \"copy\": \"Copie\",\r\n            \"cut\": \"Couper\",\r\n            \"paste\": \"Coller\",\r\n            \"delete\": \"Effacer\",\r\n            \"addDecisionNode\": \"Ajouter noud de décision\",\r\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\r\n            \"addTerminalNode\": \"Ajouter un noeud terminal\",\r\n            \"convert\":{\r\n                \"decision\": \"Comme noud de décision\",\r\n                \"chance\": \"Comme noud aléatoire\",\r\n                \"terminal\": \"Comme un noeud terminal\"\r\n            },\r\n            \"selectSubtree\": \"Sélectionner une sous-arborescence\",\r\n            \"fold\": \"Plier sous-arbre\",\r\n            \"unfold\": \"Déplier arbre sous-arbre\",\r\n            \"flipSubtree\": \"Basculer sous-arbre\",\r\n            \"payoffsTransformation\": \"Transformez les gains\"\r\n        },\r\n        \"edge\":{\r\n            \"injectDecisionNode\": \"Injecter un noeud de décision\",\r\n            \"injectChanceNode\": \"Injecter un noeud de chance\"\r\n        },\r\n        \"text\":{\r\n            \"delete\": \"Effacer\"\r\n        }\r\n    },\r\n    \"validation\":{\r\n        \"incompletePath\": \"Parcours non terminé par noeud terminal\",\r\n        \"probabilityDoNotSumUpTo1\": \"La somme des probabilités n'est pas 1 ou plus\",\r\n        \"invalidProbability\": \"Probabilité invalide - le bord #{{number}}\",\r\n        \"invalidPayoff\": \"Avantage invalide - le bord #{{number}}\"\r\n    },\r\n    \"growl\":{\r\n        \"brushDisabled\": \"Brosse de sélection désactivée\",\r\n        \"brushEnabled\": \"Brosse de sélection activée\"\r\n    },\r\n    \"tooltip\":{\r\n        \"node\":{\r\n            \"payoff\": {\r\n                \"default\": \"Avantage {{number}}\",\r\n                \"named\": \"{{name}}\"\r\n            },\r\n            \"aggregatedPayoff\": {\r\n                \"default\": \"Avantage agrégé {{number}}\",\r\n                \"named\": \"Agrégé  {{name}}\"\r\n            },\r\n            \"probabilityToEnter\": \"Probabilité d'entrée\"\r\n        },\r\n        \"edge\":{\r\n            \"payoff\": {\r\n                \"default\": \"Avantage {{number}}: {{value}}\",\r\n                \"named\": \"{{name}}: {{value}}\"\r\n            },\r\n            \"probability\": \"Probabilité: {{value}}\"\r\n        }\r\n    }\r\n}\r\n","import i18next from 'i18next';\r\nimport * as en from './en.json'\r\nimport * as pl from './pl.json'\r\nimport * as it from './it.json'\r\nimport * as de from './de.json'\r\nimport * as fr from './fr.json'\r\n\r\nexport class i18n{\r\n\r\n    static $instance;\r\n    static language;\r\n\r\n    static init(lng){\r\n        i18n.language = lng;\r\n        let resources = {\r\n            en: {\r\n                translation: en\r\n            },\r\n            pl: {\r\n                translation: pl\r\n            },\r\n            it: {\r\n                translation: it\r\n            },\r\n            de: {\r\n                translation: de\r\n            },\r\n            fr: {\r\n                translation: fr\r\n            }\r\n        };\r\n        i18n.$instance = i18next.createInstance({\r\n            lng: lng,\r\n            fallbackLng: 'en',\r\n            resources: resources\r\n        }, (err, t) => {\r\n        });\r\n    }\r\n\r\n    static t(key, opt){\r\n        return i18n.$instance.t(key, opt)\r\n    }\r\n}\r\n","module.exports={\r\n    \"contextMenu\":{\r\n        \"main\":{\r\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\r\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\r\n            \"addText\": \"Aggiungi testo\",\r\n            \"paste\": \"Incolla\",\r\n            \"selectAllNodes\": \"Seleziona tutti i nodi\"\r\n        },\r\n        \"node\":{\r\n            \"copy\": \"Copia\",\r\n            \"cut\": \"Taglia\",\r\n            \"paste\": \"Incolla\",\r\n            \"delete\": \"Cancella\",\r\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\r\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\r\n            \"addTerminalNode\": \"Aggiungi un nodo terminale\",\r\n            \"convert\":{\r\n                \"decision\": \"Come Decision Node\",\r\n                \"chance\": \"Come Chance Node\",\r\n                \"terminal\": \"Come Terminal Node\"\r\n            },\r\n            \"selectSubtree\": \"Seleziona Sotto-albero\",\r\n            \"fold\": \"Piega sotto-albero\",\r\n            \"unfold\": \"Dispiegarsi sotto-albero\",\r\n            \"flipSubtree\": \"Ribalta sotto-albero\",\r\n            \"payoffsTransformation\": \"Trasforma i profitti\"\r\n        },\r\n        \"edge\":{\r\n            \"injectDecisionNode\": \"Inietta nodo di decisione\",\r\n            \"injectChanceNode\": \"Inietta nodo opportunità\"\r\n        },\r\n        \"text\":{\r\n            \"delete\": \"Cancella\"\r\n        }\r\n    },\r\n    \"validation\":{\r\n        \"incompletePath\": \"Percorso senza nodo terminale\",\r\n        \"probabilityDoNotSumUpTo1\": \"La somma delle probabilità è diversa da 1\",\r\n        \"invalidProbability\": \"Probabilità non valida - bordo #{{number}}\",\r\n        \"invalidPayoff\": \"Saldo non valido - bordo #{{number}}\"\r\n    },\r\n    \"growl\":{\r\n        \"brushDisabled\": \"Selezione pennello disabilitata\",\r\n        \"brushEnabled\": \"Selezione pennello abilitata\"\r\n    },\r\n    \"tooltip\":{\r\n        \"node\":{\r\n            \"payoff\": {\r\n                \"default\": \"Saldo {{number}}\",\r\n                \"named\": \"{{name}}\"\r\n            },\r\n            \"aggregatedPayoff\": {\r\n                \"default\": \"Saldo aggregato {{number}}\",\r\n                \"named\": \"Aggregato {{name}}\"\r\n            },\r\n            \"probabilityToEnter\": \"Probabilità da inserire\"\r\n        },\r\n        \"edge\":{\r\n            \"payoff\": {\r\n                \"default\": \"Saldo {{number}}: {{value}}\",\r\n                \"named\": \"{{name}}: {{value}}\"\r\n            },\r\n            \"probability\": \"Probabilità: {{value}}\"\r\n        }\r\n    }\r\n}\r\n","module.exports={\r\n\r\n    \"contextMenu\":{\r\n        \"main\":{\r\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\r\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\r\n            \"addText\": \"Dodaj Tekst\",\r\n            \"paste\": \"Wklej\",\r\n            \"selectAllNodes\": \"Zaznacz wszystkie węzły\"\r\n        },\r\n        \"node\":{\r\n            \"copy\": \"Kopiuj\",\r\n            \"cut\": \"Wytnij\",\r\n            \"paste\": \"Wklej\",\r\n            \"delete\": \"Usuń\",\r\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\r\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\r\n            \"addTerminalNode\": \"Dodaj Węzeł Końcowy\",\r\n            \"convert\":{\r\n                \"decision\": \"Jako Węzeł Decyzyjny\",\r\n                \"chance\": \"Jako Węzeł Losowy\",\r\n                \"terminal\": \"Jako Węzeł Końcowy\"\r\n            },\r\n            \"selectSubtree\": \"Zaznacz poddrzewo\",\r\n            \"fold\": \"Zwiń poddrzewo\",\r\n            \"unfold\": \"Rozwiń poddrzewo\",\r\n            \"flipSubtree\": \"Przewróć poddrzewo\",\r\n            \"payoffsTransformation\": \"Przekształć wypłaty\"\r\n        },\r\n        \"edge\":{\r\n            \"injectDecisionNode\": \"Wstrzyknij Węzeł Decyzyjny\",\r\n            \"injectChanceNode\": \"Wstrzyknij Węzeł Losowy\"\r\n        },\r\n        \"text\":{\r\n            \"delete\": \"Usuń\"\r\n        }\r\n    },\r\n\r\n    \"validation\":{\r\n        \"incompletePath\": \"Ostatnim węzłem w ścieżce powinien być Węzeł Końcowy\",\r\n        \"probabilityDoNotSumUpTo1\": \"Prawdopodobieństwa nie sumują sie do 1\",\r\n        \"invalidProbability\": \"Niepoprawne prawdopodobieństwo na krawędzi #{{number}}\",\r\n        \"invalidPayoff\": \"Niepoprawna wypłata na krawędzi #{{number}}\"\r\n    },\r\n    \"growl\":{\r\n        \"brushDisabled\": \"Zaznaczanie wyłączone\",\r\n        \"brushEnabled\": \"Zaznaczanie włączone\"\r\n    },\r\n    \"tooltip\":{\r\n        \"node\":{\r\n            \"payoff\": {\r\n                \"default\": \"Wypłata {{number}}\",\r\n                \"named\": \"{{name}}\"\r\n            },\r\n            \"aggregatedPayoff\": {\r\n                \"default\": \"Zagregowana wypłata {{number}}\",\r\n                \"named\": \"Zagregowana {{name}}\"\r\n            },\r\n            \"probabilityToEnter\": \"Prawdopodobieństwo wejścia\"\r\n        },\r\n        \"edge\":{\r\n            \"payoff\": {\r\n                \"default\": \"Wypłata {{number}}: {{value}}\",\r\n                \"named\": \"{{name}}: {{value}}\"\r\n            },\r\n            \"probability\": \"Prawdopodobieństwo: {{value}}\"\r\n        }\r\n    }\r\n}\r\n","import {D3Extensions} from './d3-extensions'\r\nD3Extensions.extend();\r\n\r\nexport * from './tree-designer'\r\nexport * from './app-utils'\r\nexport * from './templates'\r\nexport * from './tooltip'\r\nexport * from './d3-extensions'\r\nexport {default as d3} from './d3'\r\n\r\n\r\n","import {Utils} from 'sd-utils'\r\nimport {domain as model} from 'sd-model'\r\nimport * as d3 from './d3'\r\nimport circleSymbol from './symbols/circle'\r\nimport triangleSymbol from './symbols/triangle'\r\nimport {AppUtils} from \"./app-utils\";\r\n\r\n/*Tree layout manager*/\r\nexport class Layout{\r\n\r\n    treeDesigner;\r\n    data;\r\n    config;\r\n\r\n    nodeTypeToSymbol = {\r\n        'decision': d3.symbolSquare,\r\n        'chance': circleSymbol,\r\n        \"terminal\": triangleSymbol\r\n    };\r\n\r\n    static MANUAL_LAYOUT_NAME = 'manual';\r\n\r\n\r\n    onAutoLayoutChanged=[];\r\n\r\n    nodeTypeOrder = {\r\n        'decision' : 0,\r\n        'chance': 0,\r\n        'terminal': 1\r\n    };\r\n\r\n    treeMargin = 50;\r\n    targetSymbolSize={};\r\n    nodeSeparation = (a, b) => a.parent === b.parent ? 1 : 1.2\r\n\r\n    constructor(treeDesigner, data, config){\r\n        this.treeDesigner = treeDesigner;\r\n        this.data = data;\r\n        this.config = config;\r\n\r\n    }\r\n\r\n    update(node){\r\n        if(node && node.$parent){\r\n            node.$parent.childEdges.sort((a,b)=>a.childNode.location.y - b.childNode.location.y)\r\n        }\r\n        if(!this.isManualLayout()){\r\n            return this.autoLayout(this.config.type, true);\r\n        }\r\n        if(node){\r\n            this.moveNodeToEmptyPlace(node);\r\n        }else{\r\n            this.treeDesigner.redraw(true);\r\n        }\r\n    }\r\n\r\n    isManualLayout(){\r\n        return this.config.type === Layout.MANUAL_LAYOUT_NAME;\r\n    }\r\n\r\n    getNewChildLocation(parent){\r\n        if(!parent){\r\n            return new model.Point(this.getNodeMinX(), this.getNodeMinY())\r\n        }\r\n        var x = parent.location.x + this.config.gridWidth;\r\n        var y = parent.location.y;\r\n        if(parent.childEdges.length){\r\n            y = parent.childEdges[parent.childEdges.length-1].childNode.location.y+1;\r\n        }\r\n\r\n        return new model.Point(x, y)\r\n    }\r\n\r\n    getInjectedNodeLocation(edge){\r\n\r\n        var p = edge.$linePoints[2];\r\n\r\n        return new model.Point(p[0], p[1])\r\n    }\r\n\r\n    moveNodeToEmptyPlace(node, redrawIfChanged=true){\r\n        var positionMap = {};\r\n        var self = this;\r\n        node.location.x = Math.max(this.getNodeMinX(node), node.location.x);\r\n        node.location.y = Math.max(this.getNodeMinY(node), node.location.y);\r\n\r\n\r\n        this.nodesSortedByX = this.data.nodes.slice();\r\n        this.nodesSortedByX.sort((a,b)=>a.location.x - b.location.x);\r\n\r\n        function findCollidingNode(node, location){\r\n            return Utils.find(self.nodesSortedByX, n=>{\r\n                if(node == n){\r\n                    return false;\r\n                }\r\n\r\n                var margin = self.config.nodeSize/3;\r\n                var x = n.location.x;\r\n                var y = n.location.y;\r\n\r\n                return (location.x - margin <= x && location.x + margin >= x\r\n                    && location.y - margin <= y && location.y + margin >= y)\r\n            });\r\n        }\r\n\r\n        var stepX = this.config.nodeSize/2;\r\n        var stepY = this.config.nodeSize+10;\r\n        var stepXsameParent = 0;\r\n        var stepYsameParent = 75;\r\n        var changed = false;\r\n        var colidingNode;\r\n        var newLocation = new model.Point(node.location);\r\n        while(colidingNode = findCollidingNode(node, newLocation)){\r\n            changed=true;\r\n            var sameParent = node.$parent && colidingNode.$parent && node.$parent===colidingNode.$parent;\r\n            if(sameParent){\r\n                newLocation.move(stepXsameParent, stepYsameParent);\r\n            }else{\r\n                newLocation.move(stepX, stepY);\r\n            }\r\n        }\r\n        if(changed){\r\n            node.moveTo(newLocation.x,newLocation.y, true);\r\n            if(redrawIfChanged){\r\n                this.treeDesigner.redraw(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    disableAutoLayout(){\r\n        this.config.type = Layout.MANUAL_LAYOUT_NAME;\r\n        this._fireOnAutoLayoutChangedCallbacks();\r\n    }\r\n\r\n\r\n    nodeSymbolSize = {};\r\n    drawNodeSymbol(path, transition){\r\n\r\n        var self = this;\r\n        var nodeSize = this.config.nodeSize;\r\n        this.nodeSymbol = d3.symbol().type(d=> self.nodeTypeToSymbol[d.type])\r\n            .size(d=>self.nodeSymbolSize[d.id] ? Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", 64) : 64);\r\n\r\n        path\r\n            .each(function (d) {\r\n                var path = d3.select(this);\r\n                var prev = path.attr(\"d\");\r\n                if(!prev){\r\n                    path.attr(\"d\", self.nodeSymbol);\r\n                }\r\n                var size = Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\");\r\n                if(!size){\r\n                    var box = path.node().getBBox();\r\n                    var error = Math.min(nodeSize / box.width, nodeSize / box.height);\r\n                    size = error * error * (self.nodeSymbolSize[d.id]||64);\r\n                    Utils.set(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", size);\r\n                }\r\n                if(transition){\r\n                    path =  path.transition();\r\n\r\n                }else{\r\n                    self.nodeSymbolSize[d.id] = size;\r\n                }\r\n                path.attr(\"d\", self.nodeSymbol);\r\n                if(transition){\r\n                    self.nodeSymbolSize[d.id] = size;\r\n                }\r\n            });\r\n    }\r\n\r\n    nodeLabelPosition(selection) {\r\n        return selection\r\n            .attr('x', 0)\r\n            .attr('y', -this.config.nodeSize / 2 - 7)\r\n    }\r\n\r\n    nodePayoffPosition(selection) {\r\n        return Layout.setHangingPosition(selection)\r\n            .attr('x', 0)\r\n            .attr('y', this.config.nodeSize / 2 + 7)\r\n            .attr('text-anchor', 'middle')\r\n    }\r\n\r\n    nodeAggregatedPayoffPosition(selection) {\r\n        var x = this.config.nodeSize / 2 + 7;\r\n        var self = this;\r\n        selection\r\n            .attr('x', x)\r\n            .attr('y', function(d){\r\n                let fontSize = parseInt(AppUtils.getFontSize(this));\r\n                let items = d.displayValue('aggregatedPayoff');\r\n                let number = Utils.isArray(items) ? items.filter(it=>it !== undefined).length : 1;\r\n                if(number>1){\r\n                    return -this.getBBox().height/2 + fontSize/2;\r\n                }\r\n                return -Math.max(2, 1.8* self.config.nodeSize/fontSize);\r\n            });\r\n\r\n        selection.selectAll('tspan').attr('x', x);\r\n        return selection;\r\n            // .attr('text-anchor', 'middle')\r\n            // .attr('dominant-baseline', 'hanging')\r\n    }\r\n\r\n    nodeProbabilityToEnterPosition(selection) {\r\n        var self = this;\r\n\r\n        return Layout.setHangingPosition(selection)\r\n            .attr('x', this.config.nodeSize / 2 + 7)\r\n            .attr('y', function(d){\r\n                let fontSize = parseInt(AppUtils.getFontSize(this));\r\n                let aggregatedPayoffs = d.displayValue('aggregatedPayoff');\r\n                let aggregatedPayoffsNumber = Utils.isArray(aggregatedPayoffs) ? aggregatedPayoffs.filter(it=>it !== undefined).length : 1;\r\n                if(aggregatedPayoffsNumber>1){\r\n\r\n                    return fontSize*0.6\r\n                }\r\n\r\n                return Math.max(2, 1.8* self.config.nodeSize/fontSize);\r\n            })\r\n            // .attr('text-anchor', 'middle')\r\n            // .attr('dominant-baseline', 'central')\r\n    }\r\n\r\n    nodeIndicatorPosition(selection) {\r\n        return selection\r\n            .attr('x', this.config.nodeSize / 2 + 8)\r\n            .attr('y', - this.config.nodeSize/2)\r\n            .attr('dominant-baseline', 'central')\r\n            .attr('text-anchor', 'middle')\r\n    }\r\n\r\n    nodeUnfoldButtonPosition(selection) {\r\n\r\n        return selection\r\n            .attr('x', this.config.nodeSize / 2 + 5)\r\n            .attr('y', 0)\r\n            .attr('dominant-baseline', 'central')\r\n    }\r\n\r\n    edgeLineD(edge){\r\n        var line = d3.line()\r\n            .x(d=> d[0])\r\n            .y(d=> d[1]);\r\n        // .curve(d3.curveCatmullRom.alpha(0.5));\r\n\r\n\r\n        var parentNode = edge.parentNode;\r\n        var childNode = edge.childNode;\r\n\r\n        var dX = childNode.location.x - parentNode.location.x;\r\n        var dY = childNode.location.y - parentNode.location.y;\r\n\r\n        var sign = dX>=0 ? 1 : -1;\r\n\r\n        var slantStartXOffset = Math.min(dX/2, this.config.nodeSize/2+10);\r\n        var slantWidth = Math.min(this.config.edgeSlantWidthMax, Math.max(dX/2 - slantStartXOffset, 0));\r\n\r\n        var point1 = [parentNode.location.x +this.config.nodeSize/2 + 1, parentNode.location.y];\r\n        var point2 = [Math.max(parentNode.location.x+slantStartXOffset, point1[0]), parentNode.location.y];\r\n        var point3 = [parentNode.location.x+slantStartXOffset+slantWidth, childNode.location.y];\r\n        var point4 = [childNode.location.x - (sign*(Math.max(0, Math.min(this.config.nodeSize/2+8, dX/2)))), childNode.location.y];\r\n        // var point2 = [parentNode.location.x+dX/2-slantWidth/2, parentNode.location.y];\r\n        // var point3 = [childNode.location.x-(dX/2-slantWidth/2), childNode.location.y];\r\n\r\n        edge.$linePoints = [point1, point2, point3, point4];\r\n        return line(edge.$linePoints);\r\n    }\r\n\r\n    edgePayoffPosition(selection) {\r\n        Layout.setHangingPosition(selection)\r\n            .attr('x', d=>d.$linePoints[2][0] + 2)\r\n            .attr('y', d=>d.$linePoints[2][1] + 7);\r\n\r\n        selection.selectAll('tspan').attr('x', function(d){\r\n            return d3.select(this.parentNode).datum().$linePoints[2][0] + 2\r\n        });\r\n        return selection;\r\n\r\n    }\r\n\r\n    edgeLabelPosition(selection) {\r\n        return selection\r\n            .attr('transform', d=>'translate('+(d.$linePoints[2][0] + 2)+','+(d.$linePoints[2][1] - 7)+')')\r\n            // .attr('x', d=>d.$linePoints[2][0] + 2)\r\n            // .attr('y', d=>d.$linePoints[2][1] - 7)\r\n\r\n    }\r\n\r\n    edgeProbabilityPosition(selection) {\r\n        return Layout.setHangingPosition(selection)\r\n            .attr('x', function (d) {\r\n                var len = this.getComputedTextLength();\r\n                var min = d.$linePoints[2][0] + 2 + this.previousSibling.childNodes[0].getComputedTextLength() + 7 + len;\r\n                return Math.max(min, d.$linePoints[3][0] - 8);\r\n            })\r\n            .attr('y', d=>d.$linePoints[2][1] + 7)\r\n    }\r\n\r\n    getMinMarginBetweenNodes(){\r\n      return this.config.nodeSize + 30;\r\n    }\r\n\r\n    getTextMinX(d){\r\n        let minX = 0;\r\n        if(d){\r\n            let bb = this.treeDesigner.getTextD3Selection(d).select('text').node().getBBox();\r\n            if (bb.x < 0) {\r\n                minX -= bb.x;\r\n            }\r\n        }\r\n        return minX;\r\n    }\r\n\r\n    getTextMinY(d){\r\n        let minY = 0;\r\n        if(d){\r\n            let bb = this.treeDesigner.getTextD3Selection(d).select('text').node().getBBox();\r\n            if (bb.y < 0) {\r\n                minY -= bb.y;\r\n            }\r\n        }\r\n        return minY;\r\n    }\r\n\r\n    getTextMaxX(d){\r\n        return Number.MAX_SAFE_INTEGER;\r\n    }\r\n\r\n\r\n    getNodeMinX(d){\r\n        var self = this;\r\n        if(d && d.$parent){// && !self.isNodeSelected(d.$parent)\r\n            return d.$parent.location.x + self.getMinMarginBetweenNodes();\r\n        }\r\n        return self.config.nodeSize/2;\r\n    }\r\n\r\n    getNodeMinY(d){\r\n        return this.config.nodeSize/2;\r\n    }\r\n\r\n    getNodeMaxX(d){\r\n        var self = this;\r\n\r\n        if(d && d.childEdges.length){\r\n            return d3.min(d.childEdges, e=>!e.childNode.$hidden ? e.childNode.location.x : 9999999)-self.getMinMarginBetweenNodes();\r\n        }\r\n        return Number.MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    setGridWidth(width, withoutStateSaving){\r\n        var self=this;\r\n        if(this.config.gridWidth===width){\r\n            return;\r\n        }\r\n        if(!withoutStateSaving){\r\n            this.data.saveState({\r\n                data:{\r\n                    gridWidth: self.config.gridWidth\r\n                },\r\n                onUndo: (data)=> {\r\n                    self.setGridWidth(data.gridWidth, true);\r\n                },\r\n                onRedo: (data)=> {\r\n                    self.setGridWidth(width, true);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.config.gridWidth=width;\r\n        this.update();\r\n    }\r\n\r\n    setGridHeight(gridHeight, withoutStateSaving){\r\n        var self=this;\r\n        if(this.config.gridHeight===gridHeight){\r\n            return;\r\n        }\r\n        if(!withoutStateSaving){\r\n            this.data.saveState({\r\n                data:{\r\n                    gridHeight: self.config.gridHeight\r\n                },\r\n                onUndo: (data)=> {\r\n                    self.setGridHeight(data.gridHeight, true);\r\n                },\r\n                onRedo: (data)=> {\r\n                    self.setGridHeight(gridHeight, true);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.config.gridHeight=gridHeight;\r\n        this.update();\r\n    }\r\n\r\n    setNodeSize(nodeSize, withoutStateSaving){\r\n        var self=this;\r\n        if(this.config.nodeSize===nodeSize){\r\n            return;\r\n        }\r\n        if(!withoutStateSaving){\r\n            this.data.saveState({\r\n                data:{\r\n                    nodeSize: self.config.nodeSize\r\n                },\r\n                onUndo: (data)=> {\r\n                    self.setNodeSize(data.nodeSize, true);\r\n                },\r\n                onRedo: (data)=> {\r\n                    self.setNodeSize(nodeSize, true);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.config.nodeSize=nodeSize;\r\n        this.update();\r\n        if(this.isManualLayout()){\r\n            this.fitNodesInPlottingRegion(self.data.getRoots());\r\n            this.treeDesigner.redraw(true);\r\n        }\r\n    }\r\n\r\n    setEdgeSlantWidthMax(width, withoutStateSaving){\r\n        var self=this;\r\n        if(this.config.edgeSlantWidthMax===width){\r\n            return;\r\n        }\r\n        if(!withoutStateSaving){\r\n            this.data.saveState({\r\n                data:{\r\n                    edgeSlantWidthMax: self.config.edgeSlantWidthMax\r\n                },\r\n                onUndo: (data)=> {\r\n                    self.setEdgeSlantWidthMax(data.edgeSlantWidthMax, true);\r\n                },\r\n                onRedo: (data)=> {\r\n                    self.setEdgeSlantWidthMax(width, true);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.config.edgeSlantWidthMax=width;\r\n        this.treeDesigner.redraw(true);\r\n    }\r\n\r\n    autoLayout(type, withoutStateSaving){\r\n        var self=this;\r\n\r\n\r\n\r\n        if(!withoutStateSaving){\r\n            this.data.saveState({\r\n                data:{\r\n                    newLayout: type,\r\n                    currentLayout: self.config.type\r\n                },\r\n                onUndo: (data)=> {\r\n                    self.config.type = data.currentLayout;\r\n                    self._fireOnAutoLayoutChangedCallbacks();\r\n                },\r\n                onRedo: (data)=> {\r\n                    self.autoLayout(data.newLayout, true);\r\n                }\r\n            });\r\n        }\r\n        this.config.type = type;\r\n        if(!this.data.nodes.length){\r\n            this._fireOnAutoLayoutChangedCallbacks();\r\n            return;\r\n        }\r\n\r\n        var prevTreeMaxY = self.getNodeMinY();\r\n        this.data.getRoots().forEach(r=>{\r\n            var root = d3.hierarchy(r, d=>{\r\n                return d.childEdges.filter(e=>!e.$hidden).map(e=>e.childNode);\r\n            });\r\n\r\n            // root.sort((a,b)=>self.nodeTypeOrder[a.data.type]-self.nodeTypeOrder[b.data.type]);\r\n            root.sort((a,b)=>a.data.location.y - b.data.location.y);\r\n\r\n\r\n            var layout;\r\n            if(type==='cluster'){\r\n                layout = d3.cluster();\r\n            }else{\r\n                layout = d3.tree();\r\n            }\r\n            layout.nodeSize([self.config.gridHeight, self.config.gridWidth]);\r\n            layout.separation(self.nodeSeparation);\r\n\r\n            layout(root);\r\n            var minY = 999999999;\r\n            root.each(d=>{\r\n                minY = Math.min(minY, d.x);\r\n            });\r\n\r\n            var dy = root.x - minY + prevTreeMaxY;\r\n            var dx = self.getNodeMinX();\r\n            var maxY=0;\r\n            root.each(d=>{\r\n                d.data.location.x = d.y + dx;\r\n                d.data.location.y = d.x + dy;\r\n\r\n                maxY = Math.max(maxY, d.data.location.y);\r\n            });\r\n\r\n            prevTreeMaxY = maxY + self.config.nodeSize+self.treeMargin;\r\n        });\r\n\r\n\r\n        // this.transition = true;\r\n        this.treeDesigner.redraw(true);\r\n        // this.transition = false;\r\n\r\n        this._fireOnAutoLayoutChangedCallbacks();\r\n        return this;\r\n    }\r\n\r\n    fitNodesInPlottingRegion(nodes){\r\n        var self = this;\r\n        var topY = d3.min(nodes, n=>n.location.y);\r\n        var minY = self.getNodeMinY();\r\n        var dy = topY - minY;\r\n\r\n        var minX = d3.min(nodes, n=>n.location.x);\r\n        var dx = minX - self.getNodeMinX();\r\n\r\n        if(dy<0 ||  dx<0){\r\n            nodes.forEach(n=>n.move(-dx, -dy));\r\n        }\r\n    }\r\n\r\n    moveNodes(nodes, dx, dy, pivot){\r\n        var self = this;\r\n        var limit = self.config.limitNodePositioning;\r\n        if(limit){\r\n            if(dx<0){\r\n                nodes.sort((a,b)=>a.location.x-b.location.x);\r\n            }else{\r\n                nodes.sort((a,b)=>b.location.x-a.location.x);\r\n            }\r\n        }\r\n\r\n\r\n        var minY = d3.min(nodes, d=>d.location.y);\r\n        if(minY + dy < self.getNodeMinY()){\r\n            dy = self.getNodeMinY() - minY;\r\n        }\r\n\r\n        nodes.forEach(d=>{\r\n            if(limit){\r\n                Layout.backupNodeLocation(d);\r\n                var minX = self.getNodeMinX(d);\r\n                var maxX = self.getNodeMaxX(d);\r\n\r\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\r\n                d.location.y += dy;\r\n            }else{\r\n                d.location.x +=dx;\r\n                d.location.y += dy;\r\n            }\r\n\r\n        });\r\n\r\n\r\n        var revertX = pivot && self.config.limitNodePositioning && (pivot.location.x === pivot.$location.x);\r\n\r\n        nodes.forEach(d=>{\r\n            if(revertX){\r\n                d.location.x = d.$location.x;\r\n            }\r\n            self.treeDesigner.updateNodePosition(d);\r\n        });\r\n\r\n\r\n    }\r\n\r\n    moveTexts(texts, dx, dy){\r\n        let self = this;\r\n        let limit = self.config.limitTextPositioning;\r\n        if(limit){\r\n            if(dx<0){\r\n                texts.sort((a,b)=>a.location.x-b.location.x);\r\n            }else{\r\n                texts.sort((a,b)=>b.location.x-a.location.x);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        texts.forEach(d=>{\r\n\r\n\r\n\r\n\r\n            if(limit){\r\n                let minX = self.getTextMinX(d);\r\n                let maxX = self.getTextMaxX(d);\r\n                let minY = self.getTextMinY(d);\r\n\r\n\r\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\r\n                d.location.y = Math.max(d.location.y+dy, minY);\r\n\r\n            }else{\r\n                d.location.move(dx, dy);\r\n            }\r\n            self.treeDesigner.updateTextPosition(d);\r\n\r\n        });\r\n\r\n    }\r\n\r\n    static backupNodeLocation(node) {\r\n        node.$location = new model.Point(node.location);\r\n    }\r\n\r\n    _fireOnAutoLayoutChangedCallbacks(){\r\n        this.onAutoLayoutChanged.forEach(c=>c(this.config.type));\r\n    }\r\n\r\n    static setHangingPosition(selection){\r\n        // window.setTimeout(function(){\r\n        //     selection.each(function(){\r\n        //         var h =  this.getBBox().height;\r\n        //         d3.select(this).attr('dy', h);\r\n        //     });\r\n        // },0);\r\n\r\n        if(AppUtils.isHidden(selection.node())){ // setting hanging position of hidden elements fails on firefox\r\n            return selection;\r\n        }\r\n\r\n\r\n        selection.each(function(){\r\n            var h =  this.getBBox().height;\r\n            d3.select(this).attr('dy', '0.75em');\r\n        });\r\n\r\n        return selection;\r\n    }\r\n\r\n}\r\n\r\n\r\n","import {AppUtils} from './app-utils'\r\nimport * as d3 from './d3'\r\nimport {ContextMenu} from './context-menu/context-menu'\r\n\r\nexport class NodeDragHandler{\r\n\r\n    treeDesigner;\r\n    data;\r\n    config;\r\n\r\n    drag;\r\n    stateSnapshot = null;\r\n\r\n\r\n    constructor(treeDesigner, data){\r\n        this.treeDesigner = treeDesigner;\r\n        this.data = data;\r\n\r\n        var self = this;\r\n        this.drag = d3.drag()\r\n            .subject(function(d) {\r\n                if(d==null){\r\n                    return  {\r\n                        x: event.x,\r\n                        y: event.y\r\n                    };\r\n                }\r\n                var t = d3.select(this);\r\n                return {\r\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\r\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\r\n                };\r\n            })\r\n            .on(\"start\", function(d){\r\n                self.dragStarted.call(this,d, self)\r\n            })\r\n            .on(\"drag\", function (d) {\r\n                self.onDrag.call(this, d, self);\r\n            })\r\n            .on(\"end\", function (d) {\r\n                self.dragEnded.call(this, d, self);\r\n            })\r\n    }\r\n\r\n\r\n    dragStarted(d,self) {\r\n        if(self.ignoreDrag){\r\n            self.ignoreDrag=false;\r\n            self.ignoredDrag=true;\r\n            return;\r\n        }\r\n        self.ignoredDrag=false;\r\n        self.stateSnapshot = self.data.createStateSnapshot();\r\n\r\n        // self.treeDesigner.layout.disableAutoLayout();\r\n        ContextMenu.hide();\r\n        var node = d3.select(this);\r\n        if(!node.classed(\"selected\")){\r\n            self.treeDesigner.clearSelection();\r\n        }\r\n\r\n        self.treeDesigner.selectNode(d);\r\n        node.classed(\"selected dragging\", true);\r\n        self.selectedNodes = self.treeDesigner.getSelectedNodes(true);\r\n        self.prevDragEvent = d3.event;\r\n        self.dragEventCount = 0;\r\n    }\r\n\r\n    onDrag(draggedNode, self){\r\n        if(self.ignoredDrag){\r\n            return;\r\n        }\r\n\r\n        if(self.dragEventCount===2 && self.stateSnapshot){\r\n            self.data.saveStateFromSnapshot(self.stateSnapshot); // TODO save only if something has really changed\r\n            self.stateSnapshot = null;\r\n        }\r\n        self.dragEventCount++;\r\n        if(self.selectedNodes.length>5 && self.dragEventCount%2!==1){\r\n            return;\r\n        }\r\n\r\n        var dx = d3.event.x - self.prevDragEvent.x;\r\n        var dy = d3.event.y- self.prevDragEvent.y;\r\n        self.treeDesigner.layout.moveNodes(self.selectedNodes, dx, dy, draggedNode);\r\n\r\n\r\n        self.prevDragEvent = d3.event;\r\n        self.treeDesigner.redrawEdges();\r\n        self.treeDesigner.updatePlottingRegionSize();\r\n    }\r\n\r\n    dragEnded(draggedNode, self){\r\n        var node = d3.select(this).classed(\"dragging\", false);\r\n        if(self.ignoredDrag){\r\n            return;\r\n        }\r\n        self.treeDesigner.layout.update(draggedNode)\r\n    }\r\n\r\n    cancelDrag(){\r\n        this.ignoreDrag = true;\r\n    }\r\n\r\n}\r\n\r\n\r\n","var epsilon = 1e-12;\r\nvar pi = Math.PI;\r\nvar halfPi = pi / 2;\r\nvar tau = 2 * pi;\r\n\r\nexport default {\r\n    /*draw: function(context, size) {\r\n        var r = Math.sqrt(size / pi);\r\n        context.moveTo(r, 0);\r\n        context.arc(0, 0, r, 0, tau);\r\n    }*/\r\n    draw: function(context, size) {\r\n\r\n        var r = Math.sqrt(size / pi);\r\n        var dist =0.552284749831 * r;\r\n\r\n        context.moveTo(-r, 0)\r\n        // context.lineTo(2*r, 2*r)\r\n        // context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\r\n        context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\r\n\r\n        context.bezierCurveTo(dist, -r, r, -dist, r,0);\r\n\r\n        context.bezierCurveTo(r, dist, dist, r, 0, r);\r\n\r\n        context.bezierCurveTo(-dist, r, -r, dist, -r, 0);\r\n    }\r\n};\r\n","var sqrt3 = Math.sqrt(3);\r\n\r\nexport default {\r\n    draw: function(context, size) {\r\n        var r = Math.sqrt(size / Math.PI);\r\n        context.moveTo(-r, 0);\r\n        context.lineTo(0.9*r, -r);\r\n        context.lineTo(0.9*r, r);\r\n        context.closePath();\r\n    }\r\n};\r\n","import {Utils} from \"sd-utils\";\r\nimport {i18n} from './i18n/i18n'\r\n\r\nexport class Templates{\r\n\r\n    static growl = require('./templates/growl_message.html');\r\n\r\n    static get(templateName, variables){\r\n        var compiled = Utils.template(Templates[templateName],{ 'imports': { 'i18n': i18n, 'Templates': Templates, 'include': function(n, v) {return Templates.get(n, v)} } });\r\n        if(variables){\r\n            variables.variables = variables;\r\n        }else{\r\n            variables = {variables:{}}\r\n        }\r\n        return compiled(variables)\r\n\r\n    }\r\n\r\n    static styleRule(selector, props){\r\n        var s = selector+ '{';\r\n        props.forEach(p=> s+=Templates.styleProp(p[0], p[1]));\r\n        s+='} ';\r\n        return s;\r\n    }\r\n    static styleProp(styleName, variableName){\r\n        return  styleName+': <%= '+variableName+' %>; '\r\n    }\r\n\r\n    static treeDesignerSelector = 'svg.sd-tree-designer';\r\n    static nodeSelector(type, clazz){\r\n        var s = Templates.treeDesignerSelector+' .node';\r\n        if(type){\r\n            s+='.'+type+'-node';\r\n        }\r\n        if(clazz){\r\n            s+='.'+clazz;\r\n        }\r\n        return s;\r\n    }\r\n    static edgeSelector(clazz){\r\n        var s = Templates.treeDesignerSelector+' .edge';\r\n        if(clazz){\r\n            s+='.'+clazz;\r\n        }\r\n        return s;\r\n    }\r\n\r\n    static treeDesignerStyles =\r\n\r\n        Templates.styleRule(Templates.treeDesignerSelector,[\r\n            ['font-size', 'fontSize'],\r\n            ['font-family', 'fontFamily'],\r\n            ['font-weight', 'fontWeight'],\r\n            ['font-style', 'fontStyle']\r\n        ])+\r\n        //   node\r\n        Templates.styleRule(Templates.nodeSelector()+' path',[\r\n            ['fill', 'node.fill'],\r\n            ['stroke-width', 'node.strokeWidth']\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector('decision', 'optimal')+' path, '+Templates.nodeSelector('chance', 'optimal')+' path,' +Templates.nodeSelector('terminal', 'optimal')+' path',[\r\n            ['stroke', 'node.optimal.stroke'],\r\n            ['stroke-width', 'node.optimal.strokeWidth']\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector()+' .label',[\r\n            ['font-size', 'node.label.fontSize'],\r\n            ['fill', 'node.label.color']\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector()+' .payoff',[\r\n            ['font-size', 'node.payoff.fontSize'],\r\n            ['fill', 'node.payoff.color'],\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector()+' .payoff.negative',[\r\n            ['fill', 'node.payoff.negativeColor'],\r\n        ])+\r\n\r\n        //    decision node\r\n        Templates.styleRule(Templates.nodeSelector('decision')+' path',[\r\n            ['fill', 'node.decision.fill'],\r\n            ['stroke', 'node.decision.stroke']\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector('decision', 'selected')+' path',[\r\n            ['fill', 'node.decision.selected.fill']\r\n        ])+\r\n\r\n        //    chance node\r\n        Templates.styleRule(Templates.nodeSelector('chance')+' path',[\r\n            ['fill', 'node.chance.fill'],\r\n            ['stroke', 'node.chance.stroke']\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector('chance', 'selected')+' path',[\r\n            ['fill', 'node.chance.selected.fill']\r\n        ])+\r\n\r\n        //    terminal node\r\n        Templates.styleRule(Templates.nodeSelector('terminal')+' path',[\r\n            ['fill', 'node.terminal.fill'],\r\n            ['stroke', 'node.terminal.stroke']\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector('terminal', 'selected')+' path',[\r\n            ['fill', 'node.terminal.selected.fill']\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff',[\r\n            ['font-size', 'node.terminal.payoff.fontSize'],\r\n            ['fill', 'node.terminal.payoff.color'],\r\n        ])+\r\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff.negative',[\r\n            ['fill', 'node.terminal.payoff.negativeColor'],\r\n        ])+\r\n\r\n\r\n        //probability\r\n        Templates.styleRule(Templates.treeDesignerSelector+' .node .probability-to-enter, '+Templates.treeDesignerSelector+' .edge .probability',[\r\n            ['font-size', 'probability.fontSize'],\r\n            ['fill', 'probability.color']\r\n        ])+\r\n\r\n        //edge\r\n        Templates.styleRule(Templates.edgeSelector()+' path',[\r\n            ['stroke', 'edge.stroke'],\r\n            ['stroke-width', 'edge.strokeWidth']\r\n        ])+\r\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow path',[\r\n            ['fill', 'edge.stroke'],\r\n        ])+\r\n        Templates.styleRule(Templates.edgeSelector('optimal')+' path',[\r\n            ['stroke', 'edge.optimal.stroke'],\r\n            ['stroke-width', 'edge.optimal.strokeWidth']\r\n        ])+\r\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-optimal path',[\r\n            ['fill', 'edge.optimal.stroke'],\r\n        ])+\r\n\r\n        Templates.styleRule(Templates.edgeSelector('selected')+' path',[\r\n            ['stroke', 'edge.selected.stroke'],\r\n            ['stroke-width', 'edge.selected.strokeWidth']\r\n        ])+\r\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-selected path',[\r\n            ['fill', 'edge.selected.stroke'],\r\n        ])+\r\n\r\n        Templates.styleRule(Templates.edgeSelector()+' .label',[\r\n            ['font-size', 'edge.label.fontSize'],\r\n            ['fill', 'edge.label.color']\r\n        ])+\r\n\r\n        Templates.styleRule(Templates.edgeSelector()+' .payoff',[\r\n            ['font-size', 'edge.payoff.fontSize'],\r\n            ['fill', 'edge.payoff.color'],\r\n        ])+\r\n        Templates.styleRule(Templates.edgeSelector()+' .payoff.negative',[\r\n            ['fill', 'edge.payoff.negativeColor'],\r\n        ])+\r\n\r\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-title',[\r\n            ['font-size', 'title.fontSize'],\r\n            ['font-weight', 'title.fontWeight'],\r\n            ['font-style', 'title.fontStyle'],\r\n            ['fill', 'title.color']\r\n        ]) +\r\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-description',[\r\n            ['font-size', 'description.fontSize'],\r\n            ['font-weight', 'description.fontWeight'],\r\n            ['font-style', 'description.fontStyle'],\r\n            ['fill', 'description.color']\r\n        ])\r\n}\r\n\r\n\r\n\r\n\r\n","module.exports = \"module.exports = \\\"<div class=\\\\\\\"sd-growl-message <%=type%>\\\\\\\">\\\\r\\\\n    <div class=\\\\\\\"sd-growl-message-text\\\\\\\">\\\\r\\\\n        <%= message %>\\\\r\\\\n    </div>\\\\r\\\\n</div>\\\\r\\\\n\\\";\\n\";\n","import {AppUtils} from './app-utils'\r\nimport * as d3 from './d3'\r\nimport {ContextMenu} from './context-menu/context-menu'\r\n\r\nexport class TextDragHandler{\r\n\r\n    treeDesigner;\r\n    data;\r\n    config;\r\n\r\n    drag;\r\n\r\n\r\n    constructor(treeDesigner, data){\r\n        this.treeDesigner = treeDesigner;\r\n        this.data = data;\r\n\r\n        var self = this;\r\n        this.drag = d3.drag()\r\n            .subject(function(d) {\r\n                if(d==null){\r\n                    return  {\r\n                        x: event.x,\r\n                        y: event.y\r\n                    };\r\n                }\r\n                var t = d3.select(this);\r\n                return {\r\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\r\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\r\n                };\r\n            })\r\n            .on(\"start\", function(d){\r\n                self.dragStarted.call(this,d, self)\r\n            })\r\n            .on(\"drag\", function (d) {\r\n                self.onDrag.call(this, d, self);\r\n            })\r\n            .on(\"end\", function (d) {\r\n                self.dragEnded.call(this, d, self);\r\n            })\r\n    }\r\n\r\n\r\n    dragStarted(d,self) {\r\n        // self.treeDesigner.layout.disableAutoLayout();\r\n        ContextMenu.hide();\r\n        var text = d3.select(this);\r\n        if(!text.classed(\"selected\")){\r\n            self.treeDesigner.clearSelection();\r\n        }\r\n\r\n        self.treeDesigner.selectText(d);\r\n        text.classed(\"selected dragging\", true);\r\n        self.selectedNodes = self.treeDesigner.getSelectedNodes();\r\n        self.prevDragEvent = d3.event;\r\n        self.dragEventCount = 0;\r\n    }\r\n\r\n    onDrag(draggedText, self){\r\n        if(self.dragEventCount==2){\r\n            self.data.saveState();\r\n        }\r\n        self.dragEventCount++;\r\n\r\n        var dx = d3.event.x - self.prevDragEvent.x;\r\n        var dy = d3.event.y- self.prevDragEvent.y;\r\n\r\n        self.treeDesigner.layout.moveTexts([draggedText], dx, dy);\r\n\r\n        self.prevDragEvent = d3.event;\r\n        self.treeDesigner.updatePlottingRegionSize();\r\n    }\r\n\r\n    dragEnded(draggedNode, self){\r\n         d3.select(this).classed(\"dragging\", false);\r\n    }\r\n\r\n}\r\n\r\n\r\n","import * as d3 from './d3'\r\nimport {Utils} from 'sd-utils'\r\n\r\nexport class Tooltip {\r\n    static getContainer(){\r\n        return d3.select(\"body\").selectOrAppend('div.sd-tooltip');\r\n    }\r\n\r\n    static show(html, xOffset = 5, yOffset = 28, event, duration=null) {\r\n        var container = Tooltip.getContainer()\r\n            .style(\"opacity\", 0);\r\n        container.transition()\r\n            .duration(200)\r\n            .style(\"opacity\", .98);\r\n        container.html(html);\r\n        Tooltip.updatePosition(xOffset, yOffset, event);\r\n        if(duration){\r\n            setTimeout(function(){\r\n                Tooltip.hide();\r\n            }, duration)\r\n        }\r\n    }\r\n\r\n    static updatePosition(xOffset = 5, yOffset = 28, event) {\r\n        event = event || d3.event;\r\n        Tooltip.getContainer()\r\n            .style(\"left\", (event.pageX + xOffset) + \"px\")\r\n            .style(\"top\", (event.pageY - yOffset) + \"px\");\r\n    }\r\n\r\n    static hide(duration = 500) {\r\n        var t = Tooltip.getContainer();\r\n        if(duration){\r\n            t = t.transition().duration(duration)\r\n        }\r\n        t.style(\"opacity\", 0);\r\n    }\r\n\r\n    static attach(target, htmlOrFn, xOffset, yOffset) {\r\n        target.on('mouseover', function (d, i) {\r\n            var html = null;\r\n            if (Utils.isFunction(htmlOrFn)) {\r\n                html = htmlOrFn(d, i);\r\n            } else {\r\n                html = htmlOrFn;\r\n            }\r\n\r\n            if (html !== null && html !== undefined && html !== '') {\r\n                Tooltip.show(html, xOffset, yOffset);\r\n            }else{\r\n                Tooltip.hide(0);\r\n            }\r\n\r\n        }).on('mousemove', function (d) {\r\n            Tooltip.updatePosition(xOffset, yOffset);\r\n        }).on(\"mouseout\", function (d) {\r\n            Tooltip.hide();\r\n        });\r\n    }\r\n}\r\n","import * as d3 from \"./d3\";\r\nimport {Utils} from \"sd-utils\";\r\nimport {AppUtils} from \"./app-utils\";\r\nimport {domain as model} from \"sd-model\";\r\nimport {ContextMenu} from \"./context-menu/context-menu\";\r\nimport {MainContextMenu} from \"./context-menu/main-context-menu\";\r\nimport {NodeContextMenu} from \"./context-menu/node-context-menu\";\r\nimport {Layout} from \"./layout\";\r\nimport {NodeDragHandler} from \"./node-drag-handler\";\r\nimport {Tooltip} from \"./tooltip\";\r\nimport {Templates} from \"./templates\";\r\nimport {TextDragHandler} from \"./text-drag-handler\";\r\nimport {TextContextMenu} from \"./context-menu/text-context-menu\";\r\nimport {EdgeContextMenu} from \"./context-menu/edge-context-menu\";\r\nimport * as Hammer from \"hammerjs\";\r\nimport {i18n} from \"./i18n/i18n\";\r\n\r\n\r\nexport class TreeDesignerConfig {\r\n    width = undefined;\r\n    height = undefined;\r\n    margin = {\r\n        left: 25,\r\n        right: 25,\r\n        top: 25,\r\n        bottom: 25\r\n    };\r\n    scale = 1;\r\n    lng = 'en';\r\n    layout= {\r\n        type: 'tree',\r\n        nodeSize: 40,\r\n        limitNodePositioning: true,\r\n        limitTextPositioning: true,\r\n        gridHeight: 75,\r\n        gridWidth: 150,\r\n        edgeSlantWidthMax: 20\r\n    };\r\n    fontFamily = 'sans-serif';\r\n    fontSize = '12px';\r\n    fontWeight = 'normal';\r\n    fontStyle = 'normal';\r\n    node = {\r\n        strokeWidth: '1px',\r\n        optimal: {\r\n            stroke: '#006f00',\r\n            strokeWidth: '1.5px',\r\n        },\r\n        label: {\r\n            fontSize: '1em',\r\n            color: 'black'\r\n        },\r\n        payoff: {\r\n            fontSize: '1em',\r\n            color: 'black',\r\n            negativeColor: '#b60000'\r\n        },\r\n        decision: {\r\n            fill: '#ff7777',\r\n            stroke: '#660000',\r\n\r\n            selected: {\r\n                fill: '#aa3333',\r\n                // stroke: '#666600'\r\n            }\r\n        },\r\n        chance: {\r\n            fill: '#ffff44',\r\n            stroke: '#666600',\r\n\r\n            selected: {\r\n                fill: '#aaaa00',\r\n                // stroke: '#666600'\r\n            }\r\n        },\r\n        terminal:{\r\n            fill: '#44ff44',\r\n            stroke: 'black',\r\n            selected: {\r\n                fill: '#00aa00',\r\n                // stroke: 'black'\r\n            },\r\n            payoff: {\r\n                fontSize: '1em',\r\n                color: 'black',\r\n                negativeColor: '#b60000'\r\n            },\r\n        }\r\n    };\r\n    edge={\r\n        stroke: '#424242',\r\n        strokeWidth: '1.5',\r\n        optimal:{\r\n            stroke: '#006f00',\r\n            strokeWidth: '2.4',\r\n        },\r\n        selected:{\r\n            stroke: '#045ad1',\r\n            strokeWidth: '3.5',\r\n        },\r\n        label: {\r\n            fontSize: '1em',\r\n            color: 'back'\r\n        },\r\n        payoff:{\r\n            fontSize: '1em',\r\n            color: 'black',\r\n            negativeColor: '#b60000'\r\n        }\r\n\r\n    };\r\n    probability = {\r\n        fontSize: '1em',\r\n        color: '#0000d7'\r\n    };\r\n    title = {\r\n        fontSize: '16px',\r\n        fontWeight: 'bold',\r\n        fontStyle: 'normal',\r\n        color: '#000000',\r\n        margin:{\r\n            top: 15,\r\n            bottom: 10\r\n        }\r\n    };\r\n    description = {\r\n        show: true,\r\n        fontSize: '12px',\r\n        fontWeight: 'bold',\r\n        fontStyle: 'normal',\r\n        color: '#000000',\r\n        margin:{\r\n            top: 5,\r\n            bottom: 10\r\n        }\r\n    };\r\n\r\n    readOnly= false;\r\n    disableAnimations=false;\r\n    forceFullEdgeRedraw=false;\r\n    hideLabels=false;\r\n    hidePayoffs=false;\r\n    hideProbabilities=false;\r\n    raw=false;\r\n\r\n\r\n    payoffNumberFormatter = (v, i)=> v;\r\n    probabilityNumberFormatter  = (v)=> v;\r\n\r\n    onNodeSelected = (node) => {};\r\n    onEdgeSelected = (edge) => {};\r\n    onTextSelected = (text) => {};\r\n    onSelectionCleared = () => {};\r\n\r\n    operationsForObject = (o) => [];\r\n    performOperation = (object, operation) => Promise.resolve();\r\n\r\n    payoffNames = [null, null];\r\n    maxPayoffsToDisplay = 1;\r\n\r\n    constructor(custom) {\r\n        if (custom) {\r\n            Utils.deepExtend(this, custom);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class TreeDesigner {\r\n\r\n    config;\r\n    container;\r\n    data; //data model manager\r\n    svg;\r\n\r\n    constructor(container, dataModel, config){\r\n        this.setConfig(config);\r\n        this.data = dataModel;\r\n        this.initContainer(container);\r\n        this.init();\r\n    }\r\n\r\n    setConfig(config) {\r\n        this.config = new TreeDesignerConfig(config);\r\n        if(this.layout){\r\n            this.layout.config=this.config.layout;\r\n        }\r\n        this.updateCustomStyles();\r\n        return this;\r\n    }\r\n\r\n    init(){\r\n\r\n        this.initSvg();\r\n        this.initLayout();\r\n        this.initI18n();\r\n        this.initBrush();\r\n        this.initEdgeMarkers();\r\n\r\n        this.updateCustomStyles();\r\n        if(!this.config.readOnly){\r\n            this.initMainContextMenu();\r\n            this.initNodeContextMenu();\r\n            this.initEdgeContextMenu();\r\n            this.initNodeDragHandler();\r\n            this.initTextDragHandler();\r\n            this.initTextContextMenu();\r\n        }\r\n        this.redraw();\r\n    }\r\n\r\n    initI18n() {\r\n        i18n.init(this.config.lng);\r\n    }\r\n\r\n\r\n    updateCustomStyles(){\r\n        d3.select('head').selectOrAppend('style#sd-tree-designer-style').html(Templates.get('treeDesignerStyles', this.config));\r\n        return this;\r\n    }\r\n\r\n    initLayout(){\r\n        this.layout = new Layout(this, this.data, this.config.layout);\r\n    }\r\n\r\n    initNodeDragHandler(){\r\n        this.nodeDragHandler = new NodeDragHandler(this, this.data);\r\n    }\r\n\r\n    initTextDragHandler(){\r\n        this.textDragHandler = new TextDragHandler(this, this.data);\r\n    }\r\n\r\n    redraw(withTransitions=false){\r\n\r\n        var self = this;\r\n        withTransitions = !self.config.disableAnimations && withTransitions;\r\n        this.redrawDiagramTitle();\r\n        this.redrawDiagramDescription();\r\n        this.updateScale(withTransitions);\r\n        this.updateMargin(withTransitions);\r\n        if(withTransitions){\r\n            self.transitionPrev = self.transition;\r\n            self.transition = true;\r\n        }\r\n        this.redrawNodes();\r\n        this.redrawEdges();\r\n        this.redrawFloatingTexts();\r\n        this.updateValidationMessages();\r\n        if(withTransitions){\r\n            self.transition =  self.transitionPrev;\r\n        }\r\n        setTimeout(function(){\r\n            self.updatePlottingRegionSize();\r\n        },10);\r\n\r\n        return this;\r\n    }\r\n\r\n    computeAvailableSpace(){\r\n        this.availableHeight = AppUtils.sanitizeHeight(this.config.height, this.container, this.config.margin);\r\n        this.availableWidth = AppUtils.sanitizeWidth(this.config.width, this.container, this.config.margin);\r\n    }\r\n\r\n    initSvg() {\r\n        var c = this;\r\n        var self = this;\r\n        this.computeAvailableSpace();\r\n        this.svg = this.container.selectOrAppend('svg.sd-tree-designer');\r\n        this.svg.attr('width', this.availableWidth).attr('height', this.availableHeight);\r\n\r\n        this.wrapperGroup = this.svg.selectOrAppend('g.sd-wrapper-group');\r\n        this.mainGroup = this.wrapperGroup.selectOrAppend('g.main-group');\r\n        this.updateScale();\r\n        this.updateMargin();\r\n\r\n\r\n        if (!this.config.width) {\r\n            d3.select(window)\r\n                .on(\"resize.tree-designer\", function () {\r\n                    self.updatePlottingRegionSize();\r\n                    self.redrawDiagramTitle();\r\n                });\r\n        }\r\n\r\n        var mc = new Hammer.Manager(this.svg.node(), {touchAction : 'auto'});\r\n        mc.add(new Hammer.Press({\r\n            pointerType: 'touch'\r\n        }));\r\n\r\n        mc.add(new Hammer.Pinch({\r\n            pointerType: 'touch'\r\n        }));\r\n\r\n        var cancel;\r\n        mc.on('pinchstart', function(){\r\n            self.disableBrush();\r\n        })\r\n        mc.on('pinch', function(){\r\n            cancel = Utils.waitForFinalEvent(()=>self.enableBrush(), 'pinchend', 5000)\r\n        })\r\n    }\r\n\r\n    updateMargin(withTransitions){\r\n        var self = this;\r\n        var margin = this.config.margin;\r\n        var group = this.mainGroup;\r\n        if(withTransitions){\r\n            group = group.transition();\r\n        }\r\n\r\n        this.topMargin = margin.top;\r\n        if(this.diagramTitle||this.diagramDescription){\r\n            this.topMargin = parseInt(this.diagramTitle ? this.config.title.margin.top : 0) + this.getTitleGroupHeight()\r\n                +  Math.max(this.topMargin, parseInt(this.config.title.margin.bottom));\r\n        }\r\n\r\n        group.attr(\"transform\", \"translate(\" + margin.left + \",\" + this.topMargin + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\r\n    }\r\n\r\n    setMargin(margin, withoutStateSaving){\r\n        var self=this;\r\n        if(!withoutStateSaving){\r\n            this.data.saveState({\r\n                data:{\r\n                    margin: Utils.clone(self.config.margin)\r\n                },\r\n                onUndo: (data)=> {\r\n                    self.setMargin(data.margin, true);\r\n                },\r\n                onRedo: (data)=> {\r\n                    self.setMargin(margin, true);\r\n                }\r\n            });\r\n        }\r\n        Utils.deepExtend(this.config.margin, margin);\r\n        this.redrawDiagramTitle();\r\n        this.updateMargin(true);\r\n    }\r\n\r\n\r\n    updateScale(withTransitions){\r\n        var self = this;\r\n        var scale = this.config.scale;\r\n        var group = this.wrapperGroup;\r\n        if(withTransitions){\r\n            group = group.transition();\r\n        }\r\n\r\n        group.attr(\"transform\", \"scale(\" + scale + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\r\n    }\r\n\r\n    setScale(scale, withoutStateSaving){\r\n        var self=this;\r\n        if(!withoutStateSaving){\r\n            this.data.saveState({\r\n                data:{\r\n                    scale: Utils.clone(self.config.scale)\r\n                },\r\n                onUndo: (data)=> {\r\n                    self.setScale(data.scale, true);\r\n                },\r\n                onRedo: (data)=> {\r\n                    self.setScale(scale, true);\r\n                }\r\n            });\r\n        }\r\n        this.config.scale = scale;\r\n        this.updateScale(true);\r\n    }\r\n\r\n    initContainer(containerIdOrElem) {\r\n        if (Utils.isString(containerIdOrElem)) {\r\n            var selector = containerIdOrElem.trim();\r\n\r\n            if (!Utils.startsWith(selector, '#') && !Utils.startsWith(selector, '.')) {\r\n                selector = '#' + selector;\r\n            }\r\n            this.container = d3.select(selector);\r\n        } else if(containerIdOrElem._parents){\r\n            this.container = containerIdOrElem\r\n        }else{\r\n            this.container = d3.select(containerIdOrElem);\r\n        }\r\n    }\r\n\r\n    updatePlottingRegionSize() {\r\n        var changed = false;\r\n        this.computeAvailableSpace();\r\n        var margin = this.config.margin;\r\n        var svgWidth = this.svg.attr('width');\r\n        var svgHeight = this.svg.attr('height');\r\n        var mainGroupBox = this.mainGroup.node().getBBox();\r\n        let boxWidth = mainGroupBox.width;\r\n        var newSvgWidth = boxWidth+mainGroupBox.x+margin.left+margin.right;\r\n        newSvgWidth  *= this.config.scale;\r\n        this.container.classed('with-overflow-x', newSvgWidth>=this.availableWidth);\r\n        newSvgWidth = Math.max(newSvgWidth, this.availableWidth);\r\n        if(svgWidth!=newSvgWidth){\r\n            changed = true;\r\n            this.svg.attr('width', newSvgWidth);\r\n        }\r\n        let boxHeight = mainGroupBox.height;\r\n        var newSvgHeight = boxHeight+mainGroupBox.y+this.topMargin+margin.bottom;\r\n        newSvgHeight *= this.config.scale;\r\n        this.container.classed('with-overflow-y', newSvgHeight>=this.availableHeight);\r\n        newSvgHeight = Math.max(newSvgHeight, this.availableHeight);\r\n        if(svgHeight!=newSvgHeight){\r\n            changed=true;\r\n            this.svg.attr('height', newSvgHeight);\r\n        }\r\n        if(changed){\r\n            this.updateBrushExtent()\r\n        }\r\n\r\n\r\n    }\r\n\r\n    redrawNodes() {\r\n        var self = this;\r\n\r\n\r\n        var nodesContainer = this.mainGroup.selectOrAppend('g.nodes');\r\n        var nodes = nodesContainer.selectAll('.node').data(this.data.nodes.filter(d=>!d.$hidden), (d,i)=> d.id);\r\n        nodes.exit().remove();\r\n        var nodesEnter = nodes.enter().append('g')\r\n            .attr('id', d=>'node-'+d.id)\r\n            .attr('class', d=>d.type+'-node node')\r\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\r\n        nodesEnter.append('path');\r\n\r\n        var labelEnter = nodesEnter.append('text').attr('class', 'label');\r\n        var payoffEnter = nodesEnter.append('text').attr('class', 'payoff computed');\r\n        var indicatorEnter = nodesEnter.append('text').attr('class', 'error-indicator').text('!!');\r\n        var aggregatedPayoffEnter = nodesEnter.append('text').attr('class', 'aggregated-payoff');\r\n        var probabilityToEnterEnter = nodesEnter.append('text').attr('class', 'probability-to-enter');\r\n\r\n        var nodesMerge = nodesEnter.merge(nodes);\r\n        nodesMerge.classed('optimal', (d)=>self.isOptimal(d));\r\n\r\n        var nodesMergeT = nodesMerge;\r\n        if(this.transition){\r\n            nodesMergeT = nodesMerge.transition();\r\n            nodesMergeT.on('end', ()=> self.updatePlottingRegionSize())\r\n        }\r\n        nodesMergeT\r\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')')\r\n\r\n        var path = nodesMerge.select('path');\r\n        this.layout.drawNodeSymbol(path,this.transition);\r\n\r\n        /*path\r\n            .style('fill', d=> {\r\n                // if(self.isNodeSelected(d)){\r\n                //     return self.config.node[d.type].selected.fill\r\n                // }\r\n                return self.config.node[d.type].fill\r\n            })\r\n            .style('stroke', d=> self.config.node[d.type].stroke)\r\n            .style('stroke-width', d=> {\r\n                if(self.config.node[d.type].strokeWidth!==undefined){\r\n                    return self.config.node[d.type].strokeWidth;\r\n                }\r\n                return self.config.node.strokeWidth;\r\n            });\r\n        */\r\n        this.layout.nodeLabelPosition(labelEnter);\r\n        var labelMerge = nodesMerge.select('text.label');\r\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\r\n        var labelMergeT = nodesMergeT.select('text.label');\r\n        labelMergeT.each(this.updateTextLines);\r\n        this.layout.nodeLabelPosition(labelMergeT)\r\n            .attr('text-anchor', 'middle')\r\n\r\n        var payoff = nodesMerge.select('text.payoff');\r\n\r\n        var payoffTspans = payoff.selectAll('tspan').data(d=>{\r\n            let item = d.displayValue('childrenPayoff');\r\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\r\n        });\r\n        payoffTspans.exit().remove();\r\n\r\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\r\n        payoffTspansM\r\n            // .attr('dominant-baseline', 'hanging')\r\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\r\n            .attr('x', '0')\r\n            .classed('negative', d=> {\r\n                return d!==null && d<0;\r\n            })\r\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\r\n            .text((d, i)=> {\r\n                var val = d\r\n\r\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\r\n            });\r\n        this.attachPayoffTooltip(payoffTspansM);\r\n\r\n\r\n        var payoffT = payoff;\r\n        if(this.transition){\r\n            payoffT = payoff.transition();\r\n        }\r\n\r\n        this.layout.nodePayoffPosition(payoffEnter);\r\n        this.layout.nodePayoffPosition(payoffT);\r\n\r\n        var aggregatedPayoff = nodesMerge.select('text.aggregated-payoff');\r\n        var aggregatedPayoffTspans = aggregatedPayoff.selectAll('tspan').data(d=>{\r\n            let item = d.displayValue('aggregatedPayoff');\r\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\r\n        });\r\n        aggregatedPayoffTspans.exit().remove();\r\n        var aggregatedPayoffTspansM = aggregatedPayoffTspans.enter().append('tspan').merge(aggregatedPayoffTspans)\r\n            .attr('dy', (d,i)=>i>0 ? '0.95em': undefined)\r\n            .classed('negative', d=> {\r\n                return d!==null && d<0;\r\n            })\r\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\r\n            .text((val, i)=> {\r\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\r\n            });\r\n\r\n        this.attachPayoffTooltip(aggregatedPayoffTspansM, 'aggregatedPayoff');\r\n\r\n        var aggregatedPayoffT = aggregatedPayoff;\r\n        if(this.transition){\r\n            aggregatedPayoffT = aggregatedPayoff.transition();\r\n        }\r\n\r\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffEnter);\r\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffT);\r\n\r\n        var probabilityToEnter = nodesMerge.select('text.probability-to-enter')\r\n            .text(d=>{\r\n                var val = d.displayValue('probabilityToEnter');\r\n                return val!==null ? (isNaN(val) ? val : self.config.probabilityNumberFormatter(val)): ''\r\n            })\r\n            .classed('sd-hidden', this.config.hideProbabilities || this.config.raw);\r\n        Tooltip.attach(probabilityToEnter, i18n.t('tooltip.node.probabilityToEnter'));\r\n\r\n\r\n        var probabilityToEnterT = probabilityToEnter;\r\n        if(this.transition){\r\n            probabilityToEnterT = probabilityToEnter.transition();\r\n        }\r\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterEnter);\r\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterT);\r\n\r\n\r\n        var indicator = nodesMerge.select('text.error-indicator');\r\n        indicator.classed('sd-hidden', this.config.raw)\r\n        this.layout.nodeIndicatorPosition(indicatorEnter);\r\n        this.layout.nodeIndicatorPosition(indicator);\r\n\r\n        if(this.nodeDragHandler){\r\n            nodesMerge.call(this.nodeDragHandler.drag);\r\n        }\r\n\r\n        nodesMerge.on('contextmenu', this.nodeContextMenu);\r\n        nodesMerge.on('dblclick', this.nodeContextMenu)\r\n        nodesMerge.each(function(d, i){\r\n            var nodeElem = this;\r\n            var mc = new Hammer.Manager(nodeElem);\r\n            mc.add(new Hammer.Press({\r\n                pointerType: 'touch'\r\n            }));\r\n            mc.on('press', function(e){\r\n                if(e.pointerType=='touch'){\r\n                    self.nodeDragHandler.cancelDrag();\r\n                }\r\n            })\r\n\r\n\r\n            if(d.folded){\r\n                let button = d3.select(nodeElem).selectOrAppend('text.sd-unfold-button')\r\n                    .text(\"[+]\")\r\n                    .on('click dbclick mousedown', ()=>self.foldSubtree(d, false)); //firefox detects only mousedown event - related to drag handler\r\n\r\n                self.layout.nodeUnfoldButtonPosition(button);\r\n                Tooltip.attach(button, i18n.t('contextMenu.node.unfold'));\r\n            }else{\r\n                d3.select(nodeElem).select('.sd-unfold-button').remove();\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    attachPayoffTooltip(selection, payoffFiledName = 'payoff', object='node'){\r\n        var self = this;\r\n        Tooltip.attach(selection, (d, i)=>{\r\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\r\n                return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.named',{value: d.payoff, number: i+1, name: self.config.payoffNames[i]})\r\n            }\r\n            return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.default',{value: d.payoff, number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\r\n        });\r\n    }\r\n\r\n    updateTextLines(d){ //helper method for splitting text to tspans\r\n        var lines = d.name ? d.name.split('\\n') : [];\r\n        lines.reverse();\r\n        var tspans = d3.select(this).selectAll('tspan').data(lines);\r\n        tspans.enter().append('tspan')\r\n            .merge(tspans)\r\n            .text(l=>l)\r\n            .attr('dy', (d,i)=>i>0 ? '-1.1em': undefined)\r\n            .attr('x', '0');\r\n\r\n        tspans.exit().remove();\r\n    }\r\n\r\n    isOptimal(d){\r\n        return d.displayValue('optimal');\r\n    }\r\n\r\n    redrawEdges() {\r\n        var self = this;\r\n        var edgesContainer = this.mainGroup.selectOrAppend('g.edges');\r\n        if(self.config.forceFullEdgeRedraw){\r\n            edgesContainer.selectAll(\"*\").remove();\r\n        }\r\n\r\n        var edges = edgesContainer.selectAll('.edge').data(this.data.edges.filter(e=>!e.$hidden), (d,i)=> d.id);\r\n        edges.exit().remove();\r\n        var edgesEnter = edges.enter().append('g')\r\n            .attr('id', d=>'edge-'+d.id)\r\n            .attr('class', 'edge');\r\n\r\n\r\n        edgesEnter.append('path');\r\n        var labelEnter = edgesEnter.appendSelector('g.label-group');\r\n        labelEnter.append('text').attr('class', 'label');\r\n        var payoffEnter = edgesEnter.append('text').attr('class', 'payoff');\r\n        var probabilityEnter = edgesEnter.append('text').attr('class', 'probability');\r\n\r\n\r\n        var edgesMerge = edgesEnter.merge(edges);\r\n\r\n\r\n        var optimalClassName = 'optimal';\r\n        edgesMerge.classed(optimalClassName, (d)=>self.isOptimal(d));\r\n\r\n        var edgesMergeT = edgesMerge;\r\n        if(this.transition){\r\n            edgesMergeT = edgesMerge.transition();\r\n        }\r\n\r\n        edgesMergeT.select('path')\r\n            .attr('d', d=> this.layout.edgeLineD(d))\r\n            // .attr(\"stroke\", \"black\")\r\n            // .attr(\"stroke-width\", 2)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"marker-end\", function(d) {\r\n                var suffix = d3.select(this.parentNode).classed('selected') ? '-selected' : (self.isOptimal(d)?'-optimal':'');\r\n                return \"url(#arrow\"+ suffix+\")\"\r\n            });\r\n            // .attr(\"shape-rendering\", \"optimizeQuality\")\r\n\r\n\r\n        edgesMerge.on('click', d=>{\r\n            self.selectEdge(d, true)\r\n        });\r\n\r\n        this.layout.edgeLabelPosition(labelEnter);\r\n        edgesMergeT.select('text.label').each(this.updateTextLines);\r\n        var labelMerge = edgesMerge.select('g.label-group');\r\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\r\n        var labelMergeT = edgesMergeT.select('g.label-group');\r\n        this.layout.edgeLabelPosition(labelMergeT);\r\n            // .text(d=>d.name);\r\n\r\n        var payoff = edgesMerge.select('text.payoff');\r\n\r\n        var payoffTspans = payoff.selectAll('tspan').data(d => {\r\n            let item = d.displayValue('payoff');\r\n            return Utils.isArray(item) ? item.slice(0, Math.min(item.length, self.config.maxPayoffsToDisplay)).map(_=>d) : [d];\r\n        });\r\n        payoffTspans.exit().remove();\r\n\r\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\r\n        payoffTspansM\r\n        // .attr('dominant-baseline', 'hanging')\r\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\r\n            // .attr('x', '0')\r\n\r\n            // .attr('dominant-baseline', 'hanging')\r\n            .classed('negative', (d, i)=> {\r\n                var val = d.displayPayoff(undefined, i);\r\n                return val!==null && val<0;\r\n            })\r\n            .classed('sd-hidden', this.config.hidePayoffs)\r\n            // .text(d=> isNaN(d.payoff) ? d.payoff : self.config.payoffNumberFormatter(d.payoff))\r\n            .text((d, i)=>{\r\n                if(this.config.raw){\r\n                    return d.payoff[i];\r\n                }\r\n\r\n                let item = d.displayValue('payoff');\r\n                let items = Utils.isArray(item) ? item : [item];\r\n\r\n                let val = items[i];\r\n                if (val !== null) {\r\n                    if (!isNaN(val)) {\r\n                        return self.config.payoffNumberFormatter(val, i);\r\n                    }\r\n                    if (Utils.isString(val)) {\r\n                        return val;\r\n                    }\r\n                }\r\n\r\n                if (d.payoff[i] !== null && !isNaN(d.payoff[i]))\r\n                    return self.config.payoffNumberFormatter(d.payoff[i], i);\r\n\r\n                return d.payoff[i];\r\n\r\n            });\r\n\r\n        Tooltip.attach(payoffTspansM, (d, i)=>{\r\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\r\n                return i18n.t('tooltip.edge.payoff.named',{value: d.payoff[i], number: i+1, name: self.config.payoffNames[i]})\r\n            }\r\n            return i18n.t('tooltip.edge.payoff.default',{value: d.payoff[i], number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\r\n        });\r\n\r\n        var payoffTextT = payoff;\r\n        if(this.transition){\r\n            payoffTextT = payoff.transition();\r\n        }\r\n        this.layout.edgePayoffPosition(payoffEnter);\r\n        this.layout.edgePayoffPosition(payoffTextT);\r\n\r\n        Tooltip.attach(edgesMerge.select('text.probability'), d=>i18n.t('tooltip.edge.probability',{value: d.probability=== undefined ? d.displayProbability() : d.probability}));\r\n\r\n        edgesMerge.select('text.probability')\r\n            .classed('sd-hidden', this.config.hideProbabilities);\r\n        var probabilityMerge = edgesMerge.select('text.probability');\r\n        probabilityMerge\r\n            .attr('text-anchor', 'end')\r\n            .text(d=>{\r\n                if(this.config.raw){\r\n                    return d.probability;\r\n                }\r\n                var val = d.displayProbability();\r\n\r\n                if(val!==null){\r\n                    if(!isNaN(val)){\r\n                        return self.config.probabilityNumberFormatter(val);\r\n                    }\r\n                    if(Utils.isString(val)){\r\n                        return val;\r\n                    }\r\n                }\r\n\r\n                if(d.probability!==null && !isNaN(d.probability))\r\n                    return self.config.probabilityNumberFormatter(d.probability);\r\n\r\n                return d.probability;\r\n            });\r\n        var probabilityMergeT = probabilityMerge;\r\n        if(this.transition){\r\n            probabilityMergeT = probabilityMerge.transition();\r\n        }\r\n\r\n        this.layout.edgeProbabilityPosition(probabilityEnter);\r\n        this.layout.edgeProbabilityPosition(probabilityMergeT);\r\n\r\n\r\n        edgesContainer.selectAll('.edge.'+optimalClassName).raise();\r\n\r\n        edgesMerge.on('contextmenu', this.edgeContextMenu);\r\n        edgesMerge.on('dblclick', this.edgeContextMenu);\r\n        edgesMerge.each(function(d, i){\r\n            var elem = this;\r\n            var mc = new Hammer.Manager(elem);\r\n            mc.add(new Hammer.Press({\r\n                pointerType: Hammer.POINTER_TOUCH\r\n            }));\r\n        })\r\n    }\r\n\r\n    redrawFloatingTexts() {\r\n        var self = this;\r\n\r\n\r\n        var textsContainer = this.mainGroup.selectOrAppend('g.floating-texts');\r\n        var texts = textsContainer.selectAll('.floating-text').data(this.data.texts, (d,i)=> d.id);\r\n        texts.exit().remove();\r\n        var textsEnter = texts.enter().appendSelector('g.floating-text')\r\n            .attr('id', d=>'text-'+d.id);\r\n\r\n\r\n        var rectWidth = 40;\r\n        var rectHeight = 20;\r\n\r\n        textsEnter.append('rect').attr('x', -5).attr('y', -16).attr('fill-opacity', 0);\r\n        textsEnter.append('text');\r\n\r\n        var textsMerge = textsEnter.merge(texts);\r\n        var textsMergeT = textsMerge;\r\n        if(this.transition){\r\n            textsMergeT = textsMerge.transition();\r\n        }\r\n\r\n        textsMergeT.attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\r\n\r\n        var tspans = textsMerge.select('text').selectAll('tspan').data(d=>d.value ? d.value.split('\\n') : []);\r\n\r\n        tspans.enter().append('tspan')\r\n            .merge(tspans)\r\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\r\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\r\n            .attr('x', '0');\r\n\r\n        tspans.exit().remove();\r\n        textsMerge.classed('sd-empty', d=>!d.value || !d.value.trim());\r\n        textsMerge.select('rect').attr('width', rectWidth).attr('height', rectHeight);\r\n\r\n        textsMerge.each(function(d){\r\n            if(!d.value){\r\n                return;\r\n            }\r\n            var bb = d3.select(this).select('text').node().getBBox();\r\n           d3.select(this).select('rect')\r\n               .attr('y', bb.y-5)\r\n               .attr('width', Math.max(bb.width+10, rectWidth))\r\n               .attr('height', Math.max(bb.height+10, rectHeight))\r\n        });\r\n\r\n        if(this.textDragHandler){\r\n            textsMerge.call(this.textDragHandler.drag);\r\n        }\r\n        textsMerge.on('contextmenu', this.textContextMenu);\r\n        textsMerge.on('dblclick', this.textContextMenu);\r\n        textsMerge.each(function(d, i){\r\n            var elem = this;\r\n            var mc = new Hammer.Manager(elem);\r\n            mc.add(new Hammer.Press({\r\n                pointerType: 'touch'\r\n            }));\r\n        })\r\n\r\n    }\r\n\r\n    updateValidationMessages() {\r\n        var nodes = this.mainGroup.selectAll('.node');\r\n        nodes.classed('error', false);\r\n\r\n        this.data.validationResults.forEach(validationResult=>{\r\n            if(validationResult.isValid()){\r\n                return;\r\n            }\r\n\r\n            Object.getOwnPropertyNames(validationResult.objectIdToError).forEach(id=>{\r\n                var errors = validationResult.objectIdToError[id];\r\n                var nodeSelection = this.getNodeD3SelectionById(id);\r\n                nodeSelection.classed('error', true);\r\n                var tooltipHtml = '';\r\n                errors.forEach(e=>{\r\n                    if(tooltipHtml){\r\n                        tooltipHtml+='<br/>'\r\n                    }\r\n                    tooltipHtml+=AppUtils.getValidationMessage(e);\r\n                });\r\n\r\n                Tooltip.attach(nodeSelection.select('.error-indicator'), tooltipHtml);\r\n\r\n\r\n            })\r\n        });\r\n    }\r\n\r\n\r\n    initEdgeMarkers() {\r\n        var defs = this.svg.append(\"svg:defs\");\r\n\r\n        this.initArrowMarker(\"arrow\");\r\n        this.initArrowMarker(\"arrow-optimal\");\r\n        this.initArrowMarker(\"arrow-selected\");\r\n    }\r\n\r\n    initArrowMarker(id) {\r\n\r\n        var defs = this.svg.select(\"defs\");\r\n        defs.append(\"marker\")\r\n            .attr(\"id\",id)\r\n            .attr(\"viewBox\",\"0 -5 10 10\")\r\n            .attr(\"refX\",5)\r\n            .attr(\"refY\",0)\r\n            .attr(\"markerWidth\",4)\r\n            .attr(\"markerHeight\",4)\r\n            .attr(\"orient\",\"auto\")\r\n            .append(\"path\")\r\n            .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n            .attr(\"class\",\"arrowHead\");\r\n    }\r\n\r\n    updateBrushExtent() {\r\n        var self =this;\r\n        this.brush.extent([[0, 0], [self.svg.attr('width'), self.svg.attr('height')]]);\r\n        this.brushContainer.call(this.brush);\r\n    }\r\n    initBrush() {\r\n        var self = this;\r\n\r\n        var brushContainer = self.brushContainer = this.brushContainer= this.wrapperGroup.selectOrInsert(\"g.brush\", \":first-child\")\r\n            .attr(\"class\", \"brush\");\r\n\r\n        var brush = this.brush = d3.brush()\r\n            .on(\"start\", brushstart)\r\n            .on(\"brush\", brushmove)\r\n            .on(\"end\", brushend);\r\n\r\n\r\n\r\n        this.updateBrushExtent();\r\n\r\n        brushContainer.select('.overlay').on(\"mousemove.edgeSelection\", mousemoved);\r\n        function mousemoved() {\r\n            var m = d3.mouse(this);\r\n            var mgt = self.getMainGroupTranslation();\r\n            var margin = 10;\r\n\r\n            var closest = [null, 999999999];\r\n            var closeEdges = [];\r\n            self.mainGroup.selectAll('.edge').each(function(d){\r\n                var selection = d3.select(this);\r\n                selection.classed('sd-hover', false);\r\n                var pathNode = selection.select('path').node();\r\n                var b = pathNode.getBBox();\r\n                if(b.x+mgt[0] <=m[0] && b.x+b.width+mgt[0] >= m[0] &&\r\n                   b.y+mgt[1]-margin <=m[1] && b.y+b.height+mgt[1]+margin >= m[1]){\r\n\r\n                    var cp = AppUtils.closestPoint(pathNode, [m[0]-mgt[0], m[1]-mgt[1]]);\r\n                    if(cp.distance < margin && cp.distance<closest[1]){\r\n                        closest = [selection, cp.distance];\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n            self.hoveredEdge = null;\r\n            if(closest[0]){\r\n                closest[0].classed('sd-hover', true);\r\n                self.hoveredEdge = closest[0];\r\n            }\r\n\r\n        }\r\n\r\n        function brushstart() {\r\n            if (!d3.event.selection) return;\r\n            if(self.hoveredEdge){\r\n                self.selectEdge(self.hoveredEdge.datum(), true)\r\n            }else{\r\n                self.clearSelection();\r\n            }\r\n            ContextMenu.hide();\r\n        }\r\n\r\n        // Highlight the selected nodes.\r\n        function brushmove() {\r\n            var s = d3.event.selection;\r\n            if(!s)return;\r\n\r\n            self.mainGroup.selectAll(\".node\").classed('selected', function (d) {\r\n                var mainGroupTranslation = self.getMainGroupTranslation();\r\n                var x = d.location.x+mainGroupTranslation[0];\r\n                var y = d.location.y+mainGroupTranslation[1];\r\n                var nodeSize = self.config.layout.nodeSize;\r\n                var offset = nodeSize*0.25;\r\n                return s[0][0] <= x+offset && x-offset <= s[1][0]\r\n                    && s[0][1] <= y+offset && y-offset <= s[1][1];\r\n            });\r\n        }\r\n        // If the brush is empty, select all circles.\r\n        function brushend() {\r\n            if (!d3.event.selection) return;\r\n            brush.move(brushContainer, null);\r\n\r\n            var selectedNodes = self.getSelectedNodes();\r\n            if(selectedNodes && selectedNodes.length === 1){\r\n                self.selectNode(selectedNodes[0]);\r\n            }\r\n            // if (!d3.event.selection) self.mainGroup.selectAll(\".selected\").classed('selected', false);\r\n        }\r\n    }\r\n\r\n    disableBrush(){\r\n        if(!this.brushDisabled){\r\n            AppUtils.growl(i18n.t('growl.brushDisabled'), 'info', 'left')\r\n        }\r\n        this.brushDisabled = true;\r\n        this.brushContainer.remove();\r\n    }\r\n\r\n    enableBrush(){\r\n        if(this.brushDisabled){\r\n            AppUtils.growl(i18n.t('growl.brushEnabled'), 'info', 'left')\r\n            this.initBrush();\r\n            this.brushDisabled = false;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    getMainGroupTranslation(invert) {\r\n        var translation = AppUtils.getTranslation(this.mainGroup.attr(\"transform\"));\r\n        if(invert){\r\n            translation[0] = -translation[0];\r\n            translation[1] = -translation[1]\r\n        }\r\n        return translation;\r\n    }\r\n\r\n    initNodeContextMenu() {\r\n        this.nodeContextMenu = new NodeContextMenu(this, this.config.operationsForObject);\r\n    }\r\n\r\n    initEdgeContextMenu() {\r\n        this.edgeContextMenu = new EdgeContextMenu(this);\r\n    }\r\n\r\n    initTextContextMenu() {\r\n        this.textContextMenu = new TextContextMenu(this);\r\n    }\r\n\r\n\r\n\r\n    initMainContextMenu() {\r\n        this.mainContextMenu = new MainContextMenu(this);\r\n        this.svg.on('contextmenu',this.mainContextMenu);\r\n        this.svg.on('dblclick',this.mainContextMenu);\r\n    }\r\n\r\n    addText(text){\r\n        this.data.saveState();\r\n        this.data.addText(text);\r\n        this.redraw();\r\n        this.selectText(text);\r\n    }\r\n\r\n    addNode(node, parent, redraw=false){\r\n        this.data.saveState();\r\n        this.data.addNode(node, parent);\r\n        this.redraw(true);\r\n        this.layout.update(node);\r\n        return node;\r\n    }\r\n\r\n    addDecisionNode(parent){\r\n        var newNode = new model.DecisionNode(this.layout.getNewChildLocation(parent));\r\n        this.addNode(newNode, parent)\r\n    }\r\n    addChanceNode(parent){\r\n        var newNode = new model.ChanceNode(this.layout.getNewChildLocation(parent));\r\n        this.addNode(newNode, parent)\r\n    }\r\n    addTerminalNode(parent){\r\n        var newNode = new model.TerminalNode(this.layout.getNewChildLocation(parent));\r\n        this.addNode(newNode, parent)\r\n    }\r\n\r\n    injectNode(node, edge){\r\n        this.data.saveState();\r\n        this.data.injectNode(node, edge);\r\n        this.redraw();\r\n        this.layout.update(node);\r\n        return node;\r\n    }\r\n\r\n    injectDecisionNode(edge){\r\n        var newNode = new model.DecisionNode(this.layout.getInjectedNodeLocation(edge));\r\n        this.injectNode(newNode, edge);\r\n\r\n    }\r\n\r\n    injectChanceNode(edge){\r\n        var newNode = new model.ChanceNode(this.layout.getInjectedNodeLocation(edge));\r\n        this.injectNode(newNode, edge);\r\n    }\r\n\r\n    removeNode(node) {\r\n        this.data.saveState();\r\n        this.data.removeNode(node);\r\n\r\n\r\n        if(!this.layout.isManualLayout()){\r\n            this.layout.update();\r\n        }else{\r\n            this.redraw();\r\n        }\r\n    }\r\n\r\n    removeSelectedNodes() {\r\n        var selectedNodes = this.getSelectedNodes();\r\n        if(!selectedNodes.length){\r\n            return;\r\n        }\r\n        this.data.saveState();\r\n        this.data.removeNodes(selectedNodes);\r\n        this.clearSelection();\r\n        this.redraw();\r\n        this.layout.update();\r\n    }\r\n\r\n    removeSelectedTexts(){\r\n        var selectedTexts = this.getSelectedTexts();\r\n\r\n        if(!selectedTexts.length){\r\n            return;\r\n        }\r\n        this.data.saveState();\r\n        this.data.removeTexts(selectedTexts);\r\n        this.clearSelection();\r\n        this.redraw();\r\n    }\r\n\r\n    copyNode(d, notClearPrevSelection) {\r\n        var clone = this.data.cloneSubtree(d);\r\n        if(notClearPrevSelection){\r\n            if(!this.copiedNodes){\r\n                this.copiedNodes=[];\r\n            }\r\n            this.copiedNodes.push(clone);\r\n        }else{\r\n            this.copiedNodes = [clone];\r\n        }\r\n\r\n    }\r\n\r\n    cutNode(d) {\r\n        this.copyNode(d);\r\n        this.removeNode(d);\r\n    }\r\n\r\n    cutSelectedNodes(){\r\n        var selectedNodes = this.getSelectedNodes();\r\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\r\n        this.copyNodes(selectedRoots);\r\n        this.removeSelectedNodes();\r\n    }\r\n\r\n    copySelectedNodes() {\r\n        var self;\r\n        var selectedNodes = this.getSelectedNodes();\r\n\r\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\r\n        this.copyNodes(selectedRoots);\r\n\r\n\r\n    }\r\n\r\n    copyNodes(nodes){\r\n        this.copiedNodes = nodes.map(d=>this.data.cloneSubtree(d));\r\n    }\r\n\r\n\r\n\r\n    pasteToNode(node) {\r\n        if(!this.copiedNodes || !this.copiedNodes.length){\r\n            return;\r\n        }\r\n        this.data.saveState();\r\n        var self = this;\r\n        self.clearSelection();\r\n        var nodesToAttach = this.copiedNodes;\r\n        self.copyNodes(this.copiedNodes);\r\n        nodesToAttach.forEach(toAttach=>{\r\n            var attached = this.data.attachSubtree(toAttach, node).childNode;\r\n            if(attached.folded){\r\n                self.foldSubtree(attached, attached.folded, false);\r\n            }\r\n            var location = self.layout.getNewChildLocation(node);\r\n            attached.moveTo(location.x, location.y, true);\r\n            self.layout.moveNodeToEmptyPlace(attached, false);\r\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\r\n\r\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\r\n        });\r\n\r\n        if(node.folded){\r\n            self.foldSubtree(node, node.folded, false);\r\n        }\r\n\r\n        setTimeout(function(){\r\n            self.redraw();\r\n            self.layout.update();\r\n        },10)\r\n\r\n    }\r\n\r\n    pasteToNewLocation(point) {\r\n        this.data.saveState();\r\n        var self = this;\r\n        self.clearSelection();\r\n        var nodesToAttach = this.copiedNodes;\r\n        self.copyNodes(this.copiedNodes);\r\n        nodesToAttach.forEach(toAttach=> {\r\n            var attached = this.data.attachSubtree(toAttach);\r\n            if(attached.folded){\r\n                self.foldSubtree(attached, attached.folded, false);\r\n            }\r\n            attached.moveTo(point.x, point.y, true);\r\n            self.layout.moveNodeToEmptyPlace(attached, false);\r\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\r\n\r\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\r\n        });\r\n\r\n        setTimeout(function(){\r\n            self.redraw();\r\n            self.layout.update();\r\n        },10)\r\n\r\n    }\r\n\r\n    convertNode(node, typeToConvertTo){\r\n        const self = this;\r\n        this.data.saveState();\r\n        this.data.convertNode(node, typeToConvertTo);\r\n        setTimeout(function(){\r\n            self.redraw(true);\r\n        },10)\r\n    }\r\n\r\n    performOperation(object, operation){\r\n        const self = this;\r\n        this.data.saveState();\r\n        this.config.performOperation(object, operation).then(() => {\r\n            setTimeout(function(){\r\n                self.redraw();\r\n                self.layout.update();\r\n            },10)\r\n        });\r\n    }\r\n\r\n    foldSubtree(node, fold = true, redraw=true){\r\n        const self = this;\r\n        node.folded = fold;\r\n\r\n        this.data.getAllDescendantNodes(node).forEach(n=>{\r\n            n.$hidden = fold;\r\n            n.folded = false;\r\n        });\r\n        this.data.getAllDescendantEdges(node).forEach(e=>e.$hidden = fold);\r\n\r\n        if(!redraw){\r\n            return;\r\n        }\r\n        setTimeout(function(){\r\n            self.redraw();\r\n            self.layout.update();\r\n        },10)\r\n    }\r\n\r\n    updateVisibility(node = null){\r\n        if(!node){\r\n            this.data.getRoots().forEach(n=>this.updateVisibility(n));\r\n            return;\r\n        }\r\n\r\n        if(node.folded){\r\n            this.foldSubtree(node, true, false);\r\n            return;\r\n        }\r\n\r\n        node.childEdges.forEach(e => this.updateVisibility(e.childNode));\r\n\r\n    }\r\n\r\n    moveNodeTo(x,y){\r\n\r\n    }\r\n\r\n    updateNodePosition(node) {\r\n        this.getNodeD3Selection(node).raise().attr('transform', 'translate('+node.location.x+' '+node.location.y+')');\r\n    }\r\n\r\n    updateTextPosition(text) {\r\n        this.getTextD3Selection(text).raise().attr('transform', 'translate('+text.location.x+' '+text.location.y+')');\r\n    }\r\n\r\n    getNodeD3Selection(node){\r\n        return this.getNodeD3SelectionById(node.id);\r\n    }\r\n\r\n    getNodeD3SelectionById(id){\r\n        return this.mainGroup.select('#node-'+id);\r\n    }\r\n    getTextD3Selection(text){\r\n        return this.getTextD3SelectionById(text.id);\r\n    }\r\n    getTextD3SelectionById(id){\r\n        return this.mainGroup.select('#text-'+id);\r\n    }\r\n\r\n    getSelectedNodes(visibleOnly = false) {\r\n        let selectedVisible = this.mainGroup.selectAll(\".node.selected\").data();\r\n        if(visibleOnly){\r\n            return selectedVisible;\r\n        }\r\n\r\n        let allSelected  = [];\r\n        allSelected.push(...selectedVisible);\r\n\r\n        selectedVisible.forEach(n=>{\r\n            if(n.folded){\r\n                let descendants = this.data.getAllDescendantNodes(n);\r\n                if(descendants){\r\n                    allSelected.push(...descendants);\r\n                }\r\n            }\r\n        });\r\n\r\n        return allSelected;\r\n    }\r\n\r\n    getSelectedTexts(){\r\n        return this.mainGroup.selectAll(\".floating-text.selected\").data();\r\n    }\r\n\r\n    clearSelection(){\r\n        this.mainGroup.selectAll(\".edge.selected\").select('path').attr(\"marker-end\", d => \"url(#arrow\"+(this.isOptimal(d)?'-optimal':'')+\")\")\r\n        this.mainGroup.selectAll(\".selected\").classed('selected', false);\r\n        this.config.onSelectionCleared();\r\n    }\r\n\r\n    selectEdge(edge, clearSelectionBeforeSelect){\r\n        if(clearSelectionBeforeSelect){\r\n            this.clearSelection();\r\n        }\r\n        this.config.onEdgeSelected(edge);\r\n        this.mainGroup.select('#edge-'+edge.id)\r\n            .classed('selected', true)\r\n            .select('path')\r\n            .attr(\"marker-end\", d => \"url(#arrow-selected)\")\r\n    }\r\n\r\n    isNodeSelected(node){\r\n        return this.getNodeD3Selection(node).classed('selected');\r\n    }\r\n\r\n    selectNode(node, clearSelectionBeforeSelect, skipCallback){\r\n        if(clearSelectionBeforeSelect){\r\n            this.clearSelection();\r\n        }\r\n\r\n        if(!skipCallback){\r\n            this.config.onNodeSelected(node);\r\n        }\r\n\r\n        this.getNodeD3SelectionById(node.id).classed('selected', true);\r\n    }\r\n\r\n    selectText(text, clearSelectionBeforeSelect, skipCallback){\r\n        if(clearSelectionBeforeSelect){\r\n            this.clearSelection();\r\n        }\r\n\r\n        if(!skipCallback){\r\n            this.config.onTextSelected(text)\r\n        }\r\n\r\n        this.getTextD3SelectionById(text.id).classed('selected', true);\r\n    }\r\n\r\n    selectSubTree(node, clearSelectionBeforeSelect,skipCallback) {\r\n        if(clearSelectionBeforeSelect){\r\n            this.clearSelection();\r\n        }\r\n        this.selectNode(node, false, skipCallback);\r\n        node.childEdges.forEach(e=>this.selectSubTree(e.childNode, false, true));\r\n    }\r\n\r\n    selectAllNodes() {\r\n        this.mainGroup.selectAll(\".node\").classed('selected', true);\r\n    }\r\n\r\n    autoLayout(type, withoutStateSaving){\r\n        this.layout.autoLayout(type, withoutStateSaving);\r\n    }\r\n\r\n    updateDiagramTitle(titleValue){\r\n        if(!titleValue){\r\n            titleValue = '';\r\n        }\r\n        this.diagramTitle = titleValue;\r\n        this.redrawDiagramTitle();\r\n        this.redrawDiagramDescription();\r\n        this.updateMargin(true);\r\n    }\r\n\r\n    redrawDiagramTitle(){\r\n        var svgWidth = this.svg.attr('width');\r\n        var svgHeight = this.svg.attr('height');\r\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\r\n\r\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\r\n        title.text(this.diagramTitle);\r\n        Layout.setHangingPosition(title);\r\n\r\n        var marginTop = parseInt(this.config.title.margin.top);\r\n        this.titleContainer.attr('transform', 'translate('+(svgWidth/2)+','+( marginTop)+')');\r\n    }\r\n    redrawDiagramDescription(){\r\n        var svgWidth = this.svg.attr('width');\r\n        var svgHeight = this.svg.attr('height');\r\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\r\n\r\n        var desc = this.titleContainer.selectOrAppend('text.sd-description');\r\n\r\n        if(!this.config.description.show){\r\n            desc.remove();\r\n            return;\r\n        }\r\n\r\n        var lines = this.diagramDescription ? this.diagramDescription.split('\\n') : [];\r\n        var tspans = desc.selectAll('tspan').data(lines);\r\n        tspans.enter().append('tspan')\r\n            .merge(tspans)\r\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\r\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\r\n            .attr('x', '0');\r\n\r\n        tspans.exit().remove();\r\n        Layout.setHangingPosition(desc);\r\n\r\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\r\n\r\n        var marginTop = 0;\r\n        if(this.diagramTitle){\r\n            marginTop += title.node().getBBox().height;\r\n            marginTop+= Math.max(parseInt(this.config.description.margin.top), 0);\r\n        }\r\n\r\n\r\n        desc.attr('transform', 'translate(0,'+( marginTop)+')');\r\n    }\r\n\r\n    updateDiagramDescription(descriptionValue){\r\n        if(!descriptionValue){\r\n            descriptionValue = '';\r\n        }\r\n        this.diagramDescription = descriptionValue;\r\n        this.redrawDiagramTitle();\r\n        this.redrawDiagramDescription();\r\n        this.updateMargin(true);\r\n    }\r\n\r\n\r\n    getTitleGroupHeight(withMargins){\r\n        if(!this.titleContainer){\r\n            return 0;\r\n        }\r\n        var h = this.titleContainer.node().getBBox().height;\r\n        if(withMargins){\r\n            h+= parseInt(this.config.title.margin.bottom);\r\n            h+= parseInt(this.config.title.margin.top);\r\n        }\r\n        return h;\r\n    }\r\n\r\n}\r\n","export * from './src/index'\r\n"]}