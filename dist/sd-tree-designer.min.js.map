{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app-utils.js","src/context-menu/context-menu.js","src/context-menu/edge-context-menu.js","src/context-menu/main-context-menu.js","src/context-menu/node-context-menu.js","src/context-menu/text-context-menu.js","src/d3-extensions.js","src/d3.js","src/i18n/de.json","src/i18n/en.json","src/i18n/fr.json","src/i18n/i18n.js","src/i18n/it.json","src/i18n/pl.json","src/index.js","src/layout.js","src/node-drag-handler.js","src/symbols/circle.js","src/symbols/triangle.js","src/templates.js","src/templates/growl_message.html","src/text-drag-handler.js","src/tooltip.js","src/tree-designer.js","index.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","1","module","d3","_interopRequireWildcard","_templates","_i18n","_sdUtils","AppUtils","textD3Obj","textString","width","textObj","node","textContent","getComputedTextLength","x","getSubStringLength","substring","tooltip","placeTextWithEllipsis","on","d","transition","duration","style","html","event","pageX","pageY","element","window","getComputedStyle","getPropertyValue","transform","g","document","createElementNS","setAttributeNS","matrix","baseVal","consolidate","pathNode","point","distance2","p","dx","dy","y","best","bestLength","scan","scanDistance","pathLength","getTotalLength","precision","bestDistance","Infinity","scanLength","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","distance","Math","sqrt","message","type","arguments","undefined","position","time","Templates","get","select","selectOrAppend","append","remove","tag","attribs","parent","el","createElement","deepExtend","appendChild","parentNode","removeChild","text","replace","createTextNode","div","innerHTML","name","evt","createEvent","initEvent","dispatchEvent","fireEvent","data","CustomEvent","detail","initCustomEvent","error","Utils","isString","key","i18n","selection","classed","_show","exact","display","offsetParent","sanitizeHeight","height","container","parseInt","sanitizeWidth","availableHeight","margin","max","top","bottom","availableWidth","left","right","ContextMenu","menu","opts","self","this","openCallback","onOpen","closeCallback","onClose","selectAll","enter","attr","index","elm","preventDefault","stopPropagation","ret","divider","disabled","action","title","_contextMenu","EdgeContextMenu","_ContextMenu","treeDesigner","push","injectDecisionNode","injectChanceNode","_this","_sdModel","MainContextMenu","mousePosition","newNode","domain","DecisionNode","addNode","ChanceNode","newText","Text","addText","pasteToNewLocation","copiedNodes","selectAllNodes","clearSelection","Point","mouse","svg","move","getMainGroupTranslation","NodeContextMenu","operationsForObject","copyMenuItem","selectNode","isNodeSelected","copySelectedNodes","cutMenuItem","cutSelectedNodes","pasteMenuItem","pasteToNode","folded","deleteMenuItem","removeSelectedNodes","TerminalNode","$TYPE","addNodeConversionOptions","addDecisionNode","addChanceNode","addTerminalNode","selectSubTree","foldSubtree","operations","forEach","op","performOperation","canPerform","conversionOptions","getNodeConversionOptions","options","allAllowedTypes","childEdges","$parent","filter","getNodeConversionOption","typeToConvertTo","convertNode","TextContextMenu","selectText","removeSelectedTexts","D3Extensions","prototype","insertSelector","selector","appendSelector","selectOrInsert","operation","selectorParts","split","shift","selectorModifier","selectorItem","insertOrAppendSelector","empty","Object","keys","_d3Dispatch","_d3Scale","_d3Selection","_d3Shape","_d3Drag","_d3Brush","_d3Array","_d3Hierarchy","_d3TimeFormat","contextMenu","main","paste","copy","cut","delete","convert","decision","chance","terminal","selectSubtree","fold","unfold","flipSubtree","edge","validation","incompletePath","probabilityDoNotSumUpTo1","invalidProbability","invalidPayoff","growl","brushDisabled","brushEnabled","payoff","default","named","aggregatedPayoff","probabilityToEnter","probability","en","pl","it","de","fr","lng","language","resources","$instance","_i18next2","createInstance","err","opt","_treeDesigner","_appUtils","_tooltip","_d3Extensions","extend","Layout","config","nodeTypeToSymbol","symbolSquare","onAutoLayoutChanged","nodeTypeOrder","treeMargin","targetSymbolSize","nodeSeparation","b","nodeSymbolSize","sort","childNode","location","isManualLayout","autoLayout","moveNodeToEmptyPlace","redraw","MANUAL_LAYOUT_NAME","getNodeMinX","getNodeMinY","gridWidth","$linePoints","redrawIfChanged","nodesSortedByX","nodes","slice","colidingNode","stepX","nodeSize","stepY","changed","newLocation","find","findCollidingNode","moveTo","_fireOnAutoLayoutChangedCallbacks","path","nodeSymbol","symbol","size","$id","each","box","getBBox","min","set","setHangingPosition","items","displayValue","number","isArray","fontSize","line","dX","sign","slantStartXOffset","slantWidth","edgeSlantWidthMax","point1","point2","point3","point4","datum","len","previousSibling","childNodes","getMinMarginBetweenNodes","$hidden","withoutStateSaving","saveState","setGridWidth","update","gridHeight","setGridHeight","setNodeSize","fitNodesInPlottingRegion","getRoots","setEdgeSlantWidthMax","currentLayout","newLayout","prevTreeMaxY","root","hierarchy","map","layout","cluster","tree","separation","minY","maxY","pivot","limit","limitNodePositioning","backupNodeLocation","minX","maxX","getNodeMaxX","revertX","$location","updateNodePosition","c","_this2","isHidden","NodeDragHandler","drag","subject","getTranslation","dragStarted","onDrag","dragEnded","ignoreDrag","ignoredDrag","hide","selectedNodes","getSelectedNodes","prevDragEvent","dragEventCount","draggedNode","moveNodes","redrawEdges","updatePlottingRegionSize","pi","PI","context","dist","bezierCurveTo","lineTo","closePath","templateName","variables","compiled","template","imports","include","v","props","styleProp","styleName","variableName","clazz","treeDesignerSelector","treeDesignerStyles","styleRule","nodeSelector","edgeSelector","TextDragHandler","draggedText","updateTextPosition","Tooltip","xOffset","yOffset","getContainer","updatePosition","target","htmlOrFn","isFunction","show","_mainContextMenu","_nodeContextMenu","_layout","_nodeDragHandler","_textDragHandler","_textContextMenu","_edgeContextMenu","Hammer","TreeDesignerConfig","custom","fontFamily","fontWeight","fontStyle","description","readOnly","disableAnimations","forceFullEdgeRedraw","hideLabels","hidePayoffs","hideProbabilities","raw","payoffNumberFormatter","probabilityNumberFormatter","onNodeSelected","onEdgeSelected","onTextSelected","onSelectionCleared","payoffNames","maxPayoffsToDisplay","TreeDesigner","dataModel","setConfig","initContainer","init","updateCustomStyles","initSvg","initLayout","initI18n","initBrush","initEdgeMarkers","initMainContextMenu","initNodeContextMenu","initEdgeContextMenu","initNodeDragHandler","initTextDragHandler","initTextContextMenu","nodeDragHandler","textDragHandler","withTransitions","redrawDiagramTitle","redrawDiagramDescription","updateMargin","transitionPrev","redrawNodes","redrawFloatingTexts","updateValidationMessages","computeAvailableSpace","mainGroup","mc","Manager","touchAction","add","Press","Pinch","cancel","disableBrush","waitForFinalEvent","enableBrush","group","topMargin","diagramTitle","diagramDescription","getTitleGroupHeight","clone","setMargin","containerIdOrElem","trim","startsWith","_parents","svgWidth","svgHeight","mainGroupBox","newSvgWidth","newSvgHeight","updateBrushExtent","exit","nodesEnter","labelEnter","payoffEnter","indicatorEnter","aggregatedPayoffEnter","probabilityToEnterEnter","nodesMerge","merge","isOptimal","nodesMergeT","drawNodeSymbol","nodeLabelPosition","labelMergeT","updateTextLines","payoffTspans","item","payoffTspansM","val","isNaN","attachPayoffTooltip","payoffT","nodePayoffPosition","aggregatedPayoffTspans","aggregatedPayoffTspansM","aggregatedPayoffT","nodeAggregatedPayoffPosition","attach","probabilityToEnterT","nodeProbabilityToEnterPosition","indicator","nodeIndicatorPosition","nodeContextMenu","nodeElem","pointerType","cancelDrag","button","nodeUnfoldButtonPosition","payoffFiledName","object","value","lines","reverse","tspans","edgesContainer","edges","edgesEnter","probabilityEnter","edgesMerge","edgesMergeT","edgeLineD","selectEdge","edgeLabelPosition","_","displayPayoff","payoffTextT","edgePayoffPosition","displayProbability","probabilityMerge","probabilityMergeT","edgeProbabilityPosition","raise","edgeContextMenu","elem","POINTER_TOUCH","texts","textsEnter","textsMerge","textsMergeT","replaceUrls","escapeHtml","bb","textContextMenu","validationResults","validationResult","isValid","getOwnPropertyNames","objectIdToError","id","errors","nodeSelection","getNodeD3SelectionById","tooltipHtml","getValidationMessage","initArrowMarker","brush","extent","brushContainer","hoveredEdge","mainGroupTranslation","offset","m","mgt","closest","cp","closestPoint","invert","translation","mainContextMenu","getNewChildLocation","injectNode","getInjectedNodeLocation","removeNode","removeNodes","selectedTexts","getSelectedTexts","removeTexts","notClearPrevSelection","cloneSubtree","copyNode","selectedRoots","findSubtreeRoots","copyNodes","_this3","nodesToAttach","toAttach","attached","_this4","attachSubtree","getAllDescendantNodes","_this5","perform","getAllDescendantEdges","_this6","updateVisibility","getNodeD3Selection","getTextD3Selection","getTextD3SelectionById","visibleOnly","selectedVisible","allSelected","apply","_toConsumableArray","descendants","_this7","_this8","clearSelectionBeforeSelect","skipCallback","_this9","titleValue","titleContainer","marginTop","desc","descriptionValue","withMargins","h","_index"],"mappings":"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","file":"sd-tree-designer.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import * as d3 from \"./d3\";\nimport {Templates} from \"./templates\";\nimport {i18n} from \"./i18n/i18n\";\nimport {Utils} from \"sd-utils\";\n\nexport class AppUtils {\n\n    static sanitizeHeight = function (height, container) {\n        return (height || parseInt(container.style('height'), 10) || 400);\n    };\n\n    static sanitizeWidth = function (width, container) {\n        return (width || parseInt(container.style('width'), 10) || 960);\n    };\n\n    static availableHeight = function (height, container, margin) {\n        return Math.max(0, AppUtils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n    };\n\n    static availableWidth = function (width, container, margin) {\n        return Math.max(0, AppUtils.sanitizeWidth(width, container) - margin.left - margin.right);\n    };\n\n    //places textString in textObj, adds an ellipsis if text can't fit in width\n    static placeTextWithEllipsis(textD3Obj, textString, width) {\n        var textObj = textD3Obj.node();\n        textObj.textContent = textString;\n\n        var margin = 0;\n        var ellipsisLength = 9;\n        //ellipsis is needed\n        if (textObj.getComputedTextLength() > width + margin) {\n            for (var x = textString.length - 3; x > 0; x -= 1) {\n                if (textObj.getSubStringLength(0, x) + ellipsisLength <= width + margin) {\n                    textObj.textContent = textString.substring(0, x) + \"...\";\n                    return true;\n                }\n            }\n            textObj.textContent = \"...\"; //can't place at all\n            return true;\n        }\n        return false;\n    }\n\n    static placeTextWithEllipsisAndTooltip(textD3Obj, textString, width, tooltip) {\n        var ellipsisPlaced = AppUtils.placeTextWithEllipsis(textD3Obj, textString, width);\n        if (ellipsisPlaced && tooltip) {\n            textD3Obj.on(\"mouseover\", function (d) {\n                tooltip.transition()\n                    .duration(200)\n                    .style(\"opacity\", .9);\n                tooltip.html(textString)\n                    .style(\"left\", (d3.event.pageX + 5) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            });\n\n            textD3Obj.on(\"mouseout\", function (d) {\n                tooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0);\n            });\n        }\n\n    }\n\n    static getFontSize(element) {\n        return window.getComputedStyle(element, null).getPropertyValue(\"font-size\");\n    }\n\n    static getTranslation(transform) {\n        // Create a dummy g for calculation purposes only. This will never\n        // be appended to the DOM and will be discarded once this function\n        // returns.\n        var g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n\n        // Set the transform attribute to the provided string value.\n        g.setAttributeNS(null, \"transform\", transform);\n\n        // consolidate the SVGTransformList containing all transformations\n        // to a single SVGTransform of type SVG_TRANSFORM_MATRIX and get\n        // its SVGMatrix.\n        var matrix = g.transform.baseVal.consolidate().matrix;\n\n        // As per definition values e and f are the ones for the translation.\n        return [matrix.e, matrix.f];\n    }\n\n\n    static closestPoint(pathNode, point) {\n        var pathLength = pathNode.getTotalLength(),\n            precision = 8,\n            best,\n            bestLength,\n            bestDistance = Infinity;\n\n        // linear scan for coarse approximation\n        for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n            if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n                best = scan, bestLength = scanLength, bestDistance = scanDistance;\n            }\n        }\n\n        // binary search for precise estimate\n        precision /= 2;\n        while (precision > 0.5) {\n            var before,\n                after,\n                beforeLength,\n                afterLength,\n                beforeDistance,\n                afterDistance;\n            if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n                best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n            } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n                best = after, bestLength = afterLength, bestDistance = afterDistance;\n            } else {\n                precision /= 2;\n            }\n        }\n\n        best = [best.x, best.y];\n        best.distance = Math.sqrt(bestDistance);\n        return best;\n\n        function distance2(p) {\n            var dx = p.x - point[0],\n                dy = p.y - point[1];\n            return dx * dx + dy * dy;\n        }\n    }\n\n    static growl(message, type='info', position='right', time = 2000){\n        var html = Templates.get('growl', {message:message, type:type})\n\n        var g = d3.select('body').selectOrAppend('div.sd-growl-list.'+position).append('div').html(html);\n        setTimeout(function(){\n            g.remove();\n        }, time)\n    }\n\n\n    static createElement(tag, attribs, parent) {\n        var el = document.createElement(tag);\n\n        if (attribs) {\n            AppUtils.deepExtend(el, attribs);\n        }\n        if (parent) {\n            parent.appendChild(el);\n        }\n        return el;\n    };\n\n    static removeElement(element) {\n        element.parentNode.removeChild(element);\n    }\n\n    static replaceUrls(text){\n        if(!text){\n            return text;\n        }\n        var urlRegexp = /((ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?)/\n\n        return text.replace(urlRegexp, '<a href=\"$1\" target=\"_blank\">$1</a>');\n    }\n\n    static escapeHtml(html)\n    {\n        var text = document.createTextNode(html);\n        var div = document.createElement('div');\n        div.appendChild(text);\n        return div.innerHTML;\n    }\n\n    static dispatchHtmlEvent(element, name){\n        if (\"createEvent\" in document) {\n            var evt = document.createEvent(\"HTMLEvents\");\n            evt.initEvent(name, false, true);\n            element.dispatchEvent(evt);\n        }\n        else\n            element.fireEvent(\"on\"+name);\n    }\n\n    static dispatchEvent(name, data){\n        var event;\n        try{\n            event = new  CustomEvent(name,{ 'detail': data });\n        }catch (e){ //IE\n            event = document.createEvent('CustomEvent');\n            event.initCustomEvent(name, false, false, data);\n        }\n        document.dispatchEvent(event);\n    }\n\n    static getValidationMessage(error){\n        if(Utils.isString(error)){\n            error = {name: error};\n        }\n        var key = 'validation.' + error.name;\n        return i18n.t(key, error.data);\n    }\n\n    static hide(selection){\n        selection.classed('sd-hidden', true);\n    }\n\n    static show(selection, show=true){\n        selection.classed('sd-hidden', !show);\n    }\n\n\n\n    static isHidden(el, exact = true) {\n        if(!el){\n            return true;\n        }\n        if(exact){\n            var style = window.getComputedStyle(el);\n            return (style.display === 'none')\n        }\n        return (el.offsetParent === null)\n    }\n}\n","import * as d3 from '../d3'\n\n/*based on:\n * github.com/patorjk/d3-context-menu */\n\nexport class ContextMenu {\n    openCallback;\n    closeCallback;\n\n    constructor(menu, opts) {\n        var self = this;\n\n        if (typeof opts === 'function') {\n            self.openCallback = opts;\n        } else {\n            opts = opts || {};\n            self.openCallback = opts.onOpen;\n            self.closeCallback = opts.onClose;\n        }\n\n        // create the div element that will hold the context menu\n        d3.selectAll('.d3-context-menu').data([1])\n            .enter()\n            .append('div')\n            .attr('class', 'd3-context-menu');\n\n        // close menu\n        d3.select('body').on('click.d3-context-menu', function () {\n            d3.select('.d3-context-menu').style('display', 'none');\n            if (self.closeCallback) {\n                self.closeCallback();\n            }\n        });\n\n        // this gets executed when a contextmenu event occurs\n        return function (data, index) {\n            var elm = this;\n\n            d3.selectAll('.d3-context-menu').html('');\n            var list = d3.selectAll('.d3-context-menu')\n                .on('contextmenu', function (d) {\n                    d3.select('.d3-context-menu').style('display', 'none');\n                    d3.event.preventDefault();\n                    d3.event.stopPropagation();\n                })\n                .append('ul');\n            list.selectAll('li').data(typeof menu === 'function' ? menu(data) : menu).enter()\n                .append('li')\n                .attr('class', function (d) {\n                    var ret = '';\n                    if (d.divider) {\n                        ret += ' is-divider';\n                    }\n                    if (d.disabled) {\n                        ret += ' is-disabled';\n                    }\n                    if (!d.action) {\n                        ret += ' is-header';\n                    }\n                    return ret;\n                })\n                .html(function (d) {\n                    if (d.divider) {\n                        return '<hr>';\n                    }\n                    if (!d.title) {\n                        console.error('No title attribute set. Check the spelling of your options.');\n                    }\n                    return (typeof d.title === 'string') ? d.title : d.title(data);\n                })\n                .on('click', function (d, i) {\n                    if (d.disabled) return; // do nothing if disabled\n                    if (!d.action) return; // headers have no \"action\"\n                    d.action(elm, data, index);\n                    d3.select('.d3-context-menu').style('display', 'none');\n\n                    if (self.closeCallback) {\n                        self.closeCallback();\n                    }\n                });\n\n            // the openCallback allows an action to fire before the menu is displayed\n            // an example usage would be closing a tooltip\n            if (self.openCallback) {\n                if (self.openCallback(data, index) === false) {\n                    return;\n                }\n            }\n\n            // display context menu\n            d3.select('.d3-context-menu')\n                .style('left', (d3.event.pageX - 2) + 'px')\n                .style('top', (d3.event.pageY - 2) + 'px')\n                .style('display', 'block');\n\n            d3.event.preventDefault();\n            d3.event.stopPropagation();\n        };\n    };\n\n    static hide() {\n        d3.select('.d3-context-menu').style('display', 'none');\n    }\n\n}\n","import {ContextMenu} from './context-menu'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class EdgeContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var menu = function (d) {\n\n            var menu = [];\n\n            menu.push({\n                title: i18n.t('contextMenu.edge.injectDecisionNode'),\n                action: function (elm, d, i) {\n                    treeDesigner.injectDecisionNode(d)\n                }\n            });\n            menu.push({\n                title: i18n.t('contextMenu.edge.injectChanceNode'),\n                action: function (elm, d, i) {\n                    treeDesigner.injectChanceNode(d)\n                }\n            });\n\n\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {domain as model} from 'sd-model'\nimport * as d3 from '../d3'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class MainContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var mousePosition = null;\n        var menu = function (d) {\n\n            var menu = [];\n            menu.push({\n                title: i18n.t('contextMenu.main.addDecisionNode'),\n                action: function (elm, d, i) {\n                    var newNode = new model.DecisionNode(mousePosition);\n                    treeDesigner.addNode(newNode)\n                }\n            });\n            menu.push({\n                title: i18n.t('contextMenu.main.addChanceNode'),\n                action: function (elm, d, i) {\n                    var newNode = new model.ChanceNode(mousePosition);\n                    treeDesigner.addNode(newNode)\n                }\n            });\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.main.addText'),\n                action: function (elm, d, i) {\n                    var newText = new model.Text(mousePosition);\n                    treeDesigner.addText(newText);\n                },\n\n            });\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.main.paste'),\n                action: function (elm, d, i) {\n                    treeDesigner.pasteToNewLocation(mousePosition);\n                },\n                disabled: !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\n\n            });\n            menu.push({divider: true});\n\n            menu.push({\n                title: i18n.t('contextMenu.main.selectAllNodes'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectAllNodes();\n                }\n            });\n            return menu;\n        };\n\n        super(menu, {onOpen: () => {\n            treeDesigner.clearSelection();\n            mousePosition = new model.Point(d3.mouse(treeDesigner.svg.node())).move(treeDesigner.getMainGroupTranslation(true));\n\n        }});\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {domain as model} from 'sd-model'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class NodeContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner, operationsForObject) {\n        var menu = function (d) {\n\n            var copyMenuItem = {\n                title: i18n.t('contextMenu.node.copy'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.copySelectedNodes();\n                }\n            };\n            var cutMenuItem = {\n                title: i18n.t('contextMenu.node.cut'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.cutSelectedNodes();\n                }\n            };\n            var pasteMenuItem = {\n                title: i18n.t('contextMenu.node.paste'),\n                action: function (elm, d, i) {\n                    treeDesigner.pasteToNode(d);\n                },\n                disabled: d.folded || !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\n\n            };\n            var deleteMenuItem = {\n                title: i18n.t('contextMenu.node.delete'),\n                action: function (elm, d, i) {\n\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.removeSelectedNodes();\n\n                }\n            };\n\n            var menu = [];\n            if (d.type == model.TerminalNode.$TYPE) {\n                menu = [copyMenuItem, cutMenuItem, deleteMenuItem];\n                NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\n                return menu;\n            }\n\n            if(!d.folded){\n                menu.push({\n                    title: i18n.t('contextMenu.node.addDecisionNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addDecisionNode(d)\n                    }\n                });\n                menu.push({\n                    title: i18n.t('contextMenu.node.addChanceNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addChanceNode(d)\n                    }\n                });\n                menu.push({\n                    title: i18n.t('contextMenu.node.addTerminalNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addTerminalNode(d)\n                    }\n                });\n                menu.push({divider: true});\n            }\n\n            menu.push(copyMenuItem);\n            menu.push(cutMenuItem);\n            menu.push(pasteMenuItem);\n            menu.push(deleteMenuItem);\n\n            NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.node.selectSubtree'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectSubTree(d, true);\n                }\n            });\n\n            if(!d.folded){\n                menu.push({\n                    title: i18n.t('contextMenu.node.fold'),\n                    action: function (elm, d, i) {\n                        treeDesigner.foldSubtree(d);\n                    }\n                });\n            }else{\n                menu.push({\n                    title: i18n.t('contextMenu.node.unfold'),\n                    action: function (elm, d, i) {\n                        treeDesigner.foldSubtree(d, false);\n                    }\n                });\n            }\n\n            if(operationsForObject){\n                var operations = operationsForObject(d);\n                if(operations.length) {\n                    menu.push({divider: true});\n                    operations.forEach(op=>{\n                        menu.push({\n                            title: i18n.t('contextMenu.node.'+op.name),\n                            action: function (elm, d, i) {\n                                treeDesigner.performOperation(d, op);\n                            },\n                            disabled: !op.canPerform(d)\n                        });\n                    })\n                }\n            }\n\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n\n    static addNodeConversionOptions(d, menu, treeDesigner){\n        var conversionOptions = NodeContextMenu.getNodeConversionOptions(d, treeDesigner);\n        if(conversionOptions.length){\n            menu.push({divider: true});\n            conversionOptions.forEach(o=>menu.push(o));\n\n        }\n    }\n\n    static getNodeConversionOptions(d, treeDesigner){\n        var options = [];\n        var allAllowedTypes = [model.DecisionNode.$TYPE, model.ChanceNode.$TYPE, model.TerminalNode.$TYPE];\n\n        if(!d.childEdges.length && d.$parent){\n            allAllowedTypes.filter(t=>t!==d.type).forEach(type=>{\n                options.push(NodeContextMenu.getNodeConversionOption(type, treeDesigner))\n            })\n        }else{\n            if(d instanceof model.DecisionNode){\n                options.push(NodeContextMenu.getNodeConversionOption(model.ChanceNode.$TYPE, treeDesigner))\n            }else{\n                options.push(NodeContextMenu.getNodeConversionOption(model.DecisionNode.$TYPE, treeDesigner))\n            }\n        }\n        return options;\n    }\n\n    static getNodeConversionOption(typeToConvertTo, treeDesigner){\n        return {\n            title: i18n.t('contextMenu.node.convert.'+typeToConvertTo),\n            action: function (elm, d, i) {\n                treeDesigner.convertNode(d, typeToConvertTo);\n            },\n        }\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class TextContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var menu = function (d) {\n\n\n            var deleteMenuItem = {\n                title: i18n.t('contextMenu.text.delete'),\n                action: function (elm, d, i) {\n\n                    treeDesigner.selectText(d, true, true);\n                    treeDesigner.removeSelectedTexts()\n\n                }\n            };\n            var menu = [];\n            menu.push(deleteMenuItem);\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import * as d3 from './d3'\n\nexport class D3Extensions {\n\n    static extend() {\n\n        d3.selection.prototype.enter.prototype.insertSelector =\n            d3.selection.prototype.insertSelector = function (selector, before) {\n                return D3Extensions.insertSelector(this, selector, before);\n            };\n\n\n        d3.selection.prototype.enter.prototype.appendSelector =\n            d3.selection.prototype.appendSelector = function (selector) {\n                return D3Extensions.appendSelector(this, selector);\n            };\n\n        d3.selection.prototype.enter.prototype.selectOrAppend =\n            d3.selection.prototype.selectOrAppend = function (selector) {\n                return D3Extensions.selectOrAppend(this, selector);\n            };\n\n        d3.selection.prototype.enter.prototype.selectOrInsert =\n            d3.selection.prototype.selectOrInsert = function (selector, before) {\n                return D3Extensions.selectOrInsert(this, selector, before);\n            };\n\n\n    }\n\n    static insertOrAppendSelector(parent, selector, operation, before) {\n\n        var selectorParts = selector.split(/([\\.\\#])/);\n        var element = parent[operation](selectorParts.shift(), before);//\":first-child\"\n\n        while (selectorParts.length > 1) {\n            var selectorModifier = selectorParts.shift();\n            var selectorItem = selectorParts.shift();\n            if (selectorModifier === \".\") {\n                element = element.classed(selectorItem, true);\n            } else if (selectorModifier === \"#\") {\n                element = element.attr('id', selectorItem);\n            }\n        }\n        return element;\n    }\n\n    static insertSelector(parent, selector, before) {\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"insert\", before);\n    }\n\n    static appendSelector(parent, selector) {\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"append\");\n    }\n\n    static selectOrAppend(parent, selector, element) {\n        var selection = parent.select(selector);\n        if (selection.empty()) {\n            if (element) {\n                return parent.append(element);\n            }\n            return D3Extensions.appendSelector(parent, selector);\n\n        }\n        return selection;\n    };\n\n    static selectOrInsert(parent, selector, before) {\n        var selection = parent.select(selector);\n        if (selection.empty()) {\n            return D3Extensions.insertSelector(parent, selector, before);\n        }\n        return selection;\n    };\n}\n","export * from 'd3-dispatch';\nexport * from 'd3-scale';\nexport * from 'd3-selection';\nexport * from 'd3-shape'\nexport * from 'd3-drag';\nexport * from 'd3-brush'\nexport * from 'd3-array'\nexport * from 'd3-hierarchy'\nexport * from 'd3-time-format'\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\n            \"addText\": \"Text hinzufügen \",\n            \"paste\": \"Einfügen\",\n            \"selectAllNodes\": \"Alle Knoten auswählen\"\n        },\n        \"node\":{\n            \"copy\": \"Kopieren\",\n            \"cut\": \"Ausschneiden\",\n            \"paste\": \"Einfügen\",\n            \"delete\": \"Löschen\",\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\n            \"addTerminalNode\": \"Endknotten hinzufügen\",\n            \"convert\":{\n                \"decision\": \"Als Entscheidungsknoten\",\n                \"chance\": \"Als Zufall Knoten\",\n                \"terminal\": \"Als Endknoten\"\n            },\n            \"selectSubtree\": \"Teilbaum wählen\",\n            \"fold\": \"Teilbaum falten\",\n            \"unfold\": \"Teilbaum entfalten\",\n\t\t\t\n            \"flipSubtree\": \"Teilbaum umdrehen\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Entscheidungsknoten Injizieren\",\n            \"injectChanceNode\": \"Zufall Knoten Injizieren\"\n        },\n        \"text\":{\n            \"delete\": \"Löschen\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Pfad, der nicht mit dem Endknoten endet\",\n        \"probabilityDoNotSumUpTo1\": \"Die Summe der Wahrscheinlichkeiten ist nicht gleich 1\",\n        \"invalidProbability\": \"Ungültige Wahrscheinlichkeit im Zweig #{{number}}\",\n        \"invalidPayoff\": \"Ungültige Auszahlung in Zweig #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Auswahlbürste deaktiviert\",\n        \"brushEnabled\": \"Auswahlbürste aktiviert\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Auszahlung {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Aggregierte Auszahlung {{number}}\",\n                \"named\": \"Aggregierte {{name}}\"\n            },\n            \"probabilityToEnter\": \"Wahrscheinlichkeit\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Auszahlung {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Wahrscheinlichkeit: {{value}}\"\n        }\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Add Decision Node\",\n            \"addChanceNode\": \"Add Chance Node\",\n            \"addText\": \"Add Text\",\n            \"paste\": \"Paste\",\n            \"selectAllNodes\": \"Select all nodes\"\n        },\n        \"node\":{\n            \"copy\": \"Copy\",\n            \"cut\": \"Cut\",\n            \"paste\": \"Paste\",\n            \"delete\": \"Delete\",\n            \"addDecisionNode\": \"Add Decision Node\",\n            \"addChanceNode\": \"Add Chance Node\",\n            \"addTerminalNode\": \"Add Terminal Node\",\n            \"convert\":{\n                \"decision\": \"As Decision Node\",\n                \"chance\": \"As Chance Node\",\n                \"terminal\": \"As Terminal Node\"\n            },\n            \"selectSubtree\": \"Select subtree\",\n            \"fold\": \"Fold subtree\",\n            \"unfold\": \"Unfold subtree\",\n            \"flipSubtree\": \"Flip subtree\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Inject Decision Node\",\n            \"injectChanceNode\": \"Inject Chance Node\"\n        },\n        \"text\":{\n            \"delete\": \"Delete\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Path not ending with terminal node\",\n        \"probabilityDoNotSumUpTo1\": \"Probabilities do not sum up to 1\",\n        \"invalidProbability\": \"Invalid probability in edge #{{number}}\",\n        \"invalidPayoff\": \"Invalid payoff in edge #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Selection brush disabled\",\n        \"brushEnabled\": \"Selection brush enabled\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Payoff {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Aggregated Payoff {{number}}\",\n                \"named\": \"Aggregated {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probability to enter\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Payoff {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probability: {{value}}\"\n        }\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Ajouter noud de décision\",\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\n            \"addText\": \"Ajouter du texte\",\n            \"paste\": \"Coller\",\n            \"selectAllNodes\": \"Sélectionner tous les nouds\"\n        },\n        \"node\":{\n            \"copy\": \"Copie\",\n            \"cut\": \"Couper\",\n            \"paste\": \"Coller\",\n            \"delete\": \"Effacer\",\n            \"addDecisionNode\": \"Ajouter noud de décision\",\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\n            \"addTerminalNode\": \"Ajouter un noeud terminal\",\n            \"convert\":{\n                \"decision\": \"Comme noud de décision\",\n                \"chance\": \"Comme noud aléatoire\",\n                \"terminal\": \"Comme un noeud terminal\"\n            },\n            \"selectSubtree\": \"Sélectionner une sous-arborescence\",\n            \"fold\": \"Plier sous-arbre\",\n            \"unfold\": \"Déplier arbre sous-arbre\",\n            \"flipSubtree\": \"Basculer sous-arbre\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Injecter un noeud de décision\",\n            \"injectChanceNode\": \"Injecter un noeud de chance\"\n        },\n        \"text\":{\n            \"delete\": \"Effacer\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Parcours non terminé par noeud terminal\",\n        \"probabilityDoNotSumUpTo1\": \"La somme des probabilités n'est pas 1 ou plus\",\n        \"invalidProbability\": \"Probabilité invalide - le bord #{{number}}\",\n        \"invalidPayoff\": \"Avantage invalide - le bord #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Brosse de sélection désactivée\",\n        \"brushEnabled\": \"Brosse de sélection activée\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Avantage {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Avantage agrégé {{number}}\",\n                \"named\": \"Agrégé  {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probabilité d'entrée\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Avantage {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probabilité: {{value}}\"\n        }\n    }\n}\n","import i18next from 'i18next';\nimport * as en from './en.json'\nimport * as pl from './pl.json'\nimport * as it from './it.json'\nimport * as de from './de.json'\nimport * as fr from './fr.json'\n\nexport class i18n{\n\n    static $instance;\n    static language;\n\n    static init(lng){\n        i18n.language = lng;\n        let resources = {\n            en: {\n                translation: en\n            },\n            pl: {\n                translation: pl\n            },\n            it: {\n                translation: it\n            },\n            de: {\n                translation: de\n            },\n            fr: {\n                translation: fr\n            }\n        };\n        i18n.$instance = i18next.createInstance({\n            lng: lng,\n            fallbackLng: 'en',\n            resources: resources\n        }, (err, t) => {\n        });\n    }\n\n    static t(key, opt){\n        return i18n.$instance.t(key, opt)\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\n            \"addText\": \"Aggiungi testo\",\n            \"paste\": \"Incolla\",\n            \"selectAllNodes\": \"Seleziona tutti i nodi\"\n        },\n        \"node\":{\n            \"copy\": \"Copia\",\n            \"cut\": \"Taglia\",\n            \"paste\": \"Incolla\",\n            \"delete\": \"Cancella\",\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\n            \"addTerminalNode\": \"Aggiungi un nodo terminale\",\n            \"convert\":{\n                \"decision\": \"Come Decision Node\",\n                \"chance\": \"Come Chance Node\",\n                \"terminal\": \"Come Terminal Node\"\n            },\n            \"selectSubtree\": \"Seleziona Sotto-albero\",\n            \"fold\": \"Piega sotto-albero\",\n            \"unfold\": \"Dispiegarsi sotto-albero\",\t\t\t\n            \"flipSubtree\": \"Ribalta sotto-albero\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Inietta nodo di decisione\",\n            \"injectChanceNode\": \"Inietta nodo opportunità\"\n        },\n        \"text\":{\n            \"delete\": \"Cancella\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Percorso senza nodo terminale\",\n        \"probabilityDoNotSumUpTo1\": \"La somma delle probabilità è diversa da 1\",\n        \"invalidProbability\": \"Probabilità non valida - bordo #{{number}}\",\n        \"invalidPayoff\": \"Saldo non valido - bordo #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Selezione pennello disabilitata\",\n        \"brushEnabled\": \"Selezione pennello abilitata\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Saldo {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Saldo aggregato {{number}}\",\n                \"named\": \"Aggregato {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probabilità da inserire\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Saldo {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probabilità: {{value}}\"\n        }\n    }\n}\n","module.exports={\n\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\n            \"addText\": \"Dodaj Tekst\",\n            \"paste\": \"Wklej\",\n            \"selectAllNodes\": \"Zaznacz wszystkie węzły\"\n        },\n        \"node\":{\n            \"copy\": \"Kopiuj\",\n            \"cut\": \"Wytnij\",\n            \"paste\": \"Wklej\",\n            \"delete\": \"Usuń\",\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\n            \"addTerminalNode\": \"Dodaj Węzeł Końcowy\",\n            \"convert\":{\n                \"decision\": \"Jako Węzeł Decyzyjny\",\n                \"chance\": \"Jako Węzeł Losowy\",\n                \"terminal\": \"Jako Węzeł Końcowy\"\n            },\n            \"selectSubtree\": \"Zaznacz poddrzewo\",\n            \"fold\": \"Zwiń poddrzewo\",\n            \"unfold\": \"Rozwiń poddrzewo\",\n            \"flipSubtree\": \"Przewróć poddrzewo\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Wstrzyknij Węzeł Decyzyjny\",\n            \"injectChanceNode\": \"Wstrzyknij Węzeł Losowy\"\n        },\n        \"text\":{\n            \"delete\": \"Usuń\"\n        }\n    },\n\n    \"validation\":{\n        \"incompletePath\": \"Ostatnim węzłem w ścieżce powinien być Węzeł Końcowy\",\n        \"probabilityDoNotSumUpTo1\": \"Prawdopodobieństwa nie sumują sie do 1\",\n        \"invalidProbability\": \"Niepoprawne prawdopodobieństwo na krawędzi #{{number}}\",\n        \"invalidPayoff\": \"Niepoprawna wypłata na krawędzi #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Zaznaczanie wyłączone\",\n        \"brushEnabled\": \"Zaznaczanie włączone\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Wypłata {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Zagregowana wypłata {{number}}\",\n                \"named\": \"Zagregowana {{name}}\"\n            },\n            \"probabilityToEnter\": \"Prawdopodobieństwo wejścia\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Wypłata {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Prawdopodobieństwo: {{value}}\"\n        }\n    }\n}\n","import {D3Extensions} from './d3-extensions'\nD3Extensions.extend();\n\nexport * from './tree-designer'\nexport * from './app-utils'\nexport * from './templates'\nexport * from './tooltip'\nexport * from './d3-extensions'\nexport {default as d3} from './d3'\n\n\n","import {Utils} from 'sd-utils'\nimport {domain as model} from 'sd-model'\nimport * as d3 from './d3'\nimport circleSymbol from './symbols/circle'\nimport triangleSymbol from './symbols/triangle'\nimport {AppUtils} from \"./app-utils\";\n\n/*Tree layout manager*/\nexport class Layout{\n\n    treeDesigner;\n    data;\n    config;\n\n    nodeTypeToSymbol = {\n        'decision': d3.symbolSquare,\n        'chance': circleSymbol,\n        \"terminal\": triangleSymbol\n    };\n\n    static MANUAL_LAYOUT_NAME = 'manual';\n\n\n    onAutoLayoutChanged=[];\n\n    nodeTypeOrder = {\n        'decision' : 0,\n        'chance': 0,\n        'terminal': 1\n    };\n\n    treeMargin = 50;\n    targetSymbolSize={};\n    nodeSeparation = (a, b) => a.parent === b.parent ? 1 : 1.2\n\n    constructor(treeDesigner, data, config){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n        this.config = config;\n\n    }\n\n    update(node){\n        if(node && node.$parent){\n            node.$parent.childEdges.sort((a,b)=>a.childNode.location.y - b.childNode.location.y)\n        }\n        if(!this.isManualLayout()){\n            return this.autoLayout(this.config.type, true);\n        }\n        if(node){\n            this.moveNodeToEmptyPlace(node);\n        }else{\n            this.treeDesigner.redraw(true);\n        }\n    }\n\n    isManualLayout(){\n        return this.config.type === Layout.MANUAL_LAYOUT_NAME;\n    }\n\n    getNewChildLocation(parent){\n        if(!parent){\n            return new model.Point(this.getNodeMinX(), this.getNodeMinY())\n        }\n        var x = parent.location.x + this.config.gridWidth;\n        var y = parent.location.y;\n        if(parent.childEdges.length){\n            y = parent.childEdges[parent.childEdges.length-1].childNode.location.y+1;\n        }\n\n        return new model.Point(x, y)\n    }\n\n    getInjectedNodeLocation(edge){\n\n        var p = edge.$linePoints[2];\n\n        return new model.Point(p[0], p[1])\n    }\n\n    moveNodeToEmptyPlace(node, redrawIfChanged=true){\n        var positionMap = {};\n        var self = this;\n        node.location.x = Math.max(this.getNodeMinX(node), node.location.x);\n        node.location.y = Math.max(this.getNodeMinY(node), node.location.y);\n\n\n        this.nodesSortedByX = this.data.nodes.slice();\n        this.nodesSortedByX.sort((a,b)=>a.location.x - b.location.x);\n\n        function findCollidingNode(node, location){\n            return Utils.find(self.nodesSortedByX, n=>{\n                if(node == n){\n                    return false;\n                }\n\n                var margin = self.config.nodeSize/3;\n                var x = n.location.x;\n                var y = n.location.y;\n\n                return (location.x - margin <= x && location.x + margin >= x\n                    && location.y - margin <= y && location.y + margin >= y)\n            });\n        }\n\n        var stepX = this.config.nodeSize/2;\n        var stepY = this.config.nodeSize+10;\n        var stepXsameParent = 0;\n        var stepYsameParent = 75;\n        var changed = false;\n        var colidingNode;\n        var newLocation = new model.Point(node.location);\n        while(colidingNode = findCollidingNode(node, newLocation)){\n            changed=true;\n            var sameParent = node.$parent && colidingNode.$parent && node.$parent===colidingNode.$parent;\n            if(sameParent){\n                newLocation.move(stepXsameParent, stepYsameParent);\n            }else{\n                newLocation.move(stepX, stepY);\n            }\n        }\n        if(changed){\n            node.moveTo(newLocation.x,newLocation.y, true);\n            if(redrawIfChanged){\n                this.treeDesigner.redraw(true);\n            }\n        }\n    }\n\n    disableAutoLayout(){\n        this.config.type = Layout.MANUAL_LAYOUT_NAME;\n        this._fireOnAutoLayoutChangedCallbacks();\n    }\n\n\n    nodeSymbolSize = {};\n    drawNodeSymbol(path, transition){\n\n        var self = this;\n        var nodeSize = this.config.nodeSize;\n        this.nodeSymbol = d3.symbol().type(d=> self.nodeTypeToSymbol[d.type])\n            .size(d=>self.nodeSymbolSize[d.$id] ? Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", 64) : 64);\n\n        path\n            .each(function (d) {\n                var path = d3.select(this);\n                var prev = path.attr(\"d\");\n                if(!prev){\n                    path.attr(\"d\", self.nodeSymbol);\n                }\n                var size = Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\");\n                if(!size){\n                    var box = path.node().getBBox();\n                    var error = Math.min(nodeSize / box.width, nodeSize / box.height);\n                    size = error * error * (self.nodeSymbolSize[d.$id]||64);\n                    Utils.set(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", size);\n                }\n                if(transition){\n                    path =  path.transition();\n\n                }else{\n                    self.nodeSymbolSize[d.$id] = size;\n                }\n                path.attr(\"d\", self.nodeSymbol);\n                if(transition){\n                    self.nodeSymbolSize[d.$id] = size;\n                }\n            });\n    }\n\n    nodeLabelPosition(selection) {\n        return selection\n            .attr('x', 0)\n            .attr('y', -this.config.nodeSize / 2 - 7)\n    }\n\n    nodePayoffPosition(selection) {\n        return Layout.setHangingPosition(selection)\n            .attr('x', 0)\n            .attr('y', this.config.nodeSize / 2 + 7)\n            .attr('text-anchor', 'middle')\n    }\n\n    nodeAggregatedPayoffPosition(selection) {\n        var fontSize = 12;\n        var x = this.config.nodeSize / 2 + 7;\n        Layout.setHangingPosition(selection)\n            .attr('x', x)\n            .attr('y', d=>{\n                let items = d.displayValue('aggregatedPayoff');\n                let number = Utils.isArray(items) ? items.filter(it=>it !== undefined).length : 1;\n                return -Math.max(number*fontSize + number > 1 ? 0 : 5, this.config.nodeSize / 2)+ (number >  1 ? 2 : 5)\n            });\n\n        selection.selectAll('tspan').attr('x', x);\n        return selection;\n            // .attr('text-anchor', 'middle')\n            // .attr('dominant-baseline', 'hanging')\n    }\n\n    nodeProbabilityToEnterPosition(selection) {\n        var fontSize = 12;\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 7)\n            .attr('y', Math.max(fontSize+ 5, this.config.nodeSize / 2) -5)\n            // .attr('text-anchor', 'middle')\n            // .attr('dominant-baseline', 'central')\n    }\n\n    nodeIndicatorPosition(selection) {\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 8)\n            .attr('y', - this.config.nodeSize/2)\n            .attr('dominant-baseline', 'central')\n            .attr('text-anchor', 'middle')\n    }\n\n    nodeUnfoldButtonPosition(selection) {\n        var fontSize = 12;\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 5)\n            .attr('y', 0)\n            .attr('dominant-baseline', 'central')\n    }\n\n    edgeLineD(edge){\n        var line = d3.line()\n            .x(d=> d[0])\n            .y(d=> d[1]);\n        // .curve(d3.curveCatmullRom.alpha(0.5));\n\n\n        var parentNode = edge.parentNode;\n        var childNode = edge.childNode;\n\n        var dX = childNode.location.x - parentNode.location.x;\n        var dY = childNode.location.y - parentNode.location.y;\n\n        var sign = dX>=0 ? 1 : -1;\n\n        var slantStartXOffset = Math.min(dX/2, this.config.nodeSize/2+10);\n        var slantWidth = Math.min(this.config.edgeSlantWidthMax, Math.max(dX/2 - slantStartXOffset, 0));\n\n        var point1 = [parentNode.location.x +this.config.nodeSize/2 + 1, parentNode.location.y];\n        var point2 = [Math.max(parentNode.location.x+slantStartXOffset, point1[0]), parentNode.location.y];\n        var point3 = [parentNode.location.x+slantStartXOffset+slantWidth, childNode.location.y];\n        var point4 = [childNode.location.x - (sign*(Math.max(0, Math.min(this.config.nodeSize/2+8, dX/2)))), childNode.location.y];\n        // var point2 = [parentNode.location.x+dX/2-slantWidth/2, parentNode.location.y];\n        // var point3 = [childNode.location.x-(dX/2-slantWidth/2), childNode.location.y];\n\n        edge.$linePoints = [point1, point2, point3, point4];\n        return line(edge.$linePoints);\n    }\n\n    edgePayoffPosition(selection) {\n        Layout.setHangingPosition(selection)\n            .attr('x', d=>d.$linePoints[2][0] + 2)\n            .attr('y', d=>d.$linePoints[2][1] + 7);\n\n        selection.selectAll('tspan').attr('x', function(d){\n            return d3.select(this.parentNode).datum().$linePoints[2][0] + 2\n        });\n        return selection;\n\n    }\n\n    edgeLabelPosition(selection) {\n        return selection\n            .attr('transform', d=>'translate('+(d.$linePoints[2][0] + 2)+','+(d.$linePoints[2][1] - 7)+')')\n            // .attr('x', d=>d.$linePoints[2][0] + 2)\n            // .attr('y', d=>d.$linePoints[2][1] - 7)\n\n    }\n\n    edgeProbabilityPosition(selection) {\n        return Layout.setHangingPosition(selection)\n            .attr('x', function (d) {\n                var len = this.getComputedTextLength();\n                var min = d.$linePoints[2][0] + 2 + this.previousSibling.childNodes[0].getComputedTextLength() + 7 + len;\n                return Math.max(min, d.$linePoints[3][0] - 8);\n            })\n            .attr('y', d=>d.$linePoints[2][1] + 7)\n    }\n\n    getMinMarginBetweenNodes(){\n      return this.config.nodeSize + 30;\n    }\n\n\n    getNodeMinX(d){\n        var self = this;\n        if(d && d.$parent){// && !self.isNodeSelected(d.$parent)\n            return d.$parent.location.x + self.getMinMarginBetweenNodes();\n        }\n        return self.config.nodeSize/2;\n    }\n\n    getNodeMinY(d){\n        return this.config.nodeSize/2;\n    }\n\n    getNodeMaxX(d){\n        var self = this;\n\n        if(d && d.childEdges.length){\n            return d3.min(d.childEdges, e=>!e.childNode.$hidden ? e.childNode.location.x : 9999999)-self.getMinMarginBetweenNodes();\n        }\n        return 9999999;\n    }\n\n    setGridWidth(width, withoutStateSaving){\n        var self=this;\n        if(this.config.gridWidth===width){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    gridWidth: self.config.gridWidth\n                },\n                onUndo: (data)=> {\n                    self.setGridWidth(data.gridWidth, true);\n                },\n                onRedo: (data)=> {\n                    self.setGridWidth(width, true);\n                }\n            });\n        }\n\n        this.config.gridWidth=width;\n        this.update();\n    }\n\n    setGridHeight(gridHeight, withoutStateSaving){\n        var self=this;\n        if(this.config.gridHeight===gridHeight){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    gridHeight: self.config.gridHeight\n                },\n                onUndo: (data)=> {\n                    self.setGridHeight(data.gridHeight, true);\n                },\n                onRedo: (data)=> {\n                    self.setGridHeight(gridHeight, true);\n                }\n            });\n        }\n\n        this.config.gridHeight=gridHeight;\n        this.update();\n    }\n\n    setNodeSize(nodeSize, withoutStateSaving){\n        var self=this;\n        if(this.config.nodeSize===nodeSize){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    nodeSize: self.config.nodeSize\n                },\n                onUndo: (data)=> {\n                    self.setNodeSize(data.nodeSize, true);\n                },\n                onRedo: (data)=> {\n                    self.setNodeSize(nodeSize, true);\n                }\n            });\n        }\n\n        this.config.nodeSize=nodeSize;\n        this.update();\n        if(this.isManualLayout()){\n            this.fitNodesInPlottingRegion(self.data.getRoots());\n            this.treeDesigner.redraw(true);\n        }\n    }\n\n    setEdgeSlantWidthMax(width, withoutStateSaving){\n        var self=this;\n        if(this.config.edgeSlantWidthMax===width){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    edgeSlantWidthMax: self.config.edgeSlantWidthMax\n                },\n                onUndo: (data)=> {\n                    self.setEdgeSlantWidthMax(data.edgeSlantWidthMax, true);\n                },\n                onRedo: (data)=> {\n                    self.setEdgeSlantWidthMax(width, true);\n                }\n            });\n        }\n\n        this.config.edgeSlantWidthMax=width;\n        this.treeDesigner.redraw(true);\n    }\n\n    autoLayout(type, withoutStateSaving){\n        var self=this;\n\n\n\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    newLayout: type,\n                    currentLayout: self.config.type\n                },\n                onUndo: (data)=> {\n                    self.config.type = data.currentLayout;\n                    self._fireOnAutoLayoutChangedCallbacks();\n                },\n                onRedo: (data)=> {\n                    self.autoLayout(data.newLayout, true);\n                }\n            });\n        }\n        this.config.type = type;\n        if(!this.data.nodes.length){\n            this._fireOnAutoLayoutChangedCallbacks();\n            return;\n        }\n\n        var prevTreeMaxY = self.getNodeMinY();\n        this.data.getRoots().forEach(r=>{\n            var root = d3.hierarchy(r, d=>{\n                return d.childEdges.filter(e=>!e.$hidden).map(e=>e.childNode);\n            });\n\n            // root.sort((a,b)=>self.nodeTypeOrder[a.data.type]-self.nodeTypeOrder[b.data.type]);\n            root.sort((a,b)=>a.data.location.y - b.data.location.y);\n\n\n            var layout;\n            if(type==='cluster'){\n                layout = d3.cluster();\n            }else{\n                layout = d3.tree();\n            }\n            layout.nodeSize([self.config.gridHeight, self.config.gridWidth]);\n            layout.separation(self.nodeSeparation);\n\n            layout(root);\n            var minY = 999999999;\n            root.each(d=>{\n                minY = Math.min(minY, d.x);\n            });\n\n            var dy = root.x - minY + prevTreeMaxY;\n            var dx = self.getNodeMinX();\n            var maxY=0;\n            root.each(d=>{\n                d.data.location.x = d.y + dx;\n                d.data.location.y = d.x + dy;\n\n                maxY = Math.max(maxY, d.data.location.y);\n            });\n\n            prevTreeMaxY = maxY + self.config.nodeSize+self.treeMargin;\n        });\n\n\n        // this.transition = true;\n        this.treeDesigner.redraw(true);\n        // this.transition = false;\n\n        this._fireOnAutoLayoutChangedCallbacks();\n        return this;\n    }\n\n    fitNodesInPlottingRegion(nodes){\n        var self = this;\n        var topY = d3.min(nodes, n=>n.location.y);\n        var minY = self.getNodeMinY();\n        var dy = topY - minY;\n\n        var minX = d3.min(nodes, n=>n.location.x);\n        var dx = minX - self.getNodeMinX();\n\n        if(dy<0 ||  dx<0){\n            nodes.forEach(n=>n.move(-dx, -dy));\n        }\n    }\n\n    moveNodes(nodes, dx, dy, pivot){\n        var self = this;\n        var limit = self.config.limitNodePositioning;\n        if(limit){\n            if(dx<0){\n                nodes.sort((a,b)=>a.location.x-b.location.x);\n            }else{\n                nodes.sort((a,b)=>b.location.x-a.location.x);\n            }\n        }\n\n\n        var minY = d3.min(nodes, d=>d.location.y);\n        if(minY + dy < self.getNodeMinY()){\n            dy = self.getNodeMinY() - minY;\n        }\n\n        nodes.forEach(d=>{\n            if(limit){\n                Layout.backupNodeLocation(d);\n                var minX = self.getNodeMinX(d);\n                var maxX = self.getNodeMaxX(d);\n\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\n                d.location.y += dy;\n            }else{\n                d.location.x +=dx;\n                d.location.y += dy;\n            }\n\n        });\n\n\n        var revertX = pivot && self.config.limitNodePositioning && (pivot.location.x === pivot.$location.x);\n\n        nodes.forEach(d=>{\n            if(revertX){\n                d.location.x = d.$location.x;\n            }\n            self.treeDesigner.updateNodePosition(d);\n        });\n\n\n    }\n\n    static backupNodeLocation(node) {\n        node.$location = new model.Point(node.location);\n    }\n\n    _fireOnAutoLayoutChangedCallbacks(){\n        this.onAutoLayoutChanged.forEach(c=>c(this.config.type));\n    }\n\n    static setHangingPosition(selection){\n        // window.setTimeout(function(){\n        //     selection.each(function(){\n        //         var h =  this.getBBox().height;\n        //         d3.select(this).attr('dy', h);\n        //     });\n        // },0);\n\n        if(AppUtils.isHidden(selection.node())){ // setting hanging position of hidden elements fails on firefox\n            return selection;\n        }\n\n\n        selection.each(function(){\n            var h =  this.getBBox().height;\n            d3.select(this).attr('dy', '0.75em');\n        });\n\n        return selection;\n    }\n\n}\n\n\n","import {AppUtils} from './app-utils'\nimport * as d3 from './d3'\nimport {ContextMenu} from './context-menu/context-menu'\n\nexport class NodeDragHandler{\n\n    treeDesigner;\n    data;\n    config;\n\n    drag;\n\n\n    constructor(treeDesigner, data){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n\n        var self = this;\n        this.drag = d3.drag()\n            .subject(function(d) {\n                if(d==null){\n                    return  {\n                        x: event.x,\n                        y: event.y\n                    };\n                }\n                var t = d3.select(this);\n                return {\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\n                };\n            })\n            .on(\"start\", function(d){\n                self.dragStarted.call(this,d, self)\n            })\n            .on(\"drag\", function (d) {\n                self.onDrag.call(this, d, self);\n            })\n            .on(\"end\", function (d) {\n                self.dragEnded.call(this, d, self);\n            })\n    }\n\n\n    dragStarted(d,self) {\n        if(self.ignoreDrag){\n            self.ignoreDrag=false;\n            self.ignoredDrag=true;\n            return;\n        }\n        self.ignoredDrag=false;\n\n        // self.treeDesigner.layout.disableAutoLayout();\n        ContextMenu.hide();\n        var node = d3.select(this);\n        if(!node.classed(\"selected\")){\n            self.treeDesigner.clearSelection();\n        }\n\n        self.treeDesigner.selectNode(d);\n        node.classed(\"selected dragging\", true);\n        self.selectedNodes = self.treeDesigner.getSelectedNodes(true);\n        self.prevDragEvent = d3.event;\n        self.dragEventCount = 0;\n    }\n\n    onDrag(draggedNode, self){\n        if(self.ignoredDrag){\n            return;\n        }\n\n        if(self.dragEventCount==2){\n            self.data.saveState();\n        }\n        self.dragEventCount++;\n        if(self.selectedNodes.length>5 && self.dragEventCount%2!=1){\n            return;\n        }\n\n        var dx = d3.event.x - self.prevDragEvent.x;\n        var dy = d3.event.y- self.prevDragEvent.y;\n        self.treeDesigner.layout.moveNodes(self.selectedNodes, dx, dy, draggedNode);\n\n\n        self.prevDragEvent = d3.event;\n        self.treeDesigner.redrawEdges();\n        self.treeDesigner.updatePlottingRegionSize();\n    }\n\n    dragEnded(draggedNode, self){\n        var node = d3.select(this).classed(\"dragging\", false);\n        if(self.ignoredDrag){\n            return;\n        }\n        self.treeDesigner.layout.update(draggedNode)\n    }\n\n    cancelDrag(){\n        this.ignoreDrag = true;\n    }\n\n}\n\n\n","var epsilon = 1e-12;\nvar pi = Math.PI;\nvar halfPi = pi / 2;\nvar tau = 2 * pi;\n\nexport default {\n    /*draw: function(context, size) {\n        var r = Math.sqrt(size / pi);\n        context.moveTo(r, 0);\n        context.arc(0, 0, r, 0, tau);\n    }*/\n    draw: function(context, size) {\n\n        var r = Math.sqrt(size / pi);\n        var dist =0.552284749831 * r;\n\n        context.moveTo(-r, 0)\n        // context.lineTo(2*r, 2*r)\n        // context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\n        context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\n\n        context.bezierCurveTo(dist, -r, r, -dist, r,0);\n\n        context.bezierCurveTo(r, dist, dist, r, 0, r);\n\n        context.bezierCurveTo(-dist, r, -r, dist, -r, 0);\n    }\n};\n","var sqrt3 = Math.sqrt(3);\n\nexport default {\n    draw: function(context, size) {\n        var r = Math.sqrt(size / Math.PI);\n        context.moveTo(-r, 0);\n        context.lineTo(0.9*r, -r);\n        context.lineTo(0.9*r, r);\n        context.closePath();\n    }\n};\n","import {Utils} from \"sd-utils\";\nimport {i18n} from './i18n/i18n'\n\nexport class Templates{\n\n    static growl = require('./templates/growl_message.html');\n\n    static get(templateName, variables){\n        var compiled = Utils.template(Templates[templateName],{ 'imports': { 'i18n': i18n, 'Templates': Templates, 'include': function(n, v) {return Templates.get(n, v)} } });\n        if(variables){\n            variables.variables = variables;\n        }else{\n            variables = {variables:{}}\n        }\n        return compiled(variables)\n\n    }\n\n    static styleRule(selector, props){\n        var s = selector+ '{';\n        props.forEach(p=> s+=Templates.styleProp(p[0], p[1]));\n        s+='} ';\n        return s;\n    }\n    static styleProp(styleName, variableName){\n        return  styleName+': <%= '+variableName+' %>; '\n    }\n\n    static treeDesignerSelector = 'svg.sd-tree-designer';\n    static nodeSelector(type, clazz){\n        var s = Templates.treeDesignerSelector+' .node';\n        if(type){\n            s+='.'+type+'-node';\n        }\n        if(clazz){\n            s+='.'+clazz;\n        }\n        return s;\n    }\n    static edgeSelector(clazz){\n        var s = Templates.treeDesignerSelector+' .edge';\n        if(clazz){\n            s+='.'+clazz;\n        }\n        return s;\n    }\n\n    static treeDesignerStyles =\n\n        Templates.styleRule(Templates.treeDesignerSelector,[\n            ['font-size', 'fontSize'],\n            ['font-family', 'fontFamily'],\n            ['font-weight', 'fontWeight'],\n            ['font-style', 'fontStyle']\n        ])+\n        //   node\n        Templates.styleRule(Templates.nodeSelector()+' path',[\n            ['fill', 'node.fill'],\n            ['stroke-width', 'node.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('decision', 'optimal')+' path, '+Templates.nodeSelector('chance', 'optimal')+' path,' +Templates.nodeSelector('terminal', 'optimal')+' path',[\n            ['stroke', 'node.optimal.stroke'],\n            ['stroke-width', 'node.optimal.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .label',[\n            ['font-size', 'node.label.fontSize'],\n            ['fill', 'node.label.color']\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .payoff',[\n            ['font-size', 'node.payoff.fontSize'],\n            ['fill', 'node.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .payoff.negative',[\n            ['fill', 'node.payoff.negativeColor'],\n        ])+\n\n        //    decision node\n        Templates.styleRule(Templates.nodeSelector('decision')+' path',[\n            ['fill', 'node.decision.fill'],\n            ['stroke', 'node.decision.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('decision', 'selected')+' path',[\n            ['fill', 'node.decision.selected.fill']\n        ])+\n\n        //    chance node\n        Templates.styleRule(Templates.nodeSelector('chance')+' path',[\n            ['fill', 'node.chance.fill'],\n            ['stroke', 'node.chance.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('chance', 'selected')+' path',[\n            ['fill', 'node.chance.selected.fill']\n        ])+\n\n        //    terminal node\n        Templates.styleRule(Templates.nodeSelector('terminal')+' path',[\n            ['fill', 'node.terminal.fill'],\n            ['stroke', 'node.terminal.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal', 'selected')+' path',[\n            ['fill', 'node.terminal.selected.fill']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff',[\n            ['font-size', 'node.terminal.payoff.fontSize'],\n            ['fill', 'node.terminal.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff.negative',[\n            ['fill', 'node.terminal.payoff.negativeColor'],\n        ])+\n\n\n        //probability\n        Templates.styleRule(Templates.treeDesignerSelector+' .node .probability-to-enter, '+Templates.treeDesignerSelector+' .edge .probability',[\n            ['font-size', 'probability.fontSize'],\n            ['fill', 'probability.color']\n        ])+\n\n        //edge\n        Templates.styleRule(Templates.edgeSelector()+' path',[\n            ['stroke', 'edge.stroke'],\n            ['stroke-width', 'edge.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow path',[\n            ['fill', 'edge.stroke'],\n        ])+\n        Templates.styleRule(Templates.edgeSelector('optimal')+' path',[\n            ['stroke', 'edge.optimal.stroke'],\n            ['stroke-width', 'edge.optimal.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-optimal path',[\n            ['fill', 'edge.optimal.stroke'],\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector('selected')+' path',[\n            ['stroke', 'edge.selected.stroke'],\n            ['stroke-width', 'edge.selected.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-selected path',[\n            ['fill', 'edge.selected.stroke'],\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector()+' .label',[\n            ['font-size', 'edge.label.fontSize'],\n            ['fill', 'edge.label.color']\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector()+' .payoff',[\n            ['font-size', 'edge.payoff.fontSize'],\n            ['fill', 'edge.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.edgeSelector()+' .payoff.negative',[\n            ['fill', 'edge.payoff.negativeColor'],\n        ])+\n\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-title',[\n            ['font-size', 'title.fontSize'],\n            ['font-weight', 'title.fontWeight'],\n            ['font-style', 'title.fontStyle'],\n            ['fill', 'title.color']\n        ]) +\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-description',[\n            ['font-size', 'description.fontSize'],\n            ['font-weight', 'description.fontWeight'],\n            ['font-style', 'description.fontStyle'],\n            ['fill', 'description.color']\n        ])\n}\n\n\n\n\n","module.exports = \"module.exports = \\\"<div class=\\\\\\\"sd-growl-message <%=type%>\\\\\\\">\\\\n    <div class=\\\\\\\"sd-growl-message-text\\\\\\\">\\\\n        <%= message %>\\\\n    </div>\\\\n</div>\\\\n\\\";\\n\";\n","import {AppUtils} from './app-utils'\nimport * as d3 from './d3'\nimport {ContextMenu} from './context-menu/context-menu'\n\nexport class TextDragHandler{\n\n    treeDesigner;\n    data;\n    config;\n\n    drag;\n\n\n    constructor(treeDesigner, data){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n\n        var self = this;\n        this.drag = d3.drag()\n            .subject(function(d) {\n                if(d==null){\n                    return  {\n                        x: event.x,\n                        y: event.y\n                    };\n                }\n                var t = d3.select(this);\n                return {\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\n                };\n            })\n            .on(\"start\", function(d){\n                self.dragStarted.call(this,d, self)\n            })\n            .on(\"drag\", function (d) {\n                self.onDrag.call(this, d, self);\n            })\n            .on(\"end\", function (d) {\n                self.dragEnded.call(this, d, self);\n            })\n    }\n\n\n    dragStarted(d,self) {\n        // self.treeDesigner.layout.disableAutoLayout();\n        ContextMenu.hide();\n        var text = d3.select(this);\n        if(!text.classed(\"selected\")){\n            self.treeDesigner.clearSelection();\n        }\n\n        self.treeDesigner.selectText(d);\n        text.classed(\"selected dragging\", true);\n        self.selectedNodes = self.treeDesigner.getSelectedNodes();\n        self.prevDragEvent = d3.event;\n        self.dragEventCount = 0;\n    }\n\n    onDrag(draggedText, self){\n        if(self.dragEventCount==2){\n            self.data.saveState();\n        }\n        self.dragEventCount++;\n\n        var dx = d3.event.x - self.prevDragEvent.x;\n        var dy = d3.event.y- self.prevDragEvent.y;\n\n        draggedText.location.move(dx, dy);\n        self.treeDesigner.updateTextPosition(draggedText);\n\n        self.prevDragEvent = d3.event;\n        self.treeDesigner.updatePlottingRegionSize();\n    }\n\n    dragEnded(draggedNode, self){\n         d3.select(this).classed(\"dragging\", false);\n    }\n\n}\n\n\n","import * as d3 from './d3'\nimport {Utils} from 'sd-utils'\n\nexport class Tooltip {\n    static getContainer(){\n        return d3.select(\"body\").selectOrAppend('div.sd-tooltip');\n    }\n\n    static show(html, xOffset = 5, yOffset = 28, event, duration=null) {\n        var container = Tooltip.getContainer()\n            .style(\"opacity\", 0);\n        container.transition()\n            .duration(200)\n            .style(\"opacity\", .98);\n        container.html(html);\n        Tooltip.updatePosition(xOffset, yOffset, event);\n        if(duration){\n            setTimeout(function(){\n                Tooltip.hide();\n            }, duration)\n        }\n    }\n\n    static updatePosition(xOffset = 5, yOffset = 28, event) {\n        event = event || d3.event;\n        Tooltip.getContainer()\n            .style(\"left\", (event.pageX + xOffset) + \"px\")\n            .style(\"top\", (event.pageY - yOffset) + \"px\");\n    }\n\n    static hide(duration = 500) {\n        var t = Tooltip.getContainer();\n        if(duration){\n            t = t.transition().duration(duration)\n        }\n        t.style(\"opacity\", 0);\n    }\n\n    static attach(target, htmlOrFn, xOffset, yOffset) {\n        target.on('mouseover', function (d, i) {\n            var html = null;\n            if (Utils.isFunction(htmlOrFn)) {\n                html = htmlOrFn(d, i);\n            } else {\n                html = htmlOrFn;\n            }\n\n            if (html !== null && html !== undefined && html !== '') {\n                Tooltip.show(html, xOffset, yOffset);\n            }else{\n                Tooltip.hide(0);\n            }\n\n        }).on('mousemove', function (d) {\n            Tooltip.updatePosition(xOffset, yOffset);\n        }).on(\"mouseout\", function (d) {\n            Tooltip.hide();\n        });\n    }\n}\n","import * as d3 from \"./d3\";\nimport {Utils} from \"sd-utils\";\nimport {AppUtils} from \"./app-utils\";\nimport {domain as model} from \"sd-model\";\nimport {ContextMenu} from \"./context-menu/context-menu\";\nimport {MainContextMenu} from \"./context-menu/main-context-menu\";\nimport {NodeContextMenu} from \"./context-menu/node-context-menu\";\nimport {Layout} from \"./layout\";\nimport {NodeDragHandler} from \"./node-drag-handler\";\nimport {Tooltip} from \"./tooltip\";\nimport {Templates} from \"./templates\";\nimport {TextDragHandler} from \"./text-drag-handler\";\nimport {TextContextMenu} from \"./context-menu/text-context-menu\";\nimport {EdgeContextMenu} from \"./context-menu/edge-context-menu\";\nimport * as Hammer from \"hammerjs\";\nimport {i18n} from \"./i18n/i18n\";\n\n\nexport class TreeDesignerConfig {\n    width = undefined;\n    height = undefined;\n    margin = {\n        left: 25,\n        right: 25,\n        top: 25,\n        bottom: 25\n    };\n    lng = 'en';\n    layout= {\n        type: 'tree',\n        nodeSize: 40,\n        limitNodePositioning: true,\n        gridHeight: 75,\n        gridWidth: 150,\n        edgeSlantWidthMax: 20\n    };\n    fontFamily = 'sans-serif';\n    fontSize = '12px';\n    fontWeight = 'normal';\n    fontStyle = 'normal';\n    node = {\n        strokeWidth: '1px',\n        optimal: {\n            stroke: '#006f00',\n            strokeWidth: '1.5px',\n        },\n        label: {\n            fontSize: '1em',\n            color: 'black'\n        },\n        payoff: {\n            fontSize: '1em',\n            color: 'black',\n            negativeColor: '#b60000'\n        },\n        decision: {\n            fill: '#ff7777',\n            stroke: '#660000',\n\n            selected: {\n                fill: '#aa3333',\n                // stroke: '#666600'\n            }\n        },\n        chance: {\n            fill: '#ffff44',\n            stroke: '#666600',\n\n            selected: {\n                fill: '#aaaa00',\n                // stroke: '#666600'\n            }\n        },\n        terminal:{\n            fill: '#44ff44',\n            stroke: 'black',\n            selected: {\n                fill: '#00aa00',\n                // stroke: 'black'\n            },\n            payoff: {\n                fontSize: '1em',\n                color: 'black',\n                negativeColor: '#b60000'\n            },\n        }\n    };\n    edge={\n        stroke: '#424242',\n        strokeWidth: '1.5',\n        optimal:{\n            stroke: '#006f00',\n            strokeWidth: '2.4',\n        },\n        selected:{\n            stroke: '#045ad1',\n            strokeWidth: '3.5',\n        },\n        label: {\n            fontSize: '1em',\n            color: 'back'\n        },\n        payoff:{\n            fontSize: '1em',\n            color: 'black',\n            negativeColor: '#b60000'\n        }\n\n    };\n    probability = {\n        fontSize: '1em',\n        color: '#0000d7'\n    };\n    title = {\n        fontSize: '16px',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        color: '#000000',\n        margin:{\n            top: 15,\n            bottom: 10\n        }\n    };\n    description = {\n        show: true,\n        fontSize: '12px',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        color: '#000000',\n        margin:{\n            top: 5,\n            bottom: 10\n        }\n    };\n\n    readOnly= false;\n    disableAnimations=false;\n    forceFullEdgeRedraw=false;\n    hideLabels=false;\n    hidePayoffs=false;\n    hideProbabilities=false;\n    raw=false;\n\n\n    payoffNumberFormatter = (v, i)=> v;\n    probabilityNumberFormatter  = (v)=> v;\n\n    onNodeSelected = (node) => {};\n    onEdgeSelected = (edge) => {};\n    onTextSelected = (text) => {};\n    onSelectionCleared = () => {};\n\n    operationsForObject = (o) => [];\n\n    payoffNames = [null, null];\n    maxPayoffsToDisplay = 1;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n\nexport class TreeDesigner {\n\n    config;\n    container;\n    data; //data model manager\n    svg;\n\n    constructor(container, dataModel, config){\n        this.setConfig(config);\n        this.data = dataModel;\n        this.initContainer(container);\n        this.init();\n    }\n\n    setConfig(config) {\n        this.config = new TreeDesignerConfig(config);\n        if(this.layout){\n            this.layout.config=this.config.layout;\n        }\n        this.updateCustomStyles();\n        return this;\n    }\n\n    init(){\n\n        this.initSvg();\n        this.initLayout();\n        this.initI18n();\n        this.initBrush();\n        this.initEdgeMarkers();\n\n        this.updateCustomStyles();\n        if(!this.config.readOnly){\n            this.initMainContextMenu();\n            this.initNodeContextMenu();\n            this.initEdgeContextMenu();\n            this.initNodeDragHandler();\n            this.initTextDragHandler();\n            this.initTextContextMenu();\n        }\n        this.redraw();\n    }\n\n    initI18n() {\n        i18n.init(this.config.lng);\n    }\n\n\n    updateCustomStyles(){\n        d3.select('head').selectOrAppend('style#sd-tree-designer-style').html(Templates.get('treeDesignerStyles', this.config));\n        return this;\n    }\n\n    initLayout(){\n        this.layout = new Layout(this, this.data, this.config.layout);\n    }\n\n    initNodeDragHandler(){\n        this.nodeDragHandler = new NodeDragHandler(this, this.data);\n    }\n\n    initTextDragHandler(){\n        this.textDragHandler = new TextDragHandler(this, this.data);\n    }\n\n    redraw(withTransitions=false){\n\n        var self = this;\n        withTransitions = !self.config.disableAnimations && withTransitions;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(withTransitions);\n        if(withTransitions){\n            self.transitionPrev = self.transition;\n            self.transition = true;\n        }\n        this.redrawNodes();\n        this.redrawEdges();\n        this.redrawFloatingTexts();\n        this.updateValidationMessages();\n        if(withTransitions){\n            self.transition =  self.transitionPrev;\n        }\n        setTimeout(function(){\n            self.updatePlottingRegionSize();\n        },10);\n\n        return this;\n    }\n\n    computeAvailableSpace(){\n        this.availableHeight = AppUtils.sanitizeHeight(this.config.height, this.container, this.config.margin);\n        this.availableWidth = AppUtils.sanitizeWidth(this.config.width, this.container, this.config.margin);\n    }\n\n    initSvg() {\n        var c = this;\n        var self = this;\n        this.computeAvailableSpace();\n        this.svg = this.container.selectOrAppend('svg.sd-tree-designer');\n        this.svg.attr('width', this.availableWidth).attr('height', this.availableHeight);\n\n        this.mainGroup = this.svg.selectOrAppend('g.main-group');\n        this.updateMargin();\n\n\n        if (!this.config.width) {\n            d3.select(window)\n                .on(\"resize.tree-designer\", function () {\n                    self.updatePlottingRegionSize();\n                    self.redrawDiagramTitle();\n                });\n        }\n\n        var mc = new Hammer.Manager(this.svg.node(), {touchAction : 'auto'});\n        mc.add(new Hammer.Press({\n            pointerType: 'touch'\n        }));\n\n        mc.add(new Hammer.Pinch({\n            pointerType: 'touch'\n        }));\n\n        var cancel;\n        mc.on('pinchstart', function(){\n            self.disableBrush();\n        })\n        mc.on('pinch', function(){\n            cancel = Utils.waitForFinalEvent(()=>self.enableBrush(), 'pinchend', 5000)\n        })\n    }\n\n    updateMargin(withTransitions){\n        var self = this;\n        var margin = this.config.margin;\n        var group = this.mainGroup;\n        if(withTransitions){\n            group = group.transition();\n        }\n\n        this.topMargin = margin.top;\n        if(this.diagramTitle||this.diagramDescription){\n            this.topMargin = parseInt(this.diagramTitle ? this.config.title.margin.top : 0) + this.getTitleGroupHeight()\n                +  Math.max(this.topMargin, parseInt(this.config.title.margin.bottom));\n        }\n\n        group.attr(\"transform\", \"translate(\" + margin.left + \",\" + this.topMargin + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\n    }\n\n    setMargin(margin, withoutStateSaving){\n        var self=this;\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    margin: Utils.clone(self.config.margin)\n                },\n                onUndo: (data)=> {\n                    self.setMargin(data.margin, true);\n                },\n                onRedo: (data)=> {\n                    self.setMargin(margin, true);\n                }\n            });\n        }\n        Utils.deepExtend(this.config.margin, margin);\n        this.redrawDiagramTitle();\n        this.updateMargin(true);\n    }\n\n    initContainer(containerIdOrElem) {\n        if (Utils.isString(containerIdOrElem)) {\n            var selector = containerIdOrElem.trim();\n\n            if (!Utils.startsWith(selector, '#') && !Utils.startsWith(selector, '.')) {\n                selector = '#' + selector;\n            }\n            this.container = d3.select(selector);\n        } else if(containerIdOrElem._parents){\n            this.container = containerIdOrElem\n        }else{\n            this.container = d3.select(containerIdOrElem);\n        }\n    }\n\n    updatePlottingRegionSize() {\n        var changed = false;\n        this.computeAvailableSpace();\n        var margin = this.config.margin;\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        var mainGroupBox = this.mainGroup.node().getBBox();\n        var newSvgWidth = mainGroupBox.width+mainGroupBox.x+margin.left+margin.right;\n        this.container.classed('with-overflow-x', newSvgWidth>=this.availableWidth);\n        newSvgWidth = Math.max(newSvgWidth, this.availableWidth);\n        if(svgWidth!=newSvgWidth){\n            changed = true;\n            this.svg.attr('width', newSvgWidth);\n        }\n        var newSvgHeight = mainGroupBox.height+mainGroupBox.y+this.topMargin+margin.bottom;\n\n        this.container.classed('with-overflow-y', newSvgHeight>=this.availableHeight);\n        newSvgHeight = Math.max(newSvgHeight, this.availableHeight);\n        if(svgHeight!=newSvgHeight){\n            changed=true;\n            this.svg.attr('height', newSvgHeight);\n        }\n        if(changed){\n            this.updateBrushExtent()\n        }\n\n\n    }\n\n    redrawNodes() {\n        var self = this;\n\n\n        var nodesContainer = this.mainGroup.selectOrAppend('g.nodes');\n        var nodes = nodesContainer.selectAll('.node').data(this.data.nodes.filter(d=>!d.$hidden), (d,i)=> d.$id);\n        nodes.exit().remove();\n        var nodesEnter = nodes.enter().append('g')\n            .attr('id', d=>'node-'+d.$id)\n            .attr('class', d=>d.type+'-node node')\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\n        nodesEnter.append('path');\n\n        var labelEnter = nodesEnter.append('text').attr('class', 'label');\n        var payoffEnter = nodesEnter.append('text').attr('class', 'payoff computed');\n        var indicatorEnter = nodesEnter.append('text').attr('class', 'error-indicator').text('!!');\n        var aggregatedPayoffEnter = nodesEnter.append('text').attr('class', 'aggregated-payoff');\n        var probabilityToEnterEnter = nodesEnter.append('text').attr('class', 'probability-to-enter');\n\n        var nodesMerge = nodesEnter.merge(nodes);\n        nodesMerge.classed('optimal', (d)=>self.isOptimal(d));\n\n        var nodesMergeT = nodesMerge;\n        if(this.transition){\n            nodesMergeT = nodesMerge.transition();\n            nodesMergeT.on('end', ()=> self.updatePlottingRegionSize())\n        }\n        nodesMergeT\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')')\n\n        var path = nodesMerge.select('path');\n        this.layout.drawNodeSymbol(path,this.transition);\n\n        /*path\n            .style('fill', d=> {\n                // if(self.isNodeSelected(d)){\n                //     return self.config.node[d.type].selected.fill\n                // }\n                return self.config.node[d.type].fill\n            })\n            .style('stroke', d=> self.config.node[d.type].stroke)\n            .style('stroke-width', d=> {\n                if(self.config.node[d.type].strokeWidth!==undefined){\n                    return self.config.node[d.type].strokeWidth;\n                }\n                return self.config.node.strokeWidth;\n            });\n        */\n        this.layout.nodeLabelPosition(labelEnter);\n        var labelMerge = nodesMerge.select('text.label');\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\n        var labelMergeT = nodesMergeT.select('text.label');\n        labelMergeT.each(this.updateTextLines);\n        this.layout.nodeLabelPosition(labelMergeT)\n            .attr('text-anchor', 'middle')\n\n        var payoff = nodesMerge.select('text.payoff');\n\n        var payoffTspans = payoff.selectAll('tspan').data(d=>{\n            let item = d.displayValue('childrenPayoff');\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\n        });\n        payoffTspans.exit().remove();\n\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\n        payoffTspansM\n            // .attr('dominant-baseline', 'hanging')\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0')\n            .classed('negative', d=> {\n                return d!==null && d<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\n            .text((d, i)=> {\n                var val = d\n\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\n            });\n        this.attachPayoffTooltip(payoffTspansM);\n\n\n        var payoffT = payoff;\n        if(this.transition){\n            payoffT = payoff.transition();\n        }\n\n        this.layout.nodePayoffPosition(payoffEnter);\n        this.layout.nodePayoffPosition(payoffT);\n\n        var aggregatedPayoff = nodesMerge.select('text.aggregated-payoff');\n        var aggregatedPayoffTspans = aggregatedPayoff.selectAll('tspan').data(d=>{\n            let item = d.displayValue('aggregatedPayoff');\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\n        });\n        aggregatedPayoffTspans.exit().remove();\n        var aggregatedPayoffTspansM = aggregatedPayoffTspans.enter().append('tspan').merge(aggregatedPayoffTspans)\n            .attr('dy', (d,i)=>i>0 ? '0.95em': undefined)\n            .classed('negative', d=> {\n                return d!==null && d<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\n            .text((val, i)=> {\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\n            });\n\n        this.attachPayoffTooltip(aggregatedPayoffTspansM, 'aggregatedPayoff');\n\n        var aggregatedPayoffT = aggregatedPayoff;\n        if(this.transition){\n            aggregatedPayoffT = aggregatedPayoff.transition();\n        }\n\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffEnter);\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffT);\n\n        var probabilityToEnter = nodesMerge.select('text.probability-to-enter')\n            .text(d=>{\n                var val = d.displayValue('probabilityToEnter');\n                return val!==null ? (isNaN(val) ? val : self.config.probabilityNumberFormatter(val)): ''\n            })\n            .classed('sd-hidden', this.config.hideProbabilities || this.config.raw);\n        Tooltip.attach(probabilityToEnter, i18n.t('tooltip.node.probabilityToEnter'));\n\n\n        var probabilityToEnterT = probabilityToEnter;\n        if(this.transition){\n            probabilityToEnterT = probabilityToEnter.transition();\n        }\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterEnter);\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterT);\n\n\n        var indicator = nodesMerge.select('text.error-indicator');\n        indicator.classed('sd-hidden', this.config.raw)\n        this.layout.nodeIndicatorPosition(indicatorEnter);\n        this.layout.nodeIndicatorPosition(indicator);\n\n        if(this.nodeDragHandler){\n            nodesMerge.call(this.nodeDragHandler.drag);\n        }\n\n        nodesMerge.on('contextmenu', this.nodeContextMenu);\n        nodesMerge.on('dblclick', this.nodeContextMenu)\n        nodesMerge.each(function(d, i){\n            var nodeElem = this;\n            var mc = new Hammer.Manager(nodeElem);\n            mc.add(new Hammer.Press({\n                pointerType: 'touch'\n            }));\n            mc.on('press', function(e){\n                if(e.pointerType=='touch'){\n                    self.nodeDragHandler.cancelDrag();\n                }\n            })\n\n\n            if(d.folded){\n                let button = d3.select(nodeElem).selectOrAppend('text.sd-unfold-button')\n                    .text(\"[+]\")\n                    .on('click dbclick mousedown', ()=>self.foldSubtree(d, false)); //firefox detects only mousedown event - related to drag handler\n\n                self.layout.nodeUnfoldButtonPosition(button);\n                Tooltip.attach(button, i18n.t('contextMenu.node.unfold'));\n            }else{\n                d3.select(nodeElem).select('.sd-unfold-button').remove();\n            }\n\n        })\n    }\n\n    attachPayoffTooltip(selection, payoffFiledName = 'payoff', object='node'){\n        var self = this;\n        Tooltip.attach(selection, (d, i)=>{\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\n                return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.named',{value: d.payoff, number: i+1, name: self.config.payoffNames[i]})\n            }\n            return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.default',{value: d.payoff, number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\n        });\n    }\n\n    updateTextLines(d){ //helper method for splitting text to tspans\n        var lines = d.name ? d.name.split('\\n') : [];\n        lines.reverse();\n        var tspans = d3.select(this).selectAll('tspan').data(lines);\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .text(l=>l)\n            .attr('dy', (d,i)=>i>0 ? '-1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n    }\n\n    isOptimal(d){\n        return d.displayValue('optimal');\n    }\n\n    redrawEdges() {\n        var self = this;\n        var edgesContainer = this.mainGroup.selectOrAppend('g.edges');\n        if(self.config.forceFullEdgeRedraw){\n            edgesContainer.selectAll(\"*\").remove();\n        }\n\n        var edges = edgesContainer.selectAll('.edge').data(this.data.edges.filter(e=>!e.$hidden), (d,i)=> d.$id);\n        edges.exit().remove();\n        var edgesEnter = edges.enter().append('g')\n            .attr('id', d=>'edge-'+d.$id)\n            .attr('class', 'edge');\n\n\n        edgesEnter.append('path');\n        var labelEnter = edgesEnter.appendSelector('g.label-group');\n        labelEnter.append('text').attr('class', 'label');\n        var payoffEnter = edgesEnter.append('text').attr('class', 'payoff');\n        var probabilityEnter = edgesEnter.append('text').attr('class', 'probability');\n\n\n        var edgesMerge = edgesEnter.merge(edges);\n\n\n        var optimalClassName = 'optimal';\n        edgesMerge.classed(optimalClassName, (d)=>self.isOptimal(d));\n\n        var edgesMergeT = edgesMerge;\n        if(this.transition){\n            edgesMergeT = edgesMerge.transition();\n        }\n\n        edgesMergeT.select('path')\n            .attr('d', d=> this.layout.edgeLineD(d))\n            // .attr(\"stroke\", \"black\")\n            // .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .attr(\"marker-end\", function(d) {\n                var suffix = d3.select(this.parentNode).classed('selected') ? '-selected' : (self.isOptimal(d)?'-optimal':'');\n                return \"url(#arrow\"+ suffix+\")\"\n            });\n            // .attr(\"shape-rendering\", \"optimizeQuality\")\n\n\n        edgesMerge.on('click', d=>{\n            self.selectEdge(d, true)\n        });\n\n        this.layout.edgeLabelPosition(labelEnter);\n        edgesMergeT.select('text.label').each(this.updateTextLines);\n        var labelMerge = edgesMerge.select('g.label-group');\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\n        var labelMergeT = edgesMergeT.select('g.label-group');\n        this.layout.edgeLabelPosition(labelMergeT);\n            // .text(d=>d.name);\n\n        var payoff = edgesMerge.select('text.payoff');\n\n        var payoffTspans = payoff.selectAll('tspan').data(d => {\n            let item = d.displayValue('payoff');\n            return Utils.isArray(item) ? item.slice(0, Math.min(item.length, self.config.maxPayoffsToDisplay)).map(_=>d) : [d];\n        });\n        payoffTspans.exit().remove();\n\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\n        payoffTspansM\n        // .attr('dominant-baseline', 'hanging')\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            // .attr('x', '0')\n\n            // .attr('dominant-baseline', 'hanging')\n            .classed('negative', (d, i)=> {\n                var val = d.displayPayoff(undefined, i);\n                return val!==null && val<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs)\n            // .text(d=> isNaN(d.payoff) ? d.payoff : self.config.payoffNumberFormatter(d.payoff))\n            .text((d, i)=>{\n                if(this.config.raw){\n                    return d.payoff[i];\n                }\n\n                let item = d.displayValue('payoff');\n                let items = Utils.isArray(item) ? item : [item];\n\n                let val = items[i];\n                if (val !== null) {\n                    if (!isNaN(val)) {\n                        return self.config.payoffNumberFormatter(val, i);\n                    }\n                    if (Utils.isString(val)) {\n                        return val;\n                    }\n                }\n\n                if (d.payoff[i] !== null && !isNaN(d.payoff[i]))\n                    return self.config.payoffNumberFormatter(d.payoff[i], i);\n\n                return d.payoff[i];\n\n            });\n\n        Tooltip.attach(payoffTspansM, (d, i)=>{\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\n                return i18n.t('tooltip.edge.payoff.named',{value: d.payoff[i], number: i+1, name: self.config.payoffNames[i]})\n            }\n            return i18n.t('tooltip.edge.payoff.default',{value: d.payoff[i], number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\n        });\n\n        var payoffTextT = payoff;\n        if(this.transition){\n            payoffTextT = payoff.transition();\n        }\n        this.layout.edgePayoffPosition(payoffEnter);\n        this.layout.edgePayoffPosition(payoffTextT);\n\n        Tooltip.attach(edgesMerge.select('text.probability'), d=>i18n.t('tooltip.edge.probability',{value: d.probability=== undefined ? d.displayProbability() : d.probability}));\n\n        edgesMerge.select('text.probability')\n            .classed('sd-hidden', this.config.hideProbabilities);\n        var probabilityMerge = edgesMerge.select('text.probability');\n        probabilityMerge\n            .attr('text-anchor', 'end')\n            .text(d=>{\n                if(this.config.raw){\n                    return d.probability;\n                }\n                var val = d.displayProbability();\n\n                if(val!==null){\n                    if(!isNaN(val)){\n                        return self.config.probabilityNumberFormatter(val);\n                    }\n                    if(Utils.isString(val)){\n                        return val;\n                    }\n                }\n\n                if(d.probability!==null && !isNaN(d.probability))\n                    return self.config.probabilityNumberFormatter(d.probability);\n\n                return d.probability;\n            });\n        var probabilityMergeT = probabilityMerge;\n        if(this.transition){\n            probabilityMergeT = probabilityMerge.transition();\n        }\n\n        this.layout.edgeProbabilityPosition(probabilityEnter);\n        this.layout.edgeProbabilityPosition(probabilityMergeT);\n\n\n        edgesContainer.selectAll('.edge.'+optimalClassName).raise();\n\n        edgesMerge.on('contextmenu', this.edgeContextMenu);\n        edgesMerge.on('dblclick', this.edgeContextMenu);\n        edgesMerge.each(function(d, i){\n            var elem = this;\n            var mc = new Hammer.Manager(elem);\n            mc.add(new Hammer.Press({\n                pointerType: Hammer.POINTER_TOUCH\n            }));\n        })\n    }\n\n    redrawFloatingTexts() {\n        var self = this;\n\n\n        var textsContainer = this.mainGroup.selectOrAppend('g.floating-texts');\n        var texts = textsContainer.selectAll('.floating-text').data(this.data.texts, (d,i)=> d.$id);\n        texts.exit().remove();\n        var textsEnter = texts.enter().appendSelector('g.floating-text')\n            .attr('id', d=>'text-'+d.$id);\n\n\n        var rectWidth = 40;\n        var rectHeight = 20;\n\n        textsEnter.append('rect').attr('x', -5).attr('y', -16).attr('fill-opacity', 0);\n        textsEnter.append('text');\n\n        var textsMerge = textsEnter.merge(texts);\n        var textsMergeT = textsMerge;\n        if(this.transition){\n            textsMergeT = textsMerge.transition();\n        }\n\n        textsMergeT.attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\n\n        var tspans = textsMerge.select('text').selectAll('tspan').data(d=>d.value ? d.value.split('\\n') : []);\n\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n        textsMerge.classed('sd-empty', d=>!d.value || !d.value.trim());\n        textsMerge.select('rect').attr('width', rectWidth).attr('height', rectHeight);\n\n        textsMerge.each(function(d){\n            if(!d.value){\n                return;\n            }\n            var bb = d3.select(this).select('text').node().getBBox();\n           d3.select(this).select('rect')\n               .attr('y', bb.y-5)\n               .attr('width', Math.max(bb.width+10, rectWidth))\n               .attr('height', Math.max(bb.height+10, rectHeight))\n        });\n\n        if(this.textDragHandler){\n            textsMerge.call(this.textDragHandler.drag);\n        }\n        textsMerge.on('contextmenu', this.textContextMenu);\n        textsMerge.on('dblclick', this.textContextMenu);\n        textsMerge.each(function(d, i){\n            var elem = this;\n            var mc = new Hammer.Manager(elem);\n            mc.add(new Hammer.Press({\n                pointerType: 'touch'\n            }));\n        })\n\n    }\n\n    updateValidationMessages() {\n        var nodes = this.mainGroup.selectAll('.node');\n        nodes.classed('error', false);\n\n        this.data.validationResults.forEach(validationResult=>{\n            if(validationResult.isValid()){\n                return;\n            }\n\n            Object.getOwnPropertyNames(validationResult.objectIdToError).forEach(id=>{\n                var errors = validationResult.objectIdToError[id];\n                var nodeSelection = this.getNodeD3SelectionById(id);\n                nodeSelection.classed('error', true);\n                var tooltipHtml = '';\n                errors.forEach(e=>{\n                    if(tooltipHtml){\n                        tooltipHtml+='<br/>'\n                    }\n                    tooltipHtml+=AppUtils.getValidationMessage(e);\n                });\n\n                Tooltip.attach(nodeSelection.select('.error-indicator'), tooltipHtml);\n\n\n            })\n        });\n    }\n\n\n    initEdgeMarkers() {\n        var defs = this.svg.append(\"svg:defs\");\n\n        this.initArrowMarker(\"arrow\");\n        this.initArrowMarker(\"arrow-optimal\");\n        this.initArrowMarker(\"arrow-selected\");\n    }\n\n    initArrowMarker(id) {\n\n        var defs = this.svg.select(\"defs\");\n        defs.append(\"marker\")\n            .attr(\"id\",id)\n            .attr(\"viewBox\",\"0 -5 10 10\")\n            .attr(\"refX\",5)\n            .attr(\"refY\",0)\n            .attr(\"markerWidth\",4)\n            .attr(\"markerHeight\",4)\n            .attr(\"orient\",\"auto\")\n            .append(\"path\")\n            .attr(\"d\", \"M0,-5L10,0L0,5\")\n            .attr(\"class\",\"arrowHead\");\n    }\n\n    updateBrushExtent() {\n        var self =this;\n        this.brush.extent([[0, 0], [self.svg.attr('width'), self.svg.attr('height')]]);\n        this.brushContainer.call(this.brush);\n    }\n    initBrush() {\n        var self = this;\n\n        var brushContainer = self.brushContainer = this.brushContainer= this.svg.selectOrInsert(\"g.brush\", \":first-child\")\n            .attr(\"class\", \"brush\");\n\n        var brush = this.brush = d3.brush()\n            .on(\"start\", brushstart)\n            .on(\"brush\", brushmove)\n            .on(\"end\", brushend);\n\n\n\n        this.updateBrushExtent();\n\n        brushContainer.select('.overlay').on(\"mousemove.edgeSelection\", mousemoved);\n        function mousemoved() {\n            var m = d3.mouse(this);\n            var mgt = self.getMainGroupTranslation();\n            var margin = 10;\n\n            var closest = [null, 999999999];\n            var closeEdges = [];\n            self.mainGroup.selectAll('.edge').each(function(d){\n                var selection = d3.select(this);\n                selection.classed('sd-hover', false);\n                var pathNode = selection.select('path').node();\n                var b = pathNode.getBBox();\n                if(b.x+mgt[0] <=m[0] && b.x+b.width+mgt[0] >= m[0] &&\n                   b.y+mgt[1]-margin <=m[1] && b.y+b.height+mgt[1]+margin >= m[1]){\n\n                    var cp = AppUtils.closestPoint(pathNode, [m[0]-mgt[0], m[1]-mgt[1]]);\n                    if(cp.distance < margin && cp.distance<closest[1]){\n                        closest = [selection, cp.distance];\n                    }\n                }\n\n            });\n\n            self.hoveredEdge = null;\n            if(closest[0]){\n                closest[0].classed('sd-hover', true);\n                self.hoveredEdge = closest[0];\n            }\n\n        }\n\n        function brushstart() {\n            if (!d3.event.selection) return;\n            if(self.hoveredEdge){\n                self.selectEdge(self.hoveredEdge.datum(), true)\n            }else{\n                self.clearSelection();\n            }\n            ContextMenu.hide();\n        }\n\n        // Highlight the selected nodes.\n        function brushmove() {\n            var s = d3.event.selection;\n            if(!s)return;\n\n            self.mainGroup.selectAll(\".node\").classed('selected', function (d) {\n                var mainGroupTranslation = self.getMainGroupTranslation();\n                var x = d.location.x+mainGroupTranslation[0];\n                var y = d.location.y+mainGroupTranslation[1];\n                var nodeSize = self.config.layout.nodeSize;\n                var offset = nodeSize*0.25;\n                return s[0][0] <= x+offset && x-offset <= s[1][0]\n                    && s[0][1] <= y+offset && y-offset <= s[1][1];\n            });\n        }\n        // If the brush is empty, select all circles.\n        function brushend() {\n            if (!d3.event.selection) return;\n            brush.move(brushContainer, null);\n\n            var selectedNodes = self.getSelectedNodes();\n            if(selectedNodes && selectedNodes.length === 1){\n                self.selectNode(selectedNodes[0]);\n            }\n            // if (!d3.event.selection) self.mainGroup.selectAll(\".selected\").classed('selected', false);\n        }\n    }\n\n    disableBrush(){\n        if(!this.brushDisabled){\n            AppUtils.growl(i18n.t('growl.brushDisabled'), 'info', 'left')\n        }\n        this.brushDisabled = true;\n        this.brushContainer.remove();\n    }\n\n    enableBrush(){\n        if(this.brushDisabled){\n            AppUtils.growl(i18n.t('growl.brushEnabled'), 'info', 'left')\n            this.initBrush();\n            this.brushDisabled = false;\n        }\n\n\n    }\n\n    getMainGroupTranslation(invert) {\n        var translation = AppUtils.getTranslation(this.mainGroup.attr(\"transform\"));\n        if(invert){\n            translation[0] = -translation[0];\n            translation[1] = -translation[1]\n        }\n        return translation;\n    }\n\n    initNodeContextMenu() {\n        this.nodeContextMenu = new NodeContextMenu(this, this.config.operationsForObject);\n    }\n\n    initEdgeContextMenu() {\n        this.edgeContextMenu = new EdgeContextMenu(this);\n    }\n\n    initTextContextMenu() {\n        this.textContextMenu = new TextContextMenu(this);\n    }\n\n\n\n    initMainContextMenu() {\n        this.mainContextMenu = new MainContextMenu(this);\n        this.svg.on('contextmenu',this.mainContextMenu);\n        this.svg.on('dblclick',this.mainContextMenu);\n    }\n\n    addText(text){\n        this.data.saveState();\n        this.data.addText(text);\n        this.redraw();\n        this.selectText(text);\n    }\n\n    addNode(node, parent, redraw=false){\n        this.data.saveState();\n        this.data.addNode(node, parent);\n        this.redraw(true);\n        this.layout.update(node);\n        return node;\n    }\n\n    addDecisionNode(parent){\n        var newNode = new model.DecisionNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n    addChanceNode(parent){\n        var newNode = new model.ChanceNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n    addTerminalNode(parent){\n        var newNode = new model.TerminalNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n\n    injectNode(node, edge){\n        this.data.saveState();\n        this.data.injectNode(node, edge);\n        this.redraw();\n        this.layout.update(node);\n        return node;\n    }\n\n    injectDecisionNode(edge){\n        var newNode = new model.DecisionNode(this.layout.getInjectedNodeLocation(edge));\n        this.injectNode(newNode, edge);\n\n    }\n\n    injectChanceNode(edge){\n        var newNode = new model.ChanceNode(this.layout.getInjectedNodeLocation(edge));\n        this.injectNode(newNode, edge);\n    }\n\n    removeNode(node) {\n        this.data.saveState();\n        this.data.removeNode(node);\n\n\n        if(!this.layout.isManualLayout()){\n            this.layout.update();\n        }else{\n            this.redraw();\n        }\n    }\n\n    removeSelectedNodes() {\n        var selectedNodes = this.getSelectedNodes();\n        if(!selectedNodes.length){\n            return;\n        }\n        this.data.saveState();\n        this.data.removeNodes(selectedNodes);\n        this.clearSelection();\n        this.redraw();\n        this.layout.update();\n    }\n\n    removeSelectedTexts(){\n        var selectedTexts = this.getSelectedTexts();\n\n        if(!selectedTexts.length){\n            return;\n        }\n        this.data.saveState();\n        this.data.removeTexts(selectedTexts);\n        this.clearSelection();\n        this.redraw();\n    }\n\n    copyNode(d, notClearPrevSelection) {\n        var clone = this.data.cloneSubtree(d);\n        if(notClearPrevSelection){\n            if(!this.copiedNodes){\n                this.copiedNodes=[];\n            }\n            this.copiedNodes.push(clone);\n        }else{\n            this.copiedNodes = [clone];\n        }\n\n    }\n\n    cutNode(d) {\n        this.copyNode(d);\n        this.removeNode(d);\n    }\n\n    cutSelectedNodes(){\n        var selectedNodes = this.getSelectedNodes();\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\n        this.copyNodes(selectedRoots);\n        this.removeSelectedNodes();\n    }\n\n    copySelectedNodes() {\n        var self;\n        var selectedNodes = this.getSelectedNodes();\n\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\n        this.copyNodes(selectedRoots);\n\n\n    }\n\n    copyNodes(nodes){\n        this.copiedNodes = nodes.map(d=>this.data.cloneSubtree(d));\n    }\n\n\n\n    pasteToNode(node) {\n        if(!this.copiedNodes || !this.copiedNodes.length){\n            return;\n        }\n        this.data.saveState();\n        var self = this;\n        self.clearSelection();\n        var nodesToAttach = this.copiedNodes;\n        self.copyNodes(this.copiedNodes);\n        nodesToAttach.forEach(toAttach=>{\n            var attached = this.data.attachSubtree(toAttach, node).childNode;\n            if(attached.folded){\n                self.foldSubtree(attached, attached.folded, false);\n            }\n            var location = self.layout.getNewChildLocation(node);\n            attached.moveTo(location.x, location.y, true);\n            self.layout.moveNodeToEmptyPlace(attached, false);\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\n\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\n        });\n\n        if(node.folded){\n            self.foldSubtree(node, node.folded, false);\n        }\n\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n\n    }\n\n    pasteToNewLocation(point) {\n        this.data.saveState();\n        var self = this;\n        self.clearSelection();\n        var nodesToAttach = this.copiedNodes;\n        self.copyNodes(this.copiedNodes);\n        nodesToAttach.forEach(toAttach=> {\n            var attached = this.data.attachSubtree(toAttach);\n            if(attached.folded){\n                self.foldSubtree(attached, attached.folded, false);\n            }\n            attached.moveTo(point.x, point.y, true);\n            self.layout.moveNodeToEmptyPlace(attached, false);\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\n\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\n        });\n\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n\n    }\n\n    convertNode(node, typeToConvertTo){\n        var self = this;\n        this.data.saveState();\n        this.data.convertNode(node, typeToConvertTo);\n        setTimeout(function(){\n            self.redraw(true);\n        },10)\n    }\n\n    performOperation(object, operation){\n        var self = this;\n        this.data.saveState();\n        operation.perform(object);\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n    }\n\n    foldSubtree(node, fold = true, redraw=true){\n        let self = this;\n        node.folded = fold;\n\n        this.data.getAllDescendantNodes(node).forEach(n=>{\n            n.$hidden = fold;\n            n.folded = false;\n        });\n        this.data.getAllDescendantEdges(node).forEach(e=>e.$hidden = fold);\n\n        if(!redraw){\n            return;\n        }\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n    }\n\n    updateVisibility(node = null){\n        if(!node){\n            this.data.getRoots().forEach(n=>this.updateVisibility(n));\n            return;\n        }\n\n        if(node.folded){\n            this.foldSubtree(node, true, false);\n            return;\n        }\n\n        node.childEdges.forEach(e => this.updateVisibility(e.childNode));\n\n    }\n\n    moveNodeTo(x,y){\n\n    }\n\n    updateNodePosition(node) {\n        this.getNodeD3Selection(node).raise().attr('transform', 'translate('+node.location.x+' '+node.location.y+')');\n    }\n\n    updateTextPosition(text) {\n        this.getTextD3Selection(text).raise().attr('transform', 'translate('+text.location.x+' '+text.location.y+')');\n    }\n\n    getNodeD3Selection(node){\n        return this.getNodeD3SelectionById(node.$id);\n    }\n\n    getNodeD3SelectionById(id){\n        return this.mainGroup.select('#node-'+id);\n    }\n    getTextD3Selection(text){\n        return this.getTextD3SelectionById(text.$id);\n    }\n    getTextD3SelectionById(id){\n        return this.mainGroup.select('#text-'+id);\n    }\n\n    getSelectedNodes(visibleOnly = false) {\n        let selectedVisible = this.mainGroup.selectAll(\".node.selected\").data();\n        if(visibleOnly){\n            return selectedVisible;\n        }\n\n        let allSelected  = [];\n        allSelected.push(...selectedVisible);\n\n        selectedVisible.forEach(n=>{\n            if(n.folded){\n                let descendants = this.data.getAllDescendantNodes(n);\n                if(descendants){\n                    allSelected.push(...descendants);\n                }\n            }\n        });\n\n        return allSelected;\n    }\n\n    getSelectedTexts(){\n        return this.mainGroup.selectAll(\".floating-text.selected\").data();\n    }\n\n    clearSelection(){\n        this.mainGroup.selectAll(\".edge.selected\").select('path').attr(\"marker-end\", d => \"url(#arrow\"+(this.isOptimal(d)?'-optimal':'')+\")\")\n        this.mainGroup.selectAll(\".selected\").classed('selected', false);\n        this.config.onSelectionCleared();\n    }\n\n    selectEdge(edge, clearSelectionBeforeSelect){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n        this.config.onEdgeSelected(edge);\n        this.mainGroup.select('#edge-'+edge.$id)\n            .classed('selected', true)\n            .select('path')\n            .attr(\"marker-end\", d => \"url(#arrow-selected)\")\n    }\n\n    isNodeSelected(node){\n        return this.getNodeD3Selection(node).classed('selected');\n    }\n\n    selectNode(node, clearSelectionBeforeSelect, skipCallback){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n\n        if(!skipCallback){\n            this.config.onNodeSelected(node);\n        }\n\n        this.getNodeD3SelectionById(node.$id).classed('selected', true);\n    }\n\n    selectText(text, clearSelectionBeforeSelect, skipCallback){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n\n        if(!skipCallback){\n            this.config.onTextSelected(text)\n        }\n\n        this.getTextD3SelectionById(text.$id).classed('selected', true);\n    }\n\n    selectSubTree(node, clearSelectionBeforeSelect,skipCallback) {\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n        this.selectNode(node, false, skipCallback);\n        node.childEdges.forEach(e=>this.selectSubTree(e.childNode, false, true));\n    }\n\n    selectAllNodes() {\n        this.mainGroup.selectAll(\".node\").classed('selected', true);\n    }\n\n    autoLayout(type, withoutStateSaving){\n        this.layout.autoLayout(type, withoutStateSaving);\n    }\n\n    updateDiagramTitle(titleValue){\n        if(!titleValue){\n            titleValue = '';\n        }\n        this.diagramTitle = titleValue;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(true);\n    }\n\n    redrawDiagramTitle(){\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\n\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\n        title.text(this.diagramTitle);\n        Layout.setHangingPosition(title);\n\n        var marginTop = parseInt(this.config.title.margin.top);\n        this.titleContainer.attr('transform', 'translate('+(svgWidth/2)+','+( marginTop)+')');\n    }\n    redrawDiagramDescription(){\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\n\n        var desc = this.titleContainer.selectOrAppend('text.sd-description');\n\n        if(!this.config.description.show){\n            desc.remove();\n            return;\n        }\n\n        var lines = this.diagramDescription ? this.diagramDescription.split('\\n') : [];\n        var tspans = desc.selectAll('tspan').data(lines);\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n        Layout.setHangingPosition(desc);\n\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\n\n        var marginTop = 0;\n        if(this.diagramTitle){\n            marginTop += title.node().getBBox().height;\n            marginTop+= Math.max(parseInt(this.config.description.margin.top), 0);\n        }\n\n\n        desc.attr('transform', 'translate(0,'+( marginTop)+')');\n    }\n\n    updateDiagramDescription(descriptionValue){\n        if(!descriptionValue){\n            descriptionValue = '';\n        }\n        this.diagramDescription = descriptionValue;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(true);\n    }\n\n\n    getTitleGroupHeight(withMargins){\n        if(!this.titleContainer){\n            return 0;\n        }\n        var h = this.titleContainer.node().getBBox().height;\n        if(withMargins){\n            h+= parseInt(this.config.title.margin.bottom);\n            h+= parseInt(this.config.title.margin.top);\n        }\n        return h;\n    }\n\n}\n","export * from './src/index'\n"]}