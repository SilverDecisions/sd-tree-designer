{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app-utils.js","src/context-menu/context-menu.js","src/context-menu/edge-context-menu.js","src/context-menu/main-context-menu.js","src/context-menu/node-context-menu.js","src/context-menu/text-context-menu.js","src/d3-extensions.js","src/d3.js","src/i18n/de.json","src/i18n/en.json","src/i18n/fr.json","src/i18n/i18n.js","src/i18n/it.json","src/i18n/pl.json","src/index.js","src/layout.js","src/node-drag-handler.js","src/symbols/circle.js","src/symbols/triangle.js","src/templates.js","src/templates/growl_message.html","src/text-drag-handler.js","src/tooltip.js","src/tree-designer.js","index.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","1","module","d3","_interopRequireWildcard","_templates","_i18n","_sdUtils","AppUtils","textD3Obj","textString","width","textObj","node","textContent","getComputedTextLength","x","getSubStringLength","substring","tooltip","placeTextWithEllipsis","on","d","transition","duration","style","html","event","pageX","pageY","element","window","getComputedStyle","getPropertyValue","transform","g","document","createElementNS","setAttributeNS","matrix","baseVal","consolidate","pathNode","point","distance2","p","dx","dy","y","best","bestLength","scan","scanDistance","pathLength","getTotalLength","precision","bestDistance","Infinity","scanLength","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","distance","Math","sqrt","message","type","arguments","undefined","position","time","Templates","get","select","selectOrAppend","append","remove","tag","attribs","parent","el","createElement","deepExtend","appendChild","parentNode","removeChild","text","replace","createTextNode","div","innerHTML","name","evt","createEvent","initEvent","dispatchEvent","fireEvent","data","CustomEvent","detail","initCustomEvent","error","Utils","isString","key","i18n","selection","classed","_show","exact","display","offsetParent","url","callback","xhr","XMLHttpRequest","open","responseType","onload","status","response","send","sanitizeHeight","height","container","parseInt","sanitizeWidth","availableHeight","margin","max","top","bottom","availableWidth","left","right","ContextMenu","menu","opts","self","this","openCallback","onOpen","closeCallback","onClose","selectAll","enter","attr","index","elm","preventDefault","stopPropagation","ret","divider","disabled","action","title","_contextMenu","EdgeContextMenu","_ContextMenu","treeDesigner","push","injectDecisionNode","injectChanceNode","_this","_sdModel","MainContextMenu","mousePosition","newNode","domain","DecisionNode","addNode","ChanceNode","newText","Text","addText","pasteToNewLocation","copiedNodes","selectAllNodes","clearSelection","Point","mouse","svg","move","getMainGroupTranslation","NodeContextMenu","operationsForObject","copyMenuItem","selectNode","isNodeSelected","copySelectedNodes","cutMenuItem","cutSelectedNodes","pasteMenuItem","pasteToNode","folded","deleteMenuItem","removeSelectedNodes","TerminalNode","$TYPE","addNodeConversionOptions","addDecisionNode","addChanceNode","addTerminalNode","selectSubTree","foldSubtree","operations","forEach","op","performOperation","canPerform","conversionOptions","getNodeConversionOptions","options","allAllowedTypes","childEdges","$parent","filter","getNodeConversionOption","typeToConvertTo","convertNode","TextContextMenu","selectText","removeSelectedTexts","D3Extensions","prototype","insertSelector","selector","appendSelector","selectOrInsert","operation","selectorParts","split","shift","selectorModifier","selectorItem","insertOrAppendSelector","empty","Object","keys","_d3Dispatch","_d3Scale","_d3Selection","_d3Shape","_d3Drag","_d3Brush","_d3Array","_d3Hierarchy","_d3TimeFormat","contextMenu","main","paste","copy","cut","delete","convert","decision","chance","terminal","selectSubtree","fold","unfold","flipSubtree","edge","validation","incompletePath","probabilityDoNotSumUpTo1","invalidProbability","invalidPayoff","growl","brushDisabled","brushEnabled","payoff","default","named","aggregatedPayoff","probabilityToEnter","probability","en","pl","it","de","fr","lng","language","resources","$instance","_i18next2","createInstance","err","opt","_treeDesigner","_appUtils","_tooltip","_d3Extensions","extend","Layout","config","nodeTypeToSymbol","symbolSquare","onAutoLayoutChanged","nodeTypeOrder","treeMargin","targetSymbolSize","nodeSeparation","b","nodeSymbolSize","sort","childNode","location","isManualLayout","autoLayout","moveNodeToEmptyPlace","redraw","MANUAL_LAYOUT_NAME","getNodeMinX","getNodeMinY","gridWidth","$linePoints","redrawIfChanged","nodesSortedByX","nodes","slice","colidingNode","stepX","nodeSize","stepY","changed","newLocation","find","findCollidingNode","moveTo","_fireOnAutoLayoutChangedCallbacks","path","nodeSymbol","symbol","size","$id","each","box","getBBox","min","set","setHangingPosition","fontSize","getFontSize","items","displayValue","isArray","aggregatedPayoffs","line","dX","sign","slantStartXOffset","slantWidth","edgeSlantWidthMax","point1","point2","point3","point4","datum","len","previousSibling","childNodes","getMinMarginBetweenNodes","$hidden","withoutStateSaving","saveState","setGridWidth","update","gridHeight","setGridHeight","setNodeSize","fitNodesInPlottingRegion","getRoots","setEdgeSlantWidthMax","currentLayout","newLayout","prevTreeMaxY","root","hierarchy","map","layout","cluster","tree","separation","minY","maxY","pivot","limit","limitNodePositioning","backupNodeLocation","minX","maxX","getNodeMaxX","revertX","$location","updateNodePosition","c","isHidden","NodeDragHandler","drag","subject","getTranslation","dragStarted","onDrag","dragEnded","ignoreDrag","ignoredDrag","hide","selectedNodes","getSelectedNodes","prevDragEvent","dragEventCount","draggedNode","moveNodes","redrawEdges","updatePlottingRegionSize","pi","PI","context","dist","bezierCurveTo","lineTo","closePath","templateName","variables","compiled","template","imports","include","v","props","styleProp","styleName","variableName","clazz","treeDesignerSelector","treeDesignerStyles","styleRule","nodeSelector","edgeSelector","TextDragHandler","draggedText","updateTextPosition","Tooltip","xOffset","yOffset","getContainer","updatePosition","target","htmlOrFn","isFunction","show","_mainContextMenu","_nodeContextMenu","_layout","_nodeDragHandler","_textDragHandler","_textContextMenu","_edgeContextMenu","Hammer","TreeDesignerConfig","custom","fontFamily","fontWeight","fontStyle","description","readOnly","disableAnimations","forceFullEdgeRedraw","hideLabels","hidePayoffs","hideProbabilities","raw","payoffNumberFormatter","probabilityNumberFormatter","onNodeSelected","onEdgeSelected","onTextSelected","onSelectionCleared","payoffNames","maxPayoffsToDisplay","TreeDesigner","dataModel","setConfig","initContainer","init","updateCustomStyles","initSvg","initLayout","initI18n","initBrush","initEdgeMarkers","initMainContextMenu","initNodeContextMenu","initEdgeContextMenu","initNodeDragHandler","initTextDragHandler","initTextContextMenu","nodeDragHandler","textDragHandler","withTransitions","redrawDiagramTitle","redrawDiagramDescription","updateMargin","transitionPrev","redrawNodes","redrawFloatingTexts","updateValidationMessages","computeAvailableSpace","mainGroup","mc","Manager","touchAction","add","Press","Pinch","cancel","disableBrush","waitForFinalEvent","enableBrush","group","topMargin","diagramTitle","diagramDescription","getTitleGroupHeight","clone","setMargin","containerIdOrElem","trim","startsWith","_parents","svgWidth","svgHeight","mainGroupBox","newSvgWidth","newSvgHeight","updateBrushExtent","exit","nodesEnter","labelEnter","payoffEnter","indicatorEnter","aggregatedPayoffEnter","probabilityToEnterEnter","nodesMerge","merge","isOptimal","nodesMergeT","drawNodeSymbol","nodeLabelPosition","labelMergeT","updateTextLines","payoffTspans","item","payoffTspansM","val","isNaN","attachPayoffTooltip","payoffT","nodePayoffPosition","aggregatedPayoffTspans","aggregatedPayoffTspansM","aggregatedPayoffT","nodeAggregatedPayoffPosition","attach","probabilityToEnterT","nodeProbabilityToEnterPosition","indicator","nodeIndicatorPosition","nodeContextMenu","nodeElem","pointerType","cancelDrag","button","nodeUnfoldButtonPosition","payoffFiledName","object","value","number","lines","reverse","tspans","edgesContainer","edges","edgesEnter","probabilityEnter","edgesMerge","edgesMergeT","edgeLineD","selectEdge","edgeLabelPosition","_","displayPayoff","payoffTextT","edgePayoffPosition","displayProbability","probabilityMerge","probabilityMergeT","edgeProbabilityPosition","raise","edgeContextMenu","elem","POINTER_TOUCH","texts","textsEnter","textsMerge","textsMergeT","replaceUrls","escapeHtml","bb","textContextMenu","validationResults","validationResult","isValid","getOwnPropertyNames","objectIdToError","id","errors","nodeSelection","_this2","getNodeD3SelectionById","tooltipHtml","getValidationMessage","initArrowMarker","brush","extent","brushContainer","hoveredEdge","mainGroupTranslation","offset","m","mgt","closest","cp","closestPoint","invert","translation","mainContextMenu","getNewChildLocation","injectNode","getInjectedNodeLocation","removeNode","removeNodes","selectedTexts","getSelectedTexts","removeTexts","notClearPrevSelection","cloneSubtree","copyNode","selectedRoots","findSubtreeRoots","copyNodes","_this3","nodesToAttach","toAttach","attached","_this4","attachSubtree","getAllDescendantNodes","_this5","perform","getAllDescendantEdges","_this6","updateVisibility","getNodeD3Selection","getTextD3Selection","getTextD3SelectionById","visibleOnly","selectedVisible","allSelected","apply","_toConsumableArray","descendants","_this7","_this8","clearSelectionBeforeSelect","skipCallback","_this9","titleValue","titleContainer","marginTop","desc","descriptionValue","withMargins","h","_index"],"mappings":"AAAAA,QAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAR,SAAAA,QAAA,IAAAO,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAG,EAAA,OAAAA,EAAAH,GAAA,GAAA,IAAAI,EAAA,IAAAC,MAAA,uBAAAL,EAAA,KAAA,MAAAI,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAV,EAAAG,IAAAQ,YAAAZ,EAAAI,GAAA,GAAAS,KAAAF,EAAAC,QAAA,SAAAb,GAAA,IAAAE,EAAAD,EAAAI,GAAA,GAAAL,GAAA,OAAAI,EAAAF,GAAAF,IAAAY,EAAAA,EAAAC,QAAAb,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAQ,QAAA,IAAA,IAAAL,EAAA,mBAAAT,SAAAA,QAAAM,EAAA,EAAAA,EAAAF,EAAAY,OAAAV,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,EAAAY,GAAA,SAAAjB,EAAAkB,EAAAJ,0aCAYK,yJAAAC,CAAZpB,EAAA,SACAqB,EAAArB,EAAA,eACAsB,EAAAtB,EAAA,eACAuB,EAAAvB,EAAA,YAEawB,EAAA,wDAkBT,uCAC6BC,EAAWC,EAAYC,OAC5CC,EAAUH,EAAdI,SACAC,YAAAJ,KAKIE,EAAAG,wBAAkCJ,EAHtC,EAGA,KACS,IAAIK,EAAIN,EAAAV,OAAb,EAAoCgB,EAApC,EAA2CA,GAA3C,KACQJ,EAAAK,mBAAA,EAAAD,GAJZ,GAIiEL,EALjE,WAMYG,YAAsBJ,EAAAQ,UAAA,EAAAF,GAAtB,OACA,WAGRF,YAPkD,OAQlD,SAEJ,0DAGmCL,EAAWC,EAAYC,EAAOQ,GAC5CX,EAAAY,sBAAAX,EAAAC,EAArBC,IACAQ,MACIE,GAAA,YAA0B,SAAAC,KACtBC,aAAAC,SAAA,KAAAC,MAAA,UAAA,MAGAC,KAAAhB,GAAAe,MAAA,OACoBtB,EAAAwB,MAAAC,MAAD,EADnB,MAAAH,MAAA,MAEmBtB,EAAAwB,MAAAE,MAAD,GAFlB,UAKJR,GAAA,WAAyB,SAAAC,KACrBC,aAAAC,SAAA,KAAAC,MAAA,UAAA,0CAQOK,UACRC,OAAAC,iBAAAF,EAAA,MAAAG,iBAAP,oDAGkBC,OAIdC,EAAIC,SAAAC,gBAAA,6BAAR,OAGAC,eAAA,KAAA,YAAAJ,OAKIK,EAASJ,EAAAD,UAAAM,QAAAC,cAAbF,cAGQA,EAADtD,EAAWsD,EAAlB7C,wCAIgBgD,EAAUC,YAoC1BC,EAAAC,OACQC,EAAKD,EAAA7B,EAAM2B,EAAf,GACII,EAAKF,EAAAG,EAAML,EADf,UAEOG,EAAAA,EAAUC,EAAjBA,MA/BC,IAPLE,EAAAC,EAOKC,EAALC,EAPIC,EAAaX,EAAjBY,iBACIC,EADJ,EAIIC,EAJJC,EAAAA,EAOeC,EAAV,EAAwCA,GAA7CL,EAAuEK,GAAvEH,GACSH,EAAeR,EAAUO,EAAOT,EAAAiB,iBAAjCD,KAAJF,MACIL,EAAaD,EAAbQ,EAAsCF,EAAtCJ,UAKR,EACOG,EAAP,IAAwB,KACpBK,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAMKH,EAAeZ,EAAhBK,IAAA,IAAiDS,EAAiBpB,EAAUgB,EAASlB,EAAAiB,iBAArCG,KAApDN,KACII,EAAeV,EAAfY,EAA0CN,EAA1CQ,IACQD,EAAcb,EAAfK,IAAAF,IAAyDY,EAAgBrB,EAAUiB,EAAQnB,EAAAiB,iBAAnCI,KAA5DP,KACHK,EAAcX,EAAda,EAAwCP,EAAxCS,MAEA,YAIAhB,EAADjC,EAASiC,EAAhBD,KACAkB,SAAgBC,KAAAC,KAAhBZ,GACAP,gCASSoB,OAASC,EAAAC,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,GAAAA,UAAA,GAAK,OAAQE,EAAAF,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,GAAAA,UAAA,GAAS,QAASG,EAAAH,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,GAAAA,UAAA,GAAO,IACpD7C,EAAOrB,EAAAsE,UAAAC,IAAA,SAAwBP,QAADA,EAAkBC,KAApDA,IAEInC,EAAIhC,EAAA0E,OAAA,QAAAC,eAAiC,qBAAjCL,GAAAM,OAAA,OAAArD,KAARA,cACW,aACPsD,UADJN,yCAMiBO,EAAKC,EAASC,OAC3BC,EAAKhD,SAAAiD,cAATJ,UAEAC,KACII,WAAAF,EAAAF,GAEJC,KACII,YAAAH,GAEJA,wCAGiBtD,KACjB0D,WAAAC,YAAA3D,uCAGe4D,OACfA,SACIA,SAIGA,EAAAC,QAFP,sFAEA,0EAGcjE,OAEVgE,EAAOtD,SAAAwD,eAAXlE,GACImE,EAAMzD,SAAAiD,cAAV,gBACAE,YAAAG,GACOG,EAAPC,oDAGqBhE,EAASiE,MAC1B,gBAAJ3D,SAA+B,KACvB4D,EAAM5D,SAAA6D,YAAV,gBACAC,UAAAH,GAAA,GAAA,KACAI,cAAAH,QAGAlE,EAAAsE,UAAkB,KAAlBL,yCAGaA,EAAMM,OACvB1E,QAEY,IAAA2E,YAAAP,GAAwBQ,OAAhCF,IACH,MAAApH,MACWmD,SAAA6D,YAAR,gBACAO,gBAAAT,GAAA,GAAA,EAAAM,YAEJF,cAAAxE,gDAGwB8E,GACrBlG,EAAAmG,MAAAC,SAAHF,QACaV,KAATU,QAEAG,EAAM,cAAgBH,EAA1BV,YACOzF,EAAAuG,KAAA3H,EAAA0H,EAAYH,EAAnBJ,mCAGQS,KACRC,QAAA,aAAA,gCAGQD,OAAWE,IAAAzC,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,KAAAA,UAAA,KACnBwC,QAAA,aAAAC,oCAKY5B,OAAI6B,IAAA1C,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,KAAAA,UAAA,UAChBa,IAGA6B,EAEI,SADYlF,OAAAC,iBAAZoD,GACQ8B,QAEZ,OAAQ9B,EAAA+B,8CAGGC,EAAKC,OACZC,EAAM,IAAVC,iBACAC,KAAA,MAAAJ,GAAA,KACAK,aAAA,SACAC,OAAa,eACLC,EAASL,EAAbK,OACA,KAAIA,IACSL,EAATM,SAAA,QAEA,KAAAD,MAGRE,aAvOK,gBAAArH,EAEFsH,eAAiB,SAAAC,EAAAC,UACZD,GAAUE,SAASD,EAAAvG,MAAT,UAAV,KAAR,KAHKjB,EAMF0H,cAAgB,SAAAvH,EAAAqH,UACXrH,GAASsH,SAASD,EAAAvG,MAAT,SAAT,KAAR,KAPKjB,EAUF2H,gBAAkB,SAAAJ,EAAAC,EAAAI,UACdjE,KAAAkE,IAAA,EAAY7H,EAAAsH,eAAAC,EAAAC,GAA6CI,EAA7CE,IAA0DF,EAA7EG,SAXK/H,EAcFgI,eAAiB,SAAA7H,EAAAqH,EAAAI,UACbjE,KAAAkE,IAAA,EAAY7H,EAAA0H,cAAAvH,EAAAqH,GAA2CI,EAA3CK,KAAyDL,EAA5EM,0gBCpBIvI,yJAAAC,CAAZpB,EAAA,UAKac,EAAA6I,YAAA,sBAITC,EAAAC,UACIF,OAAIG,EAAJC,WAEA,mBAAIF,IACAG,aAAAH,KAEOA,QACPG,aAAoBH,EAApBI,SACAC,cAAqBL,EAArBM,WAIJC,UAAA,oBAAA/C,MAAA,IAAAgD,QAAAtE,OAAA,OAAAuE,KAAA,QAAA,qBAMAzE,OAAA,QAAAxD,GAAA,wBAA8C,aAC1CwD,OAAA,oBAAApD,MAAA,UAAA,QACIqH,EAAJI,iBACIA,kBAKD,SAAA7C,EAAAkD,OACCC,EAAJT,OAEAK,UAAA,oBAAA1H,KAAA,IACIvB,EAAOiJ,UAAA,oBAAA/H,GAAA,cACY,SAAAC,KACfuD,OAAA,oBAAApD,MAAA,UAAA,UACAE,MAAA8H,mBACA9H,MAAA+H,oBAJG3E,OAAX,MAOAqE,UAAA,MAAA/C,KAA0B,mBAAAuC,EAA6BA,EAA7BvC,GAA1BuC,GAAAS,QAAAtE,OAAA,MAAAuE,KAAA,QAEmB,SAAAhI,OACPqI,EAAJ,UACIrI,EAAJsI,aACI,eAEAtI,EAAJuI,cACI,gBAECvI,EAALwI,YACI,cAEJH,IAbRjI,KAeU,SAAAJ,UACEA,EAAJsI,QACI,QAECtI,EAALyI,eACItD,MAAA,+DAEG,iBAAQnF,EAAPyI,MAA+BzI,EAAhCyI,MAA0CzI,EAAAyI,MAAjD1D,MAtBRhF,GAAA,QAwBiB,SAAAC,EAAA7B,GACL6B,EAAJuI,UACKvI,EAALwI,WACAA,OAAAN,EAAAnD,EAAAkD,KACA1E,OAAA,oBAAApD,MAAA,UAAA,QAEIqH,EAAJI,iBACIA,mBAMRJ,EAAJE,eACI,IAAIF,EAAAE,aAAA3C,EAAAkD,OAMR1E,OAAA,oBAAApD,MAAA,OACoBtB,EAAAwB,MAAAC,MAAD,EADnB,MAAAH,MAAA,MAEmBtB,EAAAwB,MAAAE,MAAD,EAFlB,MAAAJ,MAAA,UAAA,WAKAE,MAAA8H,mBACA9H,MAAA+H,oEAKJ7E,OAAA,oBAAApD,MAAA,UAAA,cAhGK,k7BCLb,IAAAuI,EAAAhL,EAAA,kBACAsB,EAAAtB,EAAA,gBAEac,EAAAmK,gBAAA,SAAAC,cAGTC,UACIF,kEAAW,SAAA3I,OAEHsH,cAEJwB,YACW9J,EAAAuG,KAAA3H,EADD,8CAEE,SAAAsK,EAAAlI,EAAA7B,KACJ4K,mBAAA/I,QAGR8I,YACW9J,EAAAuG,KAAA3H,EADD,4CAEE,SAAAsK,EAAAlI,EAAA7B,KACJ6K,iBAAAhJ,MAKRsH,cAIJuB,aAvBsBA,EAwBzBI,8BA3BQ,68BCHb,IAAAP,EAAAhL,EAAA,kBACAwL,EAAAxL,EAAA,YACYmB,yJAAAC,CAAZpB,EAAA,UACAsB,EAAAtB,EAAA,gBAEac,EAAA2K,gBAAA,SAAAP,cAGTC,UACIM,OAAIC,EAAJ,gEACW,SAAApJ,OAEHsH,cACJwB,YACW9J,EAAAuG,KAAA3H,EADD,2CAEE,SAAAsK,EAAAlI,EAAA7B,OACAkL,EAAU,IAAIH,EAAAI,OAAJC,aAAdH,KACAI,QAAAH,QAGRP,YACW9J,EAAAuG,KAAA3H,EADD,yCAEE,SAAAsK,EAAAlI,EAAA7B,OACAkL,EAAU,IAAIH,EAAAI,OAAJG,WAAdL,KACAI,QAAAH,QAGRP,MAAWR,SAAX,MACAQ,YACW9J,EAAAuG,KAAA3H,EADD,mCAEE,SAAAsK,EAAAlI,EAAA7B,OACAuL,EAAU,IAAIR,EAAAI,OAAJK,KAAdP,KACAQ,QAAAF,QAIRZ,MAAWR,SAAX,MACAQ,YACW9J,EAAAuG,KAAA3H,EADD,iCAEE,SAAAsK,EAAAlI,EAAA7B,KACJ0L,mBAAAT,cAEOP,EAADiB,cAA8BjB,EAAAiB,YAL5CpL,WAQAoK,MAAWR,SAAX,MAEAQ,YACW9J,EAAAuG,KAAA3H,EADD,0CAEE,SAAAsK,EAAAlI,EAAA7B,KACJ4L,oBAGRzC,IAGSK,OAAQ,aACjBqC,mBACgB,IAAId,EAAAI,OAAJW,MAAgBpL,EAAAqL,MAASrB,EAAAsB,IAAzB5K,SAAA6K,KAAwDvB,EAAAwB,yBAAxE,iBAGJxB,aArDsBA,EAsDzBI,8BAzDQ,suCCLbP,EAAAhL,EAAA,kBACAwL,EAAAxL,EAAA,YACAsB,EAAAtB,EAAA,gBAEac,EAAA8L,gBAAA,SAAA1B,cAGTC,EAAA0B,UACID,kEAAW,SAAAtK,OAEHwK,SACOxL,EAAAuG,KAAA3H,EADQ,gCAEP,SAAAsK,EAAAlI,EAAA7B,KACJsM,WAAAzK,GAA4B6I,EAAA6B,eAA5B1K,MACA2K,sBAGJC,SACO5L,EAAAuG,KAAA3H,EADO,+BAEN,SAAAsK,EAAAlI,EAAA7B,KACJsM,WAAAzK,GAA4B6I,EAAA6B,eAA5B1K,MACA6K,qBAGJC,SACO9L,EAAAuG,KAAA3H,EADS,iCAER,SAAAsK,EAAAlI,EAAA7B,KACJ4M,YAAA/K,aAEMA,EAAAgL,SAAanC,EAAbiB,cAA0CjB,EAAAiB,YALxDpL,QAQIuM,SACOjM,EAAAuG,KAAA3H,EADU,kCAET,SAAAsK,EAAAlI,EAAA7B,KAEJsM,WAAAzK,GAA4B6I,EAAA6B,eAA5B1K,MACAkL,wBAKJ5D,QACAtH,EAAAgD,MAAUkG,EAAAI,OAAA6B,aAAdC,gBACWZ,EAAAI,EAAPK,KACAI,yBAAArL,EAAAsH,EAAAuB,GACAvB,KAGAtH,EAAJgL,WACIlC,YACW9J,EAAAuG,KAAA3H,EADD,2CAEE,SAAAsK,EAAAlI,EAAA7B,KACJmN,gBAAAtL,QAGR8I,YACW9J,EAAAuG,KAAA3H,EADD,yCAEE,SAAAsK,EAAAlI,EAAA7B,KACJoN,cAAAvL,QAGR8I,YACW9J,EAAAuG,KAAA3H,EADD,2CAEE,SAAAsK,EAAAlI,EAAA7B,KACJqN,gBAAAxL,QAGR8I,MAAWR,SAAX,OAGJQ,KAAA0B,KACA1B,KAAA8B,KACA9B,KAAAgC,KACAhC,KAAAmC,KAEAI,yBAAArL,EAAAsH,EAAAuB,KACAC,MAAWR,SAAX,MACAQ,YACW9J,EAAAuG,KAAA3H,EADD,yCAEE,SAAAsK,EAAAlI,EAAA7B,KACJsN,cAAAzL,GAAA,MAIJA,EAAJgL,SAQIlC,YACW9J,EAAAuG,KAAA3H,EADD,kCAEE,SAAAsK,EAAAlI,EAAA7B,KACJuN,YAAA1L,GAAA,QAVR8I,YACW9J,EAAAuG,KAAA3H,EADD,gCAEE,SAAAsK,EAAAlI,EAAA7B,KACJuN,YAAA1L,MAYZuK,EAAuB,KACfoB,EAAapB,EAAjBvK,GACG2L,EAAHjN,WACIoK,MAAWR,SAAX,MACAsD,QAAmB,SAAAC,KACf/C,YACW9J,EAAAuG,KAAA3H,EAAO,oBAAoBiO,EAD5BpH,aAEE,SAAAyD,EAAAlI,EAAA7B,KACJ2N,iBAAA9L,EAAA6L,cAEOA,EAAAE,WALf/L,eAWZsH,cAIJuB,aAlH2CA,EAmH9CI,qFAE+BjJ,EAAGsH,EAAMuB,OACjCmD,EAAoB1B,EAAA2B,yBAAAjM,EAAxB6I,GACGmD,EAAHtN,WACIoK,MAAWR,SAAX,MACAsD,QAA0B,SAAA5N,UAAGsJ,EAAAwB,KAAH9K,uDAKFgC,EAAG6I,OAC3BqD,KACAC,GAAmBjD,EAAAI,OAAAC,aAAD6B,MAA2BlC,EAAAI,OAAAG,WAA3B2B,MAAmDlC,EAAAI,OAAA6B,aAAzEC,cAEIpL,EAAAoM,WAAD1N,QAAwBsB,EAA3BqM,UACIC,OAAuB,SAAA1O,UAAGA,IAAIoC,EAAPgD,OAAvB4I,QAA8C,SAAA5I,KAC1C8F,KAAawB,EAAAiC,wBAAAvJ,EAAb6F,MAGD7I,aAAakJ,EAAAI,OAAhBC,eACIT,KAAawB,EAAAiC,wBAAwCrD,EAAAI,OAAAG,WAAxC2B,MAAbvC,MAEAC,KAAawB,EAAAiC,wBAAwCrD,EAAAI,OAAAC,aAAxC6B,MAAbvC,IAGRqD,kDAG2BM,EAAiB3D,gBAEjC7J,EAAAuG,KAAA3H,EAAO,4BADX4O,UAEK,SAAAtE,EAAAlI,EAAA7B,KACJsO,YAAAzM,EAAAwM,WAvJH,m+BCJb,IAAA9D,EAAAhL,EAAA,kBACAsB,EAAAtB,EAAA,gBAEac,EAAAkO,gBAAA,SAAA9D,cAGTC,UACI6D,kEAAW,SAAA1M,OAGHiL,SACOjM,EAAAuG,KAAA3H,EADU,kCAET,SAAAsK,EAAAlI,EAAA7B,KAEJwO,WAAA3M,GAAA,GAAA,KACA4M,wBAIJtF,cACJwB,KAAAmC,GACA3D,cAIJuB,aAnBsBA,EAoBzBI,8BAvBQ,0eCHDpK,yJAAAC,CAAZpB,EAAA,SAEac,EAAAqO,aAAA,oFAILrH,UAAAsH,UAAA/E,MAAA+E,UAAAC,eACIlO,EAAA2G,UAAAsH,UAAAC,eAAwC,SAAAC,EAAA1K,UAC7BuK,EAAAE,eAAAtF,KAAAuF,EAAP1K,MAIRkD,UAAAsH,UAAA/E,MAAA+E,UAAAG,eACIpO,EAAA2G,UAAAsH,UAAAG,eAAwC,SAAAD,UAC7BH,EAAAI,eAAAxF,KAAPuF,MAGRxH,UAAAsH,UAAA/E,MAAA+E,UAAAtJ,eACI3E,EAAA2G,UAAAsH,UAAAtJ,eAAwC,SAAAwJ,UAC7BH,EAAArJ,eAAAiE,KAAPuF,MAGRxH,UAAAsH,UAAA/E,MAAA+E,UAAAI,eACIrO,EAAA2G,UAAAsH,UAAAI,eAAwC,SAAAF,EAAA1K,UAC7BuK,EAAAK,eAAAzF,KAAAuF,EAAP1K,mDAMkBuB,EAAQmJ,EAAUG,EAAW7K,WAEnD8K,EAAgBJ,EAAAK,MAApB,YACI7M,EAAUqD,EAAAsJ,GAAkBC,EAAlBE,QAHiDhL,GAKxD8K,EAAA1O,OAAP,GAAiC,KACzB6O,EAAmBH,EAAvBE,QACIE,EAAeJ,EAAnBE,QACA,MAAIC,IACU/M,EAAAiF,QAAA+H,GAAV,GACG,MAAID,MACG/M,EAAAwH,KAAA,KAAVwF,WAGRhN,yCAGkBqD,EAAQmJ,EAAU1K,UAC7BuK,EAAAY,uBAAA5J,EAAAmJ,EAAA,SAAP1K,0CAGkBuB,EAAQmJ,UACnBH,EAAAY,uBAAA5J,EAAAmJ,EAAP,iDAGkBnJ,EAAQmJ,EAAUxM,OAChCgF,EAAY3B,EAAAN,OAAhByJ,UACIxH,EAAJkI,QACIlN,EACWqD,EAAAJ,OAAPjD,GAEGqM,EAAAI,eAAApJ,EAAPmJ,GAGJxH,yCAGkB3B,EAAQmJ,EAAU1K,OAChCkD,EAAY3B,EAAAN,OAAhByJ,UACIxH,EAAJkI,QACWb,EAAAE,eAAAlJ,EAAAmJ,EAAP1K,GAEJkD,QAtEK,wHCFbmI,OAAAC,KAAAC,GAAAjC,QAAA,SAAAtG,2EAAA,0BAAAA,4BACAqI,OAAAC,KAAAE,GAAAlC,QAAA,SAAAtG,2EAAA,0BAAAA,gCACAqI,OAAAC,KAAAG,GAAAnC,QAAA,SAAAtG,2EAAA,0BAAAA,4BACAqI,OAAAC,KAAAI,GAAApC,QAAA,SAAAtG,2EAAA,0BAAAA,2BACAqI,OAAAC,KAAAK,GAAArC,QAAA,SAAAtG,2EAAA,0BAAAA,4BACAqI,OAAAC,KAAAM,GAAAtC,QAAA,SAAAtG,2EAAA,0BAAAA,4BACAqI,OAAAC,KAAAO,GAAAvC,QAAA,SAAAtG,2EAAA,0BAAAA,gCACAqI,OAAAC,KAAAQ,GAAAxC,QAAA,SAAAtG,2EAAA,0BAAAA,kCACAqI,OAAAC,KAAAS,GAAAzC,QAAA,SAAAtG,2EAAA,0BAAAA,qQCRA1G,EAAAJ,SACA8P,aACAC,MACAjD,gBAAA,iCACAC,cAAA,2BACA3B,QAAA,mBACA4E,MAAA,WACAzE,eAAA,yBAEAxK,MACAkP,KAAA,WACAC,IAAA,eACAF,MAAA,WACAG,OAAA,UACArD,gBAAA,iCACAC,cAAA,2BACAC,gBAAA,wBACAoD,SACAC,SAAA,0BACAC,OAAA,oBACAC,SAAA,iBAEAC,cAAA,kBACAC,KAAA,kBACAC,OAAA,qBAEAC,YAAA,qBAEAC,MACArG,mBAAA,iCACAC,iBAAA,4BAEA5E,MACAuK,OAAA,YAGAU,YACAC,eAAA,0CACAC,yBAAA,wDACAC,mBAAA,oDACAC,cAAA,6CAEAC,OACAC,cAAA,4BACAC,aAAA,2BAEA/P,SACAN,MACAsQ,QACAC,QAAA,wBACAC,MAAA,YAEAC,kBACAF,QAAA,oCACAC,MAAA,wBAEAE,mBAAA,sBAEAb,MACAS,QACAC,QAAA,mCACAC,MAAA,uBAEAG,YAAA,4DC/DAtR,EAAAJ,SACA8P,aACAC,MACAjD,gBAAA,oBACAC,cAAA,kBACA3B,QAAA,WACA4E,MAAA,QACAzE,eAAA,oBAEAxK,MACAkP,KAAA,OACAC,IAAA,MACAF,MAAA,QACAG,OAAA,SACArD,gBAAA,oBACAC,cAAA,kBACAC,gBAAA,oBACAoD,SACAC,SAAA,mBACAC,OAAA,iBACAC,SAAA,oBAEAC,cAAA,iBACAC,KAAA,eACAC,OAAA,iBACAC,YAAA,gBAEAC,MACArG,mBAAA,uBACAC,iBAAA,sBAEA5E,MACAuK,OAAA,WAGAU,YACAC,eAAA,qCACAC,yBAAA,mCACAC,mBAAA,0CACAC,cAAA,sCAEAC,OACAC,cAAA,2BACAC,aAAA,2BAEA/P,SACAN,MACAsQ,QACAC,QAAA,oBACAC,MAAA,YAEAC,kBACAF,QAAA,+BACAC,MAAA,uBAEAE,mBAAA,wBAEAb,MACAS,QACAC,QAAA,+BACAC,MAAA,uBAEAG,YAAA,qDC9DAtR,EAAAJ,SACA8P,aACAC,MACAjD,gBAAA,2BACAC,cAAA,yBACA3B,QAAA,mBACA4E,MAAA,SACAzE,eAAA,+BAEAxK,MACAkP,KAAA,QACAC,IAAA,SACAF,MAAA,SACAG,OAAA,UACArD,gBAAA,2BACAC,cAAA,yBACAC,gBAAA,4BACAoD,SACAC,SAAA,yBACAC,OAAA,uBACAC,SAAA,2BAEAC,cAAA,qCACAC,KAAA,mBACAC,OAAA,2BACAC,YAAA,uBAEAC,MACArG,mBAAA,gCACAC,iBAAA,+BAEA5E,MACAuK,OAAA,YAGAU,YACAC,eAAA,0CACAC,yBAAA,gDACAC,mBAAA,6CACAC,cAAA,2CAEAC,OACAC,cAAA,iCACAC,aAAA,+BAEA/P,SACAN,MACAsQ,QACAC,QAAA,sBACAC,MAAA,YAEAC,kBACAF,QAAA,6BACAC,MAAA,oBAEAE,mBAAA,wBAEAb,MACAS,QACAC,QAAA,iCACAC,MAAA,uBAEAG,YAAA,qqBC9DAxS,EAAA,YACYyS,EAAArR,EAAZpB,EAAA,cACY0S,EAAAtR,EAAZpB,EAAA,cACY2S,EAAAvR,EAAZpB,EAAA,cACY4S,EAAAxR,EAAZpB,EAAA,cACY6S,EAAAzR,EAAZpB,EAAA,cAEac,EAAA+G,KAAA,8EAKGiL,KACRC,SAAAD,MACIE,mBAAYP,mBAAAC,mBAAAC,mBAAAC,mBAAhBC,MAiBAI,UAAAC,EAAAd,QAAiBe,oBAAuBL,cAAA,eAAvBE,GAId,SAAAI,EAAAlT,gCAIE0H,EAAKyL,UACHxL,EAAAoL,UAAA/S,EAAA0H,EAAPyL,SAjCK,uHCPbnS,EAAAJ,SACA8P,aACAC,MACAjD,gBAAA,gCACAC,cAAA,+BACA3B,QAAA,iBACA4E,MAAA,UACAzE,eAAA,0BAEAxK,MACAkP,KAAA,QACAC,IAAA,SACAF,MAAA,UACAG,OAAA,WACArD,gBAAA,gCACAC,cAAA,+BACAC,gBAAA,6BACAoD,SACAC,SAAA,qBACAC,OAAA,mBACAC,SAAA,sBAEAC,cAAA,yBACAC,KAAA,qBACAC,OAAA,2BACAC,YAAA,wBAEAC,MACArG,mBAAA,4BACAC,iBAAA,4BAEA5E,MACAuK,OAAA,aAGAU,YACAC,eAAA,gCACAC,yBAAA,4CACAC,mBAAA,6CACAC,cAAA,wCAEAC,OACAC,cAAA,kCACAC,aAAA,gCAEA/P,SACAN,MACAsQ,QACAC,QAAA,mBACAC,MAAA,YAEAC,kBACAF,QAAA,6BACAC,MAAA,sBAEAE,mBAAA,2BAEAb,MACAS,QACAC,QAAA,8BACAC,MAAA,uBAEAG,YAAA,qDC9DAtR,EAAAJ,SAEA8P,aACAC,MACAjD,gBAAA,wBACAC,cAAA,qBACA3B,QAAA,cACA4E,MAAA,QACAzE,eAAA,2BAEAxK,MACAkP,KAAA,SACAC,IAAA,SACAF,MAAA,QACAG,OAAA,OACArD,gBAAA,wBACAC,cAAA,qBACAC,gBAAA,sBACAoD,SACAC,SAAA,uBACAC,OAAA,oBACAC,SAAA,sBAEAC,cAAA,oBACAC,KAAA,iBACAC,OAAA,mBACAC,YAAA,sBAEAC,MACArG,mBAAA,6BACAC,iBAAA,2BAEA5E,MACAuK,OAAA,SAIAU,YACAC,eAAA,uDACAC,yBAAA,yCACAC,mBAAA,yDACAC,cAAA,+CAEAC,OACAC,cAAA,wBACAC,aAAA,wBAEA/P,SACAN,MACAsQ,QACAC,QAAA,qBACAC,MAAA,YAEAC,kBACAF,QAAA,iCACAC,MAAA,wBAEAE,mBAAA,8BAEAb,MACAS,QACAC,QAAA,gCACAC,MAAA,uBAEAG,YAAA,oNC7DAvC,OAAAC,KAAAoD,GAAApF,QAAA,SAAAtG,2EAAA,0BAAAA,+BACAqI,OAAAC,KAAAqD,GAAArF,QAAA,SAAAtG,2EAAA,0BAAAA,+BACAqI,OAAAC,KAAA7O,GAAA6M,QAAA,SAAAtG,2EAAA,0BAAAA,6BACAqI,OAAAC,KAAAsD,GAAAtF,QAAA,SAAAtG,2EAAA,0BAAAA,QANA,IAAA6L,EAAAzT,EAAA,mBAOAiQ,OAAAC,KAAAuD,GAAAvF,QAAA,SAAAtG,2EAAA,0BAAAA,+FACQwK,WAPRqB,EAAAtE,aAAAuE,2lBCDAnS,EAAAvB,EAAA,YACAwL,EAAAxL,EAAA,YACYmB,yJAAAC,CAAZpB,EAAA,aACAA,EAAA,yBACAA,EAAA,uBACAuT,EAAAvT,EAAA,gBAGac,EAAA6S,OAAA,sBA2BTxI,EAAA9D,EAAAuM,UAAuCD,QArBvCE,2BACgB1S,EADG2S,sBAAA1B,mBAAAA,cASnB2B,4BAEAC,wBAAgB,SAAA,WAAA,QAMhBC,WAAa,QACbC,yBACAC,eAAiB,SAAA3T,EAAA4T,UAAU5T,EAAA2F,SAAaiO,EAAbjO,OAAA,EAAV,UAEsBkO,uBACnClJ,aAAAA,OACA9D,KAAAA,OACAuM,OAAAA,2CAIG/R,MACAA,GAAQA,EAAX8M,WACIA,QAAAD,WAAA4F,KAA6B,SAAA9T,EAAA4T,UAAO5T,EAAA+T,UAAAC,SAAAxQ,EAAyBoQ,EAAAG,UAAAC,SAAhCxQ,KAE7B+F,KAAJ0K,wBACW1K,KAAA2K,WAAgB3K,KAAA6J,OAAhBtO,MAAP,GAEJzD,OACI8S,qBAAA9S,QAEAsJ,aAAAyJ,QAAA,mDAKG7K,KAAA6J,OAAAtO,OAAqBqO,EAA5BkB,+DAGgB1O,OAChBA,SACW,IAAIqF,EAAAI,OAAJW,MAAgBxC,KAAhB+K,cAAoC/K,KAA3CgL,mBAEA/S,EAAImE,EAAAqO,SAAAxS,EAAoB+H,KAAA6J,OAA5BoB,UACIhR,EAAImC,EAAAqO,SAARxQ,SACGmC,EAAAuI,WAAH1N,WACQmF,EAAAuI,WAAkBvI,EAAAuI,WAAA1N,OAAlB,GAAAuT,UAAAC,SAAAxQ,EAAJ,GAGG,IAAIwH,EAAAI,OAAJW,MAAAvK,EAAPgC,mDAGoB0N,OAEhB7N,EAAI6N,EAAAuD,YAAR,UAEO,IAAIzJ,EAAAI,OAAJW,MAAgB1I,EAAhB,GAAsBA,EAA7B,iDAGiBhC,OAAMqT,IAAA3P,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,KAAAA,UAAA,GAEnBuE,EAAJC,OACAyK,SAAAxS,EAAkBmD,KAAAkE,IAASU,KAAA+K,YAATjT,GAAiCA,EAAA2S,SAAnDxS,KACAwS,SAAAxQ,EAAkBmB,KAAAkE,IAASU,KAAAgL,YAATlT,GAAiCA,EAAA2S,SAAnDxQ,QAGAmR,eAAsBpL,KAAA1C,KAAA+N,MAAtBC,aACAF,eAAAb,KAAyB,SAAA9T,EAAA4T,UAAO5T,EAAAgU,SAAAxS,EAAeoS,EAAAI,SAAtBxS,YAsBzBsT,EALIC,EAAQxL,KAAA6J,OAAA4B,SAAZ,EACIC,EAAQ1L,KAAA6J,OAAA4B,SAAZ,GAGIE,GAAJ,EAEIC,EAAc,IAAInK,EAAAI,OAAJW,MAAgB1K,EAAlC2S,UACMc,WAtBNzT,EAAA2S,kBACWoB,KAAW9L,EAAXqL,eAAgC,SAAAhV,MAChC0B,GAAH1B,SACI,MAGAiJ,EAASU,EAAA8J,OAAA4B,SAAb,EACIxT,EAAI7B,EAAAqU,SAARxS,EACIgC,EAAI7D,EAAAqU,SAARxQ,SAEQwQ,EAAAxS,EAAAoH,GAAApH,GAA4BwS,EAAAxS,EAAAoH,GAA5BpH,GACDwS,EAAAxQ,EAAAoF,GADCpF,GAC2BwQ,EAAAxQ,EAAAoF,GADnCpF,IAYa6R,CAAAhU,EAArB8T,OACI,EACiB9T,EAAA8M,SAAgB2G,EAAhB3G,SAAwC9M,EAAA8M,UAAe2G,EAAxE3G,UAEIjC,KATR,EACA,MAUQA,KAAA6I,EAAAE,GAGRC,MACII,OAAYH,EAAZ3T,EAA0B2T,EAA1B3R,GAAA,GACAkR,QACI/J,aAAAyJ,QAAA,qDAMRhB,OAAAtO,KAAmBqO,EAAnBkB,wBACAkB,2EAKWC,EAAMzT,OAEbuH,EAAJC,KACIyL,EAAWzL,KAAA6J,OAAf4B,cACAS,WAAA9U,EAAkB+U,SAAA5Q,KAAiB,SAAAhD,UAAIwH,EAAA+J,iBAAsBvR,EAA1BgD,QAAjB6Q,KACR,SAAA7T,UAAGwH,EAAAuK,eAAoB/R,EAApB8T,KAA6B7U,EAAAmG,MAAA9B,IAAUkE,EAAVoK,iBAAiC5R,EAAAgD,KAAA,KAAYwE,EAAA8J,OAAZ4B,SAAjC,KAA7B,IAAH,OAEVa,KACU,SAAA/T,OACE0T,EAAO7U,EAAA0E,OAAXkE,MACWiM,EAAA1L,KAAX,QAEIA,KAAA,IAAeR,EAAfmM,gBAEAE,EAAO5U,EAAAmG,MAAA9B,IAAUkE,EAAVoK,iBAAiC5R,EAAAgD,KAAA,KAAYwE,EAAA8J,OAAZ4B,SAA5C,UACAW,EAAS,KACDG,EAAMN,EAAAnU,OAAV0U,UACI9O,EAAQtC,KAAAqR,IAAShB,EAAWc,EAApB3U,MAA+B6T,EAAWc,EAAtDvN,UACOtB,EAAAA,GAAiBqC,EAAAuK,eAAoB/R,EAApB8T,MAAxB,YACAK,IAAU3M,EAAVoK,iBAAiC5R,EAAAgD,KAAA,KAAYwE,EAAA8J,OAAZ4B,SAAjC,KAAAW,GAEJ5T,IACYyT,EAARzT,eAGA8R,eAAoB/R,EAApB8T,KAAAD,IAEJ7L,KAAA,IAAeR,EAAfmM,YACA1T,MACI8R,eAAoB/R,EAApB8T,KAAAD,+CAKErO,UACPA,EAAAwC,KAAA,IAAA,GAAAA,KAAA,KAESP,KAAA6J,OAAD4B,SAAA,EAFf,8CAKe1N,UACR6L,EAAA+C,mBAAA5O,GAAAwC,KAAA,IAAA,GAAAA,KAAA,IAEQP,KAAA6J,OAAA4B,SAAA,EAFR,GAAAlL,KAAA,cAAP,+DAMyBxC,OACrB9F,EAAI+H,KAAA6J,OAAA4B,SAAA,EAAR,EACI1L,EAAJC,cACAO,KAAA,IAAAtI,GAAAsI,KAAA,IAEe,SAAAhI,OACHqU,EAAW1N,SAASsK,EAAA/R,SAAAoV,YAAxB7M,OACI8M,EAAQvU,EAAAwU,aAAZ,2BACIvV,EAAAmG,MAASqP,QAAAF,GAAAA,EAAuBjI,OAAa,SAAA+D,eAAAnN,IAAImN,IAAxC3R,OAAb,GACA,GACY+I,KAAAwM,UAADxN,OAAA,EAA2B4N,EAAlC,GAEIxR,KAAAkE,IAAA,EAAY,IAAKS,EAAA8J,OAAL4B,SAApBmB,OAGRvM,UAAA,SAAAE,KAAA,IAAAtI,GACA8F,yDAK2BA,OACvBgC,EAAJC,cAEO2M,mBAAA5O,GAAAwC,KAAA,IACQP,KAAA6J,OAAA4B,SAAA,EADR,GAAAlL,KAAA,IAEQ,SAAAhI,OACHqU,EAAW1N,SAASsK,EAAA/R,SAAAoV,YAAxB7M,OACIiN,EAAoB1U,EAAAwU,aAAxB,2BACIvV,EAAAmG,MAA0BqP,QAAAC,GAAAA,EAAmCpI,OAAyB,SAAA+D,eAAAnN,IAAImN,IAAhE3R,OAA9B,GACA,EAEI,GAAO2V,EAGJxR,KAAAkE,IAAA,EAAY,IAAKS,EAAA8J,OAAL4B,SAAnBmB,mDAMU7O,UACXA,EAAAwC,KAAA,IACQP,KAAA6J,OAAA4B,SAAA,EADR,GAAAlL,KAAA,KAEUP,KAAA6J,OAAF4B,SAFR,GAAAlL,KAAA,oBAAA,WAAAA,KAAA,cAAP,2DAOqBxC,UAEdA,EAAAwC,KAAA,IACQP,KAAA6J,OAAA4B,SAAA,EADR,GAAAlL,KAAA,IAAA,GAAAA,KAAA,oBAAP,6CAMMoH,OACFuF,EAAA9V,EAAO8V,OAAAjV,EACJ,SAAAM,UAAIA,EAAJ,KADI0B,EAEJ,SAAA1B,UAAIA,EAAJ,KAIHkE,EAAakL,EAAjBlL,WACI+N,EAAY7C,EAAhB6C,UAEI2C,EAAK3C,EAAAC,SAAAxS,EAAuBwE,EAAAgO,SAAhCxS,EAGImV,GAFK5C,EAAAC,SAAAxQ,EAAuBwC,EAAAgO,SAAhCxQ,EAEWkT,GAAA,EAAA,GAAX,GAEIE,EAAoBjS,KAAAqR,IAASU,EAAT,EAAenN,KAAA6J,OAAA4B,SAAA,EAAvC,IACI6B,EAAalS,KAAAqR,IAASzM,KAAA6J,OAAT0D,kBAAwCnS,KAAAkE,IAAS6N,EAAA,EAATE,EAAzD,IAEIG,GAAU/Q,EAAAgO,SAAAxS,EAAuB+H,KAAA6J,OAAA4B,SAAvB,EAAD,EAAoDhP,EAAAgO,SAAjExQ,GACIwT,GAAUrS,KAAAkE,IAAS7C,EAAAgO,SAAAxS,EAAToV,EAAkDG,EAAnD,IAA+D/Q,EAAAgO,SAA5ExQ,GACIyT,GAAUjR,EAAAgO,SAAAxS,EAAAoV,EAADC,EAAqD9C,EAAAC,SAAlExQ,GACI0T,GAAUnD,EAAAC,SAAAxS,EAAwBmV,EAAMhS,KAAAkE,IAAA,EAAYlE,KAAAqR,IAASzM,KAAA6J,OAAA4B,SAAA,EAAT,EAAmC0B,EAA9E,IAAwF3C,EAAAC,SAArGxQ,YAIAiR,aAAmBsC,EAAAC,EAAAC,EAAnBC,GACOT,EAAKvF,EAAZuD,wDAGenN,YACf4O,mBAAA5O,GAAAwC,KAAA,IACe,SAAAhI,UAAGA,EAAA2S,YAAA,GAAA,GAAH,IADf3K,KAAA,IAEe,SAAAhI,UAAGA,EAAA2S,YAAA,GAAA,GAAH,MAEf7K,UAAA,SAAAE,KAAA,IAAuC,SAAAhI,UAC5BnB,EAAA0E,OAAUkE,KAAVvD,YAAAmR,QAAA1C,YAAA,GAAA,GAAP,IAEJnN,4CAIcA,YACPwC,KAAA,YACgB,SAAAhI,SAAG,cAAcA,EAAA2S,YAAA,GAAA,GAAd,GAAA,KAA4C3S,EAAA2S,YAAA,GAAA,GAA5C,GAAH,sDAMHnN,YACb4O,mBAAA5O,GAAAwC,KAAA,IACQ,SAAAhI,OACHsV,EAAM7N,KAAVhI,wBACIyU,EAAMlU,EAAA2S,YAAA,GAAA,GAAA,EAA0BlL,KAAA8N,gBAAAC,WAAA,GAA1B/V,wBAAA,EAAV6V,SACOzS,KAAAkE,IAAAmN,EAAclU,EAAA2S,YAAA,GAAA,GAArB,KAJD3K,KAAA,IAMQ,SAAAhI,UAAGA,EAAA2S,YAAA,GAAA,GAAH,8DAIVlL,KAAA6J,OAAA4B,SAAP,uCAIUlT,OACJwH,EAAJC,YACGzH,GAAKA,EAARqM,QACWrM,EAAAqM,QAAA6F,SAAAxS,EAAuB8H,EAA9BiO,2BAEGjO,EAAA8J,OAAA4B,SAAP,sCAGQlT,UACDyH,KAAA6J,OAAA4B,SAAP,sCAGQlT,OACJwH,EAAJC,YAEGzH,GAAKA,EAAAoM,WAAR1N,SACWwV,IAAOlU,EAAPoM,WAAqB,SAAAzO,UAAIA,EAAAsU,UAADyD,QAAH,QAA0B/X,EAAAsU,UAAAC,SAAvBxS,IAAyD8H,EAAxFiO,2BAEJ,6CAGSpW,EAAOsW,OACZnO,EAAJC,KACGA,KAAA6J,OAAAoB,YAAHrT,IAGAsW,QACI5Q,KAAA6Q,2BAEmBpO,EAAA8J,OAFCoB,kBAIR,SAAA3N,KACJ8Q,aAAkB9Q,EAAlB2N,WAAA,WAEI,SAAA3N,KACJ8Q,aAAAxW,GAAA,WAKZiS,OAAAoB,UAAArT,OACAyW,gDAGUC,EAAYJ,OAClBnO,EAAJC,KACGA,KAAA6J,OAAAyE,aAAHA,IAGAJ,QACI5Q,KAAA6Q,4BAEoBpO,EAAA8J,OAFAyE,mBAIR,SAAAhR,KACJiR,cAAmBjR,EAAnBgR,YAAA,WAEI,SAAAhR,KACJiR,cAAAD,GAAA,WAKZzE,OAAAyE,WAAAA,OACAD,8CAGQ5C,EAAUyC,OACdnO,EAAJC,KACGA,KAAA6J,OAAA4B,WAAHA,IAGAyC,QACI5Q,KAAA6Q,0BAEkBpO,EAAA8J,OAFE4B,iBAIR,SAAAnO,KACJkR,YAAiBlR,EAAjBmO,UAAA,WAEI,SAAAnO,KACJkR,YAAA/C,GAAA,WAKZ5B,OAAA4B,SAAAA,OACA4C,SACGrO,KAAH0K,wBACI+D,yBAA8B1O,EAAAzC,KAA9BoR,iBACAtN,aAAAyJ,QAAA,kDAIajT,EAAOsW,OACpBnO,EAAJC,KACGA,KAAA6J,OAAA0D,oBAAH3V,IAGAsW,QACI5Q,KAAA6Q,mCAE2BpO,EAAA8J,OAFP0D,0BAIR,SAAAjQ,KACJqR,qBAA0BrR,EAA1BiQ,mBAAA,WAEI,SAAAjQ,KACJqR,qBAAA/W,GAAA,WAKZiS,OAAA0D,kBAAA3V,OACAwJ,aAAAyJ,QAAA,uCAGOtP,EAAM2S,OACTnO,EAAJC,QAIAkO,QACI5Q,KAAA6Q,2BACS5S,gBAEcwE,EAAA8J,OAHHtO,aAKR,SAAA+B,KACJuM,OAAAtO,KAAmB+B,EAAnBsR,gBACA5C,4CAEI,SAAA1O,KACJqN,WAAgBrN,EAAhBuR,WAAA,WAIZhF,OAAAtO,KAAAA,EACIyE,KAAA1C,KAAA+N,MAAJpU,YAKI6X,EAAe/O,EAAnBiL,0BACA1N,KAAAoR,WAAAvK,QAA6B,SAAA9N,OACrB0Y,EAAA3X,EAAO4X,UAAA3Y,EAAgB,SAAAkC,YAChBoM,WAAAE,OAAoB,SAAA3O,UAAIA,EAAJ+X,UAApBgB,IAAuC,SAAA/Y,UAAGA,EAAHsU,gBAIlDD,KAAU,SAAA9T,EAAA4T,UAAO5T,EAAA6G,KAAAmN,SAAAxQ,EAAoBoQ,EAAA/M,KAAAmN,SAA3BxQ,QAGViV,KACA,YAAG3T,EACUnE,EAAT+X,UAES/X,EAATgY,QAEJ3D,UAAiB1L,EAAA8J,OAADyE,WAAyBvO,EAAA8J,OAAzCoB,cACAoE,WAAkBtP,EAAlBqK,kBAEA2E,OACIO,EAAJ,YACAhD,KAAU,SAAA/T,KACC6C,KAAAqR,IAAA6C,EAAe/W,EAAtBN,SAGA+B,EAAK+U,EAAA9W,EAAAqX,EAATR,EACI/U,EAAKgG,EAATgL,cACIwE,EAAJ,IACAjD,KAAU,SAAA/T,KACN+E,KAAAmN,SAAAxS,EAAoBM,EAAA0B,EAApBF,IACAuD,KAAAmN,SAAAxQ,EAAoB1B,EAAAN,EAApB+B,IAEOoB,KAAAkE,IAAAiQ,EAAehX,EAAA+E,KAAAmN,SAAtBxQ,OAGWsV,EAAOxP,EAAA8J,OAAP4B,SAA4B1L,EAA3CmK,kBAKJ9I,aAAAyJ,QAAA,QAGAmB,oCACAhM,UAhDIgM,qFAmDiBX,OACjBtL,EAAJC,KAGIhG,EAFA5C,EAAOqV,IAAApB,EAAc,SAAAjV,UAAGA,EAAAqU,SAAHxQ,IACd8F,EAAXiL,cAIIjR,EADA3C,EAAOqV,IAAApB,EAAc,SAAAjV,UAAGA,EAAAqU,SAAHxS,IACT8H,EAAhBgL,eAEG/Q,EAAA,GAASD,EAAZ,MACIoK,QAAc,SAAA/N,UAAGA,EAAAuM,MAAA5I,GAAHC,uCAIZqR,EAAOtR,EAAIC,EAAIwV,OACjBzP,EAAJC,KACIyP,EAAQ1P,EAAA8J,OAAZ6F,qBACAD,IACO1V,EAAH,IACIwQ,KAAW,SAAA9T,EAAA4T,UAAO5T,EAAAgU,SAAAxS,EAAaoS,EAAAI,SAApBxS,MAEXsS,KAAW,SAAA9T,EAAA4T,UAAOA,EAAAI,SAAAxS,EAAaxB,EAAAgU,SAApBxS,SAKfqX,EAAAlY,EAAOqV,IAAApB,EAAc,SAAA9S,UAAGA,EAAAkS,SAAHxQ,IACtBqV,EAAAtV,EAAY+F,EAAfiL,kBACSjL,EAAAiL,cAALsE,KAGJnL,QAAc,SAAA5L,MACVkX,EAAS,GACLE,mBAAApX,OACIqX,EAAO7P,EAAAgL,YAAXxS,GACIsX,EAAO9P,EAAA+P,YAAXvX,KAEAkS,SAAAxS,EAAemD,KAAAqR,IAASrR,KAAAkE,IAAS/G,EAAAkS,SAAAxS,EAAT8B,EAAT6V,GAAfC,KACApF,SAAAxQ,GAAAD,SAEAyQ,SAAAxS,GAAA8B,IACA0Q,SAAAxQ,GAAAD,QAMJ+V,EAAUP,GAASzP,EAAA8J,OAAT6F,sBAA8CF,EAAA/E,SAAAxS,IAAqBuX,EAAAQ,UAAjF/X,IAEAkM,QAAc,SAAA5L,GACVwX,MACItF,SAAAxS,EAAeM,EAAAyX,UAAf/X,KAEJmJ,aAAA6O,mBAAA1X,uEAWJyH,UAAAgK,oBAAA7F,QAAiC,SAAA+L,UAAGA,EAAE1O,EAAAqI,OAALtO,qDALXzD,KACtBkY,UAAiB,IAAIvO,EAAAI,OAAJW,MAAgB1K,EAAjC2S,qDAOsB1M,UAQnByL,EAAA/R,SAAA0Y,SAAkBpS,EAArBjG,QACIiG,KAIJuO,KAAe,WACFtM,KAAAwM,UAATxN,SACAlD,OAAAkE,MAAAO,KAAA,KAAA,YAGJxC,SA3jBK,IAYF+M,mBAAqB,kkBCpBhCtB,EAAAvT,EAAA,eACYmB,yJAAAC,CAAZpB,EAAA,SACAgL,EAAAhL,EAAA,+BAEac,EAAAqZ,gBAAA,sBASThP,EAAA9D,UACI8S,QAAAhP,aAAAA,OACA9D,KAAAA,MAEIyC,EAAJC,UACAqQ,KAAAjZ,EAAYiZ,OAAAC,QACC,SAAA/X,MACL,MAAGA,WAEQK,MADCX,IAEDW,MAFPqB,OAKA9D,EAAIiB,EAAA0E,OAARkE,eAEO7J,EAAAoK,KAAA,KAAciJ,EAAA/R,SAAA8Y,eAAwBpa,EAAAoK,KAAxB,cADd,KAEApK,EAAAoK,KAAA,KAAciJ,EAAA/R,SAAA8Y,eAAwBpa,EAAAoK,KAAxB,cAFrB,MATIjI,GAAA,QAcK,SAAAC,KACTiY,YAAAxZ,KAAAgJ,KAAAzH,EAAAwH,KAfIzH,GAAA,OAiBI,SAAAC,KACRkY,OAAAzZ,KAAAgJ,KAAAzH,EAAAwH,KAlBIzH,GAAA,MAoBG,SAAAC,KACPmY,UAAA1Z,KAAAgJ,KAAAzH,EAAAwH,mDAKAxH,EAAEwH,MACPA,EAAH4Q,WAIC,SAHGA,YAAA,SACAC,aAAA,KAGJA,aAAA,gBAGAC,WACI/Y,EAAOV,EAAA0E,OAAXkE,MACIlI,EAAAkG,QAAJ,eACIoD,aAAAmB,mBAGJnB,aAAA4B,WAAAzK,KACAyF,QAAA,qBAAA,KACA8S,cAAqB/Q,EAAAqB,aAAA2P,kBAArB,KACAC,cAAqB5Z,EAArBwB,QACAqY,eAAA,iCAGGC,EAAanR,QACbA,EAAH6Q,cAIA,GAAG7Q,EAAAkR,kBACC3T,KAAA6Q,cAEJ8C,iBACGlR,EAAA+Q,cAAA7Z,OAAA,GAA+B8I,EAAAkR,eAAA,GAAlC,SAIIlX,EAAK3C,EAAAwB,MAAAX,EAAa8H,EAAAiR,cAAtB/Y,EACI+B,EAAK5C,EAAAwB,MAAAqB,EAAY8F,EAAAiR,cAArB/W,IACAmH,aAAA8N,OAAAiC,UAAmCpR,EAAnC+Q,cAAA/W,EAAAC,EAAAkX,KAGAF,cAAqB5Z,EAArBwB,QACAwI,aAAAgQ,gBACAhQ,aAAAiQ,8DAGMH,EAAanR,GACR3I,EAAA0E,OAAAkE,MAAAhC,QAAA,YAAX,GACG+B,EAAH6Q,eAGAxP,aAAA8N,OAAAb,OAAA6C,6CAIAP,YAAA,QA9FK,kJCJb,IACIW,EAAKlW,KAATmW,mBAUU,SAAAC,EAAApF,OAEE/V,EAAI+E,KAAAC,KAAU+Q,EAAlBkF,GACIG,EAAM,cAAVpb,IAEA0V,QAAA1V,EAAA,KAGAqb,eAAArb,GAAAob,GAAAA,GAAApb,EAAA,GAAAA,KAEAqb,cAAAD,GAAApb,EAAAA,GAAAob,EAAApb,EAAA,KAEAqb,cAAArb,EAAAob,EAAAA,EAAApb,EAAA,EAAAA,KAEAqb,eAAAD,EAAApb,GAAAA,EAAAob,GAAApb,EAAA,4FCzBI+E,KAAAC,KAAZ,mBAGU,SAAAmW,EAAApF,OACE/V,EAAI+E,KAAAC,KAAU+Q,EAAOhR,KAAzBmW,MACAxF,QAAA1V,EAAA,KACAsb,OAAe,GAAftb,GAAAA,KACAsb,OAAe,GAAftb,EAAAA,KACAub,+cCRRpa,EAAAvB,EAAA,YACAsB,EAAAtB,EAAA,eAEa2F,EAAA7E,EAAA6E,UAAA,6EAIEiW,EAAcC,OACjBC,EAAAva,EAAAmG,MAAWqU,SAAepW,EAAfiW,IAAyCI,SAAanU,KAAAvG,EAAFuG,KAAgBlC,UAAhBA,EAAwCsW,QAAW,SAAA9b,EAAA+b,UAAuBvW,EAAAC,IAAAzF,EAAP+b,cACtIL,IACIA,UAAAA,KAEaA,cAEVC,EAAPD,qCAIavM,EAAU6M,OACnB9b,EAAIiP,EAAR,aACApB,QAAc,SAAArK,UAAIxD,GAAGsF,EAAAyW,UAAoBvY,EAApB,GAA0BA,EAAjC,SACd,uCAGawY,EAAWC,UAChBD,EAAA,SAAAC,EAAR,6CAIgBhX,EAAMiX,OAClBlc,EAAIsF,EAAA6W,qBAAR,gBACAlX,OACO,IAAAA,EAAH,SAEJiX,OACO,IAAHA,GAEJlc,uCAEgBkc,OACZlc,EAAIsF,EAAA6W,qBAAR,gBACAD,OACO,IAAHA,GAEJlc,QAzCK,GAAAsF,EAEFqM,MAAQhS,EAAA,kCAFN2F,EAyBF6W,qBAAuB,uBAzBrB7W,EA4CF8W,mBAEH9W,EAAA+W,UAAoB/W,EAApB6W,uBACI,YAD+C,aAE/C,cAF+C,eAG/C,cAH+C,eAI/C,aAJJ,eAOA7W,EAAA+W,UAAoB/W,EAAAgX,eAApB,UACI,OADiD,cAEjD,eATJ,sBAWAhX,EAAA+W,UAAoB/W,EAAAgX,aAAA,WAAA,WAAA,UAAwDhX,EAAAgX,aAAA,SAAxD,WAAA,SAA8GhX,EAAAgX,aAAA,WAA9G,WAApB,UACI,SADoL,wBAEpL,eAbJ,8BAeAhX,EAAA+W,UAAoB/W,EAAAgX,eAApB,YACI,YADmD,wBAEnD,OAjBJ,sBAmBAhX,EAAA+W,UAAoB/W,EAAAgX,eAApB,aACI,YADoD,yBAEpD,OArBJ,uBAuBAhX,EAAA+W,UAAoB/W,EAAAgX,eAApB,sBACI,OAxBJ,+BA4BAhX,EAAA+W,UAAoB/W,EAAAgX,aAAA,YAApB,UACI,OAD2D,uBAE3D,SA9BJ,0BAgCAhX,EAAA+W,UAAoB/W,EAAAgX,aAAA,WAAA,YAApB,UACI,OAjCJ,iCAqCAhX,EAAA+W,UAAoB/W,EAAAgX,aAAA,UAApB,UACI,OADyD,qBAEzD,SAvCJ,wBAyCAhX,EAAA+W,UAAoB/W,EAAAgX,aAAA,SAAA,YAApB,UACI,OA1CJ,+BA8CAhX,EAAA+W,UAAoB/W,EAAAgX,aAAA,YAApB,UACI,OAD2D,uBAE3D,SAhDJ,0BAkDAhX,EAAA+W,UAAoB/W,EAAAgX,aAAA,WAAA,YAApB,UACI,OAnDJ,iCAqDAhX,EAAA+W,UAAoB/W,EAAAgX,aAAA,YAApB,wBACI,YADyE,kCAEzE,OAvDJ,gCAyDAhX,EAAA+W,UAAoB/W,EAAAgX,aAAA,YAApB,iCACI,OA1DJ,wCA+DAhX,EAAA+W,UAAoB/W,EAAA6W,qBAAA,iCAAgE7W,EAAhE6W,qBAApB,wBACI,YADqI,yBAErI,OAjEJ,uBAqEA7W,EAAA+W,UAAoB/W,EAAAiX,eAApB,UACI,SADiD,gBAEjD,eAvEJ,sBAyEAjX,EAAA+W,UAAoB/W,EAAA6W,qBAApB,uBACI,OA1EJ,iBA4EA7W,EAAA+W,UAAoB/W,EAAAiX,aAAA,WAApB,UACI,SAD0D,wBAE1D,eA9EJ,8BAgFAjX,EAAA+W,UAAoB/W,EAAA6W,qBAApB,+BACI,OAjFJ,yBAoFA7W,EAAA+W,UAAoB/W,EAAAiX,aAAA,YAApB,UACI,SAD2D,yBAE3D,eAtFJ,+BAwFAjX,EAAA+W,UAAoB/W,EAAA6W,qBAApB,gCACI,OAzFJ,0BA4FA7W,EAAA+W,UAAoB/W,EAAAiX,eAApB,YACI,YADmD,wBAEnD,OA9FJ,sBAiGAjX,EAAA+W,UAAoB/W,EAAAiX,eAApB,aACI,YADoD,yBAEpD,OAnGJ,uBAqGAjX,EAAA+W,UAAoB/W,EAAAiX,eAApB,sBACI,OAtGJ,+BAyGAjX,EAAA+W,UAAoB/W,EAAA6W,qBAApB,uCACI,YADoF,mBAEpF,cAFoF,qBAGpF,aAHoF,oBAIpF,OA7GJ,iBA+GA7W,EAAA+W,UAAoB/W,EAAA6W,qBAApB,6CACI,YAD0F,yBAE1F,cAF0F,2BAG1F,aAH0F,0BAI1F,OAJJ,0HChKRtb,EAAAJ,QAAA,4mBCAAyS,EAAAvT,EAAA,eACYmB,yJAAAC,CAAZpB,EAAA,SACAgL,EAAAhL,EAAA,+BAEac,EAAA+b,gBAAA,sBAST1R,EAAA9D,UACIwV,QAAA1R,aAAAA,OACA9D,KAAAA,MAEIyC,EAAJC,UACAqQ,KAAAjZ,EAAYiZ,OAAAC,QACC,SAAA/X,MACL,MAAGA,WAEQK,MADCX,IAEDW,MAFPqB,OAKA9D,EAAIiB,EAAA0E,OAARkE,eAEO7J,EAAAoK,KAAA,KAAciJ,EAAA/R,SAAA8Y,eAAwBpa,EAAAoK,KAAxB,cADd,KAEApK,EAAAoK,KAAA,KAAciJ,EAAA/R,SAAA8Y,eAAwBpa,EAAAoK,KAAxB,cAFrB,MATIjI,GAAA,QAcK,SAAAC,KACTiY,YAAAxZ,KAAAgJ,KAAAzH,EAAAwH,KAfIzH,GAAA,OAiBI,SAAAC,KACRkY,OAAAzZ,KAAAgJ,KAAAzH,EAAAwH,KAlBIzH,GAAA,MAoBG,SAAAC,KACPmY,UAAA1Z,KAAAgJ,KAAAzH,EAAAwH,mDAKAxH,EAAEwH,iBAEV8Q,WACIlU,EAAOvF,EAAA0E,OAAXkE,MACIrD,EAAAqB,QAAJ,eACIoD,aAAAmB,mBAGJnB,aAAA8D,WAAA3M,KACAyF,QAAA,qBAAA,KACA8S,cAAqB/Q,EAAAqB,aAArB2P,qBACAC,cAAqB5Z,EAArBwB,QACAqY,eAAA,iCAGG8B,EAAahT,GAChB,GAAGA,EAAAkR,kBACC3T,KAAA6Q,cAEJ8C,qBAEIlX,EAAK3C,EAAAwB,MAAAX,EAAa8H,EAAAiR,cAAtB/Y,EACI+B,EAAK5C,EAAAwB,MAAAqB,EAAY8F,EAAAiR,cAArB/W,IAEAwQ,SAAA9H,KAAA5I,EAAAC,KACAoH,aAAA4R,mBAAAD,KAEA/B,cAAqB5Z,EAArBwB,QACAwI,aAAAiQ,6DAGMH,EAAanR,KAClBjE,OAAAkE,MAAAhC,QAAA,YAAA,SAxEI,0fCJD5G,yJAAAC,CAAZpB,EAAA,SACAuB,EAAAvB,EAAA,YAEac,EAAAkc,QAAA,+FAEE7b,EAAA0E,OAAA,QAAAC,eAAP,+CAGQpD,OAAMua,EAAA1X,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,GAAAA,UAAA,GAAU,EAAG2X,EAAA3X,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,GAAAA,UAAA,GAAU,GAAI5C,EAAA4C,UAAsB,GAAf/C,EAAA+C,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,GAAAA,UAAA,GAAS,KACrDyD,EAAYgU,EAAAG,eAAA1a,MAAA,UAAhB,KAEAF,aAAAC,SAAA,KAAAC,MAAA,UAAA,OAGAC,KAAAA,KACA0a,eAAAH,EAAAC,EAAAva,GACAH,cACe,aACPoY,QADJpY,gDAMcya,EAAA1X,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,GAAAA,UAAA,GAAU,EAAG2X,EAAA3X,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,GAAAA,UAAA,GAAU,GAAI5C,EAAA4C,UAC7C,KAAQ5C,GAASxB,EAAjBwB,QACAwa,eAAA1a,MAAA,OACoBE,EAAAC,MAADqa,EADnB,MAAAxa,MAAA,MAEmBE,EAAAE,MAADqa,EAFlB,yCAKQ1a,EAAA+C,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,GAAAA,UAAA,GAAW,IACfrF,EAAI8c,EAARG,eACA3a,MACQtC,EAAAqC,aAAAC,SAAJA,MAEJC,MAAA,UAAA,kCAGU4a,EAAQC,EAAUL,EAASC,KACrC7a,GAAA,YAAuB,SAAAC,EAAA7B,OACfiC,EAAJ,KAOI,UANAnB,EAAAmG,MAAA6V,WAAJD,GACWA,EAAAhb,EAAP7B,GAEA6c,SAGA9X,IAAiB9C,GAArB,KAA2CA,IACvC8a,KAAA9a,EAAAua,EAAAC,KAEAtC,KAAA,KAXRvY,GAAA,YAcmB,SAAAC,KACf8a,eAAAH,EAAAC,KAfJ7a,GAAA,WAgBkB,SAAAC,KACdsY,eArDC,2wBCHDzZ,EAAAC,EAAZpB,EAAA,SACAuB,EAAAvB,EAAA,YACAuT,EAAAvT,EAAA,eACAwL,EAAAxL,EAAA,YACAgL,EAAAhL,EAAA,+BACAyd,EAAAzd,EAAA,oCACA0d,EAAA1d,EAAA,oCACA2d,EAAA3d,EAAA,YACA4d,EAAA5d,EAAA,uBACAwT,EAAAxT,EAAA,aACAqB,EAAArB,EAAA,eACA6d,EAAA7d,EAAA,uBACA8d,EAAA9d,EAAA,oCACA+d,EAAA/d,EAAA,oCACYge,EAAA5c,EAAZpB,EAAA,aACAsB,EAAAtB,EAAA,eAGaie,EAAAnd,EAAAmd,mBA2IT,SAAAA,EAAAC,UAAoBD,QA1IpBtc,WAAQ6D,OACRuD,YAASvD,OACT4D,aAAS,SAAA,OAAA,UAAA,SAMT0J,IAAM,UACNmG,aAAQ,gBAAA,yBAAA,aAAA,aAAA,sBAAA,SAQRkF,WAAa,kBACbxH,SAAW,YACXyH,WAAa,cACbC,UAAY,cACZxc,kBAAO,sBAEM,sBAFN,yBAMI,YANJ,0BAUK,YAAA,sBAVL,0BAeO,iBAAA,yBAKI,yBAIN,iBAAA,yBAKM,2BAIL,iBAAA,uBAIK,4BAGF,YAAA,sBAxCT,kBA+CP6P,aAAK,sBAAA,sBAGO,sBAHP,wBAOQ,sBAPR,uBAWM,YAXN,yBAeM,YAAA,sBAfN,iBAsBLc,sBAAc,YAAA,gBAIdzH,gBAAQ,kBAAA,iBAAA,eAAA,sBAKG,UALH,UAURuT,mBAAc,WAAA,kBAAA,iBAAA,eAAA,sBAMH,SANG,UAYdC,UAAU,OACVC,mBAAkB,OAClBC,qBAAoB,OACpBC,YAAW,OACXC,aAAY,OACZC,mBAAkB,OAClBC,KAAI,OAGJC,sBAAwB,SAAA5C,EAAAzb,UAAAyb,QACxB6C,2BAA8B,SAAA7C,UAAAA,QAE9B8C,eAAiB,SAAAnd,UACjBod,eAAiB,SAAAvN,UACjBwN,eAAiB,SAAAxY,UACjByY,mBAAqB,kBAErBtS,oBAAsB,SAAAvM,kBAEtB8e,aAAc,KAAA,WACdC,oBAAsB,EAGlBnB,WACI5X,WAAAyD,KAAAmU,IAMCpd,EAAAwe,aAAA,sBAOTtW,EAAAuW,EAAA3L,UACI0L,QAAAE,UAAA5L,QACAvM,KAAAkY,OACAE,cAAAzW,QACA0W,mDAGM9L,eACNA,OAAc,IAAAqK,EAAdrK,GACG7J,KAAHkP,cACIA,OAAArF,OAAmB7J,KAAA6J,OAAnBqF,aAEJ0G,qBACA5V,yCAKA6V,eACAC,kBACAC,gBACAC,iBACAC,uBAEAL,qBACI5V,KAAA6J,OAAJ2K,gBACI0B,2BACAC,2BACAC,2BACAC,2BACAC,2BACAC,4BAEJ1L,mDAIA8K,KAAU3V,KAAA6J,OAAVd,2DAKAjN,OAAA,QAAAC,eAAA,gCAAApD,KAAsErB,EAAAsE,UAAAC,IAAA,qBAAoCmE,KAA1G6J,SACA7J,+CAIAkP,OAAc,IAAA0E,EAAAhK,OAAA5J,KAAiBA,KAAjB1C,KAA4B0C,KAAA6J,OAA1CqF,2DAIAsH,gBAAuB,IAAA3C,EAAAzD,gBAAApQ,KAA0BA,KAAjD1C,yDAIAmZ,gBAAuB,IAAA3C,EAAAhB,gBAAA9S,KAA0BA,KAAjD1C,2CAGGoZ,EAAAlb,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,IAAAA,UAAA,GAECuE,EAAJC,eACmBD,EAAA8J,OAAD4K,mBAAlBiC,OACAC,0BACAC,gCACAC,aAAAH,GACAA,MACII,eAAsB/W,EAAtBvH,aACAA,YAAA,QAEJue,mBACA3F,mBACA4F,2BACAC,2BACAP,MACIle,WAAmBuH,EAAnB+W,2BAEO,aACPzF,4BADJ,IAIArR,0DAIAZ,gBAAuBoK,EAAA/R,SAAAsH,eAAwBiB,KAAA6J,OAAxB7K,OAA4CgB,KAA5Cf,UAA4De,KAAA6J,OAAnFxK,aACAI,eAAsB+J,EAAA/R,SAAA0H,cAAuBa,KAAA6J,OAAvBjS,MAA0CoI,KAA1Cf,UAA0De,KAAA6J,OAAhFxK,8CAKIU,EAAJC,UACAkX,6BACAxU,IAAW1C,KAAAf,UAAAlD,eAAX,6BACA2G,IAAAnC,KAAA,QAAuBP,KAAvBP,gBAAAc,KAAA,SAA2DP,KAA3DZ,sBAEA+X,UAAiBnX,KAAA0C,IAAA3G,eAAjB,qBACA8a,eAGK7W,KAAA6J,OAALjS,SACIkE,OAAA9C,QAAAV,GAAA,uBACgC,aACxB+Y,6BACAsF,2BAIRS,EAAK,IAAInD,EAAJoD,QAAmBrX,KAAA0C,IAAnB5K,QAAqCwf,YAA9C,WACAC,IAAA,IAAWtD,EAAJuD,mBAAP,aAIAD,IAAA,IAAWtD,EAAJwD,mBAAP,eAIAC,IACApf,GAAA,aAAoB,aAChBqf,mBAEJrf,GAAA,QAAe,qBACFsf,kBAAwB,kBAAI7X,EAAJ8X,eAAxB,WAAT,4CAIKnB,OACL3W,EAAJC,KACIX,EAASW,KAAA6J,OAAbxK,OACIyY,EAAQ9X,KAAZmX,UACAT,MACYoB,EAARtf,mBAGJuf,UAAiB1Y,EAAjBE,KACGS,KAAAgY,cAAmBhY,KAAtBiY,2BACIF,UAAiB7Y,SAASc,KAAAgY,aAAoBhY,KAAA6J,OAAA7I,MAAA3B,OAApBE,IAAT,GAAiES,KAAjEkY,sBACV9c,KAAAkE,IAASU,KAAT+X,UAAyB7Y,SAASc,KAAA6J,OAAA7I,MAAA3B,OADzCG,YAIJe,KAAA,YAAwB,aAAelB,EAAfK,KAAA,IAAmCM,KAAnC+X,UAAxB,KAAAzf,GAAA,MAA2F,kBAAKyH,EAALsR,+DAGrFhS,EAAQ6O,OACVnO,EAAJC,KACAkO,QACI5Q,KAAA6Q,wBAEgB3W,EAAAmG,MAAAwa,MAAYpY,EAAA8J,OAFRxK,gBAIR,SAAA/B,KACJ8a,UAAe9a,EAAf+B,QAAA,WAEI,SAAA/B,KACJ8a,UAAA/Y,GAAA,cAIZ9C,WAAiByD,KAAA6J,OAAjBxK,OAAAA,QACAsX,0BACAE,cAAA,yCAGUwB,MACN7gB,EAAAmG,MAAAC,SAAJya,GAAuC,KAC/B9S,EAAW8S,EAAfC,OAEK9gB,EAAAmG,MAAA4a,WAAAhT,EAAD,MAAqC/N,EAAAmG,MAAA4a,WAAAhT,EAAzC,SACe,IAAXA,QAEJtG,UAAiB7H,EAAA0E,OAAjByJ,QACM8S,EAAHG,cACHvZ,UAAAoZ,OAEApZ,UAAiB7H,EAAA0E,OAAjBuc,0DAKA1M,GAAJ,OACAuL,4BACI7X,EAASW,KAAA6J,OAAbxK,OACIoZ,EAAWzY,KAAA0C,IAAAnC,KAAf,SACImY,EAAY1Y,KAAA0C,IAAAnC,KAAhB,UACIoY,EAAe3Y,KAAAmX,UAAArf,OAAnB0U,UACIoM,EAAcD,EAAA/gB,MAAmB+gB,EAAnB1gB,EAAkCoH,EAAlCK,KAA8CL,EAAhEM,WACAV,UAAAjB,QAAA,kBAA0C4a,GAAa5Y,KAAvDP,gBAEGgZ,MADWrd,KAAAkE,IAAAsZ,EAAsB5Y,KAApCP,sBAEI,OACAiD,IAAAnC,KAAA,QAAAqY,QAEAC,EAAeF,EAAA3Z,OAAoB2Z,EAApB1e,EAAmC+F,KAAnC+X,UAAkD1Y,EAArEG,YAEAP,UAAAjB,QAAA,kBAA0C6a,GAAc7Y,KAAxDZ,iBAEGsZ,MADYtd,KAAAkE,IAAAuZ,EAAuB7Y,KAAtCZ,uBAEI,OACAsD,IAAAnC,KAAA,SAAAsY,IAEJlN,QACImN,8DAOA/Y,EAAJC,KAIIqL,EADiBrL,KAAAmX,UAAApb,eAArB,WACYsE,UAAA,SAAA/C,KAAA0C,KAAuC1C,KAAA+N,MAAAxG,OAAuB,SAAAtM,UAAIA,EAAJ0V,UAAgB,SAAA1V,EAAA7B,UAAQ6B,EAAR8T,QAC1F0M,OAAA9c,aACI+c,EAAA3N,EAAa/K,QAAAtE,OAAA,KAAAuE,KAAA,KACD,SAAAhI,SAAG,QAAQA,EAAX8T,MADC9L,KAAA,QAEE,SAAAhI,UAAGA,EAAAgD,KAAH,eAFFgF,KAAA,YAGM,SAAAhI,SAAG,aAAeA,EAAAkS,SAAfxS,EAAA,KAAqCM,EAAAkS,SAArCxQ,EAAH,QACvB+B,OAAA,YAEIid,EAAaD,EAAAhd,OAAA,QAAAuE,KAAA,QAAjB,SACI2Y,EAAcF,EAAAhd,OAAA,QAAAuE,KAAA,QAAlB,mBACI4Y,EAAiBH,EAAAhd,OAAA,QAAAuE,KAAA,QAAA,mBAAA5D,KAArB,MACIyc,EAAwBJ,EAAAhd,OAAA,QAAAuE,KAAA,QAA5B,qBACI8Y,EAA0BL,EAAAhd,OAAA,QAAAuE,KAAA,QAA9B,wBAEI+Y,EAAaN,EAAAO,MAAjBlO,KACArN,QAAA,UAA8B,SAAAzF,UAAKwH,EAAAyZ,UAALjhB,SAE1BkhB,EAAJH,EACGtZ,KAAHxH,eACkB8gB,EAAd9gB,cACAF,GAAA,MAAsB,kBAAKyH,EAALsR,+BAE1B9Q,KAAA,YACuB,SAAAhI,SAAG,aAAeA,EAAAkS,SAAfxS,EAAA,KAAqCM,EAAAkS,SAArCxQ,EAAH,UAEnBgS,EAAOqN,EAAAxd,OAAX,aACAoT,OAAAwK,eAAAzN,EAAgCjM,KAAhCxH,iBAiBA0W,OAAAyK,kBAAAV,GACiBK,EAAAxd,OAAjB,cACAkC,QAAA,YAAgCgC,KAAA6J,OAAhC8K,gBACIiF,EAAcH,EAAA3d,OAAlB,gBACAwQ,KAAiBtM,KAAjB6Z,sBACA3K,OAAAyK,kBAAAC,GAAArZ,KAAA,cAAA,cAGI6H,EAASkR,EAAAxd,OAAb,eAEIge,EAAA1R,EAAe/H,UAAA,SAAA/C,KAA+B,SAAA/E,OAC1CwhB,EAAOxhB,EAAAwU,aAAX,iCACOC,QAAA+M,GAAAA,EAAsBlV,OAAY,SAAAnO,eAAA+E,IAAG/E,KAA5CqjB,OAEJhB,OAAA9c,aAEI+d,EAAgBF,EAAAxZ,QAAAtE,OAAA,SAAAud,MAApBO,GAEIE,EADJzZ,KAAA,KAEgB,SAAAhI,EAAA7B,UAAOA,EAAA,EAAA,aAAP+E,IAFhB8E,KAAA,IAAA,KAAAvC,QAAA,WAIyB,SAAAzF,UACV,OAAAA,GAAYA,EAAnB,IALRyF,QAAA,YAO0BgC,KAAA6J,OAAA+K,aAA2B5U,KAAA6J,OAPrDiL,KAAAnY,KAQU,SAAApE,EAAA7B,OACEujB,EAAJ1hB,SAEO,OAAA0hB,EAAcC,MAAAD,GAAAA,EAAmBla,EAAA8J,OAAAkL,sBAAAkF,EAAjCvjB,GAAP,UAERyjB,oBAAAH,OAGII,EAAJhS,EACGpI,KAAHxH,eACc4P,EAAV5P,mBAGJ0W,OAAAmL,mBAAAnB,QACAhK,OAAAmL,mBAAAD,OAEI7R,EAAmB+Q,EAAAxd,OAAvB,0BACIwe,EAAA/R,EAAyBlI,UAAA,SAAA/C,KAAyC,SAAA/E,OAC9DwhB,EAAOxhB,EAAAwU,aAAX,mCACOC,QAAA+M,GAAAA,EAAsBlV,OAAY,SAAAnO,eAAA+E,IAAG/E,KAA5CqjB,OAEJhB,OAAA9c,aACIse,EAAAD,EAA0Bha,QAAAtE,OAAA,SAAAud,MAAAe,GAAA/Z,KAAA,KACd,SAAAhI,EAAA7B,UAAOA,EAAA,EAAA,cAAP+E,IADcuC,QAAA,WAEL,SAAAzF,UACV,OAAAA,GAAYA,EAAnB,IAHsByF,QAAA,YAKJgC,KAAA6J,OAAA+K,aAA2B5U,KAAA6J,OALvBiL,KAAAnY,KAMpB,SAAAsd,EAAAvjB,UACK,OAAAujB,EAAcC,MAAAD,GAAAA,EAAmBla,EAAA8J,OAAAkL,sBAAAkF,EAAjCvjB,GAAP,UAGRyjB,oBAAAI,EAAA,wBAEIC,EAAJjS,EACGvI,KAAHxH,eACwB+P,EAApB/P,mBAGJ0W,OAAAuL,6BAAArB,QACAlK,OAAAuL,6BAAAD,OAEIhS,EAAA8Q,EAAqBxd,OAAA,6BAAAa,KACf,SAAApE,OACE0hB,EAAM1hB,EAAAwU,aAAV,6BACO,OAAAkN,EAAcC,MAAAD,GAAAA,EAAmBla,EAAA8J,OAAAmL,2BAAjCiF,GAAP,KAHiBjc,QAAA,YAKCgC,KAAA6J,OAAAgL,mBAAiC7U,KAAA6J,OAL3DiL,eAMA4F,OAAAlS,EAAmCjR,EAAAuG,KAAA3H,EAAnC,wCAGIwkB,EAAJnS,EACGxI,KAAHxH,eAC0BgQ,EAAtBhQ,mBAEJ0W,OAAA0L,+BAAAvB,QACAnK,OAAA0L,+BAAAD,OAGIE,EAAYvB,EAAAxd,OAAhB,0BACAkC,QAAA,YAA+BgC,KAAA6J,OAA/BiL,UACA5F,OAAA4L,sBAAA3B,QACAjK,OAAA4L,sBAAAD,GAEG7a,KAAHwW,mBACIxf,KAAgBgJ,KAAAwW,gBAAhBnG,QAGJ/X,GAAA,cAA6B0H,KAA7B+a,mBACAziB,GAAA,WAA0B0H,KAA1B+a,mBACAzO,KAAgB,SAAA/T,EAAA7B,OACRskB,EAAJhb,KACIoX,EAAK,IAAInD,EAAJoD,QAAT2D,QACAzD,IAAA,IAAWtD,EAAJuD,mBAAP,aAGAlf,GAAA,QAAe,SAAApC,GACX,SAAGA,EAAA+kB,eACCzE,gBAAA0E,eAKL3iB,EAAHgL,OAAA,KACQ4X,EAAA/jB,EAAS0E,OAAAkf,GAAAjf,eAAA,yBAAAY,KAAA,OAAArE,GAAA,0BAEsB,kBAAIyH,EAAAkE,YAAA1L,GAAJ,OAEnC2W,OAAAkM,yBAAAD,aACAT,OAAAS,EAAuB5jB,EAAAuG,KAAA3H,EAAvB,mCAEA2F,OAAAkf,GAAAlf,OAAA,qBAAAG,uDAMQ8B,OAAWsd,EAAA7f,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,GAAAA,UAAA,GAAkB,SAAU8f,EAAA9f,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,GAAAA,UAAA,GAAO,OAC1DuE,EAAJC,eACA0a,OAAA3c,EAA0B,SAAAxF,EAAA7B,UACnBqJ,EAAA8J,OAAAwL,YAAApe,OAAAP,GAAH,OAAuCqJ,EAAA8J,OAAAwL,YAAA3e,GAC5Ba,EAAAuG,KAAA3H,EAAO,WAAAmlB,EAAA,IAAAD,EAAP,UAAuDE,MAAOhjB,EAAR6P,OAAkBoT,OAAQ9kB,EAA1B,EAA+BsG,KAAM+C,EAAA8J,OAAAwL,YAAlG3e,KAEGa,EAAAuG,KAAA3H,EAAO,WAAAmlB,EAAA,IAAAD,EAAP,YAAyDE,MAAOhjB,EAAR6P,OAAkBoT,OAAQzb,EAAA8J,OAAAyL,oBAAA,EAAA,GAA2C5e,EAApI,8CAIQ6B,OACRkjB,EAAQljB,EAAAyE,KAASzE,EAAAyE,KAAA4I,MAAT,WACZ8V,cACIC,EAASvkB,EAAA0E,OAAAkE,MAAAK,UAAA,SAAA/C,KAAbme,KACAnb,QAAAtE,OAAA,SAAAud,MAAAoC,GAAAhf,KAEU,SAAA7F,UAAAA,IAFVyJ,KAAA,KAGgB,SAAAhI,EAAA7B,UAAOA,EAAA,EAAA,cAAP+E,IAHhB8E,KAAA,IAAA,OAMAwY,OAAA9c,2CAGM1D,UACCA,EAAAwU,aAAP,uDAIA/M,KAAID,EAAJC,KACI4b,EAAiB5b,KAAAmX,UAAApb,eAArB,WACGgE,EAAA8J,OAAH6K,uBACIrU,UAAA,KAAApE,aAGA4f,EAAAD,EAAQvb,UAAA,SAAA/C,KAAA0C,KAAuC1C,KAAAue,MAAAhX,OAAuB,SAAA3O,UAAIA,EAAJ+X,UAAgB,SAAA1V,EAAA7B,UAAQ6B,EAAR8T,QAC1F0M,OAAA9c,aACI6f,EAAAD,EAAavb,QAAAtE,OAAA,KAAAuE,KAAA,KACD,SAAAhI,SAAG,QAAQA,EAAX8T,MADC9L,KAAA,QAAjB,UAKAvE,OAAA,YACIid,EAAa6C,EAAAtW,eAAjB,mBACAxJ,OAAA,QAAAuE,KAAA,QAAA,aACI2Y,EAAc4C,EAAA9f,OAAA,QAAAuE,KAAA,QAAlB,UACIwb,EAAmBD,EAAA9f,OAAA,QAAAuE,KAAA,QAAvB,eAGIyb,EAAaF,EAAAvC,MAAjBsC,KAIA7d,QADA,UACqC,SAAAzF,UAAKwH,EAAAyZ,UAALjhB,SAEjC0jB,EAAJD,EACGhc,KAAHxH,eACkBwjB,EAAdxjB,gBAGJsD,OAAA,QAAAyE,KAAA,IACe,SAAAhI,UAAIiJ,EAAA0N,OAAAgN,UAAJ3jB,KADfgI,KAAA,OAAA,QAAAA,KAAA,aAKwB,SAAAhI,SAET,cADMnB,EAAA0E,OAAUkE,KAAVvD,YAAAuB,QAAA,YAAA,YAAgE+B,EAAAyZ,UAAAjhB,GAAA,WAA7E,IACA,QAKRD,GAAA,QAAuB,SAAAC,KACnB4jB,WAAA5jB,GAAA,UAGJ2W,OAAAkN,kBAAAnD,KACAnd,OAAA,cAAAwQ,KAAsCtM,KAAtC6Z,iBACiBmC,EAAAlgB,OAAjB,iBACAkC,QAAA,YAAgCgC,KAAA6J,OAAhC8K,gBACIiF,EAAcqC,EAAAngB,OAAlB,sBACAoT,OAAAkN,kBAAAxC,OAGIxR,EAAS4T,EAAAlgB,OAAb,eAEIge,EAAA1R,EAAe/H,UAAA,SAAA/C,KAA+B,SAAA/E,OAC1CwhB,EAAOxhB,EAAAwU,aAAX,yBACOC,QAAA+M,GAAAA,EAAsBzO,MAAA,EAAclQ,KAAAqR,IAASsN,EAAT9iB,OAAsB8I,EAAA8J,OAApCyL,sBAAArG,IAA0E,SAAAoN,UAAA9jB,KAAvGA,OAEJwgB,OAAA9c,aAEI+d,EAAgBF,EAAAxZ,QAAAtE,OAAA,SAAAud,MAApBO,GAEAE,EADAzZ,KAAA,KAEgB,SAAAhI,EAAA7B,UAAOA,EAAA,EAAA,aAAP+E,IAFhBuC,QAAA,WAMyB,SAAAzF,EAAA7B,OACbujB,EAAM1hB,EAAA+jB,mBAAA7gB,EAAV/E,UACO,OAAAujB,GAAcA,EAArB,IARRjc,QAAA,YAU0BgC,KAAA6J,OAV1B+K,aAAAjY,KAYU,SAAApE,EAAA7B,MACC8K,EAAAqI,OAAHiL,WACWvc,EAAA6P,OAAP1R,OAGAqjB,EAAOxhB,EAAAwU,aAAX,UAGIkN,GAFQziB,EAAAmG,MAAAqP,QAAA+M,GAAAA,GAAZA,IAEArjB,MACA,OAAIujB,EAAc,KACTC,MAALD,UACWla,EAAA8J,OAAAkL,sBAAAkF,EAAPvjB,MAEAc,EAAAmG,MAAAC,SAAJqc,UACIA,SAIJ,OAAA1hB,EAAA6P,OAAA1R,IAAyBwjB,MAAM3hB,EAAA6P,OAAnC1R,IAGO6B,EAAA6P,OAAP1R,GAFWqJ,EAAA8J,OAAAkL,sBAAkCxc,EAAA6P,OAAlC1R,GAAPA,eAMZgkB,OAAAV,EAA8B,SAAAzhB,EAAA7B,UACvBqJ,EAAA8J,OAAAwL,YAAApe,OAAAP,GAAH,OAAuCqJ,EAAA8J,OAAAwL,YAAA3e,GAC5Ba,EAAAuG,KAAA3H,EAAA,6BAAoColB,MAAOhjB,EAAA6P,OAAR1R,GAAqB8kB,OAAQ9kB,EAA7B,EAAkCsG,KAAM+C,EAAA8J,OAAAwL,YAAlF3e,KAEGa,EAAAuG,KAAA3H,EAAA,+BAAsColB,MAAOhjB,EAAA6P,OAAR1R,GAAqB8kB,OAAQzb,EAAA8J,OAAAyL,oBAAA,EAAA,GAA2C5e,EAApH,UAGA6lB,EAAJnU,EACGpI,KAAHxH,eACkB4P,EAAd5P,mBAEJ0W,OAAAsN,mBAAAtD,QACAhK,OAAAsN,mBAAAD,aAEA7B,OAAesB,EAAAlgB,OAAf,oBAAsD,SAAAvD,UAAGhB,EAAAuG,KAAA3H,EAAA,4BAAmColB,WAAO9f,IAAAlD,EAAAkQ,YAA6BlQ,EAA7BkkB,qBAAsDlkB,EAAnGkQ,kBAEtD3M,OAAA,oBAAAkC,QAAA,YAC0BgC,KAAA6J,OAD1BgL,uBAEI6H,EAAmBV,EAAAlgB,OAAvB,sBACAyE,KAAA,cAAA,OAAA5D,KAEU,SAAApE,MACCiJ,EAAAqI,OAAHiL,WACWvc,EAAPkQ,gBAEAwR,EAAM1hB,EAAVkkB,wBAEA,OAAGxC,EAAW,KACNC,MAAJD,UACWla,EAAA8J,OAAAmL,2BAAPiF,MAEDziB,EAAAmG,MAAAC,SAAHqc,UACIA,SAIL,OAAA1hB,EAAAkQ,aAAyByR,MAAM3hB,EAAlCkQ,aAGOlQ,EAAPkQ,YAFW1I,EAAA8J,OAAAmL,2BAAuCzc,EAA9CkQ,mBAIRkU,EAAJD,EACG1c,KAAHxH,eACwBkkB,EAApBlkB,mBAGJ0W,OAAA0N,wBAAAb,QACA7M,OAAA0N,wBAAAD,KAGAtc,UAAyB,iBAAzBwc,UAEAvkB,GAAA,cAA6B0H,KAA7B8c,mBACAxkB,GAAA,WAA0B0H,KAA1B8c,mBACAxQ,KAAgB,SAAA/T,EAAA7B,OACRqmB,EAAJ/c,KACS,IAAIiU,EAAJoD,QAAT0F,GACAxF,IAAA,IAAWtD,EAAJuD,mBACUvD,EADjB+I,qEAWAC,EADiBjd,KAAAmX,UAAApb,eAArB,oBACYsE,UAAA,kBAAA/C,KAAgD0C,KAAA1C,KAAhD2f,MAAiE,SAAA1kB,EAAA7B,UAAQ6B,EAAR8T,QAC7E0M,OAAA9c,aACIihB,EAAAD,EAAa3c,QAAAkF,eAAA,mBAAAjF,KAAA,KACD,SAAAhI,SAAG,QAAQA,EAAX8T,QAMhBrQ,OAAA,QAAAuE,KAAA,KAAA,GAAAA,KAAA,KAAA,IAAAA,KAAA,eAAA,KACAvE,OAAA,YAEImhB,EAAaD,EAAA3D,MAAjB0D,GACIG,EAAJD,EACGnd,KAAHxH,eACkB2kB,EAAd3kB,gBAGJ+H,KAAA,YAA8B,SAAAhI,SAAG,aAAeA,EAAAkS,SAAfxS,EAAA,KAAqCM,EAAAkS,SAArCxQ,EAAH,UAE1B0hB,EAAAwB,EAASrhB,OAAA,QAAAuE,UAAA,SAAA/C,KAAkD,SAAA/E,UAAGA,EAAAgjB,MAAUhjB,EAAAgjB,MAAA3V,MAAV,aAElEtF,QAAAtE,OAAA,SAAAud,MAAAoC,GAAAhjB,KAEU,SAAA7B,UAAG0S,EAAA/R,SAAA4lB,YAAqB7T,EAAA/R,SAAA6lB,WAAxBxmB,MAFVyJ,KAAA,KAGgB,SAAAhI,EAAA7B,UAAOA,EAAA,EAAA,aAAP+E,IAHhB8E,KAAA,IAAA,OAMAwY,OAAA9c,WACA+B,QAAA,WAA+B,SAAAzF,UAAIA,EAADgjB,QAAahjB,EAAAgjB,MAAhBjD,WAC/Bxc,OAAA,QAAAyE,KAAA,QAxBA,IAwBAA,KAAA,SAvBA,MAyBA+L,KAAgB,SAAA/T,MACRA,EAAJgjB,WAGIgC,EAAKnmB,EAAA0E,OAAAkE,MAAAlE,OAAA,QAAAhE,OAAT0U,YACD1Q,OAAAkE,MAAAlE,OAAA,QAAAyE,KAAA,IACegd,EAAAtjB,EADf,GAAAsG,KAAA,QAEmBnF,KAAAkE,IAASie,EAAA3lB,MAAT,GAjCtB,KA+BG2I,KAAA,SAGoBnF,KAAAkE,IAASie,EAAAve,OAAT,GAjCvB,QAoCGgB,KAAHyW,mBACIzf,KAAgBgJ,KAAAyW,gBAAhBpG,QAEJ/X,GAAA,cAA6B0H,KAA7Bwd,mBACAllB,GAAA,WAA0B0H,KAA1Bwd,mBACAlR,KAAgB,SAAA/T,EAAA7B,OACRqmB,EAAJ/c,KACS,IAAIiU,EAAJoD,QAAT0F,GACAxF,IAAA,IAAWtD,EAAJuD,mBAAP,sEAQJxX,KAAYA,KAAAmX,UAAA9W,UAAZ,SACArC,QAAA,SAAA,QAEAV,KAAAmgB,kBAAAtZ,QAAoC,SAAAuZ,GAC7BA,EAAHC,kBAIAC,oBAA2BF,EAA3BG,iBAAA1Z,QAAqE,SAAA2Z,OAC7DC,EAASL,EAAAG,gBAAbC,GACIE,EAAgBC,EAAAC,uBAApBJ,KACA9f,QAAA,SAAA,OACImgB,EAAJ,KACAha,QAAe,SAAAjO,GACXioB,OACI,YAES3U,EAAA/R,SAAA2mB,qBAAbloB,eAGJwkB,OAAesD,EAAAliB,OAAf,oBAAAqiB,iDASGne,KAAA0C,IAAA1G,OAAX,iBAEAqiB,gBAAA,cACAA,gBAAA,sBACAA,gBAAA,0DAGYP,GAED9d,KAAA0C,IAAA5G,OAAX,QACAE,OAAA,UAAAuE,KAAA,KAAAud,GAAAvd,KAAA,UAAA,cAAAA,KAAA,OAAA,GAAAA,KAAA,OAAA,GAAAA,KAAA,cAAA,GAAAA,KAAA,eAAA,GAAAA,KAAA,SAAA,QAAAvE,OAAA,QAAAuE,KAAA,IAAA,kBAAAA,KAAA,QAAA,6DAcIR,EAAJC,UACAse,MAAAC,SAAmB,EAAD,IAAUxe,EAAA2C,IAAAnC,KAAD,SAAyBR,EAAA2C,IAAAnC,KAApD,kBACAie,eAAAxnB,KAAyBgJ,KAAzBse,+CAGIve,EAAJC,KAEIwe,EAAiBze,EAAAye,eAAsBxe,KAAAwe,eAAqBxe,KAAA0C,IAAA+C,eAAA,UAAA,gBAAAlF,KAAA,QAAhE,SAGI+d,EAAQte,KAAAse,MAAalnB,EAAAknB,QAAAhmB,GAAA,mBA0ChBlB,EAAAwB,MAALmF,YACGgC,EAAH0e,cACItC,WAAgBpc,EAAA0e,YAAhB7Q,SAAA,KAEArL,+BAEJsO,UAhDqBvY,GAAA,uBAqDjBhC,EAAIc,EAAAwB,MAARmF,UACAzH,KAEA6gB,UAAA9W,UAAA,SAAArC,QAAA,WAAsD,SAAAzF,OAC9CmmB,EAAuB3e,EAA3B6C,0BACI3K,EAAIM,EAAAkS,SAAAxS,EAAaymB,EAArB,GACIzkB,EAAI1B,EAAAkS,SAAAxQ,EAAaykB,EAArB,GAEIC,EAAJ,IADe5e,EAAA8J,OAAAqF,OAAfzD,gBAEOnV,EAAA,GAAA,IAAW2B,EAAX0mB,GAAuB1mB,EAAA0mB,GAAYroB,EAAA,GAAnC,IACAA,EAAA,GAAA,IAAW2D,EADX0kB,GACuB1kB,EAAA0kB,GAAYroB,EAAA,GAD1C,OA9DiBgC,GAAA,oBAoEhBlB,EAAAwB,MAALmF,aACA4E,KAAA6b,EAAA,UAEI1N,EAAgB/Q,EAApBgR,mBACGD,GAAH,IAAoBA,EAAA7Z,UAChB+L,WAAgB8N,EAAhB,YAlERgI,sBAEAhd,OAAA,YAAAxD,GAAA,yCAEQsmB,EAAIxnB,EAAAqL,MAARzC,MACI6e,EAAM9e,EAAV6C,0BAGIkc,GAAU,KAAd,aAEA3H,UAAA9W,UAAA,SAAAiM,KAAuC,SAAA/T,OAC/BwF,EAAY3G,EAAA0E,OAAhBkE,QACAhC,QAAA,YAAA,OACIrE,EAAWoE,EAAAjC,OAAA,QAAfhE,OACIuS,EAAI1Q,EAAR6S,aACGnC,EAAApS,EAAI4mB,EAAJ,IAAaD,EAAb,IAAqBvU,EAAApS,EAAIoS,EAAJzS,MAAYinB,EAAZ,IAAsBD,EAA3C,IACAvU,EAAApQ,EAAI4kB,EAAJ,GAVP,IAU2BD,EADpB,IAC4BvU,EAAApQ,EAAIoQ,EAAJrL,OAAa6f,EAAb,GAVnC,IAUiED,EAD7D,GACkE,KAE1DG,EAAKvV,EAAA/R,SAAAunB,aAAArlB,GAAiCilB,EAAA,GAAKC,EAAN,GAAcD,EAAA,GAAKC,EAA5D,KACGE,EAAA5jB,SAbX,IAamC4jB,EAAA5jB,SAAY2jB,EAAvC,QACc/gB,EAAYghB,EAAtB5jB,gBAMZsjB,YAAA,KACGK,EAAH,OACI,GAAA9gB,QAAA,YAAA,KACAygB,YAAmBK,EAAnB,6CA4CJ9e,KAAJkI,0BACID,MAAe1Q,EAAAuG,KAAA3H,EAAf,uBAAA,OAAA,aAEJ+R,eAAA,OACAsW,eAAAviB,+CAIG+D,KAAHkI,2BACID,MAAe1Q,EAAAuG,KAAA3H,EAAf,sBAAA,OAAA,aACA6f,iBACA9N,eAAA,mDAMgB+W,OAChBC,EAAc1V,EAAA/R,SAAA8Y,eAAwBvQ,KAAAmX,UAAA5W,KAA1C,qBACA0e,MACI,IAAkBC,EAAlB,KACA,IAAkBA,EAAlB,IAEJA,qDAIAnE,gBAAuB,IAAApH,EAAA9Q,gBAAA7C,KAA0BA,KAAA6J,OAAjD/G,wEAIAga,gBAAuB,IAAA9I,EAAA9S,gBAAvBlB,yDAIAwd,gBAAuB,IAAAzJ,EAAA9O,gBAAvBjF,yDAMAmf,gBAAuB,IAAAzL,EAAAhS,gBAAvB1B,WACA0C,IAAApK,GAAA,cAA0B0H,KAA1Bmf,sBACAzc,IAAApK,GAAA,WAAuB0H,KAAvBmf,iDAGIxiB,QACJW,KAAA6Q,iBACA7Q,KAAA6E,QAAAxF,QACAkO,cACA3F,WAAAvI,mCAGI7E,EAAMsE,GAAQZ,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,IAAAA,UAAA,eAClB8B,KAAA6Q,iBACA7Q,KAAAyE,QAAAjK,EAAAsE,QACAyO,QAAA,QACAqE,OAAAb,OAAAvW,GACAA,0CAGYsE,OACRwF,EAAU,IAAIH,EAAAI,OAAJC,aAAuB9B,KAAAkP,OAAAkQ,oBAArChjB,SACA2F,QAAAH,EAAAxF,yCAEUA,OACNwF,EAAU,IAAIH,EAAAI,OAAJG,WAAqBhC,KAAAkP,OAAAkQ,oBAAnChjB,SACA2F,QAAAH,EAAAxF,2CAEYA,OACRwF,EAAU,IAAIH,EAAAI,OAAJ6B,aAAuB1D,KAAAkP,OAAAkQ,oBAArChjB,SACA2F,QAAAH,EAAAxF,sCAGOtE,EAAM6P,eACbrK,KAAA6Q,iBACA7Q,KAAA+hB,WAAAvnB,EAAA6P,QACAkD,cACAqE,OAAAb,OAAAvW,GACAA,6CAGe6P,OACX/F,EAAU,IAAIH,EAAAI,OAAJC,aAAuB9B,KAAAkP,OAAAoQ,wBAArC3X,SACA0X,WAAAzd,EAAA+F,4CAIaA,OACT/F,EAAU,IAAIH,EAAAI,OAAJG,WAAqBhC,KAAAkP,OAAAoQ,wBAAnC3X,SACA0X,WAAAzd,EAAA+F,sCAGO7P,QACPwF,KAAA6Q,iBACA7Q,KAAAiiB,WAAAznB,GAGIkI,KAAAkP,OAAJxE,sBAGIG,cAFAqE,OAAAb,2DAOAyC,EAAgB9Q,KAApB+Q,mBACID,EAAJ7Z,cAGAqG,KAAA6Q,iBACA7Q,KAAAkiB,YAAA1O,QACAvO,sBACAsI,cACAqE,OAAAb,4DAIIoR,EAAgBzf,KAApB0f,mBAEID,EAAJxoB,cAGAqG,KAAA6Q,iBACA7Q,KAAAqiB,YAAAF,QACAld,sBACAsI,2CAGKtS,EAAGqnB,OACJzH,EAAQnY,KAAA1C,KAAAuiB,aAAZtnB,GACAqnB,GACQ5f,KAAJqC,mBACIA,qBAEJA,YAAAhB,KAAA8W,SAEA9V,aAAA8V,mCAKA5f,QACJunB,SAAAvnB,QACAgnB,WAAAhnB,kDAIIuY,EAAgB9Q,KAApB+Q,mBACIgP,EAAgB/f,KAAA1C,KAAA0iB,iBAApBlP,QACAmP,UAAAF,QACAtc,sEAKIqN,EAAgB9Q,KAApB+Q,mBAEIgP,EAAgB/f,KAAA1C,KAAA0iB,iBAApBlP,QACAmP,UAAAF,qCAKM1U,SACNrL,UAAAqC,YAAAgJ,EAAmB4D,IAAU,SAAA1W,UAAG2nB,EAAA5iB,KAAAuiB,aAAHtnB,yCAKrBT,SACRkI,QAAIA,KAADqC,aAAsBrC,KAAAqC,YAAzBpL,aAGAqG,KAAA6Q,gBACIpO,EAAJC,OACAuC,qBACI4d,EAAgBngB,KAApBqC,cACA4d,UAAejgB,KAAfqC,eACA8B,QAAsB,SAAAic,OACdC,EAAWC,EAAAhjB,KAAAijB,cAAAH,EAAAtoB,GAAf0S,UACG6V,EAAH9c,UACIU,YAAAoc,EAA2BA,EAA3B9c,QAAA,OAEAkH,EAAW1K,EAAAmP,OAAAkQ,oBAAftnB,KACAiU,OAAgBtB,EAAhBxS,EAA4BwS,EAA5BxQ,GAAA,KACAiV,OAAAtE,qBAAAyV,GAAA,KACAnR,OAAAT,yBAAqC6R,EAAAhjB,KAAAkjB,sBAArCH,MAEArc,cAAAqc,GAAA,EAAoCF,EAAAlpB,OAApC,KAGDa,EAAHyL,UACIU,YAAAnM,EAAuBA,EAAvByL,QAAA,cAGO,aACPsH,WACAqE,OAAAb,UAFJ,gDAOezU,SACfoG,UAAA1C,KAAA6Q,gBACIpO,EAAJC,OACAuC,qBACI4d,EAAgBngB,KAApBqC,cACA4d,UAAejgB,KAAfqC,eACA8B,QAAsB,SAAAic,OACdC,EAAWI,EAAAnjB,KAAAijB,cAAfH,GACGC,EAAH9c,UACIU,YAAAoc,EAA2BA,EAA3B9c,QAAA,KAEJwI,OAAgBnS,EAAhB3B,EAAyB2B,EAAzBK,GAAA,KACAiV,OAAAtE,qBAAAyV,GAAA,KACAnR,OAAAT,yBAAqCgS,EAAAnjB,KAAAkjB,sBAArCH,MAEArc,cAAAqc,GAAA,EAAoCF,EAAAlpB,OAApC,gBAGO,aACP4T,WACAqE,OAAAb,UAFJ,wCAOQvW,EAAMiN,OACVhF,EAAJC,UACA1C,KAAA6Q,iBACA7Q,KAAA0H,YAAAlN,EAAAiN,cACW,aACP8F,QAAA,IADJ,6CAKayQ,EAAQ5V,OACjB3F,EAAJC,UACA1C,KAAA6Q,cACAuS,QAAApF,cACW,aACPzQ,WACAqE,OAAAb,UAFJ,wCAMQvW,OAAM0P,IAAAhM,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,KAAAA,UAAA,GAAaqP,IAAArP,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,KAAAA,UAAA,GACvBuE,EAAJC,OACAuD,OAAAiE,OAEAlK,KAAAkjB,sBAAA1oB,GAAAqM,QAA8C,SAAA/N,KAC1C6X,QAAAzG,IACAjE,QAAA,SAEJjG,KAAAqjB,sBAAA7oB,GAAAqM,QAA8C,SAAAjO,UAAGA,EAAA+X,QAAHzG,IAE9CqD,cAGW,aACPA,WACAqE,OAAAb,UAFJ,qDAMyBrO,KAAZlI,EAAA0D,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,GAAAA,UAAA,GAAO,KACpB1D,EAKGA,EAAHyL,YACIU,YAAAnM,GAAA,GAAA,KAIJ6M,WAAAR,QAAwB,SAAAjO,UAAK0qB,EAAAC,iBAAsB3qB,EAA3BsU,kBATpBlN,KAAAoR,WAAAvK,QAA6B,SAAA/N,UAAGwqB,EAAAC,iBAAHzqB,wCAa1B6B,EAAEgC,+CAIMnC,QACfgpB,mBAAAhpB,GAAA+kB,QAAAtc,KAAA,YAAwD,aAAazI,EAAA2S,SAAbxS,EAAA,IAAiCH,EAAA2S,SAAjCxQ,EAAxD,gDAGe0C,QACfokB,mBAAApkB,GAAAkgB,QAAAtc,KAAA,YAAwD,aAAa5D,EAAA8N,SAAbxS,EAAA,IAAiC0E,EAAA8N,SAAjCxQ,EAAxD,gDAGenC,UACRkI,KAAAke,uBAA4BpmB,EAAnCuU,oDAGmByR,UACZ9d,KAAAmX,UAAArb,OAAsB,SAA7BgiB,8CAEenhB,UACRqD,KAAAghB,uBAA4BrkB,EAAnC0P,oDAEmByR,UACZ9d,KAAAmX,UAAArb,OAAsB,SAA7BgiB,oDAGkC9d,KAArBihB,EAAAzlB,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,IAAAA,UAAA,GACT0lB,EAAkBlhB,KAAAmX,UAAA9W,UAAA,kBAAtB/C,UACA2jB,SACIC,MAGAC,cACJ9f,KAAA+f,MAAAD,EAAAE,EAAAH,MAEA/c,QAAwB,SAAA/N,MACjBA,EAAHmN,OAAY,KACJ+d,EAAcC,EAAAjkB,KAAAkjB,sBAAlBpqB,GACAkrB,KACIjgB,KAAA+f,MAAAD,EAAAE,EAAAC,OAKZH,oDAIOnhB,KAAAmX,UAAA9W,UAAA,2BAAP/C,sDAIA0C,UAAAmX,UAAA9W,UAAA,kBAAAvE,OAAA,QAAAyE,KAAA,aAA6E,SAAAhI,SAAK,cAAcipB,EAAAhI,UAAAjhB,GAAA,WAAd,IAAL,WAC7E4e,UAAA9W,UAAA,aAAArC,QAAA,YAAA,QACA6L,OAAAuL,wDAGOzN,EAAM8Z,GACbA,QACIlf,sBAEJsH,OAAAqL,eAAAvN,QACAwP,UAAArb,OAAsB,SAAS6L,EAA/B0E,KAAArO,QAAA,YAAA,GAAAlC,OAAA,QAAAyE,KAAA,aAGwB,SAAAhI,SAAA,gEAGbT,UACJkI,KAAA8gB,mBAAAhpB,GAAAkG,QAAP,+CAGOlG,EAAM2pB,EAA4BC,GACzCD,QACIlf,iBAGJmf,QACI7X,OAAAoL,eAAAnd,QAGJomB,uBAA4BpmB,EAA5BuU,KAAArO,QAAA,YAAA,sCAGOrB,EAAM8kB,EAA4BC,GACzCD,QACIlf,iBAGJmf,QACI7X,OAAAsL,eAAAxY,QAGJqkB,uBAA4BrkB,EAA5B0P,KAAArO,QAAA,YAAA,yCAGUlG,EAAM2pB,EAA2BC,SAC3C1hB,KAAAyhB,QACIlf,sBAEJS,WAAAlL,GAAA,EAAA4pB,KACA/c,WAAAR,QAAwB,SAAAjO,UAAGyrB,EAAA3d,cAAmB9N,EAAnBsU,WAAA,GAAH,mDAIxB2M,UAAA9W,UAAA,SAAArC,QAAA,YAAA,sCAGOzC,EAAM2S,QACbgB,OAAAvE,WAAApP,EAAA2S,8CAGe0T,GACfA,MACI,SAEJ5J,aAAA4J,OACAjL,0BACAC,gCACAC,cAAA,oDAII4B,EAAWzY,KAAA0C,IAAAnC,KAAf,SACgBP,KAAA0C,IAAAnC,KAAhB,eACAshB,eAAsB7hB,KAAA0C,IAAA3G,eAAtB,4BAEIiF,EAAQhB,KAAA6hB,eAAA9lB,eAAZ,mBACAY,KAAWqD,KAAXgY,uBACArL,mBAAA3L,OAEI8gB,EAAY5iB,SAASc,KAAA6J,OAAA7I,MAAA3B,OAAzBE,UACAsiB,eAAAthB,KAAA,YAAsC,aAAckY,EAAd,EAAA,IAAAqJ,EAAtC,wDAGe9hB,KAAA0C,IAAAnC,KAAf,SACgBP,KAAA0C,IAAAnC,KAAhB,eACAshB,eAAsB7hB,KAAA0C,IAAA3G,eAAtB,4BAEIgmB,EAAO/hB,KAAA6hB,eAAA9lB,eAAX,0BAEIiE,KAAA6J,OAAA0K,YAAJd,UAKIgI,EAAQzb,KAAAiY,mBAA0BjY,KAAAiY,mBAAArS,MAA1B,SACR+V,EAASoG,EAAA1hB,UAAA,SAAA/C,KAAbme,KACAnb,QAAAtE,OAAA,SAAAud,MAAAoC,GAAAhjB,KAEU,SAAA7B,UAAG0S,EAAA/R,SAAA4lB,YAAqB7T,EAAA/R,SAAA6lB,WAAxBxmB,MAFVyJ,KAAA,KAGgB,SAAAhI,EAAA7B,UAAOA,EAAA,EAAA,aAAP+E,IAHhB8E,KAAA,IAAA,OAMAwY,OAAA9c,kBACA0Q,mBAAAoV,OAEI/gB,EAAQhB,KAAA6hB,eAAA9lB,eAAZ,iBAEI+lB,EAAJ,EACG9hB,KAAHgY,kBACiBhX,EAAAlJ,OAAA0U,UAAbxN,UACY5D,KAAAkE,IAASJ,SAASc,KAAA6J,OAAA0K,YAAAlV,OAAlBE,KAAZ,MAIJgB,KAAA,YAAuB,eAAAuhB,EAAvB,YAxBI7lB,0DA2BiB+lB,GACrBA,MACI,SAEJ/J,mBAAA+J,OACArL,0BACAC,gCACAC,cAAA,+CAIgBoL,OACZjiB,KAAJ6hB,sBACI,MAEAK,EAAIliB,KAAA6hB,eAAA/pB,OAAA0U,UAARxN,cACAijB,OACQ/iB,SAASc,KAAA6J,OAAA7I,MAAA3B,OAAbG,WACIN,SAASc,KAAA6J,OAAA7I,MAAA3B,OAAbE,MAEJ2iB,QApuCK,8fCrKbhc,OAAAC,KAAAgc,GAAAhe,QAAA,SAAAtG,2EAAA,0BAAAA","file":"sd-tree-designer.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import * as d3 from \"./d3\";\nimport {Templates} from \"./templates\";\nimport {i18n} from \"./i18n/i18n\";\nimport {Utils} from \"sd-utils\";\n\nexport class AppUtils {\n\n    static sanitizeHeight = function (height, container) {\n        return (height || parseInt(container.style('height'), 10) || 400);\n    };\n\n    static sanitizeWidth = function (width, container) {\n        return (width || parseInt(container.style('width'), 10) || 960);\n    };\n\n    static availableHeight = function (height, container, margin) {\n        return Math.max(0, AppUtils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n    };\n\n    static availableWidth = function (width, container, margin) {\n        return Math.max(0, AppUtils.sanitizeWidth(width, container) - margin.left - margin.right);\n    };\n\n    //places textString in textObj, adds an ellipsis if text can't fit in width\n    static placeTextWithEllipsis(textD3Obj, textString, width) {\n        var textObj = textD3Obj.node();\n        textObj.textContent = textString;\n\n        var margin = 0;\n        var ellipsisLength = 9;\n        //ellipsis is needed\n        if (textObj.getComputedTextLength() > width + margin) {\n            for (var x = textString.length - 3; x > 0; x -= 1) {\n                if (textObj.getSubStringLength(0, x) + ellipsisLength <= width + margin) {\n                    textObj.textContent = textString.substring(0, x) + \"...\";\n                    return true;\n                }\n            }\n            textObj.textContent = \"...\"; //can't place at all\n            return true;\n        }\n        return false;\n    }\n\n    static placeTextWithEllipsisAndTooltip(textD3Obj, textString, width, tooltip) {\n        var ellipsisPlaced = AppUtils.placeTextWithEllipsis(textD3Obj, textString, width);\n        if (ellipsisPlaced && tooltip) {\n            textD3Obj.on(\"mouseover\", function (d) {\n                tooltip.transition()\n                    .duration(200)\n                    .style(\"opacity\", .9);\n                tooltip.html(textString)\n                    .style(\"left\", (d3.event.pageX + 5) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            });\n\n            textD3Obj.on(\"mouseout\", function (d) {\n                tooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0);\n            });\n        }\n\n    }\n\n    static getFontSize(element) {\n        return window.getComputedStyle(element, null).getPropertyValue(\"font-size\");\n    }\n\n    static getTranslation(transform) {\n        // Create a dummy g for calculation purposes only. This will never\n        // be appended to the DOM and will be discarded once this function\n        // returns.\n        var g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n\n        // Set the transform attribute to the provided string value.\n        g.setAttributeNS(null, \"transform\", transform);\n\n        // consolidate the SVGTransformList containing all transformations\n        // to a single SVGTransform of type SVG_TRANSFORM_MATRIX and get\n        // its SVGMatrix.\n        var matrix = g.transform.baseVal.consolidate().matrix;\n\n        // As per definition values e and f are the ones for the translation.\n        return [matrix.e, matrix.f];\n    }\n\n\n    static closestPoint(pathNode, point) {\n        var pathLength = pathNode.getTotalLength(),\n            precision = 8,\n            best,\n            bestLength,\n            bestDistance = Infinity;\n\n        // linear scan for coarse approximation\n        for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n            if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n                best = scan, bestLength = scanLength, bestDistance = scanDistance;\n            }\n        }\n\n        // binary search for precise estimate\n        precision /= 2;\n        while (precision > 0.5) {\n            var before,\n                after,\n                beforeLength,\n                afterLength,\n                beforeDistance,\n                afterDistance;\n            if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n                best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n            } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n                best = after, bestLength = afterLength, bestDistance = afterDistance;\n            } else {\n                precision /= 2;\n            }\n        }\n\n        best = [best.x, best.y];\n        best.distance = Math.sqrt(bestDistance);\n        return best;\n\n        function distance2(p) {\n            var dx = p.x - point[0],\n                dy = p.y - point[1];\n            return dx * dx + dy * dy;\n        }\n    }\n\n    static growl(message, type='info', position='right', time = 2000){\n        var html = Templates.get('growl', {message:message, type:type})\n\n        var g = d3.select('body').selectOrAppend('div.sd-growl-list.'+position).append('div').html(html);\n        setTimeout(function(){\n            g.remove();\n        }, time)\n    }\n\n\n    static createElement(tag, attribs, parent) {\n        var el = document.createElement(tag);\n\n        if (attribs) {\n            AppUtils.deepExtend(el, attribs);\n        }\n        if (parent) {\n            parent.appendChild(el);\n        }\n        return el;\n    };\n\n    static removeElement(element) {\n        element.parentNode.removeChild(element);\n    }\n\n    static replaceUrls(text){\n        if(!text){\n            return text;\n        }\n        var urlRegexp = /((ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?)/\n\n        return text.replace(urlRegexp, '<a href=\"$1\" target=\"_blank\">$1</a>');\n    }\n\n    static escapeHtml(html)\n    {\n        var text = document.createTextNode(html);\n        var div = document.createElement('div');\n        div.appendChild(text);\n        return div.innerHTML;\n    }\n\n    static dispatchHtmlEvent(element, name){\n        if (\"createEvent\" in document) {\n            var evt = document.createEvent(\"HTMLEvents\");\n            evt.initEvent(name, false, true);\n            element.dispatchEvent(evt);\n        }\n        else\n            element.fireEvent(\"on\"+name);\n    }\n\n    static dispatchEvent(name, data){\n        var event;\n        try{\n            event = new  CustomEvent(name,{ 'detail': data });\n        }catch (e){ //IE\n            event = document.createEvent('CustomEvent');\n            event.initCustomEvent(name, false, false, data);\n        }\n        document.dispatchEvent(event);\n    }\n\n    static getValidationMessage(error){\n        if(Utils.isString(error)){\n            error = {name: error};\n        }\n        var key = 'validation.' + error.name;\n        return i18n.t(key, error.data);\n    }\n\n    static hide(selection){\n        selection.classed('sd-hidden', true);\n    }\n\n    static show(selection, show=true){\n        selection.classed('sd-hidden', !show);\n    }\n\n\n\n    static isHidden(el, exact = true) {\n        if(!el){\n            return true;\n        }\n        if(exact){\n            var style = window.getComputedStyle(el);\n            return (style.display === 'none')\n        }\n        return (el.offsetParent === null)\n    }\n\n    static getJSON(url, callback) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('get', url, true);\n        xhr.responseType = 'json';\n        xhr.onload = function () {\n            var status = xhr.status;\n            if (status == 200) {\n                callback(xhr.response, null);\n            } else {\n                callback(null, status);\n            }\n        };\n        xhr.send();\n    }\n}\n","import * as d3 from '../d3'\n\n/*based on:\n * github.com/patorjk/d3-context-menu */\n\nexport class ContextMenu {\n    openCallback;\n    closeCallback;\n\n    constructor(menu, opts) {\n        var self = this;\n\n        if (typeof opts === 'function') {\n            self.openCallback = opts;\n        } else {\n            opts = opts || {};\n            self.openCallback = opts.onOpen;\n            self.closeCallback = opts.onClose;\n        }\n\n        // create the div element that will hold the context menu\n        d3.selectAll('.d3-context-menu').data([1])\n            .enter()\n            .append('div')\n            .attr('class', 'd3-context-menu');\n\n        // close menu\n        d3.select('body').on('click.d3-context-menu', function () {\n            d3.select('.d3-context-menu').style('display', 'none');\n            if (self.closeCallback) {\n                self.closeCallback();\n            }\n        });\n\n        // this gets executed when a contextmenu event occurs\n        return function (data, index) {\n            var elm = this;\n\n            d3.selectAll('.d3-context-menu').html('');\n            var list = d3.selectAll('.d3-context-menu')\n                .on('contextmenu', function (d) {\n                    d3.select('.d3-context-menu').style('display', 'none');\n                    d3.event.preventDefault();\n                    d3.event.stopPropagation();\n                })\n                .append('ul');\n            list.selectAll('li').data(typeof menu === 'function' ? menu(data) : menu).enter()\n                .append('li')\n                .attr('class', function (d) {\n                    var ret = '';\n                    if (d.divider) {\n                        ret += ' is-divider';\n                    }\n                    if (d.disabled) {\n                        ret += ' is-disabled';\n                    }\n                    if (!d.action) {\n                        ret += ' is-header';\n                    }\n                    return ret;\n                })\n                .html(function (d) {\n                    if (d.divider) {\n                        return '<hr>';\n                    }\n                    if (!d.title) {\n                        console.error('No title attribute set. Check the spelling of your options.');\n                    }\n                    return (typeof d.title === 'string') ? d.title : d.title(data);\n                })\n                .on('click', function (d, i) {\n                    if (d.disabled) return; // do nothing if disabled\n                    if (!d.action) return; // headers have no \"action\"\n                    d.action(elm, data, index);\n                    d3.select('.d3-context-menu').style('display', 'none');\n\n                    if (self.closeCallback) {\n                        self.closeCallback();\n                    }\n                });\n\n            // the openCallback allows an action to fire before the menu is displayed\n            // an example usage would be closing a tooltip\n            if (self.openCallback) {\n                if (self.openCallback(data, index) === false) {\n                    return;\n                }\n            }\n\n            // display context menu\n            d3.select('.d3-context-menu')\n                .style('left', (d3.event.pageX - 2) + 'px')\n                .style('top', (d3.event.pageY - 2) + 'px')\n                .style('display', 'block');\n\n            d3.event.preventDefault();\n            d3.event.stopPropagation();\n        };\n    };\n\n    static hide() {\n        d3.select('.d3-context-menu').style('display', 'none');\n    }\n\n}\n","import {ContextMenu} from './context-menu'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class EdgeContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var menu = function (d) {\n\n            var menu = [];\n\n            menu.push({\n                title: i18n.t('contextMenu.edge.injectDecisionNode'),\n                action: function (elm, d, i) {\n                    treeDesigner.injectDecisionNode(d)\n                }\n            });\n            menu.push({\n                title: i18n.t('contextMenu.edge.injectChanceNode'),\n                action: function (elm, d, i) {\n                    treeDesigner.injectChanceNode(d)\n                }\n            });\n\n\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {domain as model} from 'sd-model'\nimport * as d3 from '../d3'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class MainContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var mousePosition = null;\n        var menu = function (d) {\n\n            var menu = [];\n            menu.push({\n                title: i18n.t('contextMenu.main.addDecisionNode'),\n                action: function (elm, d, i) {\n                    var newNode = new model.DecisionNode(mousePosition);\n                    treeDesigner.addNode(newNode)\n                }\n            });\n            menu.push({\n                title: i18n.t('contextMenu.main.addChanceNode'),\n                action: function (elm, d, i) {\n                    var newNode = new model.ChanceNode(mousePosition);\n                    treeDesigner.addNode(newNode)\n                }\n            });\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.main.addText'),\n                action: function (elm, d, i) {\n                    var newText = new model.Text(mousePosition);\n                    treeDesigner.addText(newText);\n                },\n\n            });\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.main.paste'),\n                action: function (elm, d, i) {\n                    treeDesigner.pasteToNewLocation(mousePosition);\n                },\n                disabled: !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\n\n            });\n            menu.push({divider: true});\n\n            menu.push({\n                title: i18n.t('contextMenu.main.selectAllNodes'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectAllNodes();\n                }\n            });\n            return menu;\n        };\n\n        super(menu, {onOpen: () => {\n            treeDesigner.clearSelection();\n            mousePosition = new model.Point(d3.mouse(treeDesigner.svg.node())).move(treeDesigner.getMainGroupTranslation(true));\n\n        }});\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {domain as model} from 'sd-model'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class NodeContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner, operationsForObject) {\n        var menu = function (d) {\n\n            var copyMenuItem = {\n                title: i18n.t('contextMenu.node.copy'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.copySelectedNodes();\n                }\n            };\n            var cutMenuItem = {\n                title: i18n.t('contextMenu.node.cut'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.cutSelectedNodes();\n                }\n            };\n            var pasteMenuItem = {\n                title: i18n.t('contextMenu.node.paste'),\n                action: function (elm, d, i) {\n                    treeDesigner.pasteToNode(d);\n                },\n                disabled: d.folded || !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\n\n            };\n            var deleteMenuItem = {\n                title: i18n.t('contextMenu.node.delete'),\n                action: function (elm, d, i) {\n\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.removeSelectedNodes();\n\n                }\n            };\n\n            var menu = [];\n            if (d.type == model.TerminalNode.$TYPE) {\n                menu = [copyMenuItem, cutMenuItem, deleteMenuItem];\n                NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\n                return menu;\n            }\n\n            if(!d.folded){\n                menu.push({\n                    title: i18n.t('contextMenu.node.addDecisionNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addDecisionNode(d)\n                    }\n                });\n                menu.push({\n                    title: i18n.t('contextMenu.node.addChanceNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addChanceNode(d)\n                    }\n                });\n                menu.push({\n                    title: i18n.t('contextMenu.node.addTerminalNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addTerminalNode(d)\n                    }\n                });\n                menu.push({divider: true});\n            }\n\n            menu.push(copyMenuItem);\n            menu.push(cutMenuItem);\n            menu.push(pasteMenuItem);\n            menu.push(deleteMenuItem);\n\n            NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.node.selectSubtree'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectSubTree(d, true);\n                }\n            });\n\n            if(!d.folded){\n                menu.push({\n                    title: i18n.t('contextMenu.node.fold'),\n                    action: function (elm, d, i) {\n                        treeDesigner.foldSubtree(d);\n                    }\n                });\n            }else{\n                menu.push({\n                    title: i18n.t('contextMenu.node.unfold'),\n                    action: function (elm, d, i) {\n                        treeDesigner.foldSubtree(d, false);\n                    }\n                });\n            }\n\n            if(operationsForObject){\n                var operations = operationsForObject(d);\n                if(operations.length) {\n                    menu.push({divider: true});\n                    operations.forEach(op=>{\n                        menu.push({\n                            title: i18n.t('contextMenu.node.'+op.name),\n                            action: function (elm, d, i) {\n                                treeDesigner.performOperation(d, op);\n                            },\n                            disabled: !op.canPerform(d)\n                        });\n                    })\n                }\n            }\n\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n\n    static addNodeConversionOptions(d, menu, treeDesigner){\n        var conversionOptions = NodeContextMenu.getNodeConversionOptions(d, treeDesigner);\n        if(conversionOptions.length){\n            menu.push({divider: true});\n            conversionOptions.forEach(o=>menu.push(o));\n\n        }\n    }\n\n    static getNodeConversionOptions(d, treeDesigner){\n        var options = [];\n        var allAllowedTypes = [model.DecisionNode.$TYPE, model.ChanceNode.$TYPE, model.TerminalNode.$TYPE];\n\n        if(!d.childEdges.length && d.$parent){\n            allAllowedTypes.filter(t=>t!==d.type).forEach(type=>{\n                options.push(NodeContextMenu.getNodeConversionOption(type, treeDesigner))\n            })\n        }else{\n            if(d instanceof model.DecisionNode){\n                options.push(NodeContextMenu.getNodeConversionOption(model.ChanceNode.$TYPE, treeDesigner))\n            }else{\n                options.push(NodeContextMenu.getNodeConversionOption(model.DecisionNode.$TYPE, treeDesigner))\n            }\n        }\n        return options;\n    }\n\n    static getNodeConversionOption(typeToConvertTo, treeDesigner){\n        return {\n            title: i18n.t('contextMenu.node.convert.'+typeToConvertTo),\n            action: function (elm, d, i) {\n                treeDesigner.convertNode(d, typeToConvertTo);\n            },\n        }\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class TextContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var menu = function (d) {\n\n\n            var deleteMenuItem = {\n                title: i18n.t('contextMenu.text.delete'),\n                action: function (elm, d, i) {\n\n                    treeDesigner.selectText(d, true, true);\n                    treeDesigner.removeSelectedTexts()\n\n                }\n            };\n            var menu = [];\n            menu.push(deleteMenuItem);\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import * as d3 from './d3'\n\nexport class D3Extensions {\n\n    static extend() {\n\n        d3.selection.prototype.enter.prototype.insertSelector =\n            d3.selection.prototype.insertSelector = function (selector, before) {\n                return D3Extensions.insertSelector(this, selector, before);\n            };\n\n\n        d3.selection.prototype.enter.prototype.appendSelector =\n            d3.selection.prototype.appendSelector = function (selector) {\n                return D3Extensions.appendSelector(this, selector);\n            };\n\n        d3.selection.prototype.enter.prototype.selectOrAppend =\n            d3.selection.prototype.selectOrAppend = function (selector) {\n                return D3Extensions.selectOrAppend(this, selector);\n            };\n\n        d3.selection.prototype.enter.prototype.selectOrInsert =\n            d3.selection.prototype.selectOrInsert = function (selector, before) {\n                return D3Extensions.selectOrInsert(this, selector, before);\n            };\n\n\n    }\n\n    static insertOrAppendSelector(parent, selector, operation, before) {\n\n        var selectorParts = selector.split(/([\\.\\#])/);\n        var element = parent[operation](selectorParts.shift(), before);//\":first-child\"\n\n        while (selectorParts.length > 1) {\n            var selectorModifier = selectorParts.shift();\n            var selectorItem = selectorParts.shift();\n            if (selectorModifier === \".\") {\n                element = element.classed(selectorItem, true);\n            } else if (selectorModifier === \"#\") {\n                element = element.attr('id', selectorItem);\n            }\n        }\n        return element;\n    }\n\n    static insertSelector(parent, selector, before) {\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"insert\", before);\n    }\n\n    static appendSelector(parent, selector) {\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"append\");\n    }\n\n    static selectOrAppend(parent, selector, element) {\n        var selection = parent.select(selector);\n        if (selection.empty()) {\n            if (element) {\n                return parent.append(element);\n            }\n            return D3Extensions.appendSelector(parent, selector);\n\n        }\n        return selection;\n    };\n\n    static selectOrInsert(parent, selector, before) {\n        var selection = parent.select(selector);\n        if (selection.empty()) {\n            return D3Extensions.insertSelector(parent, selector, before);\n        }\n        return selection;\n    };\n}\n","export * from 'd3-dispatch';\nexport * from 'd3-scale';\nexport * from 'd3-selection';\nexport * from 'd3-shape'\nexport * from 'd3-drag';\nexport * from 'd3-brush'\nexport * from 'd3-array'\nexport * from 'd3-hierarchy'\nexport * from 'd3-time-format'\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\n            \"addText\": \"Text hinzufügen \",\n            \"paste\": \"Einfügen\",\n            \"selectAllNodes\": \"Alle Knoten auswählen\"\n        },\n        \"node\":{\n            \"copy\": \"Kopieren\",\n            \"cut\": \"Ausschneiden\",\n            \"paste\": \"Einfügen\",\n            \"delete\": \"Löschen\",\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\n            \"addTerminalNode\": \"Endknotten hinzufügen\",\n            \"convert\":{\n                \"decision\": \"Als Entscheidungsknoten\",\n                \"chance\": \"Als Zufall Knoten\",\n                \"terminal\": \"Als Endknoten\"\n            },\n            \"selectSubtree\": \"Teilbaum wählen\",\n            \"fold\": \"Teilbaum falten\",\n            \"unfold\": \"Teilbaum entfalten\",\n\t\t\t\n            \"flipSubtree\": \"Teilbaum umdrehen\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Entscheidungsknoten Injizieren\",\n            \"injectChanceNode\": \"Zufall Knoten Injizieren\"\n        },\n        \"text\":{\n            \"delete\": \"Löschen\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Pfad, der nicht mit dem Endknoten endet\",\n        \"probabilityDoNotSumUpTo1\": \"Die Summe der Wahrscheinlichkeiten ist nicht gleich 1\",\n        \"invalidProbability\": \"Ungültige Wahrscheinlichkeit im Zweig #{{number}}\",\n        \"invalidPayoff\": \"Ungültige Auszahlung in Zweig #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Auswahlbürste deaktiviert\",\n        \"brushEnabled\": \"Auswahlbürste aktiviert\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Auszahlung {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Aggregierte Auszahlung {{number}}\",\n                \"named\": \"Aggregierte {{name}}\"\n            },\n            \"probabilityToEnter\": \"Wahrscheinlichkeit\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Auszahlung {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Wahrscheinlichkeit: {{value}}\"\n        }\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Add Decision Node\",\n            \"addChanceNode\": \"Add Chance Node\",\n            \"addText\": \"Add Text\",\n            \"paste\": \"Paste\",\n            \"selectAllNodes\": \"Select all nodes\"\n        },\n        \"node\":{\n            \"copy\": \"Copy\",\n            \"cut\": \"Cut\",\n            \"paste\": \"Paste\",\n            \"delete\": \"Delete\",\n            \"addDecisionNode\": \"Add Decision Node\",\n            \"addChanceNode\": \"Add Chance Node\",\n            \"addTerminalNode\": \"Add Terminal Node\",\n            \"convert\":{\n                \"decision\": \"As Decision Node\",\n                \"chance\": \"As Chance Node\",\n                \"terminal\": \"As Terminal Node\"\n            },\n            \"selectSubtree\": \"Select subtree\",\n            \"fold\": \"Fold subtree\",\n            \"unfold\": \"Unfold subtree\",\n            \"flipSubtree\": \"Flip subtree\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Inject Decision Node\",\n            \"injectChanceNode\": \"Inject Chance Node\"\n        },\n        \"text\":{\n            \"delete\": \"Delete\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Path not ending with terminal node\",\n        \"probabilityDoNotSumUpTo1\": \"Probabilities do not sum up to 1\",\n        \"invalidProbability\": \"Invalid probability in edge #{{number}}\",\n        \"invalidPayoff\": \"Invalid payoff in edge #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Selection brush disabled\",\n        \"brushEnabled\": \"Selection brush enabled\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Payoff {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Aggregated Payoff {{number}}\",\n                \"named\": \"Aggregated {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probability to enter\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Payoff {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probability: {{value}}\"\n        }\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Ajouter noud de décision\",\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\n            \"addText\": \"Ajouter du texte\",\n            \"paste\": \"Coller\",\n            \"selectAllNodes\": \"Sélectionner tous les nouds\"\n        },\n        \"node\":{\n            \"copy\": \"Copie\",\n            \"cut\": \"Couper\",\n            \"paste\": \"Coller\",\n            \"delete\": \"Effacer\",\n            \"addDecisionNode\": \"Ajouter noud de décision\",\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\n            \"addTerminalNode\": \"Ajouter un noeud terminal\",\n            \"convert\":{\n                \"decision\": \"Comme noud de décision\",\n                \"chance\": \"Comme noud aléatoire\",\n                \"terminal\": \"Comme un noeud terminal\"\n            },\n            \"selectSubtree\": \"Sélectionner une sous-arborescence\",\n            \"fold\": \"Plier sous-arbre\",\n            \"unfold\": \"Déplier arbre sous-arbre\",\n            \"flipSubtree\": \"Basculer sous-arbre\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Injecter un noeud de décision\",\n            \"injectChanceNode\": \"Injecter un noeud de chance\"\n        },\n        \"text\":{\n            \"delete\": \"Effacer\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Parcours non terminé par noeud terminal\",\n        \"probabilityDoNotSumUpTo1\": \"La somme des probabilités n'est pas 1 ou plus\",\n        \"invalidProbability\": \"Probabilité invalide - le bord #{{number}}\",\n        \"invalidPayoff\": \"Avantage invalide - le bord #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Brosse de sélection désactivée\",\n        \"brushEnabled\": \"Brosse de sélection activée\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Avantage {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Avantage agrégé {{number}}\",\n                \"named\": \"Agrégé  {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probabilité d'entrée\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Avantage {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probabilité: {{value}}\"\n        }\n    }\n}\n","import i18next from 'i18next';\nimport * as en from './en.json'\nimport * as pl from './pl.json'\nimport * as it from './it.json'\nimport * as de from './de.json'\nimport * as fr from './fr.json'\n\nexport class i18n{\n\n    static $instance;\n    static language;\n\n    static init(lng){\n        i18n.language = lng;\n        let resources = {\n            en: {\n                translation: en\n            },\n            pl: {\n                translation: pl\n            },\n            it: {\n                translation: it\n            },\n            de: {\n                translation: de\n            },\n            fr: {\n                translation: fr\n            }\n        };\n        i18n.$instance = i18next.createInstance({\n            lng: lng,\n            fallbackLng: 'en',\n            resources: resources\n        }, (err, t) => {\n        });\n    }\n\n    static t(key, opt){\n        return i18n.$instance.t(key, opt)\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\n            \"addText\": \"Aggiungi testo\",\n            \"paste\": \"Incolla\",\n            \"selectAllNodes\": \"Seleziona tutti i nodi\"\n        },\n        \"node\":{\n            \"copy\": \"Copia\",\n            \"cut\": \"Taglia\",\n            \"paste\": \"Incolla\",\n            \"delete\": \"Cancella\",\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\n            \"addTerminalNode\": \"Aggiungi un nodo terminale\",\n            \"convert\":{\n                \"decision\": \"Come Decision Node\",\n                \"chance\": \"Come Chance Node\",\n                \"terminal\": \"Come Terminal Node\"\n            },\n            \"selectSubtree\": \"Seleziona Sotto-albero\",\n            \"fold\": \"Piega sotto-albero\",\n            \"unfold\": \"Dispiegarsi sotto-albero\",\t\t\t\n            \"flipSubtree\": \"Ribalta sotto-albero\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Inietta nodo di decisione\",\n            \"injectChanceNode\": \"Inietta nodo opportunità\"\n        },\n        \"text\":{\n            \"delete\": \"Cancella\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Percorso senza nodo terminale\",\n        \"probabilityDoNotSumUpTo1\": \"La somma delle probabilità è diversa da 1\",\n        \"invalidProbability\": \"Probabilità non valida - bordo #{{number}}\",\n        \"invalidPayoff\": \"Saldo non valido - bordo #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Selezione pennello disabilitata\",\n        \"brushEnabled\": \"Selezione pennello abilitata\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Saldo {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Saldo aggregato {{number}}\",\n                \"named\": \"Aggregato {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probabilità da inserire\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Saldo {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probabilità: {{value}}\"\n        }\n    }\n}\n","module.exports={\n\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\n            \"addText\": \"Dodaj Tekst\",\n            \"paste\": \"Wklej\",\n            \"selectAllNodes\": \"Zaznacz wszystkie węzły\"\n        },\n        \"node\":{\n            \"copy\": \"Kopiuj\",\n            \"cut\": \"Wytnij\",\n            \"paste\": \"Wklej\",\n            \"delete\": \"Usuń\",\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\n            \"addTerminalNode\": \"Dodaj Węzeł Końcowy\",\n            \"convert\":{\n                \"decision\": \"Jako Węzeł Decyzyjny\",\n                \"chance\": \"Jako Węzeł Losowy\",\n                \"terminal\": \"Jako Węzeł Końcowy\"\n            },\n            \"selectSubtree\": \"Zaznacz poddrzewo\",\n            \"fold\": \"Zwiń poddrzewo\",\n            \"unfold\": \"Rozwiń poddrzewo\",\n            \"flipSubtree\": \"Przewróć poddrzewo\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Wstrzyknij Węzeł Decyzyjny\",\n            \"injectChanceNode\": \"Wstrzyknij Węzeł Losowy\"\n        },\n        \"text\":{\n            \"delete\": \"Usuń\"\n        }\n    },\n\n    \"validation\":{\n        \"incompletePath\": \"Ostatnim węzłem w ścieżce powinien być Węzeł Końcowy\",\n        \"probabilityDoNotSumUpTo1\": \"Prawdopodobieństwa nie sumują sie do 1\",\n        \"invalidProbability\": \"Niepoprawne prawdopodobieństwo na krawędzi #{{number}}\",\n        \"invalidPayoff\": \"Niepoprawna wypłata na krawędzi #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Zaznaczanie wyłączone\",\n        \"brushEnabled\": \"Zaznaczanie włączone\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Wypłata {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Zagregowana wypłata {{number}}\",\n                \"named\": \"Zagregowana {{name}}\"\n            },\n            \"probabilityToEnter\": \"Prawdopodobieństwo wejścia\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Wypłata {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Prawdopodobieństwo: {{value}}\"\n        }\n    }\n}\n","import {D3Extensions} from './d3-extensions'\nD3Extensions.extend();\n\nexport * from './tree-designer'\nexport * from './app-utils'\nexport * from './templates'\nexport * from './tooltip'\nexport * from './d3-extensions'\nexport {default as d3} from './d3'\n\n\n","import {Utils} from 'sd-utils'\nimport {domain as model} from 'sd-model'\nimport * as d3 from './d3'\nimport circleSymbol from './symbols/circle'\nimport triangleSymbol from './symbols/triangle'\nimport {AppUtils} from \"./app-utils\";\n\n/*Tree layout manager*/\nexport class Layout{\n\n    treeDesigner;\n    data;\n    config;\n\n    nodeTypeToSymbol = {\n        'decision': d3.symbolSquare,\n        'chance': circleSymbol,\n        \"terminal\": triangleSymbol\n    };\n\n    static MANUAL_LAYOUT_NAME = 'manual';\n\n\n    onAutoLayoutChanged=[];\n\n    nodeTypeOrder = {\n        'decision' : 0,\n        'chance': 0,\n        'terminal': 1\n    };\n\n    treeMargin = 50;\n    targetSymbolSize={};\n    nodeSeparation = (a, b) => a.parent === b.parent ? 1 : 1.2\n\n    constructor(treeDesigner, data, config){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n        this.config = config;\n\n    }\n\n    update(node){\n        if(node && node.$parent){\n            node.$parent.childEdges.sort((a,b)=>a.childNode.location.y - b.childNode.location.y)\n        }\n        if(!this.isManualLayout()){\n            return this.autoLayout(this.config.type, true);\n        }\n        if(node){\n            this.moveNodeToEmptyPlace(node);\n        }else{\n            this.treeDesigner.redraw(true);\n        }\n    }\n\n    isManualLayout(){\n        return this.config.type === Layout.MANUAL_LAYOUT_NAME;\n    }\n\n    getNewChildLocation(parent){\n        if(!parent){\n            return new model.Point(this.getNodeMinX(), this.getNodeMinY())\n        }\n        var x = parent.location.x + this.config.gridWidth;\n        var y = parent.location.y;\n        if(parent.childEdges.length){\n            y = parent.childEdges[parent.childEdges.length-1].childNode.location.y+1;\n        }\n\n        return new model.Point(x, y)\n    }\n\n    getInjectedNodeLocation(edge){\n\n        var p = edge.$linePoints[2];\n\n        return new model.Point(p[0], p[1])\n    }\n\n    moveNodeToEmptyPlace(node, redrawIfChanged=true){\n        var positionMap = {};\n        var self = this;\n        node.location.x = Math.max(this.getNodeMinX(node), node.location.x);\n        node.location.y = Math.max(this.getNodeMinY(node), node.location.y);\n\n\n        this.nodesSortedByX = this.data.nodes.slice();\n        this.nodesSortedByX.sort((a,b)=>a.location.x - b.location.x);\n\n        function findCollidingNode(node, location){\n            return Utils.find(self.nodesSortedByX, n=>{\n                if(node == n){\n                    return false;\n                }\n\n                var margin = self.config.nodeSize/3;\n                var x = n.location.x;\n                var y = n.location.y;\n\n                return (location.x - margin <= x && location.x + margin >= x\n                    && location.y - margin <= y && location.y + margin >= y)\n            });\n        }\n\n        var stepX = this.config.nodeSize/2;\n        var stepY = this.config.nodeSize+10;\n        var stepXsameParent = 0;\n        var stepYsameParent = 75;\n        var changed = false;\n        var colidingNode;\n        var newLocation = new model.Point(node.location);\n        while(colidingNode = findCollidingNode(node, newLocation)){\n            changed=true;\n            var sameParent = node.$parent && colidingNode.$parent && node.$parent===colidingNode.$parent;\n            if(sameParent){\n                newLocation.move(stepXsameParent, stepYsameParent);\n            }else{\n                newLocation.move(stepX, stepY);\n            }\n        }\n        if(changed){\n            node.moveTo(newLocation.x,newLocation.y, true);\n            if(redrawIfChanged){\n                this.treeDesigner.redraw(true);\n            }\n        }\n    }\n\n    disableAutoLayout(){\n        this.config.type = Layout.MANUAL_LAYOUT_NAME;\n        this._fireOnAutoLayoutChangedCallbacks();\n    }\n\n\n    nodeSymbolSize = {};\n    drawNodeSymbol(path, transition){\n\n        var self = this;\n        var nodeSize = this.config.nodeSize;\n        this.nodeSymbol = d3.symbol().type(d=> self.nodeTypeToSymbol[d.type])\n            .size(d=>self.nodeSymbolSize[d.$id] ? Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", 64) : 64);\n\n        path\n            .each(function (d) {\n                var path = d3.select(this);\n                var prev = path.attr(\"d\");\n                if(!prev){\n                    path.attr(\"d\", self.nodeSymbol);\n                }\n                var size = Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\");\n                if(!size){\n                    var box = path.node().getBBox();\n                    var error = Math.min(nodeSize / box.width, nodeSize / box.height);\n                    size = error * error * (self.nodeSymbolSize[d.$id]||64);\n                    Utils.set(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", size);\n                }\n                if(transition){\n                    path =  path.transition();\n\n                }else{\n                    self.nodeSymbolSize[d.$id] = size;\n                }\n                path.attr(\"d\", self.nodeSymbol);\n                if(transition){\n                    self.nodeSymbolSize[d.$id] = size;\n                }\n            });\n    }\n\n    nodeLabelPosition(selection) {\n        return selection\n            .attr('x', 0)\n            .attr('y', -this.config.nodeSize / 2 - 7)\n    }\n\n    nodePayoffPosition(selection) {\n        return Layout.setHangingPosition(selection)\n            .attr('x', 0)\n            .attr('y', this.config.nodeSize / 2 + 7)\n            .attr('text-anchor', 'middle')\n    }\n\n    nodeAggregatedPayoffPosition(selection) {\n        var x = this.config.nodeSize / 2 + 7;\n        var self = this;\n        selection\n            .attr('x', x)\n            .attr('y', function(d){\n                let fontSize = parseInt(AppUtils.getFontSize(this));\n                let items = d.displayValue('aggregatedPayoff');\n                let number = Utils.isArray(items) ? items.filter(it=>it !== undefined).length : 1;\n                if(number>1){\n                    return -this.getBBox().height/2 + fontSize/2;\n                }\n                return -Math.max(2, 1.8* self.config.nodeSize/fontSize);\n            });\n\n        selection.selectAll('tspan').attr('x', x);\n        return selection;\n            // .attr('text-anchor', 'middle')\n            // .attr('dominant-baseline', 'hanging')\n    }\n\n    nodeProbabilityToEnterPosition(selection) {\n        var self = this;\n\n        return Layout.setHangingPosition(selection)\n            .attr('x', this.config.nodeSize / 2 + 7)\n            .attr('y', function(d){\n                let fontSize = parseInt(AppUtils.getFontSize(this));\n                let aggregatedPayoffs = d.displayValue('aggregatedPayoff');\n                let aggregatedPayoffsNumber = Utils.isArray(aggregatedPayoffs) ? aggregatedPayoffs.filter(it=>it !== undefined).length : 1;\n                if(aggregatedPayoffsNumber>1){\n\n                    return fontSize*0.6\n                }\n\n                return Math.max(2, 1.8* self.config.nodeSize/fontSize);\n            })\n            // .attr('text-anchor', 'middle')\n            // .attr('dominant-baseline', 'central')\n    }\n\n    nodeIndicatorPosition(selection) {\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 8)\n            .attr('y', - this.config.nodeSize/2)\n            .attr('dominant-baseline', 'central')\n            .attr('text-anchor', 'middle')\n    }\n\n    nodeUnfoldButtonPosition(selection) {\n\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 5)\n            .attr('y', 0)\n            .attr('dominant-baseline', 'central')\n    }\n\n    edgeLineD(edge){\n        var line = d3.line()\n            .x(d=> d[0])\n            .y(d=> d[1]);\n        // .curve(d3.curveCatmullRom.alpha(0.5));\n\n\n        var parentNode = edge.parentNode;\n        var childNode = edge.childNode;\n\n        var dX = childNode.location.x - parentNode.location.x;\n        var dY = childNode.location.y - parentNode.location.y;\n\n        var sign = dX>=0 ? 1 : -1;\n\n        var slantStartXOffset = Math.min(dX/2, this.config.nodeSize/2+10);\n        var slantWidth = Math.min(this.config.edgeSlantWidthMax, Math.max(dX/2 - slantStartXOffset, 0));\n\n        var point1 = [parentNode.location.x +this.config.nodeSize/2 + 1, parentNode.location.y];\n        var point2 = [Math.max(parentNode.location.x+slantStartXOffset, point1[0]), parentNode.location.y];\n        var point3 = [parentNode.location.x+slantStartXOffset+slantWidth, childNode.location.y];\n        var point4 = [childNode.location.x - (sign*(Math.max(0, Math.min(this.config.nodeSize/2+8, dX/2)))), childNode.location.y];\n        // var point2 = [parentNode.location.x+dX/2-slantWidth/2, parentNode.location.y];\n        // var point3 = [childNode.location.x-(dX/2-slantWidth/2), childNode.location.y];\n\n        edge.$linePoints = [point1, point2, point3, point4];\n        return line(edge.$linePoints);\n    }\n\n    edgePayoffPosition(selection) {\n        Layout.setHangingPosition(selection)\n            .attr('x', d=>d.$linePoints[2][0] + 2)\n            .attr('y', d=>d.$linePoints[2][1] + 7);\n\n        selection.selectAll('tspan').attr('x', function(d){\n            return d3.select(this.parentNode).datum().$linePoints[2][0] + 2\n        });\n        return selection;\n\n    }\n\n    edgeLabelPosition(selection) {\n        return selection\n            .attr('transform', d=>'translate('+(d.$linePoints[2][0] + 2)+','+(d.$linePoints[2][1] - 7)+')')\n            // .attr('x', d=>d.$linePoints[2][0] + 2)\n            // .attr('y', d=>d.$linePoints[2][1] - 7)\n\n    }\n\n    edgeProbabilityPosition(selection) {\n        return Layout.setHangingPosition(selection)\n            .attr('x', function (d) {\n                var len = this.getComputedTextLength();\n                var min = d.$linePoints[2][0] + 2 + this.previousSibling.childNodes[0].getComputedTextLength() + 7 + len;\n                return Math.max(min, d.$linePoints[3][0] - 8);\n            })\n            .attr('y', d=>d.$linePoints[2][1] + 7)\n    }\n\n    getMinMarginBetweenNodes(){\n      return this.config.nodeSize + 30;\n    }\n\n\n    getNodeMinX(d){\n        var self = this;\n        if(d && d.$parent){// && !self.isNodeSelected(d.$parent)\n            return d.$parent.location.x + self.getMinMarginBetweenNodes();\n        }\n        return self.config.nodeSize/2;\n    }\n\n    getNodeMinY(d){\n        return this.config.nodeSize/2;\n    }\n\n    getNodeMaxX(d){\n        var self = this;\n\n        if(d && d.childEdges.length){\n            return d3.min(d.childEdges, e=>!e.childNode.$hidden ? e.childNode.location.x : 9999999)-self.getMinMarginBetweenNodes();\n        }\n        return 9999999;\n    }\n\n    setGridWidth(width, withoutStateSaving){\n        var self=this;\n        if(this.config.gridWidth===width){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    gridWidth: self.config.gridWidth\n                },\n                onUndo: (data)=> {\n                    self.setGridWidth(data.gridWidth, true);\n                },\n                onRedo: (data)=> {\n                    self.setGridWidth(width, true);\n                }\n            });\n        }\n\n        this.config.gridWidth=width;\n        this.update();\n    }\n\n    setGridHeight(gridHeight, withoutStateSaving){\n        var self=this;\n        if(this.config.gridHeight===gridHeight){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    gridHeight: self.config.gridHeight\n                },\n                onUndo: (data)=> {\n                    self.setGridHeight(data.gridHeight, true);\n                },\n                onRedo: (data)=> {\n                    self.setGridHeight(gridHeight, true);\n                }\n            });\n        }\n\n        this.config.gridHeight=gridHeight;\n        this.update();\n    }\n\n    setNodeSize(nodeSize, withoutStateSaving){\n        var self=this;\n        if(this.config.nodeSize===nodeSize){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    nodeSize: self.config.nodeSize\n                },\n                onUndo: (data)=> {\n                    self.setNodeSize(data.nodeSize, true);\n                },\n                onRedo: (data)=> {\n                    self.setNodeSize(nodeSize, true);\n                }\n            });\n        }\n\n        this.config.nodeSize=nodeSize;\n        this.update();\n        if(this.isManualLayout()){\n            this.fitNodesInPlottingRegion(self.data.getRoots());\n            this.treeDesigner.redraw(true);\n        }\n    }\n\n    setEdgeSlantWidthMax(width, withoutStateSaving){\n        var self=this;\n        if(this.config.edgeSlantWidthMax===width){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    edgeSlantWidthMax: self.config.edgeSlantWidthMax\n                },\n                onUndo: (data)=> {\n                    self.setEdgeSlantWidthMax(data.edgeSlantWidthMax, true);\n                },\n                onRedo: (data)=> {\n                    self.setEdgeSlantWidthMax(width, true);\n                }\n            });\n        }\n\n        this.config.edgeSlantWidthMax=width;\n        this.treeDesigner.redraw(true);\n    }\n\n    autoLayout(type, withoutStateSaving){\n        var self=this;\n\n\n\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    newLayout: type,\n                    currentLayout: self.config.type\n                },\n                onUndo: (data)=> {\n                    self.config.type = data.currentLayout;\n                    self._fireOnAutoLayoutChangedCallbacks();\n                },\n                onRedo: (data)=> {\n                    self.autoLayout(data.newLayout, true);\n                }\n            });\n        }\n        this.config.type = type;\n        if(!this.data.nodes.length){\n            this._fireOnAutoLayoutChangedCallbacks();\n            return;\n        }\n\n        var prevTreeMaxY = self.getNodeMinY();\n        this.data.getRoots().forEach(r=>{\n            var root = d3.hierarchy(r, d=>{\n                return d.childEdges.filter(e=>!e.$hidden).map(e=>e.childNode);\n            });\n\n            // root.sort((a,b)=>self.nodeTypeOrder[a.data.type]-self.nodeTypeOrder[b.data.type]);\n            root.sort((a,b)=>a.data.location.y - b.data.location.y);\n\n\n            var layout;\n            if(type==='cluster'){\n                layout = d3.cluster();\n            }else{\n                layout = d3.tree();\n            }\n            layout.nodeSize([self.config.gridHeight, self.config.gridWidth]);\n            layout.separation(self.nodeSeparation);\n\n            layout(root);\n            var minY = 999999999;\n            root.each(d=>{\n                minY = Math.min(minY, d.x);\n            });\n\n            var dy = root.x - minY + prevTreeMaxY;\n            var dx = self.getNodeMinX();\n            var maxY=0;\n            root.each(d=>{\n                d.data.location.x = d.y + dx;\n                d.data.location.y = d.x + dy;\n\n                maxY = Math.max(maxY, d.data.location.y);\n            });\n\n            prevTreeMaxY = maxY + self.config.nodeSize+self.treeMargin;\n        });\n\n\n        // this.transition = true;\n        this.treeDesigner.redraw(true);\n        // this.transition = false;\n\n        this._fireOnAutoLayoutChangedCallbacks();\n        return this;\n    }\n\n    fitNodesInPlottingRegion(nodes){\n        var self = this;\n        var topY = d3.min(nodes, n=>n.location.y);\n        var minY = self.getNodeMinY();\n        var dy = topY - minY;\n\n        var minX = d3.min(nodes, n=>n.location.x);\n        var dx = minX - self.getNodeMinX();\n\n        if(dy<0 ||  dx<0){\n            nodes.forEach(n=>n.move(-dx, -dy));\n        }\n    }\n\n    moveNodes(nodes, dx, dy, pivot){\n        var self = this;\n        var limit = self.config.limitNodePositioning;\n        if(limit){\n            if(dx<0){\n                nodes.sort((a,b)=>a.location.x-b.location.x);\n            }else{\n                nodes.sort((a,b)=>b.location.x-a.location.x);\n            }\n        }\n\n\n        var minY = d3.min(nodes, d=>d.location.y);\n        if(minY + dy < self.getNodeMinY()){\n            dy = self.getNodeMinY() - minY;\n        }\n\n        nodes.forEach(d=>{\n            if(limit){\n                Layout.backupNodeLocation(d);\n                var minX = self.getNodeMinX(d);\n                var maxX = self.getNodeMaxX(d);\n\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\n                d.location.y += dy;\n            }else{\n                d.location.x +=dx;\n                d.location.y += dy;\n            }\n\n        });\n\n\n        var revertX = pivot && self.config.limitNodePositioning && (pivot.location.x === pivot.$location.x);\n\n        nodes.forEach(d=>{\n            if(revertX){\n                d.location.x = d.$location.x;\n            }\n            self.treeDesigner.updateNodePosition(d);\n        });\n\n\n    }\n\n    static backupNodeLocation(node) {\n        node.$location = new model.Point(node.location);\n    }\n\n    _fireOnAutoLayoutChangedCallbacks(){\n        this.onAutoLayoutChanged.forEach(c=>c(this.config.type));\n    }\n\n    static setHangingPosition(selection){\n        // window.setTimeout(function(){\n        //     selection.each(function(){\n        //         var h =  this.getBBox().height;\n        //         d3.select(this).attr('dy', h);\n        //     });\n        // },0);\n\n        if(AppUtils.isHidden(selection.node())){ // setting hanging position of hidden elements fails on firefox\n            return selection;\n        }\n\n\n        selection.each(function(){\n            var h =  this.getBBox().height;\n            d3.select(this).attr('dy', '0.75em');\n        });\n\n        return selection;\n    }\n\n}\n\n\n","import {AppUtils} from './app-utils'\nimport * as d3 from './d3'\nimport {ContextMenu} from './context-menu/context-menu'\n\nexport class NodeDragHandler{\n\n    treeDesigner;\n    data;\n    config;\n\n    drag;\n\n\n    constructor(treeDesigner, data){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n\n        var self = this;\n        this.drag = d3.drag()\n            .subject(function(d) {\n                if(d==null){\n                    return  {\n                        x: event.x,\n                        y: event.y\n                    };\n                }\n                var t = d3.select(this);\n                return {\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\n                };\n            })\n            .on(\"start\", function(d){\n                self.dragStarted.call(this,d, self)\n            })\n            .on(\"drag\", function (d) {\n                self.onDrag.call(this, d, self);\n            })\n            .on(\"end\", function (d) {\n                self.dragEnded.call(this, d, self);\n            })\n    }\n\n\n    dragStarted(d,self) {\n        if(self.ignoreDrag){\n            self.ignoreDrag=false;\n            self.ignoredDrag=true;\n            return;\n        }\n        self.ignoredDrag=false;\n\n        // self.treeDesigner.layout.disableAutoLayout();\n        ContextMenu.hide();\n        var node = d3.select(this);\n        if(!node.classed(\"selected\")){\n            self.treeDesigner.clearSelection();\n        }\n\n        self.treeDesigner.selectNode(d);\n        node.classed(\"selected dragging\", true);\n        self.selectedNodes = self.treeDesigner.getSelectedNodes(true);\n        self.prevDragEvent = d3.event;\n        self.dragEventCount = 0;\n    }\n\n    onDrag(draggedNode, self){\n        if(self.ignoredDrag){\n            return;\n        }\n\n        if(self.dragEventCount==2){\n            self.data.saveState();\n        }\n        self.dragEventCount++;\n        if(self.selectedNodes.length>5 && self.dragEventCount%2!=1){\n            return;\n        }\n\n        var dx = d3.event.x - self.prevDragEvent.x;\n        var dy = d3.event.y- self.prevDragEvent.y;\n        self.treeDesigner.layout.moveNodes(self.selectedNodes, dx, dy, draggedNode);\n\n\n        self.prevDragEvent = d3.event;\n        self.treeDesigner.redrawEdges();\n        self.treeDesigner.updatePlottingRegionSize();\n    }\n\n    dragEnded(draggedNode, self){\n        var node = d3.select(this).classed(\"dragging\", false);\n        if(self.ignoredDrag){\n            return;\n        }\n        self.treeDesigner.layout.update(draggedNode)\n    }\n\n    cancelDrag(){\n        this.ignoreDrag = true;\n    }\n\n}\n\n\n","var epsilon = 1e-12;\nvar pi = Math.PI;\nvar halfPi = pi / 2;\nvar tau = 2 * pi;\n\nexport default {\n    /*draw: function(context, size) {\n        var r = Math.sqrt(size / pi);\n        context.moveTo(r, 0);\n        context.arc(0, 0, r, 0, tau);\n    }*/\n    draw: function(context, size) {\n\n        var r = Math.sqrt(size / pi);\n        var dist =0.552284749831 * r;\n\n        context.moveTo(-r, 0)\n        // context.lineTo(2*r, 2*r)\n        // context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\n        context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\n\n        context.bezierCurveTo(dist, -r, r, -dist, r,0);\n\n        context.bezierCurveTo(r, dist, dist, r, 0, r);\n\n        context.bezierCurveTo(-dist, r, -r, dist, -r, 0);\n    }\n};\n","var sqrt3 = Math.sqrt(3);\n\nexport default {\n    draw: function(context, size) {\n        var r = Math.sqrt(size / Math.PI);\n        context.moveTo(-r, 0);\n        context.lineTo(0.9*r, -r);\n        context.lineTo(0.9*r, r);\n        context.closePath();\n    }\n};\n","import {Utils} from \"sd-utils\";\nimport {i18n} from './i18n/i18n'\n\nexport class Templates{\n\n    static growl = require('./templates/growl_message.html');\n\n    static get(templateName, variables){\n        var compiled = Utils.template(Templates[templateName],{ 'imports': { 'i18n': i18n, 'Templates': Templates, 'include': function(n, v) {return Templates.get(n, v)} } });\n        if(variables){\n            variables.variables = variables;\n        }else{\n            variables = {variables:{}}\n        }\n        return compiled(variables)\n\n    }\n\n    static styleRule(selector, props){\n        var s = selector+ '{';\n        props.forEach(p=> s+=Templates.styleProp(p[0], p[1]));\n        s+='} ';\n        return s;\n    }\n    static styleProp(styleName, variableName){\n        return  styleName+': <%= '+variableName+' %>; '\n    }\n\n    static treeDesignerSelector = 'svg.sd-tree-designer';\n    static nodeSelector(type, clazz){\n        var s = Templates.treeDesignerSelector+' .node';\n        if(type){\n            s+='.'+type+'-node';\n        }\n        if(clazz){\n            s+='.'+clazz;\n        }\n        return s;\n    }\n    static edgeSelector(clazz){\n        var s = Templates.treeDesignerSelector+' .edge';\n        if(clazz){\n            s+='.'+clazz;\n        }\n        return s;\n    }\n\n    static treeDesignerStyles =\n\n        Templates.styleRule(Templates.treeDesignerSelector,[\n            ['font-size', 'fontSize'],\n            ['font-family', 'fontFamily'],\n            ['font-weight', 'fontWeight'],\n            ['font-style', 'fontStyle']\n        ])+\n        //   node\n        Templates.styleRule(Templates.nodeSelector()+' path',[\n            ['fill', 'node.fill'],\n            ['stroke-width', 'node.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('decision', 'optimal')+' path, '+Templates.nodeSelector('chance', 'optimal')+' path,' +Templates.nodeSelector('terminal', 'optimal')+' path',[\n            ['stroke', 'node.optimal.stroke'],\n            ['stroke-width', 'node.optimal.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .label',[\n            ['font-size', 'node.label.fontSize'],\n            ['fill', 'node.label.color']\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .payoff',[\n            ['font-size', 'node.payoff.fontSize'],\n            ['fill', 'node.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .payoff.negative',[\n            ['fill', 'node.payoff.negativeColor'],\n        ])+\n\n        //    decision node\n        Templates.styleRule(Templates.nodeSelector('decision')+' path',[\n            ['fill', 'node.decision.fill'],\n            ['stroke', 'node.decision.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('decision', 'selected')+' path',[\n            ['fill', 'node.decision.selected.fill']\n        ])+\n\n        //    chance node\n        Templates.styleRule(Templates.nodeSelector('chance')+' path',[\n            ['fill', 'node.chance.fill'],\n            ['stroke', 'node.chance.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('chance', 'selected')+' path',[\n            ['fill', 'node.chance.selected.fill']\n        ])+\n\n        //    terminal node\n        Templates.styleRule(Templates.nodeSelector('terminal')+' path',[\n            ['fill', 'node.terminal.fill'],\n            ['stroke', 'node.terminal.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal', 'selected')+' path',[\n            ['fill', 'node.terminal.selected.fill']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff',[\n            ['font-size', 'node.terminal.payoff.fontSize'],\n            ['fill', 'node.terminal.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff.negative',[\n            ['fill', 'node.terminal.payoff.negativeColor'],\n        ])+\n\n\n        //probability\n        Templates.styleRule(Templates.treeDesignerSelector+' .node .probability-to-enter, '+Templates.treeDesignerSelector+' .edge .probability',[\n            ['font-size', 'probability.fontSize'],\n            ['fill', 'probability.color']\n        ])+\n\n        //edge\n        Templates.styleRule(Templates.edgeSelector()+' path',[\n            ['stroke', 'edge.stroke'],\n            ['stroke-width', 'edge.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow path',[\n            ['fill', 'edge.stroke'],\n        ])+\n        Templates.styleRule(Templates.edgeSelector('optimal')+' path',[\n            ['stroke', 'edge.optimal.stroke'],\n            ['stroke-width', 'edge.optimal.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-optimal path',[\n            ['fill', 'edge.optimal.stroke'],\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector('selected')+' path',[\n            ['stroke', 'edge.selected.stroke'],\n            ['stroke-width', 'edge.selected.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-selected path',[\n            ['fill', 'edge.selected.stroke'],\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector()+' .label',[\n            ['font-size', 'edge.label.fontSize'],\n            ['fill', 'edge.label.color']\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector()+' .payoff',[\n            ['font-size', 'edge.payoff.fontSize'],\n            ['fill', 'edge.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.edgeSelector()+' .payoff.negative',[\n            ['fill', 'edge.payoff.negativeColor'],\n        ])+\n\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-title',[\n            ['font-size', 'title.fontSize'],\n            ['font-weight', 'title.fontWeight'],\n            ['font-style', 'title.fontStyle'],\n            ['fill', 'title.color']\n        ]) +\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-description',[\n            ['font-size', 'description.fontSize'],\n            ['font-weight', 'description.fontWeight'],\n            ['font-style', 'description.fontStyle'],\n            ['fill', 'description.color']\n        ])\n}\n\n\n\n\n","module.exports = \"module.exports = \\\"<div class=\\\\\\\"sd-growl-message <%=type%>\\\\\\\">\\\\n    <div class=\\\\\\\"sd-growl-message-text\\\\\\\">\\\\n        <%= message %>\\\\n    </div>\\\\n</div>\\\\n\\\";\\n\";\n","import {AppUtils} from './app-utils'\nimport * as d3 from './d3'\nimport {ContextMenu} from './context-menu/context-menu'\n\nexport class TextDragHandler{\n\n    treeDesigner;\n    data;\n    config;\n\n    drag;\n\n\n    constructor(treeDesigner, data){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n\n        var self = this;\n        this.drag = d3.drag()\n            .subject(function(d) {\n                if(d==null){\n                    return  {\n                        x: event.x,\n                        y: event.y\n                    };\n                }\n                var t = d3.select(this);\n                return {\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\n                };\n            })\n            .on(\"start\", function(d){\n                self.dragStarted.call(this,d, self)\n            })\n            .on(\"drag\", function (d) {\n                self.onDrag.call(this, d, self);\n            })\n            .on(\"end\", function (d) {\n                self.dragEnded.call(this, d, self);\n            })\n    }\n\n\n    dragStarted(d,self) {\n        // self.treeDesigner.layout.disableAutoLayout();\n        ContextMenu.hide();\n        var text = d3.select(this);\n        if(!text.classed(\"selected\")){\n            self.treeDesigner.clearSelection();\n        }\n\n        self.treeDesigner.selectText(d);\n        text.classed(\"selected dragging\", true);\n        self.selectedNodes = self.treeDesigner.getSelectedNodes();\n        self.prevDragEvent = d3.event;\n        self.dragEventCount = 0;\n    }\n\n    onDrag(draggedText, self){\n        if(self.dragEventCount==2){\n            self.data.saveState();\n        }\n        self.dragEventCount++;\n\n        var dx = d3.event.x - self.prevDragEvent.x;\n        var dy = d3.event.y- self.prevDragEvent.y;\n\n        draggedText.location.move(dx, dy);\n        self.treeDesigner.updateTextPosition(draggedText);\n\n        self.prevDragEvent = d3.event;\n        self.treeDesigner.updatePlottingRegionSize();\n    }\n\n    dragEnded(draggedNode, self){\n         d3.select(this).classed(\"dragging\", false);\n    }\n\n}\n\n\n","import * as d3 from './d3'\nimport {Utils} from 'sd-utils'\n\nexport class Tooltip {\n    static getContainer(){\n        return d3.select(\"body\").selectOrAppend('div.sd-tooltip');\n    }\n\n    static show(html, xOffset = 5, yOffset = 28, event, duration=null) {\n        var container = Tooltip.getContainer()\n            .style(\"opacity\", 0);\n        container.transition()\n            .duration(200)\n            .style(\"opacity\", .98);\n        container.html(html);\n        Tooltip.updatePosition(xOffset, yOffset, event);\n        if(duration){\n            setTimeout(function(){\n                Tooltip.hide();\n            }, duration)\n        }\n    }\n\n    static updatePosition(xOffset = 5, yOffset = 28, event) {\n        event = event || d3.event;\n        Tooltip.getContainer()\n            .style(\"left\", (event.pageX + xOffset) + \"px\")\n            .style(\"top\", (event.pageY - yOffset) + \"px\");\n    }\n\n    static hide(duration = 500) {\n        var t = Tooltip.getContainer();\n        if(duration){\n            t = t.transition().duration(duration)\n        }\n        t.style(\"opacity\", 0);\n    }\n\n    static attach(target, htmlOrFn, xOffset, yOffset) {\n        target.on('mouseover', function (d, i) {\n            var html = null;\n            if (Utils.isFunction(htmlOrFn)) {\n                html = htmlOrFn(d, i);\n            } else {\n                html = htmlOrFn;\n            }\n\n            if (html !== null && html !== undefined && html !== '') {\n                Tooltip.show(html, xOffset, yOffset);\n            }else{\n                Tooltip.hide(0);\n            }\n\n        }).on('mousemove', function (d) {\n            Tooltip.updatePosition(xOffset, yOffset);\n        }).on(\"mouseout\", function (d) {\n            Tooltip.hide();\n        });\n    }\n}\n","import * as d3 from \"./d3\";\nimport {Utils} from \"sd-utils\";\nimport {AppUtils} from \"./app-utils\";\nimport {domain as model} from \"sd-model\";\nimport {ContextMenu} from \"./context-menu/context-menu\";\nimport {MainContextMenu} from \"./context-menu/main-context-menu\";\nimport {NodeContextMenu} from \"./context-menu/node-context-menu\";\nimport {Layout} from \"./layout\";\nimport {NodeDragHandler} from \"./node-drag-handler\";\nimport {Tooltip} from \"./tooltip\";\nimport {Templates} from \"./templates\";\nimport {TextDragHandler} from \"./text-drag-handler\";\nimport {TextContextMenu} from \"./context-menu/text-context-menu\";\nimport {EdgeContextMenu} from \"./context-menu/edge-context-menu\";\nimport * as Hammer from \"hammerjs\";\nimport {i18n} from \"./i18n/i18n\";\n\n\nexport class TreeDesignerConfig {\n    width = undefined;\n    height = undefined;\n    margin = {\n        left: 25,\n        right: 25,\n        top: 25,\n        bottom: 25\n    };\n    lng = 'en';\n    layout= {\n        type: 'tree',\n        nodeSize: 40,\n        limitNodePositioning: true,\n        gridHeight: 75,\n        gridWidth: 150,\n        edgeSlantWidthMax: 20\n    };\n    fontFamily = 'sans-serif';\n    fontSize = '12px';\n    fontWeight = 'normal';\n    fontStyle = 'normal';\n    node = {\n        strokeWidth: '1px',\n        optimal: {\n            stroke: '#006f00',\n            strokeWidth: '1.5px',\n        },\n        label: {\n            fontSize: '1em',\n            color: 'black'\n        },\n        payoff: {\n            fontSize: '1em',\n            color: 'black',\n            negativeColor: '#b60000'\n        },\n        decision: {\n            fill: '#ff7777',\n            stroke: '#660000',\n\n            selected: {\n                fill: '#aa3333',\n                // stroke: '#666600'\n            }\n        },\n        chance: {\n            fill: '#ffff44',\n            stroke: '#666600',\n\n            selected: {\n                fill: '#aaaa00',\n                // stroke: '#666600'\n            }\n        },\n        terminal:{\n            fill: '#44ff44',\n            stroke: 'black',\n            selected: {\n                fill: '#00aa00',\n                // stroke: 'black'\n            },\n            payoff: {\n                fontSize: '1em',\n                color: 'black',\n                negativeColor: '#b60000'\n            },\n        }\n    };\n    edge={\n        stroke: '#424242',\n        strokeWidth: '1.5',\n        optimal:{\n            stroke: '#006f00',\n            strokeWidth: '2.4',\n        },\n        selected:{\n            stroke: '#045ad1',\n            strokeWidth: '3.5',\n        },\n        label: {\n            fontSize: '1em',\n            color: 'back'\n        },\n        payoff:{\n            fontSize: '1em',\n            color: 'black',\n            negativeColor: '#b60000'\n        }\n\n    };\n    probability = {\n        fontSize: '1em',\n        color: '#0000d7'\n    };\n    title = {\n        fontSize: '16px',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        color: '#000000',\n        margin:{\n            top: 15,\n            bottom: 10\n        }\n    };\n    description = {\n        show: true,\n        fontSize: '12px',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        color: '#000000',\n        margin:{\n            top: 5,\n            bottom: 10\n        }\n    };\n\n    readOnly= false;\n    disableAnimations=false;\n    forceFullEdgeRedraw=false;\n    hideLabels=false;\n    hidePayoffs=false;\n    hideProbabilities=false;\n    raw=false;\n\n\n    payoffNumberFormatter = (v, i)=> v;\n    probabilityNumberFormatter  = (v)=> v;\n\n    onNodeSelected = (node) => {};\n    onEdgeSelected = (edge) => {};\n    onTextSelected = (text) => {};\n    onSelectionCleared = () => {};\n\n    operationsForObject = (o) => [];\n\n    payoffNames = [null, null];\n    maxPayoffsToDisplay = 1;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n\nexport class TreeDesigner {\n\n    config;\n    container;\n    data; //data model manager\n    svg;\n\n    constructor(container, dataModel, config){\n        this.setConfig(config);\n        this.data = dataModel;\n        this.initContainer(container);\n        this.init();\n    }\n\n    setConfig(config) {\n        this.config = new TreeDesignerConfig(config);\n        if(this.layout){\n            this.layout.config=this.config.layout;\n        }\n        this.updateCustomStyles();\n        return this;\n    }\n\n    init(){\n\n        this.initSvg();\n        this.initLayout();\n        this.initI18n();\n        this.initBrush();\n        this.initEdgeMarkers();\n\n        this.updateCustomStyles();\n        if(!this.config.readOnly){\n            this.initMainContextMenu();\n            this.initNodeContextMenu();\n            this.initEdgeContextMenu();\n            this.initNodeDragHandler();\n            this.initTextDragHandler();\n            this.initTextContextMenu();\n        }\n        this.redraw();\n    }\n\n    initI18n() {\n        i18n.init(this.config.lng);\n    }\n\n\n    updateCustomStyles(){\n        d3.select('head').selectOrAppend('style#sd-tree-designer-style').html(Templates.get('treeDesignerStyles', this.config));\n        return this;\n    }\n\n    initLayout(){\n        this.layout = new Layout(this, this.data, this.config.layout);\n    }\n\n    initNodeDragHandler(){\n        this.nodeDragHandler = new NodeDragHandler(this, this.data);\n    }\n\n    initTextDragHandler(){\n        this.textDragHandler = new TextDragHandler(this, this.data);\n    }\n\n    redraw(withTransitions=false){\n\n        var self = this;\n        withTransitions = !self.config.disableAnimations && withTransitions;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(withTransitions);\n        if(withTransitions){\n            self.transitionPrev = self.transition;\n            self.transition = true;\n        }\n        this.redrawNodes();\n        this.redrawEdges();\n        this.redrawFloatingTexts();\n        this.updateValidationMessages();\n        if(withTransitions){\n            self.transition =  self.transitionPrev;\n        }\n        setTimeout(function(){\n            self.updatePlottingRegionSize();\n        },10);\n\n        return this;\n    }\n\n    computeAvailableSpace(){\n        this.availableHeight = AppUtils.sanitizeHeight(this.config.height, this.container, this.config.margin);\n        this.availableWidth = AppUtils.sanitizeWidth(this.config.width, this.container, this.config.margin);\n    }\n\n    initSvg() {\n        var c = this;\n        var self = this;\n        this.computeAvailableSpace();\n        this.svg = this.container.selectOrAppend('svg.sd-tree-designer');\n        this.svg.attr('width', this.availableWidth).attr('height', this.availableHeight);\n\n        this.mainGroup = this.svg.selectOrAppend('g.main-group');\n        this.updateMargin();\n\n\n        if (!this.config.width) {\n            d3.select(window)\n                .on(\"resize.tree-designer\", function () {\n                    self.updatePlottingRegionSize();\n                    self.redrawDiagramTitle();\n                });\n        }\n\n        var mc = new Hammer.Manager(this.svg.node(), {touchAction : 'auto'});\n        mc.add(new Hammer.Press({\n            pointerType: 'touch'\n        }));\n\n        mc.add(new Hammer.Pinch({\n            pointerType: 'touch'\n        }));\n\n        var cancel;\n        mc.on('pinchstart', function(){\n            self.disableBrush();\n        })\n        mc.on('pinch', function(){\n            cancel = Utils.waitForFinalEvent(()=>self.enableBrush(), 'pinchend', 5000)\n        })\n    }\n\n    updateMargin(withTransitions){\n        var self = this;\n        var margin = this.config.margin;\n        var group = this.mainGroup;\n        if(withTransitions){\n            group = group.transition();\n        }\n\n        this.topMargin = margin.top;\n        if(this.diagramTitle||this.diagramDescription){\n            this.topMargin = parseInt(this.diagramTitle ? this.config.title.margin.top : 0) + this.getTitleGroupHeight()\n                +  Math.max(this.topMargin, parseInt(this.config.title.margin.bottom));\n        }\n\n        group.attr(\"transform\", \"translate(\" + margin.left + \",\" + this.topMargin + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\n    }\n\n    setMargin(margin, withoutStateSaving){\n        var self=this;\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    margin: Utils.clone(self.config.margin)\n                },\n                onUndo: (data)=> {\n                    self.setMargin(data.margin, true);\n                },\n                onRedo: (data)=> {\n                    self.setMargin(margin, true);\n                }\n            });\n        }\n        Utils.deepExtend(this.config.margin, margin);\n        this.redrawDiagramTitle();\n        this.updateMargin(true);\n    }\n\n    initContainer(containerIdOrElem) {\n        if (Utils.isString(containerIdOrElem)) {\n            var selector = containerIdOrElem.trim();\n\n            if (!Utils.startsWith(selector, '#') && !Utils.startsWith(selector, '.')) {\n                selector = '#' + selector;\n            }\n            this.container = d3.select(selector);\n        } else if(containerIdOrElem._parents){\n            this.container = containerIdOrElem\n        }else{\n            this.container = d3.select(containerIdOrElem);\n        }\n    }\n\n    updatePlottingRegionSize() {\n        var changed = false;\n        this.computeAvailableSpace();\n        var margin = this.config.margin;\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        var mainGroupBox = this.mainGroup.node().getBBox();\n        var newSvgWidth = mainGroupBox.width+mainGroupBox.x+margin.left+margin.right;\n        this.container.classed('with-overflow-x', newSvgWidth>=this.availableWidth);\n        newSvgWidth = Math.max(newSvgWidth, this.availableWidth);\n        if(svgWidth!=newSvgWidth){\n            changed = true;\n            this.svg.attr('width', newSvgWidth);\n        }\n        var newSvgHeight = mainGroupBox.height+mainGroupBox.y+this.topMargin+margin.bottom;\n\n        this.container.classed('with-overflow-y', newSvgHeight>=this.availableHeight);\n        newSvgHeight = Math.max(newSvgHeight, this.availableHeight);\n        if(svgHeight!=newSvgHeight){\n            changed=true;\n            this.svg.attr('height', newSvgHeight);\n        }\n        if(changed){\n            this.updateBrushExtent()\n        }\n\n\n    }\n\n    redrawNodes() {\n        var self = this;\n\n\n        var nodesContainer = this.mainGroup.selectOrAppend('g.nodes');\n        var nodes = nodesContainer.selectAll('.node').data(this.data.nodes.filter(d=>!d.$hidden), (d,i)=> d.$id);\n        nodes.exit().remove();\n        var nodesEnter = nodes.enter().append('g')\n            .attr('id', d=>'node-'+d.$id)\n            .attr('class', d=>d.type+'-node node')\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\n        nodesEnter.append('path');\n\n        var labelEnter = nodesEnter.append('text').attr('class', 'label');\n        var payoffEnter = nodesEnter.append('text').attr('class', 'payoff computed');\n        var indicatorEnter = nodesEnter.append('text').attr('class', 'error-indicator').text('!!');\n        var aggregatedPayoffEnter = nodesEnter.append('text').attr('class', 'aggregated-payoff');\n        var probabilityToEnterEnter = nodesEnter.append('text').attr('class', 'probability-to-enter');\n\n        var nodesMerge = nodesEnter.merge(nodes);\n        nodesMerge.classed('optimal', (d)=>self.isOptimal(d));\n\n        var nodesMergeT = nodesMerge;\n        if(this.transition){\n            nodesMergeT = nodesMerge.transition();\n            nodesMergeT.on('end', ()=> self.updatePlottingRegionSize())\n        }\n        nodesMergeT\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')')\n\n        var path = nodesMerge.select('path');\n        this.layout.drawNodeSymbol(path,this.transition);\n\n        /*path\n            .style('fill', d=> {\n                // if(self.isNodeSelected(d)){\n                //     return self.config.node[d.type].selected.fill\n                // }\n                return self.config.node[d.type].fill\n            })\n            .style('stroke', d=> self.config.node[d.type].stroke)\n            .style('stroke-width', d=> {\n                if(self.config.node[d.type].strokeWidth!==undefined){\n                    return self.config.node[d.type].strokeWidth;\n                }\n                return self.config.node.strokeWidth;\n            });\n        */\n        this.layout.nodeLabelPosition(labelEnter);\n        var labelMerge = nodesMerge.select('text.label');\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\n        var labelMergeT = nodesMergeT.select('text.label');\n        labelMergeT.each(this.updateTextLines);\n        this.layout.nodeLabelPosition(labelMergeT)\n            .attr('text-anchor', 'middle')\n\n        var payoff = nodesMerge.select('text.payoff');\n\n        var payoffTspans = payoff.selectAll('tspan').data(d=>{\n            let item = d.displayValue('childrenPayoff');\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\n        });\n        payoffTspans.exit().remove();\n\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\n        payoffTspansM\n            // .attr('dominant-baseline', 'hanging')\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0')\n            .classed('negative', d=> {\n                return d!==null && d<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\n            .text((d, i)=> {\n                var val = d\n\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\n            });\n        this.attachPayoffTooltip(payoffTspansM);\n\n\n        var payoffT = payoff;\n        if(this.transition){\n            payoffT = payoff.transition();\n        }\n\n        this.layout.nodePayoffPosition(payoffEnter);\n        this.layout.nodePayoffPosition(payoffT);\n\n        var aggregatedPayoff = nodesMerge.select('text.aggregated-payoff');\n        var aggregatedPayoffTspans = aggregatedPayoff.selectAll('tspan').data(d=>{\n            let item = d.displayValue('aggregatedPayoff');\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\n        });\n        aggregatedPayoffTspans.exit().remove();\n        var aggregatedPayoffTspansM = aggregatedPayoffTspans.enter().append('tspan').merge(aggregatedPayoffTspans)\n            .attr('dy', (d,i)=>i>0 ? '0.95em': undefined)\n            .classed('negative', d=> {\n                return d!==null && d<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\n            .text((val, i)=> {\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\n            });\n\n        this.attachPayoffTooltip(aggregatedPayoffTspansM, 'aggregatedPayoff');\n\n        var aggregatedPayoffT = aggregatedPayoff;\n        if(this.transition){\n            aggregatedPayoffT = aggregatedPayoff.transition();\n        }\n\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffEnter);\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffT);\n\n        var probabilityToEnter = nodesMerge.select('text.probability-to-enter')\n            .text(d=>{\n                var val = d.displayValue('probabilityToEnter');\n                return val!==null ? (isNaN(val) ? val : self.config.probabilityNumberFormatter(val)): ''\n            })\n            .classed('sd-hidden', this.config.hideProbabilities || this.config.raw);\n        Tooltip.attach(probabilityToEnter, i18n.t('tooltip.node.probabilityToEnter'));\n\n\n        var probabilityToEnterT = probabilityToEnter;\n        if(this.transition){\n            probabilityToEnterT = probabilityToEnter.transition();\n        }\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterEnter);\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterT);\n\n\n        var indicator = nodesMerge.select('text.error-indicator');\n        indicator.classed('sd-hidden', this.config.raw)\n        this.layout.nodeIndicatorPosition(indicatorEnter);\n        this.layout.nodeIndicatorPosition(indicator);\n\n        if(this.nodeDragHandler){\n            nodesMerge.call(this.nodeDragHandler.drag);\n        }\n\n        nodesMerge.on('contextmenu', this.nodeContextMenu);\n        nodesMerge.on('dblclick', this.nodeContextMenu)\n        nodesMerge.each(function(d, i){\n            var nodeElem = this;\n            var mc = new Hammer.Manager(nodeElem);\n            mc.add(new Hammer.Press({\n                pointerType: 'touch'\n            }));\n            mc.on('press', function(e){\n                if(e.pointerType=='touch'){\n                    self.nodeDragHandler.cancelDrag();\n                }\n            })\n\n\n            if(d.folded){\n                let button = d3.select(nodeElem).selectOrAppend('text.sd-unfold-button')\n                    .text(\"[+]\")\n                    .on('click dbclick mousedown', ()=>self.foldSubtree(d, false)); //firefox detects only mousedown event - related to drag handler\n\n                self.layout.nodeUnfoldButtonPosition(button);\n                Tooltip.attach(button, i18n.t('contextMenu.node.unfold'));\n            }else{\n                d3.select(nodeElem).select('.sd-unfold-button').remove();\n            }\n\n        })\n    }\n\n    attachPayoffTooltip(selection, payoffFiledName = 'payoff', object='node'){\n        var self = this;\n        Tooltip.attach(selection, (d, i)=>{\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\n                return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.named',{value: d.payoff, number: i+1, name: self.config.payoffNames[i]})\n            }\n            return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.default',{value: d.payoff, number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\n        });\n    }\n\n    updateTextLines(d){ //helper method for splitting text to tspans\n        var lines = d.name ? d.name.split('\\n') : [];\n        lines.reverse();\n        var tspans = d3.select(this).selectAll('tspan').data(lines);\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .text(l=>l)\n            .attr('dy', (d,i)=>i>0 ? '-1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n    }\n\n    isOptimal(d){\n        return d.displayValue('optimal');\n    }\n\n    redrawEdges() {\n        var self = this;\n        var edgesContainer = this.mainGroup.selectOrAppend('g.edges');\n        if(self.config.forceFullEdgeRedraw){\n            edgesContainer.selectAll(\"*\").remove();\n        }\n\n        var edges = edgesContainer.selectAll('.edge').data(this.data.edges.filter(e=>!e.$hidden), (d,i)=> d.$id);\n        edges.exit().remove();\n        var edgesEnter = edges.enter().append('g')\n            .attr('id', d=>'edge-'+d.$id)\n            .attr('class', 'edge');\n\n\n        edgesEnter.append('path');\n        var labelEnter = edgesEnter.appendSelector('g.label-group');\n        labelEnter.append('text').attr('class', 'label');\n        var payoffEnter = edgesEnter.append('text').attr('class', 'payoff');\n        var probabilityEnter = edgesEnter.append('text').attr('class', 'probability');\n\n\n        var edgesMerge = edgesEnter.merge(edges);\n\n\n        var optimalClassName = 'optimal';\n        edgesMerge.classed(optimalClassName, (d)=>self.isOptimal(d));\n\n        var edgesMergeT = edgesMerge;\n        if(this.transition){\n            edgesMergeT = edgesMerge.transition();\n        }\n\n        edgesMergeT.select('path')\n            .attr('d', d=> this.layout.edgeLineD(d))\n            // .attr(\"stroke\", \"black\")\n            // .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .attr(\"marker-end\", function(d) {\n                var suffix = d3.select(this.parentNode).classed('selected') ? '-selected' : (self.isOptimal(d)?'-optimal':'');\n                return \"url(#arrow\"+ suffix+\")\"\n            });\n            // .attr(\"shape-rendering\", \"optimizeQuality\")\n\n\n        edgesMerge.on('click', d=>{\n            self.selectEdge(d, true)\n        });\n\n        this.layout.edgeLabelPosition(labelEnter);\n        edgesMergeT.select('text.label').each(this.updateTextLines);\n        var labelMerge = edgesMerge.select('g.label-group');\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\n        var labelMergeT = edgesMergeT.select('g.label-group');\n        this.layout.edgeLabelPosition(labelMergeT);\n            // .text(d=>d.name);\n\n        var payoff = edgesMerge.select('text.payoff');\n\n        var payoffTspans = payoff.selectAll('tspan').data(d => {\n            let item = d.displayValue('payoff');\n            return Utils.isArray(item) ? item.slice(0, Math.min(item.length, self.config.maxPayoffsToDisplay)).map(_=>d) : [d];\n        });\n        payoffTspans.exit().remove();\n\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\n        payoffTspansM\n        // .attr('dominant-baseline', 'hanging')\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            // .attr('x', '0')\n\n            // .attr('dominant-baseline', 'hanging')\n            .classed('negative', (d, i)=> {\n                var val = d.displayPayoff(undefined, i);\n                return val!==null && val<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs)\n            // .text(d=> isNaN(d.payoff) ? d.payoff : self.config.payoffNumberFormatter(d.payoff))\n            .text((d, i)=>{\n                if(this.config.raw){\n                    return d.payoff[i];\n                }\n\n                let item = d.displayValue('payoff');\n                let items = Utils.isArray(item) ? item : [item];\n\n                let val = items[i];\n                if (val !== null) {\n                    if (!isNaN(val)) {\n                        return self.config.payoffNumberFormatter(val, i);\n                    }\n                    if (Utils.isString(val)) {\n                        return val;\n                    }\n                }\n\n                if (d.payoff[i] !== null && !isNaN(d.payoff[i]))\n                    return self.config.payoffNumberFormatter(d.payoff[i], i);\n\n                return d.payoff[i];\n\n            });\n\n        Tooltip.attach(payoffTspansM, (d, i)=>{\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\n                return i18n.t('tooltip.edge.payoff.named',{value: d.payoff[i], number: i+1, name: self.config.payoffNames[i]})\n            }\n            return i18n.t('tooltip.edge.payoff.default',{value: d.payoff[i], number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\n        });\n\n        var payoffTextT = payoff;\n        if(this.transition){\n            payoffTextT = payoff.transition();\n        }\n        this.layout.edgePayoffPosition(payoffEnter);\n        this.layout.edgePayoffPosition(payoffTextT);\n\n        Tooltip.attach(edgesMerge.select('text.probability'), d=>i18n.t('tooltip.edge.probability',{value: d.probability=== undefined ? d.displayProbability() : d.probability}));\n\n        edgesMerge.select('text.probability')\n            .classed('sd-hidden', this.config.hideProbabilities);\n        var probabilityMerge = edgesMerge.select('text.probability');\n        probabilityMerge\n            .attr('text-anchor', 'end')\n            .text(d=>{\n                if(this.config.raw){\n                    return d.probability;\n                }\n                var val = d.displayProbability();\n\n                if(val!==null){\n                    if(!isNaN(val)){\n                        return self.config.probabilityNumberFormatter(val);\n                    }\n                    if(Utils.isString(val)){\n                        return val;\n                    }\n                }\n\n                if(d.probability!==null && !isNaN(d.probability))\n                    return self.config.probabilityNumberFormatter(d.probability);\n\n                return d.probability;\n            });\n        var probabilityMergeT = probabilityMerge;\n        if(this.transition){\n            probabilityMergeT = probabilityMerge.transition();\n        }\n\n        this.layout.edgeProbabilityPosition(probabilityEnter);\n        this.layout.edgeProbabilityPosition(probabilityMergeT);\n\n\n        edgesContainer.selectAll('.edge.'+optimalClassName).raise();\n\n        edgesMerge.on('contextmenu', this.edgeContextMenu);\n        edgesMerge.on('dblclick', this.edgeContextMenu);\n        edgesMerge.each(function(d, i){\n            var elem = this;\n            var mc = new Hammer.Manager(elem);\n            mc.add(new Hammer.Press({\n                pointerType: Hammer.POINTER_TOUCH\n            }));\n        })\n    }\n\n    redrawFloatingTexts() {\n        var self = this;\n\n\n        var textsContainer = this.mainGroup.selectOrAppend('g.floating-texts');\n        var texts = textsContainer.selectAll('.floating-text').data(this.data.texts, (d,i)=> d.$id);\n        texts.exit().remove();\n        var textsEnter = texts.enter().appendSelector('g.floating-text')\n            .attr('id', d=>'text-'+d.$id);\n\n\n        var rectWidth = 40;\n        var rectHeight = 20;\n\n        textsEnter.append('rect').attr('x', -5).attr('y', -16).attr('fill-opacity', 0);\n        textsEnter.append('text');\n\n        var textsMerge = textsEnter.merge(texts);\n        var textsMergeT = textsMerge;\n        if(this.transition){\n            textsMergeT = textsMerge.transition();\n        }\n\n        textsMergeT.attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\n\n        var tspans = textsMerge.select('text').selectAll('tspan').data(d=>d.value ? d.value.split('\\n') : []);\n\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n        textsMerge.classed('sd-empty', d=>!d.value || !d.value.trim());\n        textsMerge.select('rect').attr('width', rectWidth).attr('height', rectHeight);\n\n        textsMerge.each(function(d){\n            if(!d.value){\n                return;\n            }\n            var bb = d3.select(this).select('text').node().getBBox();\n           d3.select(this).select('rect')\n               .attr('y', bb.y-5)\n               .attr('width', Math.max(bb.width+10, rectWidth))\n               .attr('height', Math.max(bb.height+10, rectHeight))\n        });\n\n        if(this.textDragHandler){\n            textsMerge.call(this.textDragHandler.drag);\n        }\n        textsMerge.on('contextmenu', this.textContextMenu);\n        textsMerge.on('dblclick', this.textContextMenu);\n        textsMerge.each(function(d, i){\n            var elem = this;\n            var mc = new Hammer.Manager(elem);\n            mc.add(new Hammer.Press({\n                pointerType: 'touch'\n            }));\n        })\n\n    }\n\n    updateValidationMessages() {\n        var nodes = this.mainGroup.selectAll('.node');\n        nodes.classed('error', false);\n\n        this.data.validationResults.forEach(validationResult=>{\n            if(validationResult.isValid()){\n                return;\n            }\n\n            Object.getOwnPropertyNames(validationResult.objectIdToError).forEach(id=>{\n                var errors = validationResult.objectIdToError[id];\n                var nodeSelection = this.getNodeD3SelectionById(id);\n                nodeSelection.classed('error', true);\n                var tooltipHtml = '';\n                errors.forEach(e=>{\n                    if(tooltipHtml){\n                        tooltipHtml+='<br/>'\n                    }\n                    tooltipHtml+=AppUtils.getValidationMessage(e);\n                });\n\n                Tooltip.attach(nodeSelection.select('.error-indicator'), tooltipHtml);\n\n\n            })\n        });\n    }\n\n\n    initEdgeMarkers() {\n        var defs = this.svg.append(\"svg:defs\");\n\n        this.initArrowMarker(\"arrow\");\n        this.initArrowMarker(\"arrow-optimal\");\n        this.initArrowMarker(\"arrow-selected\");\n    }\n\n    initArrowMarker(id) {\n\n        var defs = this.svg.select(\"defs\");\n        defs.append(\"marker\")\n            .attr(\"id\",id)\n            .attr(\"viewBox\",\"0 -5 10 10\")\n            .attr(\"refX\",5)\n            .attr(\"refY\",0)\n            .attr(\"markerWidth\",4)\n            .attr(\"markerHeight\",4)\n            .attr(\"orient\",\"auto\")\n            .append(\"path\")\n            .attr(\"d\", \"M0,-5L10,0L0,5\")\n            .attr(\"class\",\"arrowHead\");\n    }\n\n    updateBrushExtent() {\n        var self =this;\n        this.brush.extent([[0, 0], [self.svg.attr('width'), self.svg.attr('height')]]);\n        this.brushContainer.call(this.brush);\n    }\n    initBrush() {\n        var self = this;\n\n        var brushContainer = self.brushContainer = this.brushContainer= this.svg.selectOrInsert(\"g.brush\", \":first-child\")\n            .attr(\"class\", \"brush\");\n\n        var brush = this.brush = d3.brush()\n            .on(\"start\", brushstart)\n            .on(\"brush\", brushmove)\n            .on(\"end\", brushend);\n\n\n\n        this.updateBrushExtent();\n\n        brushContainer.select('.overlay').on(\"mousemove.edgeSelection\", mousemoved);\n        function mousemoved() {\n            var m = d3.mouse(this);\n            var mgt = self.getMainGroupTranslation();\n            var margin = 10;\n\n            var closest = [null, 999999999];\n            var closeEdges = [];\n            self.mainGroup.selectAll('.edge').each(function(d){\n                var selection = d3.select(this);\n                selection.classed('sd-hover', false);\n                var pathNode = selection.select('path').node();\n                var b = pathNode.getBBox();\n                if(b.x+mgt[0] <=m[0] && b.x+b.width+mgt[0] >= m[0] &&\n                   b.y+mgt[1]-margin <=m[1] && b.y+b.height+mgt[1]+margin >= m[1]){\n\n                    var cp = AppUtils.closestPoint(pathNode, [m[0]-mgt[0], m[1]-mgt[1]]);\n                    if(cp.distance < margin && cp.distance<closest[1]){\n                        closest = [selection, cp.distance];\n                    }\n                }\n\n            });\n\n            self.hoveredEdge = null;\n            if(closest[0]){\n                closest[0].classed('sd-hover', true);\n                self.hoveredEdge = closest[0];\n            }\n\n        }\n\n        function brushstart() {\n            if (!d3.event.selection) return;\n            if(self.hoveredEdge){\n                self.selectEdge(self.hoveredEdge.datum(), true)\n            }else{\n                self.clearSelection();\n            }\n            ContextMenu.hide();\n        }\n\n        // Highlight the selected nodes.\n        function brushmove() {\n            var s = d3.event.selection;\n            if(!s)return;\n\n            self.mainGroup.selectAll(\".node\").classed('selected', function (d) {\n                var mainGroupTranslation = self.getMainGroupTranslation();\n                var x = d.location.x+mainGroupTranslation[0];\n                var y = d.location.y+mainGroupTranslation[1];\n                var nodeSize = self.config.layout.nodeSize;\n                var offset = nodeSize*0.25;\n                return s[0][0] <= x+offset && x-offset <= s[1][0]\n                    && s[0][1] <= y+offset && y-offset <= s[1][1];\n            });\n        }\n        // If the brush is empty, select all circles.\n        function brushend() {\n            if (!d3.event.selection) return;\n            brush.move(brushContainer, null);\n\n            var selectedNodes = self.getSelectedNodes();\n            if(selectedNodes && selectedNodes.length === 1){\n                self.selectNode(selectedNodes[0]);\n            }\n            // if (!d3.event.selection) self.mainGroup.selectAll(\".selected\").classed('selected', false);\n        }\n    }\n\n    disableBrush(){\n        if(!this.brushDisabled){\n            AppUtils.growl(i18n.t('growl.brushDisabled'), 'info', 'left')\n        }\n        this.brushDisabled = true;\n        this.brushContainer.remove();\n    }\n\n    enableBrush(){\n        if(this.brushDisabled){\n            AppUtils.growl(i18n.t('growl.brushEnabled'), 'info', 'left')\n            this.initBrush();\n            this.brushDisabled = false;\n        }\n\n\n    }\n\n    getMainGroupTranslation(invert) {\n        var translation = AppUtils.getTranslation(this.mainGroup.attr(\"transform\"));\n        if(invert){\n            translation[0] = -translation[0];\n            translation[1] = -translation[1]\n        }\n        return translation;\n    }\n\n    initNodeContextMenu() {\n        this.nodeContextMenu = new NodeContextMenu(this, this.config.operationsForObject);\n    }\n\n    initEdgeContextMenu() {\n        this.edgeContextMenu = new EdgeContextMenu(this);\n    }\n\n    initTextContextMenu() {\n        this.textContextMenu = new TextContextMenu(this);\n    }\n\n\n\n    initMainContextMenu() {\n        this.mainContextMenu = new MainContextMenu(this);\n        this.svg.on('contextmenu',this.mainContextMenu);\n        this.svg.on('dblclick',this.mainContextMenu);\n    }\n\n    addText(text){\n        this.data.saveState();\n        this.data.addText(text);\n        this.redraw();\n        this.selectText(text);\n    }\n\n    addNode(node, parent, redraw=false){\n        this.data.saveState();\n        this.data.addNode(node, parent);\n        this.redraw(true);\n        this.layout.update(node);\n        return node;\n    }\n\n    addDecisionNode(parent){\n        var newNode = new model.DecisionNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n    addChanceNode(parent){\n        var newNode = new model.ChanceNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n    addTerminalNode(parent){\n        var newNode = new model.TerminalNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n\n    injectNode(node, edge){\n        this.data.saveState();\n        this.data.injectNode(node, edge);\n        this.redraw();\n        this.layout.update(node);\n        return node;\n    }\n\n    injectDecisionNode(edge){\n        var newNode = new model.DecisionNode(this.layout.getInjectedNodeLocation(edge));\n        this.injectNode(newNode, edge);\n\n    }\n\n    injectChanceNode(edge){\n        var newNode = new model.ChanceNode(this.layout.getInjectedNodeLocation(edge));\n        this.injectNode(newNode, edge);\n    }\n\n    removeNode(node) {\n        this.data.saveState();\n        this.data.removeNode(node);\n\n\n        if(!this.layout.isManualLayout()){\n            this.layout.update();\n        }else{\n            this.redraw();\n        }\n    }\n\n    removeSelectedNodes() {\n        var selectedNodes = this.getSelectedNodes();\n        if(!selectedNodes.length){\n            return;\n        }\n        this.data.saveState();\n        this.data.removeNodes(selectedNodes);\n        this.clearSelection();\n        this.redraw();\n        this.layout.update();\n    }\n\n    removeSelectedTexts(){\n        var selectedTexts = this.getSelectedTexts();\n\n        if(!selectedTexts.length){\n            return;\n        }\n        this.data.saveState();\n        this.data.removeTexts(selectedTexts);\n        this.clearSelection();\n        this.redraw();\n    }\n\n    copyNode(d, notClearPrevSelection) {\n        var clone = this.data.cloneSubtree(d);\n        if(notClearPrevSelection){\n            if(!this.copiedNodes){\n                this.copiedNodes=[];\n            }\n            this.copiedNodes.push(clone);\n        }else{\n            this.copiedNodes = [clone];\n        }\n\n    }\n\n    cutNode(d) {\n        this.copyNode(d);\n        this.removeNode(d);\n    }\n\n    cutSelectedNodes(){\n        var selectedNodes = this.getSelectedNodes();\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\n        this.copyNodes(selectedRoots);\n        this.removeSelectedNodes();\n    }\n\n    copySelectedNodes() {\n        var self;\n        var selectedNodes = this.getSelectedNodes();\n\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\n        this.copyNodes(selectedRoots);\n\n\n    }\n\n    copyNodes(nodes){\n        this.copiedNodes = nodes.map(d=>this.data.cloneSubtree(d));\n    }\n\n\n\n    pasteToNode(node) {\n        if(!this.copiedNodes || !this.copiedNodes.length){\n            return;\n        }\n        this.data.saveState();\n        var self = this;\n        self.clearSelection();\n        var nodesToAttach = this.copiedNodes;\n        self.copyNodes(this.copiedNodes);\n        nodesToAttach.forEach(toAttach=>{\n            var attached = this.data.attachSubtree(toAttach, node).childNode;\n            if(attached.folded){\n                self.foldSubtree(attached, attached.folded, false);\n            }\n            var location = self.layout.getNewChildLocation(node);\n            attached.moveTo(location.x, location.y, true);\n            self.layout.moveNodeToEmptyPlace(attached, false);\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\n\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\n        });\n\n        if(node.folded){\n            self.foldSubtree(node, node.folded, false);\n        }\n\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n\n    }\n\n    pasteToNewLocation(point) {\n        this.data.saveState();\n        var self = this;\n        self.clearSelection();\n        var nodesToAttach = this.copiedNodes;\n        self.copyNodes(this.copiedNodes);\n        nodesToAttach.forEach(toAttach=> {\n            var attached = this.data.attachSubtree(toAttach);\n            if(attached.folded){\n                self.foldSubtree(attached, attached.folded, false);\n            }\n            attached.moveTo(point.x, point.y, true);\n            self.layout.moveNodeToEmptyPlace(attached, false);\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\n\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\n        });\n\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n\n    }\n\n    convertNode(node, typeToConvertTo){\n        var self = this;\n        this.data.saveState();\n        this.data.convertNode(node, typeToConvertTo);\n        setTimeout(function(){\n            self.redraw(true);\n        },10)\n    }\n\n    performOperation(object, operation){\n        var self = this;\n        this.data.saveState();\n        operation.perform(object);\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n    }\n\n    foldSubtree(node, fold = true, redraw=true){\n        let self = this;\n        node.folded = fold;\n\n        this.data.getAllDescendantNodes(node).forEach(n=>{\n            n.$hidden = fold;\n            n.folded = false;\n        });\n        this.data.getAllDescendantEdges(node).forEach(e=>e.$hidden = fold);\n\n        if(!redraw){\n            return;\n        }\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n    }\n\n    updateVisibility(node = null){\n        if(!node){\n            this.data.getRoots().forEach(n=>this.updateVisibility(n));\n            return;\n        }\n\n        if(node.folded){\n            this.foldSubtree(node, true, false);\n            return;\n        }\n\n        node.childEdges.forEach(e => this.updateVisibility(e.childNode));\n\n    }\n\n    moveNodeTo(x,y){\n\n    }\n\n    updateNodePosition(node) {\n        this.getNodeD3Selection(node).raise().attr('transform', 'translate('+node.location.x+' '+node.location.y+')');\n    }\n\n    updateTextPosition(text) {\n        this.getTextD3Selection(text).raise().attr('transform', 'translate('+text.location.x+' '+text.location.y+')');\n    }\n\n    getNodeD3Selection(node){\n        return this.getNodeD3SelectionById(node.$id);\n    }\n\n    getNodeD3SelectionById(id){\n        return this.mainGroup.select('#node-'+id);\n    }\n    getTextD3Selection(text){\n        return this.getTextD3SelectionById(text.$id);\n    }\n    getTextD3SelectionById(id){\n        return this.mainGroup.select('#text-'+id);\n    }\n\n    getSelectedNodes(visibleOnly = false) {\n        let selectedVisible = this.mainGroup.selectAll(\".node.selected\").data();\n        if(visibleOnly){\n            return selectedVisible;\n        }\n\n        let allSelected  = [];\n        allSelected.push(...selectedVisible);\n\n        selectedVisible.forEach(n=>{\n            if(n.folded){\n                let descendants = this.data.getAllDescendantNodes(n);\n                if(descendants){\n                    allSelected.push(...descendants);\n                }\n            }\n        });\n\n        return allSelected;\n    }\n\n    getSelectedTexts(){\n        return this.mainGroup.selectAll(\".floating-text.selected\").data();\n    }\n\n    clearSelection(){\n        this.mainGroup.selectAll(\".edge.selected\").select('path').attr(\"marker-end\", d => \"url(#arrow\"+(this.isOptimal(d)?'-optimal':'')+\")\")\n        this.mainGroup.selectAll(\".selected\").classed('selected', false);\n        this.config.onSelectionCleared();\n    }\n\n    selectEdge(edge, clearSelectionBeforeSelect){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n        this.config.onEdgeSelected(edge);\n        this.mainGroup.select('#edge-'+edge.$id)\n            .classed('selected', true)\n            .select('path')\n            .attr(\"marker-end\", d => \"url(#arrow-selected)\")\n    }\n\n    isNodeSelected(node){\n        return this.getNodeD3Selection(node).classed('selected');\n    }\n\n    selectNode(node, clearSelectionBeforeSelect, skipCallback){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n\n        if(!skipCallback){\n            this.config.onNodeSelected(node);\n        }\n\n        this.getNodeD3SelectionById(node.$id).classed('selected', true);\n    }\n\n    selectText(text, clearSelectionBeforeSelect, skipCallback){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n\n        if(!skipCallback){\n            this.config.onTextSelected(text)\n        }\n\n        this.getTextD3SelectionById(text.$id).classed('selected', true);\n    }\n\n    selectSubTree(node, clearSelectionBeforeSelect,skipCallback) {\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n        this.selectNode(node, false, skipCallback);\n        node.childEdges.forEach(e=>this.selectSubTree(e.childNode, false, true));\n    }\n\n    selectAllNodes() {\n        this.mainGroup.selectAll(\".node\").classed('selected', true);\n    }\n\n    autoLayout(type, withoutStateSaving){\n        this.layout.autoLayout(type, withoutStateSaving);\n    }\n\n    updateDiagramTitle(titleValue){\n        if(!titleValue){\n            titleValue = '';\n        }\n        this.diagramTitle = titleValue;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(true);\n    }\n\n    redrawDiagramTitle(){\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\n\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\n        title.text(this.diagramTitle);\n        Layout.setHangingPosition(title);\n\n        var marginTop = parseInt(this.config.title.margin.top);\n        this.titleContainer.attr('transform', 'translate('+(svgWidth/2)+','+( marginTop)+')');\n    }\n    redrawDiagramDescription(){\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\n\n        var desc = this.titleContainer.selectOrAppend('text.sd-description');\n\n        if(!this.config.description.show){\n            desc.remove();\n            return;\n        }\n\n        var lines = this.diagramDescription ? this.diagramDescription.split('\\n') : [];\n        var tspans = desc.selectAll('tspan').data(lines);\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n        Layout.setHangingPosition(desc);\n\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\n\n        var marginTop = 0;\n        if(this.diagramTitle){\n            marginTop += title.node().getBBox().height;\n            marginTop+= Math.max(parseInt(this.config.description.margin.top), 0);\n        }\n\n\n        desc.attr('transform', 'translate(0,'+( marginTop)+')');\n    }\n\n    updateDiagramDescription(descriptionValue){\n        if(!descriptionValue){\n            descriptionValue = '';\n        }\n        this.diagramDescription = descriptionValue;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(true);\n    }\n\n\n    getTitleGroupHeight(withMargins){\n        if(!this.titleContainer){\n            return 0;\n        }\n        var h = this.titleContainer.node().getBBox().height;\n        if(withMargins){\n            h+= parseInt(this.config.title.margin.bottom);\n            h+= parseInt(this.config.title.margin.top);\n        }\n        return h;\n    }\n\n}\n","export * from './src/index'\n"]}