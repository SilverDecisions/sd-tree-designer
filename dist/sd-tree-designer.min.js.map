{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app-utils.js","src/context-menu/context-menu.js","src/context-menu/edge-context-menu.js","src/context-menu/main-context-menu.js","src/context-menu/node-context-menu.js","src/context-menu/text-context-menu.js","src/d3-extensions.js","src/d3.js","src/i18n/de.json","src/i18n/en.json","src/i18n/fr.json","src/i18n/i18n.js","src/i18n/it.json","src/i18n/pl.json","src/index.js","src/layout.js","src/node-drag-handler.js","src/symbols/circle.js","src/symbols/triangle.js","src/templates.js","src/templates/growl_message.html","src/text-drag-handler.js","src/tooltip.js","src/tree-designer.js","index.js"],"names":["require","r","e","n","t","o","i","f","c","u","a","Error","code","p","exports","call","length","1","module","d3","_interopRequireWildcard","_templates","_i18n","_sdUtils","AppUtils","textD3Obj","textString","width","textObj","node","textContent","getComputedTextLength","x","getSubStringLength","substring","tooltip","placeTextWithEllipsis","on","d","transition","duration","style","html","event","pageX","pageY","element","window","getComputedStyle","getPropertyValue","transform","g","document","createElementNS","setAttributeNS","matrix","baseVal","consolidate","pathNode","point","best","bestLength","scan","scanDistance","pathLength","getTotalLength","precision","bestDistance","Infinity","scanLength","distance2","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","y","distance","Math","sqrt","dx","dy","message","type","arguments","undefined","position","time","Templates","get","select","selectOrAppend","append","setTimeout","remove","tag","attribs","parent","el","createElement","deepExtend","appendChild","parentNode","removeChild","text","replace","createTextNode","div","innerHTML","name","evt","createEvent","initEvent","dispatchEvent","fireEvent","data","CustomEvent","detail","initCustomEvent","error","Utils","isString","key","i18n","selection","classed","_show","exact","display","offsetParent","url","callback","xhr","XMLHttpRequest","open","responseType","onload","status","response","send","sanitizeHeight","height","container","parseInt","sanitizeWidth","availableHeight","margin","max","top","bottom","availableWidth","left","right","ContextMenu","menu","opts","_classCallCheck","this","self","openCallback","onOpen","closeCallback","onClose","selectAll","enter","attr","index","elm","preventDefault","stopPropagation","ret","divider","disabled","action","title","console","_contextMenu","EdgeContextMenu","treeDesigner","_this","_possibleConstructorReturn","_getPrototypeOf","push","injectDecisionNode","injectChanceNode","_sdModel","MainContextMenu","mousePosition","newNode","domain","DecisionNode","addNode","ChanceNode","newText","Text","addText","pasteToNewLocation","copiedNodes","selectAllNodes","clearSelection","Point","mouse","svg","move","getMainGroupTranslation","NodeContextMenu","operationsForObject","copyMenuItem","selectNode","isNodeSelected","copySelectedNodes","cutMenuItem","cutSelectedNodes","pasteMenuItem","pasteToNode","folded","deleteMenuItem","removeSelectedNodes","TerminalNode","$TYPE","addNodeConversionOptions","addDecisionNode","addChanceNode","addTerminalNode","selectSubTree","foldSubtree","operations","forEach","op","performOperation","canPerform","conversionOptions","getNodeConversionOptions","options","allAllowedTypes","childEdges","$parent","filter","getNodeConversionOption","typeToConvertTo","convertNode","TextContextMenu","selectText","removeSelectedTexts","D3Extensions","prototype","insertSelector","selector","appendSelector","selectOrInsert","operation","selectorParts","split","shift","selectorModifier","selectorItem","insertOrAppendSelector","empty","_d3Dispatch","Object","keys","defineProperty","enumerable","_d3Scale","_d3Selection","_d3Shape","_d3Drag","_d3Brush","_d3Array","_d3Hierarchy","_d3TimeFormat","contextMenu","main","paste","copy","cut","delete","convert","decision","chance","terminal","selectSubtree","fold","unfold","flipSubtree","edge","validation","incompletePath","probabilityDoNotSumUpTo1","invalidProbability","invalidPayoff","growl","brushDisabled","brushEnabled","payoff","default","named","aggregatedPayoff","probabilityToEnter","probability","_i18next","en","pl","it","de","fr","lng","language","resources","translation","$instance","createInstance","fallbackLng","err","opt","_d3Extensions","hasOwnProperty","_exportNames","_treeDesigner","_appUtils","_tooltip","_d","extend","_circle","_interopRequireDefault","_triangle","Layout","config","nodeTypeToSymbol","symbolSquare","onAutoLayoutChanged","nodeTypeOrder","treeMargin","targetSymbolSize","nodeSeparation","b","nodeSymbolSize","$location","location","isHidden","each","getBBox","sort","childNode","isManualLayout","autoLayout","moveNodeToEmptyPlace","redraw","MANUAL_LAYOUT_NAME","getNodeMinX","getNodeMinY","gridWidth","$linePoints","redrawIfChanged","findCollidingNode","find","nodesSortedByX","nodeSize","nodes","slice","colidingNode","stepX","stepY","changed","newLocation","moveTo","_fireOnAutoLayoutChangedCallbacks","path","nodeSymbol","symbol","size","$id","box","min","set","setHangingPosition","fontSize","getFontSize","items","displayValue","isArray","aggregatedPayoffs","line","dX","sign","slantStartXOffset","slantWidth","edgeSlantWidthMax","point1","point2","point3","point4","datum","len","previousSibling","childNodes","minX","bb","getTextD3Selection","minY","Number","MAX_SAFE_INTEGER","getMinMarginBetweenNodes","$hidden","withoutStateSaving","saveState","onUndo","setGridWidth","onRedo","update","gridHeight","setGridHeight","setNodeSize","fitNodesInPlottingRegion","getRoots","setEdgeSlantWidthMax","newLayout","currentLayout","prevTreeMaxY","layout","root","hierarchy","map","cluster","tree","separation","maxY","pivot","limit","limitNodePositioning","backupNodeLocation","maxX","getNodeMaxX","revertX","updateNodePosition","texts","limitTextPositioning","getTextMinX","getTextMaxX","getTextMinY","updateTextPosition","NodeDragHandler","drag","subject","getTranslation","dragStarted","onDrag","dragEnded","ignoreDrag","ignoredDrag","hide","selectedNodes","getSelectedNodes","prevDragEvent","dragEventCount","draggedNode","moveNodes","redrawEdges","updatePlottingRegionSize","pi","PI","draw","context","dist","bezierCurveTo","lineTo","closePath","templateName","variables","compiled","template","imports","include","v","props","s","styleProp","styleName","variableName","clazz","treeDesignerSelector","treeDesignerStyles","styleRule","nodeSelector","edgeSelector","TextDragHandler","draggedText","moveTexts","Tooltip","xOffset","yOffset","getContainer","updatePosition","target","htmlOrFn","isFunction","show","_mainContextMenu","_nodeContextMenu","_layout","_nodeDragHandler","_textDragHandler","_textContextMenu","_edgeContextMenu","Hammer","TreeDesignerConfig","custom","scale","fontFamily","fontWeight","fontStyle","strokeWidth","optimal","stroke","label","color","negativeColor","fill","selected","description","readOnly","disableAnimations","forceFullEdgeRedraw","hideLabels","hidePayoffs","hideProbabilities","raw","payoffNumberFormatter","probabilityNumberFormatter","onNodeSelected","onEdgeSelected","onTextSelected","onSelectionCleared","payoffNames","maxPayoffsToDisplay","TreeDesigner","dataModel","setConfig","initContainer","init","updateCustomStyles","initSvg","initLayout","initI18n","initBrush","initEdgeMarkers","initMainContextMenu","initNodeContextMenu","initEdgeContextMenu","initNodeDragHandler","initTextDragHandler","initTextContextMenu","nodeDragHandler","textDragHandler","withTransitions","redrawDiagramTitle","redrawDiagramDescription","updateScale","updateMargin","transitionPrev","redrawNodes","redrawFloatingTexts","updateValidationMessages","computeAvailableSpace","wrapperGroup","mainGroup","mc","Manager","touchAction","add","Press","pointerType","Pinch","disableBrush","waitForFinalEvent","enableBrush","group","topMargin","diagramTitle","diagramDescription","getTitleGroupHeight","clone","setMargin","setScale","containerIdOrElem","trim","startsWith","_parents","svgWidth","svgHeight","mainGroupBox","newSvgWidth","newSvgHeight","updateBrushExtent","exit","nodesEnter","labelEnter","payoffEnter","indicatorEnter","aggregatedPayoffEnter","probabilityToEnterEnter","nodesMerge","merge","isOptimal","nodesMergeT","drawNodeSymbol","nodeLabelPosition","labelMergeT","updateTextLines","payoffTspans","item","payoffTspansM","val","isNaN","attachPayoffTooltip","payoffT","nodePayoffPosition","aggregatedPayoffTspans","aggregatedPayoffTspansM","aggregatedPayoffT","nodeAggregatedPayoffPosition","attach","probabilityToEnterT","nodeProbabilityToEnterPosition","indicator","nodeIndicatorPosition","nodeContextMenu","cancelDrag","button","nodeUnfoldButtonPosition","payoffFiledName","object","value","number","lines","reverse","tspans","l","edgesContainer","edges","edgesEnter","probabilityEnter","edgesMerge","optimalClassName","edgesMergeT","edgeLineD","selectEdge","edgeLabelPosition","_","displayPayoff","payoffTextT","edgePayoffPosition","displayProbability","probabilityMerge","probabilityMergeT","edgeProbabilityPosition","raise","edgeContextMenu","POINTER_TOUCH","textsEnter","textsMerge","textsMergeT","replaceUrls","escapeHtml","textContextMenu","_this2","validationResults","validationResult","isValid","getOwnPropertyNames","objectIdToError","id","errors","nodeSelection","getNodeD3SelectionById","tooltipHtml","getValidationMessage","initArrowMarker","brush","extent","brushContainer","hoveredEdge","mainGroupTranslation","offset","m","mgt","closest","cp","closestPoint","invert","mainContextMenu","getNewChildLocation","injectNode","getInjectedNodeLocation","removeNode","removeNodes","selectedTexts","getSelectedTexts","removeTexts","notClearPrevSelection","cloneSubtree","copyNode","selectedRoots","findSubtreeRoots","copyNodes","_this3","_this4","nodesToAttach","toAttach","attached","attachSubtree","getAllDescendantNodes","_this5","perform","getAllDescendantEdges","_this6","updateVisibility","getNodeD3Selection","getTextD3SelectionById","_this7","visibleOnly","selectedVisible","allSelected","apply","_toConsumableArray","descendants","_this8","clearSelectionBeforeSelect","skipCallback","_this9","titleValue","titleContainer","marginTop","desc","descriptionValue","withMargins","h","_index"],"mappings":"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","file":"sd-tree-designer.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import * as d3 from \"./d3\";\nimport {Templates} from \"./templates\";\nimport {i18n} from \"./i18n/i18n\";\nimport {Utils} from \"sd-utils\";\n\nexport class AppUtils {\n\n    static sanitizeHeight = function (height, container) {\n        return (height || parseInt(container.style('height'), 10) || 400);\n    };\n\n    static sanitizeWidth = function (width, container) {\n        return (width || parseInt(container.style('width'), 10) || 960);\n    };\n\n    static availableHeight = function (height, container, margin) {\n        return Math.max(0, AppUtils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n    };\n\n    static availableWidth = function (width, container, margin) {\n        return Math.max(0, AppUtils.sanitizeWidth(width, container) - margin.left - margin.right);\n    };\n\n    //places textString in textObj, adds an ellipsis if text can't fit in width\n    static placeTextWithEllipsis(textD3Obj, textString, width) {\n        var textObj = textD3Obj.node();\n        textObj.textContent = textString;\n\n        var margin = 0;\n        var ellipsisLength = 9;\n        //ellipsis is needed\n        if (textObj.getComputedTextLength() > width + margin) {\n            for (var x = textString.length - 3; x > 0; x -= 1) {\n                if (textObj.getSubStringLength(0, x) + ellipsisLength <= width + margin) {\n                    textObj.textContent = textString.substring(0, x) + \"...\";\n                    return true;\n                }\n            }\n            textObj.textContent = \"...\"; //can't place at all\n            return true;\n        }\n        return false;\n    }\n\n    static placeTextWithEllipsisAndTooltip(textD3Obj, textString, width, tooltip) {\n        var ellipsisPlaced = AppUtils.placeTextWithEllipsis(textD3Obj, textString, width);\n        if (ellipsisPlaced && tooltip) {\n            textD3Obj.on(\"mouseover\", function (d) {\n                tooltip.transition()\n                    .duration(200)\n                    .style(\"opacity\", .9);\n                tooltip.html(textString)\n                    .style(\"left\", (d3.event.pageX + 5) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            });\n\n            textD3Obj.on(\"mouseout\", function (d) {\n                tooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0);\n            });\n        }\n\n    }\n\n    static getFontSize(element) {\n        return window.getComputedStyle(element, null).getPropertyValue(\"font-size\");\n    }\n\n    static getTranslation(transform) {\n        // Create a dummy g for calculation purposes only. This will never\n        // be appended to the DOM and will be discarded once this function\n        // returns.\n        var g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n\n        // Set the transform attribute to the provided string value.\n        g.setAttributeNS(null, \"transform\", transform);\n\n        // consolidate the SVGTransformList containing all transformations\n        // to a single SVGTransform of type SVG_TRANSFORM_MATRIX and get\n        // its SVGMatrix.\n        var matrix = g.transform.baseVal.consolidate().matrix;\n\n        // As per definition values e and f are the ones for the translation.\n        return [matrix.e, matrix.f];\n    }\n\n\n    static closestPoint(pathNode, point) {\n        var pathLength = pathNode.getTotalLength(),\n            precision = 8,\n            best,\n            bestLength,\n            bestDistance = Infinity;\n\n        // linear scan for coarse approximation\n        for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n            if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n                best = scan, bestLength = scanLength, bestDistance = scanDistance;\n            }\n        }\n\n        // binary search for precise estimate\n        precision /= 2;\n        while (precision > 0.5) {\n            var before,\n                after,\n                beforeLength,\n                afterLength,\n                beforeDistance,\n                afterDistance;\n            if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n                best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n            } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n                best = after, bestLength = afterLength, bestDistance = afterDistance;\n            } else {\n                precision /= 2;\n            }\n        }\n\n        best = [best.x, best.y];\n        best.distance = Math.sqrt(bestDistance);\n        return best;\n\n        function distance2(p) {\n            var dx = p.x - point[0],\n                dy = p.y - point[1];\n            return dx * dx + dy * dy;\n        }\n    }\n\n    static growl(message, type='info', position='right', time = 2000){\n        var html = Templates.get('growl', {message:message, type:type})\n\n        var g = d3.select('body').selectOrAppend('div.sd-growl-list.'+position).append('div').html(html);\n        setTimeout(function(){\n            g.remove();\n        }, time)\n    }\n\n\n    static createElement(tag, attribs, parent) {\n        var el = document.createElement(tag);\n\n        if (attribs) {\n            AppUtils.deepExtend(el, attribs);\n        }\n        if (parent) {\n            parent.appendChild(el);\n        }\n        return el;\n    };\n\n    static removeElement(element) {\n        element.parentNode.removeChild(element);\n    }\n\n    static replaceUrls(text){\n        if(!text){\n            return text;\n        }\n        var urlRegexp = /((ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?)/\n\n        return text.replace(urlRegexp, '<a href=\"$1\" target=\"_blank\">$1</a>');\n    }\n\n    static escapeHtml(html)\n    {\n        var text = document.createTextNode(html);\n        var div = document.createElement('div');\n        div.appendChild(text);\n        return div.innerHTML;\n    }\n\n    static dispatchHtmlEvent(element, name){\n        if (\"createEvent\" in document) {\n            var evt = document.createEvent(\"HTMLEvents\");\n            evt.initEvent(name, false, true);\n            element.dispatchEvent(evt);\n        }\n        else\n            element.fireEvent(\"on\"+name);\n    }\n\n    static dispatchEvent(name, data){\n        var event;\n        try{\n            event = new  CustomEvent(name,{ 'detail': data });\n        }catch (e){ //IE\n            event = document.createEvent('CustomEvent');\n            event.initCustomEvent(name, false, false, data);\n        }\n        document.dispatchEvent(event);\n    }\n\n    static getValidationMessage(error){\n        if(Utils.isString(error)){\n            error = {name: error};\n        }\n        var key = 'validation.' + error.name;\n        return i18n.t(key, error.data);\n    }\n\n    static hide(selection){\n        selection.classed('sd-hidden', true);\n    }\n\n    static show(selection, show=true){\n        selection.classed('sd-hidden', !show);\n    }\n\n\n\n    static isHidden(el, exact = true) {\n        if(!el){\n            return true;\n        }\n        if(exact){\n            var style = window.getComputedStyle(el);\n            return (style.display === 'none')\n        }\n        return (el.offsetParent === null)\n    }\n\n    static getJSON(url, callback) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('get', url, true);\n        xhr.responseType = 'json';\n        xhr.onload = function () {\n            var status = xhr.status;\n            if (status == 200) {\n                callback(xhr.response, null);\n            } else {\n                callback(null, status);\n            }\n        };\n        xhr.send();\n    }\n}\n","import * as d3 from '../d3'\n\n/*based on:\n * github.com/patorjk/d3-context-menu */\n\nexport class ContextMenu {\n    openCallback;\n    closeCallback;\n\n    constructor(menu, opts) {\n        var self = this;\n\n        if (typeof opts === 'function') {\n            self.openCallback = opts;\n        } else {\n            opts = opts || {};\n            self.openCallback = opts.onOpen;\n            self.closeCallback = opts.onClose;\n        }\n\n        // create the div element that will hold the context menu\n        d3.selectAll('.d3-context-menu').data([1])\n            .enter()\n            .append('div')\n            .attr('class', 'd3-context-menu');\n\n        // close menu\n        d3.select('body').on('click.d3-context-menu', function () {\n            d3.select('.d3-context-menu').style('display', 'none');\n            if (self.closeCallback) {\n                self.closeCallback();\n            }\n        });\n\n        // this gets executed when a contextmenu event occurs\n        return function (data, index) {\n            var elm = this;\n\n            d3.selectAll('.d3-context-menu').html('');\n            var list = d3.selectAll('.d3-context-menu')\n                .on('contextmenu', function (d) {\n                    d3.select('.d3-context-menu').style('display', 'none');\n                    d3.event.preventDefault();\n                    d3.event.stopPropagation();\n                })\n                .append('ul');\n            list.selectAll('li').data(typeof menu === 'function' ? menu(data) : menu).enter()\n                .append('li')\n                .attr('class', function (d) {\n                    var ret = '';\n                    if (d.divider) {\n                        ret += ' is-divider';\n                    }\n                    if (d.disabled) {\n                        ret += ' is-disabled';\n                    }\n                    if (!d.action) {\n                        ret += ' is-header';\n                    }\n                    return ret;\n                })\n                .html(function (d) {\n                    if (d.divider) {\n                        return '<hr>';\n                    }\n                    if (!d.title) {\n                        console.error('No title attribute set. Check the spelling of your options.');\n                    }\n                    return (typeof d.title === 'string') ? d.title : d.title(data);\n                })\n                .on('click', function (d, i) {\n                    if (d.disabled) return; // do nothing if disabled\n                    if (!d.action) return; // headers have no \"action\"\n                    d.action(elm, data, index);\n                    d3.select('.d3-context-menu').style('display', 'none');\n\n                    if (self.closeCallback) {\n                        self.closeCallback();\n                    }\n                });\n\n            // the openCallback allows an action to fire before the menu is displayed\n            // an example usage would be closing a tooltip\n            if (self.openCallback) {\n                if (self.openCallback(data, index) === false) {\n                    return;\n                }\n            }\n\n            // display context menu\n            d3.select('.d3-context-menu')\n                .style('left', (d3.event.pageX - 2) + 'px')\n                .style('top', (d3.event.pageY - 2) + 'px')\n                .style('display', 'block');\n\n            d3.event.preventDefault();\n            d3.event.stopPropagation();\n        };\n    };\n\n    static hide() {\n        d3.select('.d3-context-menu').style('display', 'none');\n    }\n\n}\n","import {ContextMenu} from './context-menu'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class EdgeContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var menu = function (d) {\n\n            var menu = [];\n\n            menu.push({\n                title: i18n.t('contextMenu.edge.injectDecisionNode'),\n                action: function (elm, d, i) {\n                    treeDesigner.injectDecisionNode(d)\n                }\n            });\n            menu.push({\n                title: i18n.t('contextMenu.edge.injectChanceNode'),\n                action: function (elm, d, i) {\n                    treeDesigner.injectChanceNode(d)\n                }\n            });\n\n\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {domain as model} from 'sd-model'\nimport * as d3 from '../d3'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class MainContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var mousePosition = null;\n        var menu = function (d) {\n\n            var menu = [];\n            menu.push({\n                title: i18n.t('contextMenu.main.addDecisionNode'),\n                action: function (elm, d, i) {\n                    var newNode = new model.DecisionNode(mousePosition);\n                    treeDesigner.addNode(newNode)\n                }\n            });\n            menu.push({\n                title: i18n.t('contextMenu.main.addChanceNode'),\n                action: function (elm, d, i) {\n                    var newNode = new model.ChanceNode(mousePosition);\n                    treeDesigner.addNode(newNode)\n                }\n            });\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.main.addText'),\n                action: function (elm, d, i) {\n                    var newText = new model.Text(mousePosition);\n                    treeDesigner.addText(newText);\n                },\n\n            });\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.main.paste'),\n                action: function (elm, d, i) {\n                    treeDesigner.pasteToNewLocation(mousePosition);\n                },\n                disabled: !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\n\n            });\n            menu.push({divider: true});\n\n            menu.push({\n                title: i18n.t('contextMenu.main.selectAllNodes'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectAllNodes();\n                }\n            });\n            return menu;\n        };\n\n        super(menu, {onOpen: () => {\n            treeDesigner.clearSelection();\n            mousePosition = new model.Point(d3.mouse(treeDesigner.svg.node())).move(treeDesigner.getMainGroupTranslation(true));\n\n        }});\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {domain as model} from 'sd-model'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class NodeContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner, operationsForObject) {\n        var menu = function (d) {\n\n            var copyMenuItem = {\n                title: i18n.t('contextMenu.node.copy'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.copySelectedNodes();\n                }\n            };\n            var cutMenuItem = {\n                title: i18n.t('contextMenu.node.cut'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.cutSelectedNodes();\n                }\n            };\n            var pasteMenuItem = {\n                title: i18n.t('contextMenu.node.paste'),\n                action: function (elm, d, i) {\n                    treeDesigner.pasteToNode(d);\n                },\n                disabled: d.folded || !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\n\n            };\n            var deleteMenuItem = {\n                title: i18n.t('contextMenu.node.delete'),\n                action: function (elm, d, i) {\n\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.removeSelectedNodes();\n\n                }\n            };\n\n            var menu = [];\n            if (d.type == model.TerminalNode.$TYPE) {\n                menu = [copyMenuItem, cutMenuItem, deleteMenuItem];\n                NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\n                return menu;\n            }\n\n            if(!d.folded){\n                menu.push({\n                    title: i18n.t('contextMenu.node.addDecisionNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addDecisionNode(d)\n                    }\n                });\n                menu.push({\n                    title: i18n.t('contextMenu.node.addChanceNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addChanceNode(d)\n                    }\n                });\n                menu.push({\n                    title: i18n.t('contextMenu.node.addTerminalNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addTerminalNode(d)\n                    }\n                });\n                menu.push({divider: true});\n            }\n\n            menu.push(copyMenuItem);\n            menu.push(cutMenuItem);\n            menu.push(pasteMenuItem);\n            menu.push(deleteMenuItem);\n\n            NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.node.selectSubtree'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectSubTree(d, true);\n                }\n            });\n\n            if(!d.folded){\n                menu.push({\n                    title: i18n.t('contextMenu.node.fold'),\n                    action: function (elm, d, i) {\n                        treeDesigner.foldSubtree(d);\n                    }\n                });\n            }else{\n                menu.push({\n                    title: i18n.t('contextMenu.node.unfold'),\n                    action: function (elm, d, i) {\n                        treeDesigner.foldSubtree(d, false);\n                    }\n                });\n            }\n\n            if(operationsForObject){\n                var operations = operationsForObject(d);\n                if(operations.length) {\n                    menu.push({divider: true});\n                    operations.forEach(op=>{\n                        menu.push({\n                            title: i18n.t('contextMenu.node.'+op.name),\n                            action: function (elm, d, i) {\n                                treeDesigner.performOperation(d, op);\n                            },\n                            disabled: !op.canPerform(d)\n                        });\n                    })\n                }\n            }\n\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n\n    static addNodeConversionOptions(d, menu, treeDesigner){\n        var conversionOptions = NodeContextMenu.getNodeConversionOptions(d, treeDesigner);\n        if(conversionOptions.length){\n            menu.push({divider: true});\n            conversionOptions.forEach(o=>menu.push(o));\n\n        }\n    }\n\n    static getNodeConversionOptions(d, treeDesigner){\n        var options = [];\n\n        if(d.folded){\n            return [];\n        }\n\n        var allAllowedTypes = [model.DecisionNode.$TYPE, model.ChanceNode.$TYPE, model.TerminalNode.$TYPE];\n\n        if(!d.childEdges.length && d.$parent){\n            allAllowedTypes.filter(t=>t!==d.type).forEach(type=>{\n                options.push(NodeContextMenu.getNodeConversionOption(type, treeDesigner))\n            })\n        }else{\n            if(d instanceof model.DecisionNode){\n                options.push(NodeContextMenu.getNodeConversionOption(model.ChanceNode.$TYPE, treeDesigner))\n            }else{\n                options.push(NodeContextMenu.getNodeConversionOption(model.DecisionNode.$TYPE, treeDesigner))\n            }\n        }\n        return options;\n    }\n\n    static getNodeConversionOption(typeToConvertTo, treeDesigner){\n        return {\n            title: i18n.t('contextMenu.node.convert.'+typeToConvertTo),\n            action: function (elm, d, i) {\n                treeDesigner.convertNode(d, typeToConvertTo);\n            },\n        }\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class TextContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var menu = function (d) {\n\n\n            var deleteMenuItem = {\n                title: i18n.t('contextMenu.text.delete'),\n                action: function (elm, d, i) {\n\n                    treeDesigner.selectText(d, true, true);\n                    treeDesigner.removeSelectedTexts()\n\n                }\n            };\n            var menu = [];\n            menu.push(deleteMenuItem);\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import * as d3 from './d3'\n\nexport class D3Extensions {\n\n    static extend() {\n\n        d3.selection.prototype.enter.prototype.insertSelector =\n            d3.selection.prototype.insertSelector = function (selector, before) {\n                return D3Extensions.insertSelector(this, selector, before);\n            };\n\n\n        d3.selection.prototype.enter.prototype.appendSelector =\n            d3.selection.prototype.appendSelector = function (selector) {\n                return D3Extensions.appendSelector(this, selector);\n            };\n\n        d3.selection.prototype.enter.prototype.selectOrAppend =\n            d3.selection.prototype.selectOrAppend = function (selector) {\n                return D3Extensions.selectOrAppend(this, selector);\n            };\n\n        d3.selection.prototype.enter.prototype.selectOrInsert =\n            d3.selection.prototype.selectOrInsert = function (selector, before) {\n                return D3Extensions.selectOrInsert(this, selector, before);\n            };\n\n\n    }\n\n    static insertOrAppendSelector(parent, selector, operation, before) {\n\n        var selectorParts = selector.split(/([\\.\\#])/);\n        var element = parent[operation](selectorParts.shift(), before);//\":first-child\"\n\n        while (selectorParts.length > 1) {\n            var selectorModifier = selectorParts.shift();\n            var selectorItem = selectorParts.shift();\n            if (selectorModifier === \".\") {\n                element = element.classed(selectorItem, true);\n            } else if (selectorModifier === \"#\") {\n                element = element.attr('id', selectorItem);\n            }\n        }\n        return element;\n    }\n\n    static insertSelector(parent, selector, before) {\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"insert\", before);\n    }\n\n    static appendSelector(parent, selector) {\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"append\");\n    }\n\n    static selectOrAppend(parent, selector, element) {\n        var selection = parent.select(selector);\n        if (selection.empty()) {\n            if (element) {\n                return parent.append(element);\n            }\n            return D3Extensions.appendSelector(parent, selector);\n\n        }\n        return selection;\n    };\n\n    static selectOrInsert(parent, selector, before) {\n        var selection = parent.select(selector);\n        if (selection.empty()) {\n            return D3Extensions.insertSelector(parent, selector, before);\n        }\n        return selection;\n    };\n}\n","export * from 'd3-dispatch';\nexport * from 'd3-scale';\nexport * from 'd3-selection';\nexport * from 'd3-shape'\nexport * from 'd3-drag';\nexport * from 'd3-brush'\nexport * from 'd3-array'\nexport * from 'd3-hierarchy'\nexport * from 'd3-time-format'\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\n            \"addText\": \"Text hinzufügen \",\n            \"paste\": \"Einfügen\",\n            \"selectAllNodes\": \"Alle Knoten auswählen\"\n        },\n        \"node\":{\n            \"copy\": \"Kopieren\",\n            \"cut\": \"Ausschneiden\",\n            \"paste\": \"Einfügen\",\n            \"delete\": \"Löschen\",\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\n            \"addTerminalNode\": \"Endknotten hinzufügen\",\n            \"convert\":{\n                \"decision\": \"Als Entscheidungsknoten\",\n                \"chance\": \"Als Zufall Knoten\",\n                \"terminal\": \"Als Endknoten\"\n            },\n            \"selectSubtree\": \"Teilbaum wählen\",\n            \"fold\": \"Teilbaum falten\",\n            \"unfold\": \"Teilbaum entfalten\",\n\t\t\t\n            \"flipSubtree\": \"Teilbaum umdrehen\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Entscheidungsknoten Injizieren\",\n            \"injectChanceNode\": \"Zufall Knoten Injizieren\"\n        },\n        \"text\":{\n            \"delete\": \"Löschen\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Pfad, der nicht mit dem Endknoten endet\",\n        \"probabilityDoNotSumUpTo1\": \"Die Summe der Wahrscheinlichkeiten ist nicht gleich 1\",\n        \"invalidProbability\": \"Ungültige Wahrscheinlichkeit im Zweig #{{number}}\",\n        \"invalidPayoff\": \"Ungültige Auszahlung in Zweig #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Auswahlbürste deaktiviert\",\n        \"brushEnabled\": \"Auswahlbürste aktiviert\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Auszahlung {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Aggregierte Auszahlung {{number}}\",\n                \"named\": \"Aggregierte {{name}}\"\n            },\n            \"probabilityToEnter\": \"Wahrscheinlichkeit\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Auszahlung {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Wahrscheinlichkeit: {{value}}\"\n        }\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Add Decision Node\",\n            \"addChanceNode\": \"Add Chance Node\",\n            \"addText\": \"Add Text\",\n            \"paste\": \"Paste\",\n            \"selectAllNodes\": \"Select all nodes\"\n        },\n        \"node\":{\n            \"copy\": \"Copy\",\n            \"cut\": \"Cut\",\n            \"paste\": \"Paste\",\n            \"delete\": \"Delete\",\n            \"addDecisionNode\": \"Add Decision Node\",\n            \"addChanceNode\": \"Add Chance Node\",\n            \"addTerminalNode\": \"Add Terminal Node\",\n            \"convert\":{\n                \"decision\": \"As Decision Node\",\n                \"chance\": \"As Chance Node\",\n                \"terminal\": \"As Terminal Node\"\n            },\n            \"selectSubtree\": \"Select subtree\",\n            \"fold\": \"Fold subtree\",\n            \"unfold\": \"Unfold subtree\",\n            \"flipSubtree\": \"Flip subtree\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Inject Decision Node\",\n            \"injectChanceNode\": \"Inject Chance Node\"\n        },\n        \"text\":{\n            \"delete\": \"Delete\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Path not ending with terminal node\",\n        \"probabilityDoNotSumUpTo1\": \"Probabilities do not sum up to 1\",\n        \"invalidProbability\": \"Invalid probability in edge #{{number}}\",\n        \"invalidPayoff\": \"Invalid payoff in edge #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Selection brush disabled\",\n        \"brushEnabled\": \"Selection brush enabled\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Payoff {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Aggregated Payoff {{number}}\",\n                \"named\": \"Aggregated {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probability to enter\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Payoff {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probability: {{value}}\"\n        }\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Ajouter noud de décision\",\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\n            \"addText\": \"Ajouter du texte\",\n            \"paste\": \"Coller\",\n            \"selectAllNodes\": \"Sélectionner tous les nouds\"\n        },\n        \"node\":{\n            \"copy\": \"Copie\",\n            \"cut\": \"Couper\",\n            \"paste\": \"Coller\",\n            \"delete\": \"Effacer\",\n            \"addDecisionNode\": \"Ajouter noud de décision\",\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\n            \"addTerminalNode\": \"Ajouter un noeud terminal\",\n            \"convert\":{\n                \"decision\": \"Comme noud de décision\",\n                \"chance\": \"Comme noud aléatoire\",\n                \"terminal\": \"Comme un noeud terminal\"\n            },\n            \"selectSubtree\": \"Sélectionner une sous-arborescence\",\n            \"fold\": \"Plier sous-arbre\",\n            \"unfold\": \"Déplier arbre sous-arbre\",\n            \"flipSubtree\": \"Basculer sous-arbre\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Injecter un noeud de décision\",\n            \"injectChanceNode\": \"Injecter un noeud de chance\"\n        },\n        \"text\":{\n            \"delete\": \"Effacer\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Parcours non terminé par noeud terminal\",\n        \"probabilityDoNotSumUpTo1\": \"La somme des probabilités n'est pas 1 ou plus\",\n        \"invalidProbability\": \"Probabilité invalide - le bord #{{number}}\",\n        \"invalidPayoff\": \"Avantage invalide - le bord #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Brosse de sélection désactivée\",\n        \"brushEnabled\": \"Brosse de sélection activée\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Avantage {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Avantage agrégé {{number}}\",\n                \"named\": \"Agrégé  {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probabilité d'entrée\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Avantage {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probabilité: {{value}}\"\n        }\n    }\n}\n","import i18next from 'i18next';\nimport * as en from './en.json'\nimport * as pl from './pl.json'\nimport * as it from './it.json'\nimport * as de from './de.json'\nimport * as fr from './fr.json'\n\nexport class i18n{\n\n    static $instance;\n    static language;\n\n    static init(lng){\n        i18n.language = lng;\n        let resources = {\n            en: {\n                translation: en\n            },\n            pl: {\n                translation: pl\n            },\n            it: {\n                translation: it\n            },\n            de: {\n                translation: de\n            },\n            fr: {\n                translation: fr\n            }\n        };\n        i18n.$instance = i18next.createInstance({\n            lng: lng,\n            fallbackLng: 'en',\n            resources: resources\n        }, (err, t) => {\n        });\n    }\n\n    static t(key, opt){\n        return i18n.$instance.t(key, opt)\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\n            \"addText\": \"Aggiungi testo\",\n            \"paste\": \"Incolla\",\n            \"selectAllNodes\": \"Seleziona tutti i nodi\"\n        },\n        \"node\":{\n            \"copy\": \"Copia\",\n            \"cut\": \"Taglia\",\n            \"paste\": \"Incolla\",\n            \"delete\": \"Cancella\",\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\n            \"addTerminalNode\": \"Aggiungi un nodo terminale\",\n            \"convert\":{\n                \"decision\": \"Come Decision Node\",\n                \"chance\": \"Come Chance Node\",\n                \"terminal\": \"Come Terminal Node\"\n            },\n            \"selectSubtree\": \"Seleziona Sotto-albero\",\n            \"fold\": \"Piega sotto-albero\",\n            \"unfold\": \"Dispiegarsi sotto-albero\",\t\t\t\n            \"flipSubtree\": \"Ribalta sotto-albero\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Inietta nodo di decisione\",\n            \"injectChanceNode\": \"Inietta nodo opportunità\"\n        },\n        \"text\":{\n            \"delete\": \"Cancella\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Percorso senza nodo terminale\",\n        \"probabilityDoNotSumUpTo1\": \"La somma delle probabilità è diversa da 1\",\n        \"invalidProbability\": \"Probabilità non valida - bordo #{{number}}\",\n        \"invalidPayoff\": \"Saldo non valido - bordo #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Selezione pennello disabilitata\",\n        \"brushEnabled\": \"Selezione pennello abilitata\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Saldo {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Saldo aggregato {{number}}\",\n                \"named\": \"Aggregato {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probabilità da inserire\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Saldo {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probabilità: {{value}}\"\n        }\n    }\n}\n","module.exports={\n\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\n            \"addText\": \"Dodaj Tekst\",\n            \"paste\": \"Wklej\",\n            \"selectAllNodes\": \"Zaznacz wszystkie węzły\"\n        },\n        \"node\":{\n            \"copy\": \"Kopiuj\",\n            \"cut\": \"Wytnij\",\n            \"paste\": \"Wklej\",\n            \"delete\": \"Usuń\",\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\n            \"addTerminalNode\": \"Dodaj Węzeł Końcowy\",\n            \"convert\":{\n                \"decision\": \"Jako Węzeł Decyzyjny\",\n                \"chance\": \"Jako Węzeł Losowy\",\n                \"terminal\": \"Jako Węzeł Końcowy\"\n            },\n            \"selectSubtree\": \"Zaznacz poddrzewo\",\n            \"fold\": \"Zwiń poddrzewo\",\n            \"unfold\": \"Rozwiń poddrzewo\",\n            \"flipSubtree\": \"Przewróć poddrzewo\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Wstrzyknij Węzeł Decyzyjny\",\n            \"injectChanceNode\": \"Wstrzyknij Węzeł Losowy\"\n        },\n        \"text\":{\n            \"delete\": \"Usuń\"\n        }\n    },\n\n    \"validation\":{\n        \"incompletePath\": \"Ostatnim węzłem w ścieżce powinien być Węzeł Końcowy\",\n        \"probabilityDoNotSumUpTo1\": \"Prawdopodobieństwa nie sumują sie do 1\",\n        \"invalidProbability\": \"Niepoprawne prawdopodobieństwo na krawędzi #{{number}}\",\n        \"invalidPayoff\": \"Niepoprawna wypłata na krawędzi #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Zaznaczanie wyłączone\",\n        \"brushEnabled\": \"Zaznaczanie włączone\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Wypłata {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Zagregowana wypłata {{number}}\",\n                \"named\": \"Zagregowana {{name}}\"\n            },\n            \"probabilityToEnter\": \"Prawdopodobieństwo wejścia\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Wypłata {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Prawdopodobieństwo: {{value}}\"\n        }\n    }\n}\n","import {D3Extensions} from './d3-extensions'\nD3Extensions.extend();\n\nexport * from './tree-designer'\nexport * from './app-utils'\nexport * from './templates'\nexport * from './tooltip'\nexport * from './d3-extensions'\nexport {default as d3} from './d3'\n\n\n","import {Utils} from 'sd-utils'\nimport {domain as model} from 'sd-model'\nimport * as d3 from './d3'\nimport circleSymbol from './symbols/circle'\nimport triangleSymbol from './symbols/triangle'\nimport {AppUtils} from \"./app-utils\";\n\n/*Tree layout manager*/\nexport class Layout{\n\n    treeDesigner;\n    data;\n    config;\n\n    nodeTypeToSymbol = {\n        'decision': d3.symbolSquare,\n        'chance': circleSymbol,\n        \"terminal\": triangleSymbol\n    };\n\n    static MANUAL_LAYOUT_NAME = 'manual';\n\n\n    onAutoLayoutChanged=[];\n\n    nodeTypeOrder = {\n        'decision' : 0,\n        'chance': 0,\n        'terminal': 1\n    };\n\n    treeMargin = 50;\n    targetSymbolSize={};\n    nodeSeparation = (a, b) => a.parent === b.parent ? 1 : 1.2\n\n    constructor(treeDesigner, data, config){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n        this.config = config;\n\n    }\n\n    update(node){\n        if(node && node.$parent){\n            node.$parent.childEdges.sort((a,b)=>a.childNode.location.y - b.childNode.location.y)\n        }\n        if(!this.isManualLayout()){\n            return this.autoLayout(this.config.type, true);\n        }\n        if(node){\n            this.moveNodeToEmptyPlace(node);\n        }else{\n            this.treeDesigner.redraw(true);\n        }\n    }\n\n    isManualLayout(){\n        return this.config.type === Layout.MANUAL_LAYOUT_NAME;\n    }\n\n    getNewChildLocation(parent){\n        if(!parent){\n            return new model.Point(this.getNodeMinX(), this.getNodeMinY())\n        }\n        var x = parent.location.x + this.config.gridWidth;\n        var y = parent.location.y;\n        if(parent.childEdges.length){\n            y = parent.childEdges[parent.childEdges.length-1].childNode.location.y+1;\n        }\n\n        return new model.Point(x, y)\n    }\n\n    getInjectedNodeLocation(edge){\n\n        var p = edge.$linePoints[2];\n\n        return new model.Point(p[0], p[1])\n    }\n\n    moveNodeToEmptyPlace(node, redrawIfChanged=true){\n        var positionMap = {};\n        var self = this;\n        node.location.x = Math.max(this.getNodeMinX(node), node.location.x);\n        node.location.y = Math.max(this.getNodeMinY(node), node.location.y);\n\n\n        this.nodesSortedByX = this.data.nodes.slice();\n        this.nodesSortedByX.sort((a,b)=>a.location.x - b.location.x);\n\n        function findCollidingNode(node, location){\n            return Utils.find(self.nodesSortedByX, n=>{\n                if(node == n){\n                    return false;\n                }\n\n                var margin = self.config.nodeSize/3;\n                var x = n.location.x;\n                var y = n.location.y;\n\n                return (location.x - margin <= x && location.x + margin >= x\n                    && location.y - margin <= y && location.y + margin >= y)\n            });\n        }\n\n        var stepX = this.config.nodeSize/2;\n        var stepY = this.config.nodeSize+10;\n        var stepXsameParent = 0;\n        var stepYsameParent = 75;\n        var changed = false;\n        var colidingNode;\n        var newLocation = new model.Point(node.location);\n        while(colidingNode = findCollidingNode(node, newLocation)){\n            changed=true;\n            var sameParent = node.$parent && colidingNode.$parent && node.$parent===colidingNode.$parent;\n            if(sameParent){\n                newLocation.move(stepXsameParent, stepYsameParent);\n            }else{\n                newLocation.move(stepX, stepY);\n            }\n        }\n        if(changed){\n            node.moveTo(newLocation.x,newLocation.y, true);\n            if(redrawIfChanged){\n                this.treeDesigner.redraw(true);\n            }\n        }\n    }\n\n    disableAutoLayout(){\n        this.config.type = Layout.MANUAL_LAYOUT_NAME;\n        this._fireOnAutoLayoutChangedCallbacks();\n    }\n\n\n    nodeSymbolSize = {};\n    drawNodeSymbol(path, transition){\n\n        var self = this;\n        var nodeSize = this.config.nodeSize;\n        this.nodeSymbol = d3.symbol().type(d=> self.nodeTypeToSymbol[d.type])\n            .size(d=>self.nodeSymbolSize[d.$id] ? Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", 64) : 64);\n\n        path\n            .each(function (d) {\n                var path = d3.select(this);\n                var prev = path.attr(\"d\");\n                if(!prev){\n                    path.attr(\"d\", self.nodeSymbol);\n                }\n                var size = Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\");\n                if(!size){\n                    var box = path.node().getBBox();\n                    var error = Math.min(nodeSize / box.width, nodeSize / box.height);\n                    size = error * error * (self.nodeSymbolSize[d.$id]||64);\n                    Utils.set(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", size);\n                }\n                if(transition){\n                    path =  path.transition();\n\n                }else{\n                    self.nodeSymbolSize[d.$id] = size;\n                }\n                path.attr(\"d\", self.nodeSymbol);\n                if(transition){\n                    self.nodeSymbolSize[d.$id] = size;\n                }\n            });\n    }\n\n    nodeLabelPosition(selection) {\n        return selection\n            .attr('x', 0)\n            .attr('y', -this.config.nodeSize / 2 - 7)\n    }\n\n    nodePayoffPosition(selection) {\n        return Layout.setHangingPosition(selection)\n            .attr('x', 0)\n            .attr('y', this.config.nodeSize / 2 + 7)\n            .attr('text-anchor', 'middle')\n    }\n\n    nodeAggregatedPayoffPosition(selection) {\n        var x = this.config.nodeSize / 2 + 7;\n        var self = this;\n        selection\n            .attr('x', x)\n            .attr('y', function(d){\n                let fontSize = parseInt(AppUtils.getFontSize(this));\n                let items = d.displayValue('aggregatedPayoff');\n                let number = Utils.isArray(items) ? items.filter(it=>it !== undefined).length : 1;\n                if(number>1){\n                    return -this.getBBox().height/2 + fontSize/2;\n                }\n                return -Math.max(2, 1.8* self.config.nodeSize/fontSize);\n            });\n\n        selection.selectAll('tspan').attr('x', x);\n        return selection;\n            // .attr('text-anchor', 'middle')\n            // .attr('dominant-baseline', 'hanging')\n    }\n\n    nodeProbabilityToEnterPosition(selection) {\n        var self = this;\n\n        return Layout.setHangingPosition(selection)\n            .attr('x', this.config.nodeSize / 2 + 7)\n            .attr('y', function(d){\n                let fontSize = parseInt(AppUtils.getFontSize(this));\n                let aggregatedPayoffs = d.displayValue('aggregatedPayoff');\n                let aggregatedPayoffsNumber = Utils.isArray(aggregatedPayoffs) ? aggregatedPayoffs.filter(it=>it !== undefined).length : 1;\n                if(aggregatedPayoffsNumber>1){\n\n                    return fontSize*0.6\n                }\n\n                return Math.max(2, 1.8* self.config.nodeSize/fontSize);\n            })\n            // .attr('text-anchor', 'middle')\n            // .attr('dominant-baseline', 'central')\n    }\n\n    nodeIndicatorPosition(selection) {\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 8)\n            .attr('y', - this.config.nodeSize/2)\n            .attr('dominant-baseline', 'central')\n            .attr('text-anchor', 'middle')\n    }\n\n    nodeUnfoldButtonPosition(selection) {\n\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 5)\n            .attr('y', 0)\n            .attr('dominant-baseline', 'central')\n    }\n\n    edgeLineD(edge){\n        var line = d3.line()\n            .x(d=> d[0])\n            .y(d=> d[1]);\n        // .curve(d3.curveCatmullRom.alpha(0.5));\n\n\n        var parentNode = edge.parentNode;\n        var childNode = edge.childNode;\n\n        var dX = childNode.location.x - parentNode.location.x;\n        var dY = childNode.location.y - parentNode.location.y;\n\n        var sign = dX>=0 ? 1 : -1;\n\n        var slantStartXOffset = Math.min(dX/2, this.config.nodeSize/2+10);\n        var slantWidth = Math.min(this.config.edgeSlantWidthMax, Math.max(dX/2 - slantStartXOffset, 0));\n\n        var point1 = [parentNode.location.x +this.config.nodeSize/2 + 1, parentNode.location.y];\n        var point2 = [Math.max(parentNode.location.x+slantStartXOffset, point1[0]), parentNode.location.y];\n        var point3 = [parentNode.location.x+slantStartXOffset+slantWidth, childNode.location.y];\n        var point4 = [childNode.location.x - (sign*(Math.max(0, Math.min(this.config.nodeSize/2+8, dX/2)))), childNode.location.y];\n        // var point2 = [parentNode.location.x+dX/2-slantWidth/2, parentNode.location.y];\n        // var point3 = [childNode.location.x-(dX/2-slantWidth/2), childNode.location.y];\n\n        edge.$linePoints = [point1, point2, point3, point4];\n        return line(edge.$linePoints);\n    }\n\n    edgePayoffPosition(selection) {\n        Layout.setHangingPosition(selection)\n            .attr('x', d=>d.$linePoints[2][0] + 2)\n            .attr('y', d=>d.$linePoints[2][1] + 7);\n\n        selection.selectAll('tspan').attr('x', function(d){\n            return d3.select(this.parentNode).datum().$linePoints[2][0] + 2\n        });\n        return selection;\n\n    }\n\n    edgeLabelPosition(selection) {\n        return selection\n            .attr('transform', d=>'translate('+(d.$linePoints[2][0] + 2)+','+(d.$linePoints[2][1] - 7)+')')\n            // .attr('x', d=>d.$linePoints[2][0] + 2)\n            // .attr('y', d=>d.$linePoints[2][1] - 7)\n\n    }\n\n    edgeProbabilityPosition(selection) {\n        return Layout.setHangingPosition(selection)\n            .attr('x', function (d) {\n                var len = this.getComputedTextLength();\n                var min = d.$linePoints[2][0] + 2 + this.previousSibling.childNodes[0].getComputedTextLength() + 7 + len;\n                return Math.max(min, d.$linePoints[3][0] - 8);\n            })\n            .attr('y', d=>d.$linePoints[2][1] + 7)\n    }\n\n    getMinMarginBetweenNodes(){\n      return this.config.nodeSize + 30;\n    }\n\n    getTextMinX(d){\n        let minX = 0;\n        if(d){\n            let bb = this.treeDesigner.getTextD3Selection(d).select('text').node().getBBox();\n            if (bb.x < 0) {\n                minX -= bb.x;\n            }\n        }\n        return minX;\n    }\n\n    getTextMinY(d){\n        let minY = 0;\n        if(d){\n            let bb = this.treeDesigner.getTextD3Selection(d).select('text').node().getBBox();\n            if (bb.y < 0) {\n                minY -= bb.y;\n            }\n        }\n        return minY;\n    }\n\n    getTextMaxX(d){\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n\n    getNodeMinX(d){\n        var self = this;\n        if(d && d.$parent){// && !self.isNodeSelected(d.$parent)\n            return d.$parent.location.x + self.getMinMarginBetweenNodes();\n        }\n        return self.config.nodeSize/2;\n    }\n\n    getNodeMinY(d){\n        return this.config.nodeSize/2;\n    }\n\n    getNodeMaxX(d){\n        var self = this;\n\n        if(d && d.childEdges.length){\n            return d3.min(d.childEdges, e=>!e.childNode.$hidden ? e.childNode.location.x : 9999999)-self.getMinMarginBetweenNodes();\n        }\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    setGridWidth(width, withoutStateSaving){\n        var self=this;\n        if(this.config.gridWidth===width){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    gridWidth: self.config.gridWidth\n                },\n                onUndo: (data)=> {\n                    self.setGridWidth(data.gridWidth, true);\n                },\n                onRedo: (data)=> {\n                    self.setGridWidth(width, true);\n                }\n            });\n        }\n\n        this.config.gridWidth=width;\n        this.update();\n    }\n\n    setGridHeight(gridHeight, withoutStateSaving){\n        var self=this;\n        if(this.config.gridHeight===gridHeight){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    gridHeight: self.config.gridHeight\n                },\n                onUndo: (data)=> {\n                    self.setGridHeight(data.gridHeight, true);\n                },\n                onRedo: (data)=> {\n                    self.setGridHeight(gridHeight, true);\n                }\n            });\n        }\n\n        this.config.gridHeight=gridHeight;\n        this.update();\n    }\n\n    setNodeSize(nodeSize, withoutStateSaving){\n        var self=this;\n        if(this.config.nodeSize===nodeSize){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    nodeSize: self.config.nodeSize\n                },\n                onUndo: (data)=> {\n                    self.setNodeSize(data.nodeSize, true);\n                },\n                onRedo: (data)=> {\n                    self.setNodeSize(nodeSize, true);\n                }\n            });\n        }\n\n        this.config.nodeSize=nodeSize;\n        this.update();\n        if(this.isManualLayout()){\n            this.fitNodesInPlottingRegion(self.data.getRoots());\n            this.treeDesigner.redraw(true);\n        }\n    }\n\n    setEdgeSlantWidthMax(width, withoutStateSaving){\n        var self=this;\n        if(this.config.edgeSlantWidthMax===width){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    edgeSlantWidthMax: self.config.edgeSlantWidthMax\n                },\n                onUndo: (data)=> {\n                    self.setEdgeSlantWidthMax(data.edgeSlantWidthMax, true);\n                },\n                onRedo: (data)=> {\n                    self.setEdgeSlantWidthMax(width, true);\n                }\n            });\n        }\n\n        this.config.edgeSlantWidthMax=width;\n        this.treeDesigner.redraw(true);\n    }\n\n    autoLayout(type, withoutStateSaving){\n        var self=this;\n\n\n\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    newLayout: type,\n                    currentLayout: self.config.type\n                },\n                onUndo: (data)=> {\n                    self.config.type = data.currentLayout;\n                    self._fireOnAutoLayoutChangedCallbacks();\n                },\n                onRedo: (data)=> {\n                    self.autoLayout(data.newLayout, true);\n                }\n            });\n        }\n        this.config.type = type;\n        if(!this.data.nodes.length){\n            this._fireOnAutoLayoutChangedCallbacks();\n            return;\n        }\n\n        var prevTreeMaxY = self.getNodeMinY();\n        this.data.getRoots().forEach(r=>{\n            var root = d3.hierarchy(r, d=>{\n                return d.childEdges.filter(e=>!e.$hidden).map(e=>e.childNode);\n            });\n\n            // root.sort((a,b)=>self.nodeTypeOrder[a.data.type]-self.nodeTypeOrder[b.data.type]);\n            root.sort((a,b)=>a.data.location.y - b.data.location.y);\n\n\n            var layout;\n            if(type==='cluster'){\n                layout = d3.cluster();\n            }else{\n                layout = d3.tree();\n            }\n            layout.nodeSize([self.config.gridHeight, self.config.gridWidth]);\n            layout.separation(self.nodeSeparation);\n\n            layout(root);\n            var minY = 999999999;\n            root.each(d=>{\n                minY = Math.min(minY, d.x);\n            });\n\n            var dy = root.x - minY + prevTreeMaxY;\n            var dx = self.getNodeMinX();\n            var maxY=0;\n            root.each(d=>{\n                d.data.location.x = d.y + dx;\n                d.data.location.y = d.x + dy;\n\n                maxY = Math.max(maxY, d.data.location.y);\n            });\n\n            prevTreeMaxY = maxY + self.config.nodeSize+self.treeMargin;\n        });\n\n\n        // this.transition = true;\n        this.treeDesigner.redraw(true);\n        // this.transition = false;\n\n        this._fireOnAutoLayoutChangedCallbacks();\n        return this;\n    }\n\n    fitNodesInPlottingRegion(nodes){\n        var self = this;\n        var topY = d3.min(nodes, n=>n.location.y);\n        var minY = self.getNodeMinY();\n        var dy = topY - minY;\n\n        var minX = d3.min(nodes, n=>n.location.x);\n        var dx = minX - self.getNodeMinX();\n\n        if(dy<0 ||  dx<0){\n            nodes.forEach(n=>n.move(-dx, -dy));\n        }\n    }\n\n    moveNodes(nodes, dx, dy, pivot){\n        var self = this;\n        var limit = self.config.limitNodePositioning;\n        if(limit){\n            if(dx<0){\n                nodes.sort((a,b)=>a.location.x-b.location.x);\n            }else{\n                nodes.sort((a,b)=>b.location.x-a.location.x);\n            }\n        }\n\n\n        var minY = d3.min(nodes, d=>d.location.y);\n        if(minY + dy < self.getNodeMinY()){\n            dy = self.getNodeMinY() - minY;\n        }\n\n        nodes.forEach(d=>{\n            if(limit){\n                Layout.backupNodeLocation(d);\n                var minX = self.getNodeMinX(d);\n                var maxX = self.getNodeMaxX(d);\n\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\n                d.location.y += dy;\n            }else{\n                d.location.x +=dx;\n                d.location.y += dy;\n            }\n\n        });\n\n\n        var revertX = pivot && self.config.limitNodePositioning && (pivot.location.x === pivot.$location.x);\n\n        nodes.forEach(d=>{\n            if(revertX){\n                d.location.x = d.$location.x;\n            }\n            self.treeDesigner.updateNodePosition(d);\n        });\n\n\n    }\n\n    moveTexts(texts, dx, dy){\n        let self = this;\n        let limit = self.config.limitTextPositioning;\n        if(limit){\n            if(dx<0){\n                texts.sort((a,b)=>a.location.x-b.location.x);\n            }else{\n                texts.sort((a,b)=>b.location.x-a.location.x);\n            }\n        }\n\n\n\n        texts.forEach(d=>{\n\n\n\n\n            if(limit){\n                let minX = self.getTextMinX(d);\n                let maxX = self.getTextMaxX(d);\n                let minY = self.getTextMinY(d);\n\n\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\n                d.location.y = Math.max(d.location.y+dy, minY);\n\n            }else{\n                d.location.move(dx, dy);\n            }\n            self.treeDesigner.updateTextPosition(d);\n\n        });\n\n    }\n\n    static backupNodeLocation(node) {\n        node.$location = new model.Point(node.location);\n    }\n\n    _fireOnAutoLayoutChangedCallbacks(){\n        this.onAutoLayoutChanged.forEach(c=>c(this.config.type));\n    }\n\n    static setHangingPosition(selection){\n        // window.setTimeout(function(){\n        //     selection.each(function(){\n        //         var h =  this.getBBox().height;\n        //         d3.select(this).attr('dy', h);\n        //     });\n        // },0);\n\n        if(AppUtils.isHidden(selection.node())){ // setting hanging position of hidden elements fails on firefox\n            return selection;\n        }\n\n\n        selection.each(function(){\n            var h =  this.getBBox().height;\n            d3.select(this).attr('dy', '0.75em');\n        });\n\n        return selection;\n    }\n\n}\n\n\n","import {AppUtils} from './app-utils'\nimport * as d3 from './d3'\nimport {ContextMenu} from './context-menu/context-menu'\n\nexport class NodeDragHandler{\n\n    treeDesigner;\n    data;\n    config;\n\n    drag;\n\n\n    constructor(treeDesigner, data){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n\n        var self = this;\n        this.drag = d3.drag()\n            .subject(function(d) {\n                if(d==null){\n                    return  {\n                        x: event.x,\n                        y: event.y\n                    };\n                }\n                var t = d3.select(this);\n                return {\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\n                };\n            })\n            .on(\"start\", function(d){\n                self.dragStarted.call(this,d, self)\n            })\n            .on(\"drag\", function (d) {\n                self.onDrag.call(this, d, self);\n            })\n            .on(\"end\", function (d) {\n                self.dragEnded.call(this, d, self);\n            })\n    }\n\n\n    dragStarted(d,self) {\n        if(self.ignoreDrag){\n            self.ignoreDrag=false;\n            self.ignoredDrag=true;\n            return;\n        }\n        self.ignoredDrag=false;\n\n        // self.treeDesigner.layout.disableAutoLayout();\n        ContextMenu.hide();\n        var node = d3.select(this);\n        if(!node.classed(\"selected\")){\n            self.treeDesigner.clearSelection();\n        }\n\n        self.treeDesigner.selectNode(d);\n        node.classed(\"selected dragging\", true);\n        self.selectedNodes = self.treeDesigner.getSelectedNodes(true);\n        self.prevDragEvent = d3.event;\n        self.dragEventCount = 0;\n    }\n\n    onDrag(draggedNode, self){\n        if(self.ignoredDrag){\n            return;\n        }\n\n        if(self.dragEventCount==2){\n            self.data.saveState();\n        }\n        self.dragEventCount++;\n        if(self.selectedNodes.length>5 && self.dragEventCount%2!=1){\n            return;\n        }\n\n        var dx = d3.event.x - self.prevDragEvent.x;\n        var dy = d3.event.y- self.prevDragEvent.y;\n        self.treeDesigner.layout.moveNodes(self.selectedNodes, dx, dy, draggedNode);\n\n\n        self.prevDragEvent = d3.event;\n        self.treeDesigner.redrawEdges();\n        self.treeDesigner.updatePlottingRegionSize();\n    }\n\n    dragEnded(draggedNode, self){\n        var node = d3.select(this).classed(\"dragging\", false);\n        if(self.ignoredDrag){\n            return;\n        }\n        self.treeDesigner.layout.update(draggedNode)\n    }\n\n    cancelDrag(){\n        this.ignoreDrag = true;\n    }\n\n}\n\n\n","var epsilon = 1e-12;\nvar pi = Math.PI;\nvar halfPi = pi / 2;\nvar tau = 2 * pi;\n\nexport default {\n    /*draw: function(context, size) {\n        var r = Math.sqrt(size / pi);\n        context.moveTo(r, 0);\n        context.arc(0, 0, r, 0, tau);\n    }*/\n    draw: function(context, size) {\n\n        var r = Math.sqrt(size / pi);\n        var dist =0.552284749831 * r;\n\n        context.moveTo(-r, 0)\n        // context.lineTo(2*r, 2*r)\n        // context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\n        context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\n\n        context.bezierCurveTo(dist, -r, r, -dist, r,0);\n\n        context.bezierCurveTo(r, dist, dist, r, 0, r);\n\n        context.bezierCurveTo(-dist, r, -r, dist, -r, 0);\n    }\n};\n","var sqrt3 = Math.sqrt(3);\n\nexport default {\n    draw: function(context, size) {\n        var r = Math.sqrt(size / Math.PI);\n        context.moveTo(-r, 0);\n        context.lineTo(0.9*r, -r);\n        context.lineTo(0.9*r, r);\n        context.closePath();\n    }\n};\n","import {Utils} from \"sd-utils\";\nimport {i18n} from './i18n/i18n'\n\nexport class Templates{\n\n    static growl = require('./templates/growl_message.html');\n\n    static get(templateName, variables){\n        var compiled = Utils.template(Templates[templateName],{ 'imports': { 'i18n': i18n, 'Templates': Templates, 'include': function(n, v) {return Templates.get(n, v)} } });\n        if(variables){\n            variables.variables = variables;\n        }else{\n            variables = {variables:{}}\n        }\n        return compiled(variables)\n\n    }\n\n    static styleRule(selector, props){\n        var s = selector+ '{';\n        props.forEach(p=> s+=Templates.styleProp(p[0], p[1]));\n        s+='} ';\n        return s;\n    }\n    static styleProp(styleName, variableName){\n        return  styleName+': <%= '+variableName+' %>; '\n    }\n\n    static treeDesignerSelector = 'svg.sd-tree-designer';\n    static nodeSelector(type, clazz){\n        var s = Templates.treeDesignerSelector+' .node';\n        if(type){\n            s+='.'+type+'-node';\n        }\n        if(clazz){\n            s+='.'+clazz;\n        }\n        return s;\n    }\n    static edgeSelector(clazz){\n        var s = Templates.treeDesignerSelector+' .edge';\n        if(clazz){\n            s+='.'+clazz;\n        }\n        return s;\n    }\n\n    static treeDesignerStyles =\n\n        Templates.styleRule(Templates.treeDesignerSelector,[\n            ['font-size', 'fontSize'],\n            ['font-family', 'fontFamily'],\n            ['font-weight', 'fontWeight'],\n            ['font-style', 'fontStyle']\n        ])+\n        //   node\n        Templates.styleRule(Templates.nodeSelector()+' path',[\n            ['fill', 'node.fill'],\n            ['stroke-width', 'node.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('decision', 'optimal')+' path, '+Templates.nodeSelector('chance', 'optimal')+' path,' +Templates.nodeSelector('terminal', 'optimal')+' path',[\n            ['stroke', 'node.optimal.stroke'],\n            ['stroke-width', 'node.optimal.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .label',[\n            ['font-size', 'node.label.fontSize'],\n            ['fill', 'node.label.color']\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .payoff',[\n            ['font-size', 'node.payoff.fontSize'],\n            ['fill', 'node.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .payoff.negative',[\n            ['fill', 'node.payoff.negativeColor'],\n        ])+\n\n        //    decision node\n        Templates.styleRule(Templates.nodeSelector('decision')+' path',[\n            ['fill', 'node.decision.fill'],\n            ['stroke', 'node.decision.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('decision', 'selected')+' path',[\n            ['fill', 'node.decision.selected.fill']\n        ])+\n\n        //    chance node\n        Templates.styleRule(Templates.nodeSelector('chance')+' path',[\n            ['fill', 'node.chance.fill'],\n            ['stroke', 'node.chance.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('chance', 'selected')+' path',[\n            ['fill', 'node.chance.selected.fill']\n        ])+\n\n        //    terminal node\n        Templates.styleRule(Templates.nodeSelector('terminal')+' path',[\n            ['fill', 'node.terminal.fill'],\n            ['stroke', 'node.terminal.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal', 'selected')+' path',[\n            ['fill', 'node.terminal.selected.fill']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff',[\n            ['font-size', 'node.terminal.payoff.fontSize'],\n            ['fill', 'node.terminal.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff.negative',[\n            ['fill', 'node.terminal.payoff.negativeColor'],\n        ])+\n\n\n        //probability\n        Templates.styleRule(Templates.treeDesignerSelector+' .node .probability-to-enter, '+Templates.treeDesignerSelector+' .edge .probability',[\n            ['font-size', 'probability.fontSize'],\n            ['fill', 'probability.color']\n        ])+\n\n        //edge\n        Templates.styleRule(Templates.edgeSelector()+' path',[\n            ['stroke', 'edge.stroke'],\n            ['stroke-width', 'edge.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow path',[\n            ['fill', 'edge.stroke'],\n        ])+\n        Templates.styleRule(Templates.edgeSelector('optimal')+' path',[\n            ['stroke', 'edge.optimal.stroke'],\n            ['stroke-width', 'edge.optimal.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-optimal path',[\n            ['fill', 'edge.optimal.stroke'],\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector('selected')+' path',[\n            ['stroke', 'edge.selected.stroke'],\n            ['stroke-width', 'edge.selected.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-selected path',[\n            ['fill', 'edge.selected.stroke'],\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector()+' .label',[\n            ['font-size', 'edge.label.fontSize'],\n            ['fill', 'edge.label.color']\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector()+' .payoff',[\n            ['font-size', 'edge.payoff.fontSize'],\n            ['fill', 'edge.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.edgeSelector()+' .payoff.negative',[\n            ['fill', 'edge.payoff.negativeColor'],\n        ])+\n\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-title',[\n            ['font-size', 'title.fontSize'],\n            ['font-weight', 'title.fontWeight'],\n            ['font-style', 'title.fontStyle'],\n            ['fill', 'title.color']\n        ]) +\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-description',[\n            ['font-size', 'description.fontSize'],\n            ['font-weight', 'description.fontWeight'],\n            ['font-style', 'description.fontStyle'],\n            ['fill', 'description.color']\n        ])\n}\n\n\n\n\n","module.exports = \"module.exports = \\\"<div class=\\\\\\\"sd-growl-message <%=type%>\\\\\\\">\\\\n    <div class=\\\\\\\"sd-growl-message-text\\\\\\\">\\\\n        <%= message %>\\\\n    </div>\\\\n</div>\\\\n\\\";\\n\";\n","import {AppUtils} from './app-utils'\nimport * as d3 from './d3'\nimport {ContextMenu} from './context-menu/context-menu'\n\nexport class TextDragHandler{\n\n    treeDesigner;\n    data;\n    config;\n\n    drag;\n\n\n    constructor(treeDesigner, data){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n\n        var self = this;\n        this.drag = d3.drag()\n            .subject(function(d) {\n                if(d==null){\n                    return  {\n                        x: event.x,\n                        y: event.y\n                    };\n                }\n                var t = d3.select(this);\n                return {\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\n                };\n            })\n            .on(\"start\", function(d){\n                self.dragStarted.call(this,d, self)\n            })\n            .on(\"drag\", function (d) {\n                self.onDrag.call(this, d, self);\n            })\n            .on(\"end\", function (d) {\n                self.dragEnded.call(this, d, self);\n            })\n    }\n\n\n    dragStarted(d,self) {\n        // self.treeDesigner.layout.disableAutoLayout();\n        ContextMenu.hide();\n        var text = d3.select(this);\n        if(!text.classed(\"selected\")){\n            self.treeDesigner.clearSelection();\n        }\n\n        self.treeDesigner.selectText(d);\n        text.classed(\"selected dragging\", true);\n        self.selectedNodes = self.treeDesigner.getSelectedNodes();\n        self.prevDragEvent = d3.event;\n        self.dragEventCount = 0;\n    }\n\n    onDrag(draggedText, self){\n        if(self.dragEventCount==2){\n            self.data.saveState();\n        }\n        self.dragEventCount++;\n\n        var dx = d3.event.x - self.prevDragEvent.x;\n        var dy = d3.event.y- self.prevDragEvent.y;\n\n        self.treeDesigner.layout.moveTexts([draggedText], dx, dy);\n\n        self.prevDragEvent = d3.event;\n        self.treeDesigner.updatePlottingRegionSize();\n    }\n\n    dragEnded(draggedNode, self){\n         d3.select(this).classed(\"dragging\", false);\n    }\n\n}\n\n\n","import * as d3 from './d3'\nimport {Utils} from 'sd-utils'\n\nexport class Tooltip {\n    static getContainer(){\n        return d3.select(\"body\").selectOrAppend('div.sd-tooltip');\n    }\n\n    static show(html, xOffset = 5, yOffset = 28, event, duration=null) {\n        var container = Tooltip.getContainer()\n            .style(\"opacity\", 0);\n        container.transition()\n            .duration(200)\n            .style(\"opacity\", .98);\n        container.html(html);\n        Tooltip.updatePosition(xOffset, yOffset, event);\n        if(duration){\n            setTimeout(function(){\n                Tooltip.hide();\n            }, duration)\n        }\n    }\n\n    static updatePosition(xOffset = 5, yOffset = 28, event) {\n        event = event || d3.event;\n        Tooltip.getContainer()\n            .style(\"left\", (event.pageX + xOffset) + \"px\")\n            .style(\"top\", (event.pageY - yOffset) + \"px\");\n    }\n\n    static hide(duration = 500) {\n        var t = Tooltip.getContainer();\n        if(duration){\n            t = t.transition().duration(duration)\n        }\n        t.style(\"opacity\", 0);\n    }\n\n    static attach(target, htmlOrFn, xOffset, yOffset) {\n        target.on('mouseover', function (d, i) {\n            var html = null;\n            if (Utils.isFunction(htmlOrFn)) {\n                html = htmlOrFn(d, i);\n            } else {\n                html = htmlOrFn;\n            }\n\n            if (html !== null && html !== undefined && html !== '') {\n                Tooltip.show(html, xOffset, yOffset);\n            }else{\n                Tooltip.hide(0);\n            }\n\n        }).on('mousemove', function (d) {\n            Tooltip.updatePosition(xOffset, yOffset);\n        }).on(\"mouseout\", function (d) {\n            Tooltip.hide();\n        });\n    }\n}\n","import * as d3 from \"./d3\";\nimport {Utils} from \"sd-utils\";\nimport {AppUtils} from \"./app-utils\";\nimport {domain as model} from \"sd-model\";\nimport {ContextMenu} from \"./context-menu/context-menu\";\nimport {MainContextMenu} from \"./context-menu/main-context-menu\";\nimport {NodeContextMenu} from \"./context-menu/node-context-menu\";\nimport {Layout} from \"./layout\";\nimport {NodeDragHandler} from \"./node-drag-handler\";\nimport {Tooltip} from \"./tooltip\";\nimport {Templates} from \"./templates\";\nimport {TextDragHandler} from \"./text-drag-handler\";\nimport {TextContextMenu} from \"./context-menu/text-context-menu\";\nimport {EdgeContextMenu} from \"./context-menu/edge-context-menu\";\nimport * as Hammer from \"hammerjs\";\nimport {i18n} from \"./i18n/i18n\";\n\n\nexport class TreeDesignerConfig {\n    width = undefined;\n    height = undefined;\n    margin = {\n        left: 25,\n        right: 25,\n        top: 25,\n        bottom: 25\n    };\n    scale = 1;\n    lng = 'en';\n    layout= {\n        type: 'tree',\n        nodeSize: 40,\n        limitNodePositioning: true,\n        limitTextPositioning: true,\n        gridHeight: 75,\n        gridWidth: 150,\n        edgeSlantWidthMax: 20\n    };\n    fontFamily = 'sans-serif';\n    fontSize = '12px';\n    fontWeight = 'normal';\n    fontStyle = 'normal';\n    node = {\n        strokeWidth: '1px',\n        optimal: {\n            stroke: '#006f00',\n            strokeWidth: '1.5px',\n        },\n        label: {\n            fontSize: '1em',\n            color: 'black'\n        },\n        payoff: {\n            fontSize: '1em',\n            color: 'black',\n            negativeColor: '#b60000'\n        },\n        decision: {\n            fill: '#ff7777',\n            stroke: '#660000',\n\n            selected: {\n                fill: '#aa3333',\n                // stroke: '#666600'\n            }\n        },\n        chance: {\n            fill: '#ffff44',\n            stroke: '#666600',\n\n            selected: {\n                fill: '#aaaa00',\n                // stroke: '#666600'\n            }\n        },\n        terminal:{\n            fill: '#44ff44',\n            stroke: 'black',\n            selected: {\n                fill: '#00aa00',\n                // stroke: 'black'\n            },\n            payoff: {\n                fontSize: '1em',\n                color: 'black',\n                negativeColor: '#b60000'\n            },\n        }\n    };\n    edge={\n        stroke: '#424242',\n        strokeWidth: '1.5',\n        optimal:{\n            stroke: '#006f00',\n            strokeWidth: '2.4',\n        },\n        selected:{\n            stroke: '#045ad1',\n            strokeWidth: '3.5',\n        },\n        label: {\n            fontSize: '1em',\n            color: 'back'\n        },\n        payoff:{\n            fontSize: '1em',\n            color: 'black',\n            negativeColor: '#b60000'\n        }\n\n    };\n    probability = {\n        fontSize: '1em',\n        color: '#0000d7'\n    };\n    title = {\n        fontSize: '16px',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        color: '#000000',\n        margin:{\n            top: 15,\n            bottom: 10\n        }\n    };\n    description = {\n        show: true,\n        fontSize: '12px',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        color: '#000000',\n        margin:{\n            top: 5,\n            bottom: 10\n        }\n    };\n\n    readOnly= false;\n    disableAnimations=false;\n    forceFullEdgeRedraw=false;\n    hideLabels=false;\n    hidePayoffs=false;\n    hideProbabilities=false;\n    raw=false;\n\n\n    payoffNumberFormatter = (v, i)=> v;\n    probabilityNumberFormatter  = (v)=> v;\n\n    onNodeSelected = (node) => {};\n    onEdgeSelected = (edge) => {};\n    onTextSelected = (text) => {};\n    onSelectionCleared = () => {};\n\n    operationsForObject = (o) => [];\n\n    payoffNames = [null, null];\n    maxPayoffsToDisplay = 1;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n\nexport class TreeDesigner {\n\n    config;\n    container;\n    data; //data model manager\n    svg;\n\n    constructor(container, dataModel, config){\n        this.setConfig(config);\n        this.data = dataModel;\n        this.initContainer(container);\n        this.init();\n    }\n\n    setConfig(config) {\n        this.config = new TreeDesignerConfig(config);\n        if(this.layout){\n            this.layout.config=this.config.layout;\n        }\n        this.updateCustomStyles();\n        return this;\n    }\n\n    init(){\n\n        this.initSvg();\n        this.initLayout();\n        this.initI18n();\n        this.initBrush();\n        this.initEdgeMarkers();\n\n        this.updateCustomStyles();\n        if(!this.config.readOnly){\n            this.initMainContextMenu();\n            this.initNodeContextMenu();\n            this.initEdgeContextMenu();\n            this.initNodeDragHandler();\n            this.initTextDragHandler();\n            this.initTextContextMenu();\n        }\n        this.redraw();\n    }\n\n    initI18n() {\n        i18n.init(this.config.lng);\n    }\n\n\n    updateCustomStyles(){\n        d3.select('head').selectOrAppend('style#sd-tree-designer-style').html(Templates.get('treeDesignerStyles', this.config));\n        return this;\n    }\n\n    initLayout(){\n        this.layout = new Layout(this, this.data, this.config.layout);\n    }\n\n    initNodeDragHandler(){\n        this.nodeDragHandler = new NodeDragHandler(this, this.data);\n    }\n\n    initTextDragHandler(){\n        this.textDragHandler = new TextDragHandler(this, this.data);\n    }\n\n    redraw(withTransitions=false){\n\n        var self = this;\n        withTransitions = !self.config.disableAnimations && withTransitions;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateScale(withTransitions);\n        this.updateMargin(withTransitions);\n        if(withTransitions){\n            self.transitionPrev = self.transition;\n            self.transition = true;\n        }\n        this.redrawNodes();\n        this.redrawEdges();\n        this.redrawFloatingTexts();\n        this.updateValidationMessages();\n        if(withTransitions){\n            self.transition =  self.transitionPrev;\n        }\n        setTimeout(function(){\n            self.updatePlottingRegionSize();\n        },10);\n\n        return this;\n    }\n\n    computeAvailableSpace(){\n        this.availableHeight = AppUtils.sanitizeHeight(this.config.height, this.container, this.config.margin);\n        this.availableWidth = AppUtils.sanitizeWidth(this.config.width, this.container, this.config.margin);\n    }\n\n    initSvg() {\n        var c = this;\n        var self = this;\n        this.computeAvailableSpace();\n        this.svg = this.container.selectOrAppend('svg.sd-tree-designer');\n        this.svg.attr('width', this.availableWidth).attr('height', this.availableHeight);\n\n        this.wrapperGroup = this.svg.selectOrAppend('g.sd-wrapper-group');\n        this.mainGroup = this.wrapperGroup.selectOrAppend('g.main-group');\n        this.updateScale();\n        this.updateMargin();\n\n\n        if (!this.config.width) {\n            d3.select(window)\n                .on(\"resize.tree-designer\", function () {\n                    self.updatePlottingRegionSize();\n                    self.redrawDiagramTitle();\n                });\n        }\n\n        var mc = new Hammer.Manager(this.svg.node(), {touchAction : 'auto'});\n        mc.add(new Hammer.Press({\n            pointerType: 'touch'\n        }));\n\n        mc.add(new Hammer.Pinch({\n            pointerType: 'touch'\n        }));\n\n        var cancel;\n        mc.on('pinchstart', function(){\n            self.disableBrush();\n        })\n        mc.on('pinch', function(){\n            cancel = Utils.waitForFinalEvent(()=>self.enableBrush(), 'pinchend', 5000)\n        })\n    }\n\n    updateMargin(withTransitions){\n        var self = this;\n        var margin = this.config.margin;\n        var group = this.mainGroup;\n        if(withTransitions){\n            group = group.transition();\n        }\n\n        this.topMargin = margin.top;\n        if(this.diagramTitle||this.diagramDescription){\n            this.topMargin = parseInt(this.diagramTitle ? this.config.title.margin.top : 0) + this.getTitleGroupHeight()\n                +  Math.max(this.topMargin, parseInt(this.config.title.margin.bottom));\n        }\n\n        group.attr(\"transform\", \"translate(\" + margin.left + \",\" + this.topMargin + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\n    }\n\n    setMargin(margin, withoutStateSaving){\n        var self=this;\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    margin: Utils.clone(self.config.margin)\n                },\n                onUndo: (data)=> {\n                    self.setMargin(data.margin, true);\n                },\n                onRedo: (data)=> {\n                    self.setMargin(margin, true);\n                }\n            });\n        }\n        Utils.deepExtend(this.config.margin, margin);\n        this.redrawDiagramTitle();\n        this.updateMargin(true);\n    }\n\n\n    updateScale(withTransitions){\n        var self = this;\n        var scale = this.config.scale;\n        var group = this.wrapperGroup;\n        if(withTransitions){\n            group = group.transition();\n        }\n\n        group.attr(\"transform\", \"scale(\" + scale + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\n    }\n\n    setScale(scale, withoutStateSaving){\n        var self=this;\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    scale: Utils.clone(self.config.scale)\n                },\n                onUndo: (data)=> {\n                    self.setScale(data.scale, true);\n                },\n                onRedo: (data)=> {\n                    self.setScale(scale, true);\n                }\n            });\n        }\n        this.config.scale = scale;\n        this.updateScale(true);\n    }\n\n    initContainer(containerIdOrElem) {\n        if (Utils.isString(containerIdOrElem)) {\n            var selector = containerIdOrElem.trim();\n\n            if (!Utils.startsWith(selector, '#') && !Utils.startsWith(selector, '.')) {\n                selector = '#' + selector;\n            }\n            this.container = d3.select(selector);\n        } else if(containerIdOrElem._parents){\n            this.container = containerIdOrElem\n        }else{\n            this.container = d3.select(containerIdOrElem);\n        }\n    }\n\n    updatePlottingRegionSize() {\n        var changed = false;\n        this.computeAvailableSpace();\n        var margin = this.config.margin;\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        var mainGroupBox = this.mainGroup.node().getBBox();\n        let boxWidth = mainGroupBox.width;\n        var newSvgWidth = boxWidth+mainGroupBox.x+margin.left+margin.right;\n        newSvgWidth  *= this.config.scale;\n        this.container.classed('with-overflow-x', newSvgWidth>=this.availableWidth);\n        newSvgWidth = Math.max(newSvgWidth, this.availableWidth);\n        if(svgWidth!=newSvgWidth){\n            changed = true;\n            this.svg.attr('width', newSvgWidth);\n        }\n        let boxHeight = mainGroupBox.height;\n        var newSvgHeight = boxHeight+mainGroupBox.y+this.topMargin+margin.bottom;\n        newSvgHeight *= this.config.scale;\n        this.container.classed('with-overflow-y', newSvgHeight>=this.availableHeight);\n        newSvgHeight = Math.max(newSvgHeight, this.availableHeight);\n        if(svgHeight!=newSvgHeight){\n            changed=true;\n            this.svg.attr('height', newSvgHeight);\n        }\n        if(changed){\n            this.updateBrushExtent()\n        }\n\n\n    }\n\n    redrawNodes() {\n        var self = this;\n\n\n        var nodesContainer = this.mainGroup.selectOrAppend('g.nodes');\n        var nodes = nodesContainer.selectAll('.node').data(this.data.nodes.filter(d=>!d.$hidden), (d,i)=> d.$id);\n        nodes.exit().remove();\n        var nodesEnter = nodes.enter().append('g')\n            .attr('id', d=>'node-'+d.$id)\n            .attr('class', d=>d.type+'-node node')\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\n        nodesEnter.append('path');\n\n        var labelEnter = nodesEnter.append('text').attr('class', 'label');\n        var payoffEnter = nodesEnter.append('text').attr('class', 'payoff computed');\n        var indicatorEnter = nodesEnter.append('text').attr('class', 'error-indicator').text('!!');\n        var aggregatedPayoffEnter = nodesEnter.append('text').attr('class', 'aggregated-payoff');\n        var probabilityToEnterEnter = nodesEnter.append('text').attr('class', 'probability-to-enter');\n\n        var nodesMerge = nodesEnter.merge(nodes);\n        nodesMerge.classed('optimal', (d)=>self.isOptimal(d));\n\n        var nodesMergeT = nodesMerge;\n        if(this.transition){\n            nodesMergeT = nodesMerge.transition();\n            nodesMergeT.on('end', ()=> self.updatePlottingRegionSize())\n        }\n        nodesMergeT\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')')\n\n        var path = nodesMerge.select('path');\n        this.layout.drawNodeSymbol(path,this.transition);\n\n        /*path\n            .style('fill', d=> {\n                // if(self.isNodeSelected(d)){\n                //     return self.config.node[d.type].selected.fill\n                // }\n                return self.config.node[d.type].fill\n            })\n            .style('stroke', d=> self.config.node[d.type].stroke)\n            .style('stroke-width', d=> {\n                if(self.config.node[d.type].strokeWidth!==undefined){\n                    return self.config.node[d.type].strokeWidth;\n                }\n                return self.config.node.strokeWidth;\n            });\n        */\n        this.layout.nodeLabelPosition(labelEnter);\n        var labelMerge = nodesMerge.select('text.label');\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\n        var labelMergeT = nodesMergeT.select('text.label');\n        labelMergeT.each(this.updateTextLines);\n        this.layout.nodeLabelPosition(labelMergeT)\n            .attr('text-anchor', 'middle')\n\n        var payoff = nodesMerge.select('text.payoff');\n\n        var payoffTspans = payoff.selectAll('tspan').data(d=>{\n            let item = d.displayValue('childrenPayoff');\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\n        });\n        payoffTspans.exit().remove();\n\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\n        payoffTspansM\n            // .attr('dominant-baseline', 'hanging')\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0')\n            .classed('negative', d=> {\n                return d!==null && d<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\n            .text((d, i)=> {\n                var val = d\n\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\n            });\n        this.attachPayoffTooltip(payoffTspansM);\n\n\n        var payoffT = payoff;\n        if(this.transition){\n            payoffT = payoff.transition();\n        }\n\n        this.layout.nodePayoffPosition(payoffEnter);\n        this.layout.nodePayoffPosition(payoffT);\n\n        var aggregatedPayoff = nodesMerge.select('text.aggregated-payoff');\n        var aggregatedPayoffTspans = aggregatedPayoff.selectAll('tspan').data(d=>{\n            let item = d.displayValue('aggregatedPayoff');\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\n        });\n        aggregatedPayoffTspans.exit().remove();\n        var aggregatedPayoffTspansM = aggregatedPayoffTspans.enter().append('tspan').merge(aggregatedPayoffTspans)\n            .attr('dy', (d,i)=>i>0 ? '0.95em': undefined)\n            .classed('negative', d=> {\n                return d!==null && d<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\n            .text((val, i)=> {\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\n            });\n\n        this.attachPayoffTooltip(aggregatedPayoffTspansM, 'aggregatedPayoff');\n\n        var aggregatedPayoffT = aggregatedPayoff;\n        if(this.transition){\n            aggregatedPayoffT = aggregatedPayoff.transition();\n        }\n\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffEnter);\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffT);\n\n        var probabilityToEnter = nodesMerge.select('text.probability-to-enter')\n            .text(d=>{\n                var val = d.displayValue('probabilityToEnter');\n                return val!==null ? (isNaN(val) ? val : self.config.probabilityNumberFormatter(val)): ''\n            })\n            .classed('sd-hidden', this.config.hideProbabilities || this.config.raw);\n        Tooltip.attach(probabilityToEnter, i18n.t('tooltip.node.probabilityToEnter'));\n\n\n        var probabilityToEnterT = probabilityToEnter;\n        if(this.transition){\n            probabilityToEnterT = probabilityToEnter.transition();\n        }\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterEnter);\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterT);\n\n\n        var indicator = nodesMerge.select('text.error-indicator');\n        indicator.classed('sd-hidden', this.config.raw)\n        this.layout.nodeIndicatorPosition(indicatorEnter);\n        this.layout.nodeIndicatorPosition(indicator);\n\n        if(this.nodeDragHandler){\n            nodesMerge.call(this.nodeDragHandler.drag);\n        }\n\n        nodesMerge.on('contextmenu', this.nodeContextMenu);\n        nodesMerge.on('dblclick', this.nodeContextMenu)\n        nodesMerge.each(function(d, i){\n            var nodeElem = this;\n            var mc = new Hammer.Manager(nodeElem);\n            mc.add(new Hammer.Press({\n                pointerType: 'touch'\n            }));\n            mc.on('press', function(e){\n                if(e.pointerType=='touch'){\n                    self.nodeDragHandler.cancelDrag();\n                }\n            })\n\n\n            if(d.folded){\n                let button = d3.select(nodeElem).selectOrAppend('text.sd-unfold-button')\n                    .text(\"[+]\")\n                    .on('click dbclick mousedown', ()=>self.foldSubtree(d, false)); //firefox detects only mousedown event - related to drag handler\n\n                self.layout.nodeUnfoldButtonPosition(button);\n                Tooltip.attach(button, i18n.t('contextMenu.node.unfold'));\n            }else{\n                d3.select(nodeElem).select('.sd-unfold-button').remove();\n            }\n\n        })\n    }\n\n    attachPayoffTooltip(selection, payoffFiledName = 'payoff', object='node'){\n        var self = this;\n        Tooltip.attach(selection, (d, i)=>{\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\n                return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.named',{value: d.payoff, number: i+1, name: self.config.payoffNames[i]})\n            }\n            return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.default',{value: d.payoff, number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\n        });\n    }\n\n    updateTextLines(d){ //helper method for splitting text to tspans\n        var lines = d.name ? d.name.split('\\n') : [];\n        lines.reverse();\n        var tspans = d3.select(this).selectAll('tspan').data(lines);\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .text(l=>l)\n            .attr('dy', (d,i)=>i>0 ? '-1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n    }\n\n    isOptimal(d){\n        return d.displayValue('optimal');\n    }\n\n    redrawEdges() {\n        var self = this;\n        var edgesContainer = this.mainGroup.selectOrAppend('g.edges');\n        if(self.config.forceFullEdgeRedraw){\n            edgesContainer.selectAll(\"*\").remove();\n        }\n\n        var edges = edgesContainer.selectAll('.edge').data(this.data.edges.filter(e=>!e.$hidden), (d,i)=> d.$id);\n        edges.exit().remove();\n        var edgesEnter = edges.enter().append('g')\n            .attr('id', d=>'edge-'+d.$id)\n            .attr('class', 'edge');\n\n\n        edgesEnter.append('path');\n        var labelEnter = edgesEnter.appendSelector('g.label-group');\n        labelEnter.append('text').attr('class', 'label');\n        var payoffEnter = edgesEnter.append('text').attr('class', 'payoff');\n        var probabilityEnter = edgesEnter.append('text').attr('class', 'probability');\n\n\n        var edgesMerge = edgesEnter.merge(edges);\n\n\n        var optimalClassName = 'optimal';\n        edgesMerge.classed(optimalClassName, (d)=>self.isOptimal(d));\n\n        var edgesMergeT = edgesMerge;\n        if(this.transition){\n            edgesMergeT = edgesMerge.transition();\n        }\n\n        edgesMergeT.select('path')\n            .attr('d', d=> this.layout.edgeLineD(d))\n            // .attr(\"stroke\", \"black\")\n            // .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .attr(\"marker-end\", function(d) {\n                var suffix = d3.select(this.parentNode).classed('selected') ? '-selected' : (self.isOptimal(d)?'-optimal':'');\n                return \"url(#arrow\"+ suffix+\")\"\n            });\n            // .attr(\"shape-rendering\", \"optimizeQuality\")\n\n\n        edgesMerge.on('click', d=>{\n            self.selectEdge(d, true)\n        });\n\n        this.layout.edgeLabelPosition(labelEnter);\n        edgesMergeT.select('text.label').each(this.updateTextLines);\n        var labelMerge = edgesMerge.select('g.label-group');\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\n        var labelMergeT = edgesMergeT.select('g.label-group');\n        this.layout.edgeLabelPosition(labelMergeT);\n            // .text(d=>d.name);\n\n        var payoff = edgesMerge.select('text.payoff');\n\n        var payoffTspans = payoff.selectAll('tspan').data(d => {\n            let item = d.displayValue('payoff');\n            return Utils.isArray(item) ? item.slice(0, Math.min(item.length, self.config.maxPayoffsToDisplay)).map(_=>d) : [d];\n        });\n        payoffTspans.exit().remove();\n\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\n        payoffTspansM\n        // .attr('dominant-baseline', 'hanging')\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            // .attr('x', '0')\n\n            // .attr('dominant-baseline', 'hanging')\n            .classed('negative', (d, i)=> {\n                var val = d.displayPayoff(undefined, i);\n                return val!==null && val<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs)\n            // .text(d=> isNaN(d.payoff) ? d.payoff : self.config.payoffNumberFormatter(d.payoff))\n            .text((d, i)=>{\n                if(this.config.raw){\n                    return d.payoff[i];\n                }\n\n                let item = d.displayValue('payoff');\n                let items = Utils.isArray(item) ? item : [item];\n\n                let val = items[i];\n                if (val !== null) {\n                    if (!isNaN(val)) {\n                        return self.config.payoffNumberFormatter(val, i);\n                    }\n                    if (Utils.isString(val)) {\n                        return val;\n                    }\n                }\n\n                if (d.payoff[i] !== null && !isNaN(d.payoff[i]))\n                    return self.config.payoffNumberFormatter(d.payoff[i], i);\n\n                return d.payoff[i];\n\n            });\n\n        Tooltip.attach(payoffTspansM, (d, i)=>{\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\n                return i18n.t('tooltip.edge.payoff.named',{value: d.payoff[i], number: i+1, name: self.config.payoffNames[i]})\n            }\n            return i18n.t('tooltip.edge.payoff.default',{value: d.payoff[i], number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\n        });\n\n        var payoffTextT = payoff;\n        if(this.transition){\n            payoffTextT = payoff.transition();\n        }\n        this.layout.edgePayoffPosition(payoffEnter);\n        this.layout.edgePayoffPosition(payoffTextT);\n\n        Tooltip.attach(edgesMerge.select('text.probability'), d=>i18n.t('tooltip.edge.probability',{value: d.probability=== undefined ? d.displayProbability() : d.probability}));\n\n        edgesMerge.select('text.probability')\n            .classed('sd-hidden', this.config.hideProbabilities);\n        var probabilityMerge = edgesMerge.select('text.probability');\n        probabilityMerge\n            .attr('text-anchor', 'end')\n            .text(d=>{\n                if(this.config.raw){\n                    return d.probability;\n                }\n                var val = d.displayProbability();\n\n                if(val!==null){\n                    if(!isNaN(val)){\n                        return self.config.probabilityNumberFormatter(val);\n                    }\n                    if(Utils.isString(val)){\n                        return val;\n                    }\n                }\n\n                if(d.probability!==null && !isNaN(d.probability))\n                    return self.config.probabilityNumberFormatter(d.probability);\n\n                return d.probability;\n            });\n        var probabilityMergeT = probabilityMerge;\n        if(this.transition){\n            probabilityMergeT = probabilityMerge.transition();\n        }\n\n        this.layout.edgeProbabilityPosition(probabilityEnter);\n        this.layout.edgeProbabilityPosition(probabilityMergeT);\n\n\n        edgesContainer.selectAll('.edge.'+optimalClassName).raise();\n\n        edgesMerge.on('contextmenu', this.edgeContextMenu);\n        edgesMerge.on('dblclick', this.edgeContextMenu);\n        edgesMerge.each(function(d, i){\n            var elem = this;\n            var mc = new Hammer.Manager(elem);\n            mc.add(new Hammer.Press({\n                pointerType: Hammer.POINTER_TOUCH\n            }));\n        })\n    }\n\n    redrawFloatingTexts() {\n        var self = this;\n\n\n        var textsContainer = this.mainGroup.selectOrAppend('g.floating-texts');\n        var texts = textsContainer.selectAll('.floating-text').data(this.data.texts, (d,i)=> d.$id);\n        texts.exit().remove();\n        var textsEnter = texts.enter().appendSelector('g.floating-text')\n            .attr('id', d=>'text-'+d.$id);\n\n\n        var rectWidth = 40;\n        var rectHeight = 20;\n\n        textsEnter.append('rect').attr('x', -5).attr('y', -16).attr('fill-opacity', 0);\n        textsEnter.append('text');\n\n        var textsMerge = textsEnter.merge(texts);\n        var textsMergeT = textsMerge;\n        if(this.transition){\n            textsMergeT = textsMerge.transition();\n        }\n\n        textsMergeT.attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\n\n        var tspans = textsMerge.select('text').selectAll('tspan').data(d=>d.value ? d.value.split('\\n') : []);\n\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n        textsMerge.classed('sd-empty', d=>!d.value || !d.value.trim());\n        textsMerge.select('rect').attr('width', rectWidth).attr('height', rectHeight);\n\n        textsMerge.each(function(d){\n            if(!d.value){\n                return;\n            }\n            var bb = d3.select(this).select('text').node().getBBox();\n           d3.select(this).select('rect')\n               .attr('y', bb.y-5)\n               .attr('width', Math.max(bb.width+10, rectWidth))\n               .attr('height', Math.max(bb.height+10, rectHeight))\n        });\n\n        if(this.textDragHandler){\n            textsMerge.call(this.textDragHandler.drag);\n        }\n        textsMerge.on('contextmenu', this.textContextMenu);\n        textsMerge.on('dblclick', this.textContextMenu);\n        textsMerge.each(function(d, i){\n            var elem = this;\n            var mc = new Hammer.Manager(elem);\n            mc.add(new Hammer.Press({\n                pointerType: 'touch'\n            }));\n        })\n\n    }\n\n    updateValidationMessages() {\n        var nodes = this.mainGroup.selectAll('.node');\n        nodes.classed('error', false);\n\n        this.data.validationResults.forEach(validationResult=>{\n            if(validationResult.isValid()){\n                return;\n            }\n\n            Object.getOwnPropertyNames(validationResult.objectIdToError).forEach(id=>{\n                var errors = validationResult.objectIdToError[id];\n                var nodeSelection = this.getNodeD3SelectionById(id);\n                nodeSelection.classed('error', true);\n                var tooltipHtml = '';\n                errors.forEach(e=>{\n                    if(tooltipHtml){\n                        tooltipHtml+='<br/>'\n                    }\n                    tooltipHtml+=AppUtils.getValidationMessage(e);\n                });\n\n                Tooltip.attach(nodeSelection.select('.error-indicator'), tooltipHtml);\n\n\n            })\n        });\n    }\n\n\n    initEdgeMarkers() {\n        var defs = this.svg.append(\"svg:defs\");\n\n        this.initArrowMarker(\"arrow\");\n        this.initArrowMarker(\"arrow-optimal\");\n        this.initArrowMarker(\"arrow-selected\");\n    }\n\n    initArrowMarker(id) {\n\n        var defs = this.svg.select(\"defs\");\n        defs.append(\"marker\")\n            .attr(\"id\",id)\n            .attr(\"viewBox\",\"0 -5 10 10\")\n            .attr(\"refX\",5)\n            .attr(\"refY\",0)\n            .attr(\"markerWidth\",4)\n            .attr(\"markerHeight\",4)\n            .attr(\"orient\",\"auto\")\n            .append(\"path\")\n            .attr(\"d\", \"M0,-5L10,0L0,5\")\n            .attr(\"class\",\"arrowHead\");\n    }\n\n    updateBrushExtent() {\n        var self =this;\n        this.brush.extent([[0, 0], [self.svg.attr('width'), self.svg.attr('height')]]);\n        this.brushContainer.call(this.brush);\n    }\n    initBrush() {\n        var self = this;\n\n        var brushContainer = self.brushContainer = this.brushContainer= this.wrapperGroup.selectOrInsert(\"g.brush\", \":first-child\")\n            .attr(\"class\", \"brush\");\n\n        var brush = this.brush = d3.brush()\n            .on(\"start\", brushstart)\n            .on(\"brush\", brushmove)\n            .on(\"end\", brushend);\n\n\n\n        this.updateBrushExtent();\n\n        brushContainer.select('.overlay').on(\"mousemove.edgeSelection\", mousemoved);\n        function mousemoved() {\n            var m = d3.mouse(this);\n            var mgt = self.getMainGroupTranslation();\n            var margin = 10;\n\n            var closest = [null, 999999999];\n            var closeEdges = [];\n            self.mainGroup.selectAll('.edge').each(function(d){\n                var selection = d3.select(this);\n                selection.classed('sd-hover', false);\n                var pathNode = selection.select('path').node();\n                var b = pathNode.getBBox();\n                if(b.x+mgt[0] <=m[0] && b.x+b.width+mgt[0] >= m[0] &&\n                   b.y+mgt[1]-margin <=m[1] && b.y+b.height+mgt[1]+margin >= m[1]){\n\n                    var cp = AppUtils.closestPoint(pathNode, [m[0]-mgt[0], m[1]-mgt[1]]);\n                    if(cp.distance < margin && cp.distance<closest[1]){\n                        closest = [selection, cp.distance];\n                    }\n                }\n\n            });\n\n            self.hoveredEdge = null;\n            if(closest[0]){\n                closest[0].classed('sd-hover', true);\n                self.hoveredEdge = closest[0];\n            }\n\n        }\n\n        function brushstart() {\n            if (!d3.event.selection) return;\n            if(self.hoveredEdge){\n                self.selectEdge(self.hoveredEdge.datum(), true)\n            }else{\n                self.clearSelection();\n            }\n            ContextMenu.hide();\n        }\n\n        // Highlight the selected nodes.\n        function brushmove() {\n            var s = d3.event.selection;\n            if(!s)return;\n\n            self.mainGroup.selectAll(\".node\").classed('selected', function (d) {\n                var mainGroupTranslation = self.getMainGroupTranslation();\n                var x = d.location.x+mainGroupTranslation[0];\n                var y = d.location.y+mainGroupTranslation[1];\n                var nodeSize = self.config.layout.nodeSize;\n                var offset = nodeSize*0.25;\n                return s[0][0] <= x+offset && x-offset <= s[1][0]\n                    && s[0][1] <= y+offset && y-offset <= s[1][1];\n            });\n        }\n        // If the brush is empty, select all circles.\n        function brushend() {\n            if (!d3.event.selection) return;\n            brush.move(brushContainer, null);\n\n            var selectedNodes = self.getSelectedNodes();\n            if(selectedNodes && selectedNodes.length === 1){\n                self.selectNode(selectedNodes[0]);\n            }\n            // if (!d3.event.selection) self.mainGroup.selectAll(\".selected\").classed('selected', false);\n        }\n    }\n\n    disableBrush(){\n        if(!this.brushDisabled){\n            AppUtils.growl(i18n.t('growl.brushDisabled'), 'info', 'left')\n        }\n        this.brushDisabled = true;\n        this.brushContainer.remove();\n    }\n\n    enableBrush(){\n        if(this.brushDisabled){\n            AppUtils.growl(i18n.t('growl.brushEnabled'), 'info', 'left')\n            this.initBrush();\n            this.brushDisabled = false;\n        }\n\n\n    }\n\n    getMainGroupTranslation(invert) {\n        var translation = AppUtils.getTranslation(this.mainGroup.attr(\"transform\"));\n        if(invert){\n            translation[0] = -translation[0];\n            translation[1] = -translation[1]\n        }\n        return translation;\n    }\n\n    initNodeContextMenu() {\n        this.nodeContextMenu = new NodeContextMenu(this, this.config.operationsForObject);\n    }\n\n    initEdgeContextMenu() {\n        this.edgeContextMenu = new EdgeContextMenu(this);\n    }\n\n    initTextContextMenu() {\n        this.textContextMenu = new TextContextMenu(this);\n    }\n\n\n\n    initMainContextMenu() {\n        this.mainContextMenu = new MainContextMenu(this);\n        this.svg.on('contextmenu',this.mainContextMenu);\n        this.svg.on('dblclick',this.mainContextMenu);\n    }\n\n    addText(text){\n        this.data.saveState();\n        this.data.addText(text);\n        this.redraw();\n        this.selectText(text);\n    }\n\n    addNode(node, parent, redraw=false){\n        this.data.saveState();\n        this.data.addNode(node, parent);\n        this.redraw(true);\n        this.layout.update(node);\n        return node;\n    }\n\n    addDecisionNode(parent){\n        var newNode = new model.DecisionNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n    addChanceNode(parent){\n        var newNode = new model.ChanceNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n    addTerminalNode(parent){\n        var newNode = new model.TerminalNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n\n    injectNode(node, edge){\n        this.data.saveState();\n        this.data.injectNode(node, edge);\n        this.redraw();\n        this.layout.update(node);\n        return node;\n    }\n\n    injectDecisionNode(edge){\n        var newNode = new model.DecisionNode(this.layout.getInjectedNodeLocation(edge));\n        this.injectNode(newNode, edge);\n\n    }\n\n    injectChanceNode(edge){\n        var newNode = new model.ChanceNode(this.layout.getInjectedNodeLocation(edge));\n        this.injectNode(newNode, edge);\n    }\n\n    removeNode(node) {\n        this.data.saveState();\n        this.data.removeNode(node);\n\n\n        if(!this.layout.isManualLayout()){\n            this.layout.update();\n        }else{\n            this.redraw();\n        }\n    }\n\n    removeSelectedNodes() {\n        var selectedNodes = this.getSelectedNodes();\n        if(!selectedNodes.length){\n            return;\n        }\n        this.data.saveState();\n        this.data.removeNodes(selectedNodes);\n        this.clearSelection();\n        this.redraw();\n        this.layout.update();\n    }\n\n    removeSelectedTexts(){\n        var selectedTexts = this.getSelectedTexts();\n\n        if(!selectedTexts.length){\n            return;\n        }\n        this.data.saveState();\n        this.data.removeTexts(selectedTexts);\n        this.clearSelection();\n        this.redraw();\n    }\n\n    copyNode(d, notClearPrevSelection) {\n        var clone = this.data.cloneSubtree(d);\n        if(notClearPrevSelection){\n            if(!this.copiedNodes){\n                this.copiedNodes=[];\n            }\n            this.copiedNodes.push(clone);\n        }else{\n            this.copiedNodes = [clone];\n        }\n\n    }\n\n    cutNode(d) {\n        this.copyNode(d);\n        this.removeNode(d);\n    }\n\n    cutSelectedNodes(){\n        var selectedNodes = this.getSelectedNodes();\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\n        this.copyNodes(selectedRoots);\n        this.removeSelectedNodes();\n    }\n\n    copySelectedNodes() {\n        var self;\n        var selectedNodes = this.getSelectedNodes();\n\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\n        this.copyNodes(selectedRoots);\n\n\n    }\n\n    copyNodes(nodes){\n        this.copiedNodes = nodes.map(d=>this.data.cloneSubtree(d));\n    }\n\n\n\n    pasteToNode(node) {\n        if(!this.copiedNodes || !this.copiedNodes.length){\n            return;\n        }\n        this.data.saveState();\n        var self = this;\n        self.clearSelection();\n        var nodesToAttach = this.copiedNodes;\n        self.copyNodes(this.copiedNodes);\n        nodesToAttach.forEach(toAttach=>{\n            var attached = this.data.attachSubtree(toAttach, node).childNode;\n            if(attached.folded){\n                self.foldSubtree(attached, attached.folded, false);\n            }\n            var location = self.layout.getNewChildLocation(node);\n            attached.moveTo(location.x, location.y, true);\n            self.layout.moveNodeToEmptyPlace(attached, false);\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\n\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\n        });\n\n        if(node.folded){\n            self.foldSubtree(node, node.folded, false);\n        }\n\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n\n    }\n\n    pasteToNewLocation(point) {\n        this.data.saveState();\n        var self = this;\n        self.clearSelection();\n        var nodesToAttach = this.copiedNodes;\n        self.copyNodes(this.copiedNodes);\n        nodesToAttach.forEach(toAttach=> {\n            var attached = this.data.attachSubtree(toAttach);\n            if(attached.folded){\n                self.foldSubtree(attached, attached.folded, false);\n            }\n            attached.moveTo(point.x, point.y, true);\n            self.layout.moveNodeToEmptyPlace(attached, false);\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\n\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\n        });\n\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n\n    }\n\n    convertNode(node, typeToConvertTo){\n        var self = this;\n        this.data.saveState();\n        this.data.convertNode(node, typeToConvertTo);\n        setTimeout(function(){\n            self.redraw(true);\n        },10)\n    }\n\n    performOperation(object, operation){\n        var self = this;\n        this.data.saveState();\n        operation.perform(object);\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n    }\n\n    foldSubtree(node, fold = true, redraw=true){\n        let self = this;\n        node.folded = fold;\n\n        this.data.getAllDescendantNodes(node).forEach(n=>{\n            n.$hidden = fold;\n            n.folded = false;\n        });\n        this.data.getAllDescendantEdges(node).forEach(e=>e.$hidden = fold);\n\n        if(!redraw){\n            return;\n        }\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n    }\n\n    updateVisibility(node = null){\n        if(!node){\n            this.data.getRoots().forEach(n=>this.updateVisibility(n));\n            return;\n        }\n\n        if(node.folded){\n            this.foldSubtree(node, true, false);\n            return;\n        }\n\n        node.childEdges.forEach(e => this.updateVisibility(e.childNode));\n\n    }\n\n    moveNodeTo(x,y){\n\n    }\n\n    updateNodePosition(node) {\n        this.getNodeD3Selection(node).raise().attr('transform', 'translate('+node.location.x+' '+node.location.y+')');\n    }\n\n    updateTextPosition(text) {\n        this.getTextD3Selection(text).raise().attr('transform', 'translate('+text.location.x+' '+text.location.y+')');\n    }\n\n    getNodeD3Selection(node){\n        return this.getNodeD3SelectionById(node.$id);\n    }\n\n    getNodeD3SelectionById(id){\n        return this.mainGroup.select('#node-'+id);\n    }\n    getTextD3Selection(text){\n        return this.getTextD3SelectionById(text.$id);\n    }\n    getTextD3SelectionById(id){\n        return this.mainGroup.select('#text-'+id);\n    }\n\n    getSelectedNodes(visibleOnly = false) {\n        let selectedVisible = this.mainGroup.selectAll(\".node.selected\").data();\n        if(visibleOnly){\n            return selectedVisible;\n        }\n\n        let allSelected  = [];\n        allSelected.push(...selectedVisible);\n\n        selectedVisible.forEach(n=>{\n            if(n.folded){\n                let descendants = this.data.getAllDescendantNodes(n);\n                if(descendants){\n                    allSelected.push(...descendants);\n                }\n            }\n        });\n\n        return allSelected;\n    }\n\n    getSelectedTexts(){\n        return this.mainGroup.selectAll(\".floating-text.selected\").data();\n    }\n\n    clearSelection(){\n        this.mainGroup.selectAll(\".edge.selected\").select('path').attr(\"marker-end\", d => \"url(#arrow\"+(this.isOptimal(d)?'-optimal':'')+\")\")\n        this.mainGroup.selectAll(\".selected\").classed('selected', false);\n        this.config.onSelectionCleared();\n    }\n\n    selectEdge(edge, clearSelectionBeforeSelect){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n        this.config.onEdgeSelected(edge);\n        this.mainGroup.select('#edge-'+edge.$id)\n            .classed('selected', true)\n            .select('path')\n            .attr(\"marker-end\", d => \"url(#arrow-selected)\")\n    }\n\n    isNodeSelected(node){\n        return this.getNodeD3Selection(node).classed('selected');\n    }\n\n    selectNode(node, clearSelectionBeforeSelect, skipCallback){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n\n        if(!skipCallback){\n            this.config.onNodeSelected(node);\n        }\n\n        this.getNodeD3SelectionById(node.$id).classed('selected', true);\n    }\n\n    selectText(text, clearSelectionBeforeSelect, skipCallback){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n\n        if(!skipCallback){\n            this.config.onTextSelected(text)\n        }\n\n        this.getTextD3SelectionById(text.$id).classed('selected', true);\n    }\n\n    selectSubTree(node, clearSelectionBeforeSelect,skipCallback) {\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n        this.selectNode(node, false, skipCallback);\n        node.childEdges.forEach(e=>this.selectSubTree(e.childNode, false, true));\n    }\n\n    selectAllNodes() {\n        this.mainGroup.selectAll(\".node\").classed('selected', true);\n    }\n\n    autoLayout(type, withoutStateSaving){\n        this.layout.autoLayout(type, withoutStateSaving);\n    }\n\n    updateDiagramTitle(titleValue){\n        if(!titleValue){\n            titleValue = '';\n        }\n        this.diagramTitle = titleValue;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(true);\n    }\n\n    redrawDiagramTitle(){\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\n\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\n        title.text(this.diagramTitle);\n        Layout.setHangingPosition(title);\n\n        var marginTop = parseInt(this.config.title.margin.top);\n        this.titleContainer.attr('transform', 'translate('+(svgWidth/2)+','+( marginTop)+')');\n    }\n    redrawDiagramDescription(){\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\n\n        var desc = this.titleContainer.selectOrAppend('text.sd-description');\n\n        if(!this.config.description.show){\n            desc.remove();\n            return;\n        }\n\n        var lines = this.diagramDescription ? this.diagramDescription.split('\\n') : [];\n        var tspans = desc.selectAll('tspan').data(lines);\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n        Layout.setHangingPosition(desc);\n\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\n\n        var marginTop = 0;\n        if(this.diagramTitle){\n            marginTop += title.node().getBBox().height;\n            marginTop+= Math.max(parseInt(this.config.description.margin.top), 0);\n        }\n\n\n        desc.attr('transform', 'translate(0,'+( marginTop)+')');\n    }\n\n    updateDiagramDescription(descriptionValue){\n        if(!descriptionValue){\n            descriptionValue = '';\n        }\n        this.diagramDescription = descriptionValue;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(true);\n    }\n\n\n    getTitleGroupHeight(withMargins){\n        if(!this.titleContainer){\n            return 0;\n        }\n        var h = this.titleContainer.node().getBBox().height;\n        if(withMargins){\n            h+= parseInt(this.config.title.margin.bottom);\n            h+= parseInt(this.config.title.margin.top);\n        }\n        return h;\n    }\n\n}\n","export * from './src/index'\n"]}