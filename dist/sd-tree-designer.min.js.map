{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app-utils.js","src/context-menu/context-menu.js","src/context-menu/edge-context-menu.js","src/context-menu/main-context-menu.js","src/context-menu/node-context-menu.js","src/context-menu/text-context-menu.js","src/d3-extensions.js","src/d3.js","src/i18n/de.json","src/i18n/en.json","src/i18n/fr.json","src/i18n/i18n.js","src/i18n/it.json","src/i18n/pl.json","src/index.js","src/layout.js","src/node-drag-handler.js","src/symbols/circle.js","src/symbols/triangle.js","src/templates.js","src/templates/growl_message.html","src/text-drag-handler.js","src/tooltip.js","src/tree-designer.js","index.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","1","module","d3","_templates","_i18n","_sdUtils","AppUtils","textD3Obj","textString","width","textObj","node","textContent","getComputedTextLength","x","getSubStringLength","substring","tooltip","placeTextWithEllipsis","on","d","transition","duration","style","html","event","pageX","pageY","element","window","getComputedStyle","getPropertyValue","transform","g","document","createElementNS","setAttributeNS","matrix","baseVal","consolidate","pathNode","point","best","bestLength","scan","scanDistance","pathLength","getTotalLength","precision","bestDistance","Infinity","scanLength","distance2","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","y","distance","Math","sqrt","p","dx","dy","message","type","arguments","undefined","position","time","Templates","get","select","selectOrAppend","append","setTimeout","remove","tag","attribs","parent","el","createElement","deepExtend","appendChild","parentNode","removeChild","text","replace","createTextNode","div","innerHTML","name","evt","createEvent","initEvent","dispatchEvent","fireEvent","data","CustomEvent","detail","initCustomEvent","error","Utils","isString","key","i18n","selection","classed","_show","exact","display","offsetParent","url","callback","xhr","XMLHttpRequest","open","responseType","onload","status","response","send","sanitizeHeight","height","container","parseInt","sanitizeWidth","availableHeight","margin","max","top","bottom","availableWidth","left","right","ContextMenu","menu","opts","_classCallCheck","this","self","openCallback","onOpen","closeCallback","onClose","selectAll","enter","attr","index","elm","preventDefault","stopPropagation","ret","divider","disabled","action","title","console","_contextMenu","EdgeContextMenu","treeDesigner","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","push","injectDecisionNode","injectChanceNode","_sdModel","MainContextMenu","mousePosition","newNode","domain","DecisionNode","addNode","ChanceNode","newText","Text","addText","pasteToNewLocation","copiedNodes","selectAllNodes","clearSelection","Point","mouse","svg","move","getMainGroupTranslation","NodeContextMenu","operationsForObject","copyMenuItem","selectNode","isNodeSelected","copySelectedNodes","cutMenuItem","cutSelectedNodes","pasteMenuItem","pasteToNode","folded","deleteMenuItem","removeSelectedNodes","TerminalNode","$TYPE","addNodeConversionOptions","addDecisionNode","addChanceNode","addTerminalNode","selectSubTree","foldSubtree","operations","forEach","op","performOperation","canPerform","conversionOptions","getNodeConversionOptions","options","allAllowedTypes","childEdges","$parent","filter","getNodeConversionOption","typeToConvertTo","convertNode","TextContextMenu","selectText","removeSelectedTexts","D3Extensions","prototype","insertSelector","selector","appendSelector","selectOrInsert","operation","selectorParts","split","shift","selectorModifier","selectorItem","insertOrAppendSelector","empty","keys","_d3Dispatch","defineProperty","enumerable","_d3Scale","_d3Selection","_d3Shape","_d3Drag","_d3Brush","_d3Array","_d3Hierarchy","_d3TimeFormat","contextMenu","main","paste","copy","cut","delete","convert","decision","chance","terminal","selectSubtree","fold","unfold","flipSubtree","edge","validation","incompletePath","probabilityDoNotSumUpTo1","invalidProbability","invalidPayoff","growl","brushDisabled","brushEnabled","payoff","default","named","aggregatedPayoff","probabilityToEnter","probability","_i18next","en","pl","it","de","fr","lng","language","resources","translation","$instance","_i18next2","createInstance","fallbackLng","err","opt","_treeDesigner","_appUtils","_tooltip","_d3Extensions","extend","Layout","config","nodeTypeToSymbol","symbolSquare","_circle2","_triangle2","onAutoLayoutChanged","nodeTypeOrder","treeMargin","targetSymbolSize","nodeSeparation","b","nodeSymbolSize","sort","childNode","location","isManualLayout","autoLayout","moveNodeToEmptyPlace","redraw","MANUAL_LAYOUT_NAME","getNodeMinX","getNodeMinY","gridWidth","$linePoints","redrawIfChanged","findCollidingNode","find","nodesSortedByX","nodeSize","nodes","slice","colidingNode","stepX","stepY","changed","newLocation","moveTo","_fireOnAutoLayoutChangedCallbacks","path","nodeSymbol","symbol","size","$id","each","box","getBBox","min","set","setHangingPosition","fontSize","getFontSize","items","displayValue","isArray","aggregatedPayoffs","line","dX","sign","slantStartXOffset","slantWidth","edgeSlantWidthMax","point1","point2","point3","point4","datum","len","previousSibling","childNodes","minX","bb","getTextD3Selection","minY","Number","MAX_SAFE_INTEGER","getMinMarginBetweenNodes","$hidden","withoutStateSaving","saveState","onUndo","setGridWidth","onRedo","update","gridHeight","setGridHeight","setNodeSize","fitNodesInPlottingRegion","getRoots","setEdgeSlantWidthMax","newLayout","currentLayout","prevTreeMaxY","layout","root","hierarchy","map","cluster","tree","separation","maxY","pivot","limit","limitNodePositioning","backupNodeLocation","maxX","getNodeMaxX","revertX","$location","updateNodePosition","texts","limitTextPositioning","getTextMinX","getTextMaxX","getTextMinY","updateTextPosition","c","isHidden","NodeDragHandler","drag","subject","getTranslation","dragStarted","onDrag","dragEnded","ignoreDrag","ignoredDrag","hide","selectedNodes","getSelectedNodes","prevDragEvent","dragEventCount","draggedNode","moveNodes","redrawEdges","updatePlottingRegionSize","pi","PI","draw","context","dist","bezierCurveTo","lineTo","closePath","templateName","variables","compiled","template","imports","include","v","props","styleProp","styleName","variableName","clazz","treeDesignerSelector","treeDesignerStyles","styleRule","nodeSelector","edgeSelector","TextDragHandler","draggedText","moveTexts","Tooltip","xOffset","yOffset","getContainer","updatePosition","target","htmlOrFn","isFunction","show","_mainContextMenu","_nodeContextMenu","_layout","_nodeDragHandler","_textDragHandler","_textContextMenu","_edgeContextMenu","Hammer","TreeDesignerConfig","custom","scale","fontFamily","fontWeight","fontStyle","strokeWidth","optimal","stroke","label","color","negativeColor","fill","selected","description","readOnly","disableAnimations","forceFullEdgeRedraw","hideLabels","hidePayoffs","hideProbabilities","raw","payoffNumberFormatter","probabilityNumberFormatter","onNodeSelected","onEdgeSelected","onTextSelected","onSelectionCleared","payoffNames","maxPayoffsToDisplay","TreeDesigner","dataModel","setConfig","initContainer","init","updateCustomStyles","initSvg","initLayout","initI18n","initBrush","initEdgeMarkers","initMainContextMenu","initNodeContextMenu","initEdgeContextMenu","initNodeDragHandler","initTextDragHandler","initTextContextMenu","nodeDragHandler","textDragHandler","withTransitions","redrawDiagramTitle","redrawDiagramDescription","updateScale","updateMargin","transitionPrev","redrawNodes","redrawFloatingTexts","updateValidationMessages","computeAvailableSpace","wrapperGroup","mainGroup","mc","Manager","touchAction","add","Press","pointerType","Pinch","disableBrush","waitForFinalEvent","enableBrush","group","topMargin","diagramTitle","diagramDescription","getTitleGroupHeight","clone","setMargin","setScale","containerIdOrElem","trim","startsWith","_parents","svgWidth","svgHeight","mainGroupBox","newSvgWidth","newSvgHeight","updateBrushExtent","exit","nodesEnter","labelEnter","payoffEnter","indicatorEnter","aggregatedPayoffEnter","probabilityToEnterEnter","nodesMerge","merge","isOptimal","nodesMergeT","drawNodeSymbol","nodeLabelPosition","labelMergeT","updateTextLines","payoffTspans","item","payoffTspansM","val","isNaN","attachPayoffTooltip","payoffT","nodePayoffPosition","aggregatedPayoffTspans","aggregatedPayoffTspansM","aggregatedPayoffT","nodeAggregatedPayoffPosition","attach","probabilityToEnterT","nodeProbabilityToEnterPosition","indicator","nodeIndicatorPosition","nodeContextMenu","cancelDrag","button","nodeUnfoldButtonPosition","payoffFiledName","object","value","number","lines","reverse","tspans","edgesContainer","edges","edgesEnter","probabilityEnter","edgesMerge","optimalClassName","edgesMergeT","edgeLineD","selectEdge","edgeLabelPosition","_","displayPayoff","payoffTextT","edgePayoffPosition","displayProbability","probabilityMerge","probabilityMergeT","edgeProbabilityPosition","raise","edgeContextMenu","POINTER_TOUCH","textsEnter","textsMerge","textsMergeT","replaceUrls","escapeHtml","textContextMenu","_this2","validationResults","validationResult","isValid","getOwnPropertyNames","objectIdToError","id","errors","nodeSelection","getNodeD3SelectionById","tooltipHtml","getValidationMessage","initArrowMarker","brush","extent","brushContainer","hoveredEdge","mainGroupTranslation","offset","m","mgt","closest","cp","closestPoint","invert","mainContextMenu","getNewChildLocation","injectNode","getInjectedNodeLocation","removeNode","removeNodes","selectedTexts","getSelectedTexts","removeTexts","notClearPrevSelection","cloneSubtree","copyNode","selectedRoots","findSubtreeRoots","copyNodes","_this3","_this4","nodesToAttach","toAttach","attached","attachSubtree","getAllDescendantNodes","_this5","perform","getAllDescendantEdges","_this6","updateVisibility","getNodeD3Selection","getTextD3SelectionById","_this7","visibleOnly","selectedVisible","allSelected","apply","_toConsumableArray","descendants","_this8","clearSelectionBeforeSelect","skipCallback","_this9","titleValue","titleContainer","marginTop","desc","descriptionValue","withMargins","h","_index"],"mappings":"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","file":"sd-tree-designer.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import * as d3 from \"./d3\";\nimport {Templates} from \"./templates\";\nimport {i18n} from \"./i18n/i18n\";\nimport {Utils} from \"sd-utils\";\n\nexport class AppUtils {\n\n    static sanitizeHeight = function (height, container) {\n        return (height || parseInt(container.style('height'), 10) || 400);\n    };\n\n    static sanitizeWidth = function (width, container) {\n        return (width || parseInt(container.style('width'), 10) || 960);\n    };\n\n    static availableHeight = function (height, container, margin) {\n        return Math.max(0, AppUtils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n    };\n\n    static availableWidth = function (width, container, margin) {\n        return Math.max(0, AppUtils.sanitizeWidth(width, container) - margin.left - margin.right);\n    };\n\n    //places textString in textObj, adds an ellipsis if text can't fit in width\n    static placeTextWithEllipsis(textD3Obj, textString, width) {\n        var textObj = textD3Obj.node();\n        textObj.textContent = textString;\n\n        var margin = 0;\n        var ellipsisLength = 9;\n        //ellipsis is needed\n        if (textObj.getComputedTextLength() > width + margin) {\n            for (var x = textString.length - 3; x > 0; x -= 1) {\n                if (textObj.getSubStringLength(0, x) + ellipsisLength <= width + margin) {\n                    textObj.textContent = textString.substring(0, x) + \"...\";\n                    return true;\n                }\n            }\n            textObj.textContent = \"...\"; //can't place at all\n            return true;\n        }\n        return false;\n    }\n\n    static placeTextWithEllipsisAndTooltip(textD3Obj, textString, width, tooltip) {\n        var ellipsisPlaced = AppUtils.placeTextWithEllipsis(textD3Obj, textString, width);\n        if (ellipsisPlaced && tooltip) {\n            textD3Obj.on(\"mouseover\", function (d) {\n                tooltip.transition()\n                    .duration(200)\n                    .style(\"opacity\", .9);\n                tooltip.html(textString)\n                    .style(\"left\", (d3.event.pageX + 5) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            });\n\n            textD3Obj.on(\"mouseout\", function (d) {\n                tooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0);\n            });\n        }\n\n    }\n\n    static getFontSize(element) {\n        return window.getComputedStyle(element, null).getPropertyValue(\"font-size\");\n    }\n\n    static getTranslation(transform) {\n        // Create a dummy g for calculation purposes only. This will never\n        // be appended to the DOM and will be discarded once this function\n        // returns.\n        var g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n\n        // Set the transform attribute to the provided string value.\n        g.setAttributeNS(null, \"transform\", transform);\n\n        // consolidate the SVGTransformList containing all transformations\n        // to a single SVGTransform of type SVG_TRANSFORM_MATRIX and get\n        // its SVGMatrix.\n        var matrix = g.transform.baseVal.consolidate().matrix;\n\n        // As per definition values e and f are the ones for the translation.\n        return [matrix.e, matrix.f];\n    }\n\n\n    static closestPoint(pathNode, point) {\n        var pathLength = pathNode.getTotalLength(),\n            precision = 8,\n            best,\n            bestLength,\n            bestDistance = Infinity;\n\n        // linear scan for coarse approximation\n        for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n            if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n                best = scan, bestLength = scanLength, bestDistance = scanDistance;\n            }\n        }\n\n        // binary search for precise estimate\n        precision /= 2;\n        while (precision > 0.5) {\n            var before,\n                after,\n                beforeLength,\n                afterLength,\n                beforeDistance,\n                afterDistance;\n            if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n                best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n            } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n                best = after, bestLength = afterLength, bestDistance = afterDistance;\n            } else {\n                precision /= 2;\n            }\n        }\n\n        best = [best.x, best.y];\n        best.distance = Math.sqrt(bestDistance);\n        return best;\n\n        function distance2(p) {\n            var dx = p.x - point[0],\n                dy = p.y - point[1];\n            return dx * dx + dy * dy;\n        }\n    }\n\n    static growl(message, type='info', position='right', time = 2000){\n        var html = Templates.get('growl', {message:message, type:type})\n\n        var g = d3.select('body').selectOrAppend('div.sd-growl-list.'+position).append('div').html(html);\n        setTimeout(function(){\n            g.remove();\n        }, time)\n    }\n\n\n    static createElement(tag, attribs, parent) {\n        var el = document.createElement(tag);\n\n        if (attribs) {\n            AppUtils.deepExtend(el, attribs);\n        }\n        if (parent) {\n            parent.appendChild(el);\n        }\n        return el;\n    };\n\n    static removeElement(element) {\n        element.parentNode.removeChild(element);\n    }\n\n    static replaceUrls(text){\n        if(!text){\n            return text;\n        }\n        var urlRegexp = /((ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?)/\n\n        return text.replace(urlRegexp, '<a href=\"$1\" target=\"_blank\">$1</a>');\n    }\n\n    static escapeHtml(html)\n    {\n        var text = document.createTextNode(html);\n        var div = document.createElement('div');\n        div.appendChild(text);\n        return div.innerHTML;\n    }\n\n    static dispatchHtmlEvent(element, name){\n        if (\"createEvent\" in document) {\n            var evt = document.createEvent(\"HTMLEvents\");\n            evt.initEvent(name, false, true);\n            element.dispatchEvent(evt);\n        }\n        else\n            element.fireEvent(\"on\"+name);\n    }\n\n    static dispatchEvent(name, data){\n        var event;\n        try{\n            event = new  CustomEvent(name,{ 'detail': data });\n        }catch (e){ //IE\n            event = document.createEvent('CustomEvent');\n            event.initCustomEvent(name, false, false, data);\n        }\n        document.dispatchEvent(event);\n    }\n\n    static getValidationMessage(error){\n        if(Utils.isString(error)){\n            error = {name: error};\n        }\n        var key = 'validation.' + error.name;\n        return i18n.t(key, error.data);\n    }\n\n    static hide(selection){\n        selection.classed('sd-hidden', true);\n    }\n\n    static show(selection, show=true){\n        selection.classed('sd-hidden', !show);\n    }\n\n\n\n    static isHidden(el, exact = true) {\n        if(!el){\n            return true;\n        }\n        if(exact){\n            var style = window.getComputedStyle(el);\n            return (style.display === 'none')\n        }\n        return (el.offsetParent === null)\n    }\n\n    static getJSON(url, callback) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('get', url, true);\n        xhr.responseType = 'json';\n        xhr.onload = function () {\n            var status = xhr.status;\n            if (status == 200) {\n                callback(xhr.response, null);\n            } else {\n                callback(null, status);\n            }\n        };\n        xhr.send();\n    }\n}\n","import * as d3 from '../d3'\n\n/*based on:\n * github.com/patorjk/d3-context-menu */\n\nexport class ContextMenu {\n    openCallback;\n    closeCallback;\n\n    constructor(menu, opts) {\n        var self = this;\n\n        if (typeof opts === 'function') {\n            self.openCallback = opts;\n        } else {\n            opts = opts || {};\n            self.openCallback = opts.onOpen;\n            self.closeCallback = opts.onClose;\n        }\n\n        // create the div element that will hold the context menu\n        d3.selectAll('.d3-context-menu').data([1])\n            .enter()\n            .append('div')\n            .attr('class', 'd3-context-menu');\n\n        // close menu\n        d3.select('body').on('click.d3-context-menu', function () {\n            d3.select('.d3-context-menu').style('display', 'none');\n            if (self.closeCallback) {\n                self.closeCallback();\n            }\n        });\n\n        // this gets executed when a contextmenu event occurs\n        return function (data, index) {\n            var elm = this;\n\n            d3.selectAll('.d3-context-menu').html('');\n            var list = d3.selectAll('.d3-context-menu')\n                .on('contextmenu', function (d) {\n                    d3.select('.d3-context-menu').style('display', 'none');\n                    d3.event.preventDefault();\n                    d3.event.stopPropagation();\n                })\n                .append('ul');\n            list.selectAll('li').data(typeof menu === 'function' ? menu(data) : menu).enter()\n                .append('li')\n                .attr('class', function (d) {\n                    var ret = '';\n                    if (d.divider) {\n                        ret += ' is-divider';\n                    }\n                    if (d.disabled) {\n                        ret += ' is-disabled';\n                    }\n                    if (!d.action) {\n                        ret += ' is-header';\n                    }\n                    return ret;\n                })\n                .html(function (d) {\n                    if (d.divider) {\n                        return '<hr>';\n                    }\n                    if (!d.title) {\n                        console.error('No title attribute set. Check the spelling of your options.');\n                    }\n                    return (typeof d.title === 'string') ? d.title : d.title(data);\n                })\n                .on('click', function (d, i) {\n                    if (d.disabled) return; // do nothing if disabled\n                    if (!d.action) return; // headers have no \"action\"\n                    d.action(elm, data, index);\n                    d3.select('.d3-context-menu').style('display', 'none');\n\n                    if (self.closeCallback) {\n                        self.closeCallback();\n                    }\n                });\n\n            // the openCallback allows an action to fire before the menu is displayed\n            // an example usage would be closing a tooltip\n            if (self.openCallback) {\n                if (self.openCallback(data, index) === false) {\n                    return;\n                }\n            }\n\n            // display context menu\n            d3.select('.d3-context-menu')\n                .style('left', (d3.event.pageX - 2) + 'px')\n                .style('top', (d3.event.pageY - 2) + 'px')\n                .style('display', 'block');\n\n            d3.event.preventDefault();\n            d3.event.stopPropagation();\n        };\n    };\n\n    static hide() {\n        d3.select('.d3-context-menu').style('display', 'none');\n    }\n\n}\n","import {ContextMenu} from './context-menu'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class EdgeContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var menu = function (d) {\n\n            var menu = [];\n\n            menu.push({\n                title: i18n.t('contextMenu.edge.injectDecisionNode'),\n                action: function (elm, d, i) {\n                    treeDesigner.injectDecisionNode(d)\n                }\n            });\n            menu.push({\n                title: i18n.t('contextMenu.edge.injectChanceNode'),\n                action: function (elm, d, i) {\n                    treeDesigner.injectChanceNode(d)\n                }\n            });\n\n\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {domain as model} from 'sd-model'\nimport * as d3 from '../d3'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class MainContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var mousePosition = null;\n        var menu = function (d) {\n\n            var menu = [];\n            menu.push({\n                title: i18n.t('contextMenu.main.addDecisionNode'),\n                action: function (elm, d, i) {\n                    var newNode = new model.DecisionNode(mousePosition);\n                    treeDesigner.addNode(newNode)\n                }\n            });\n            menu.push({\n                title: i18n.t('contextMenu.main.addChanceNode'),\n                action: function (elm, d, i) {\n                    var newNode = new model.ChanceNode(mousePosition);\n                    treeDesigner.addNode(newNode)\n                }\n            });\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.main.addText'),\n                action: function (elm, d, i) {\n                    var newText = new model.Text(mousePosition);\n                    treeDesigner.addText(newText);\n                },\n\n            });\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.main.paste'),\n                action: function (elm, d, i) {\n                    treeDesigner.pasteToNewLocation(mousePosition);\n                },\n                disabled: !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\n\n            });\n            menu.push({divider: true});\n\n            menu.push({\n                title: i18n.t('contextMenu.main.selectAllNodes'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectAllNodes();\n                }\n            });\n            return menu;\n        };\n\n        super(menu, {onOpen: () => {\n            treeDesigner.clearSelection();\n            mousePosition = new model.Point(d3.mouse(treeDesigner.svg.node())).move(treeDesigner.getMainGroupTranslation(true));\n\n        }});\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {domain as model} from 'sd-model'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class NodeContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner, operationsForObject) {\n        var menu = function (d) {\n\n            var copyMenuItem = {\n                title: i18n.t('contextMenu.node.copy'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.copySelectedNodes();\n                }\n            };\n            var cutMenuItem = {\n                title: i18n.t('contextMenu.node.cut'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.cutSelectedNodes();\n                }\n            };\n            var pasteMenuItem = {\n                title: i18n.t('contextMenu.node.paste'),\n                action: function (elm, d, i) {\n                    treeDesigner.pasteToNode(d);\n                },\n                disabled: d.folded || !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\n\n            };\n            var deleteMenuItem = {\n                title: i18n.t('contextMenu.node.delete'),\n                action: function (elm, d, i) {\n\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.removeSelectedNodes();\n\n                }\n            };\n\n            var menu = [];\n            if (d.type == model.TerminalNode.$TYPE) {\n                menu = [copyMenuItem, cutMenuItem, deleteMenuItem];\n                NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\n                return menu;\n            }\n\n            if(!d.folded){\n                menu.push({\n                    title: i18n.t('contextMenu.node.addDecisionNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addDecisionNode(d)\n                    }\n                });\n                menu.push({\n                    title: i18n.t('contextMenu.node.addChanceNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addChanceNode(d)\n                    }\n                });\n                menu.push({\n                    title: i18n.t('contextMenu.node.addTerminalNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addTerminalNode(d)\n                    }\n                });\n                menu.push({divider: true});\n            }\n\n            menu.push(copyMenuItem);\n            menu.push(cutMenuItem);\n            menu.push(pasteMenuItem);\n            menu.push(deleteMenuItem);\n\n            NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.node.selectSubtree'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectSubTree(d, true);\n                }\n            });\n\n            if(!d.folded){\n                menu.push({\n                    title: i18n.t('contextMenu.node.fold'),\n                    action: function (elm, d, i) {\n                        treeDesigner.foldSubtree(d);\n                    }\n                });\n            }else{\n                menu.push({\n                    title: i18n.t('contextMenu.node.unfold'),\n                    action: function (elm, d, i) {\n                        treeDesigner.foldSubtree(d, false);\n                    }\n                });\n            }\n\n            if(operationsForObject){\n                var operations = operationsForObject(d);\n                if(operations.length) {\n                    menu.push({divider: true});\n                    operations.forEach(op=>{\n                        menu.push({\n                            title: i18n.t('contextMenu.node.'+op.name),\n                            action: function (elm, d, i) {\n                                treeDesigner.performOperation(d, op);\n                            },\n                            disabled: !op.canPerform(d)\n                        });\n                    })\n                }\n            }\n\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n\n    static addNodeConversionOptions(d, menu, treeDesigner){\n        var conversionOptions = NodeContextMenu.getNodeConversionOptions(d, treeDesigner);\n        if(conversionOptions.length){\n            menu.push({divider: true});\n            conversionOptions.forEach(o=>menu.push(o));\n\n        }\n    }\n\n    static getNodeConversionOptions(d, treeDesigner){\n        var options = [];\n\n        if(d.folded){\n            return [];\n        }\n\n        var allAllowedTypes = [model.DecisionNode.$TYPE, model.ChanceNode.$TYPE, model.TerminalNode.$TYPE];\n\n        if(!d.childEdges.length && d.$parent){\n            allAllowedTypes.filter(t=>t!==d.type).forEach(type=>{\n                options.push(NodeContextMenu.getNodeConversionOption(type, treeDesigner))\n            })\n        }else{\n            if(d instanceof model.DecisionNode){\n                options.push(NodeContextMenu.getNodeConversionOption(model.ChanceNode.$TYPE, treeDesigner))\n            }else{\n                options.push(NodeContextMenu.getNodeConversionOption(model.DecisionNode.$TYPE, treeDesigner))\n            }\n        }\n        return options;\n    }\n\n    static getNodeConversionOption(typeToConvertTo, treeDesigner){\n        return {\n            title: i18n.t('contextMenu.node.convert.'+typeToConvertTo),\n            action: function (elm, d, i) {\n                treeDesigner.convertNode(d, typeToConvertTo);\n            },\n        }\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class TextContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var menu = function (d) {\n\n\n            var deleteMenuItem = {\n                title: i18n.t('contextMenu.text.delete'),\n                action: function (elm, d, i) {\n\n                    treeDesigner.selectText(d, true, true);\n                    treeDesigner.removeSelectedTexts()\n\n                }\n            };\n            var menu = [];\n            menu.push(deleteMenuItem);\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import * as d3 from './d3'\n\nexport class D3Extensions {\n\n    static extend() {\n\n        d3.selection.prototype.enter.prototype.insertSelector =\n            d3.selection.prototype.insertSelector = function (selector, before) {\n                return D3Extensions.insertSelector(this, selector, before);\n            };\n\n\n        d3.selection.prototype.enter.prototype.appendSelector =\n            d3.selection.prototype.appendSelector = function (selector) {\n                return D3Extensions.appendSelector(this, selector);\n            };\n\n        d3.selection.prototype.enter.prototype.selectOrAppend =\n            d3.selection.prototype.selectOrAppend = function (selector) {\n                return D3Extensions.selectOrAppend(this, selector);\n            };\n\n        d3.selection.prototype.enter.prototype.selectOrInsert =\n            d3.selection.prototype.selectOrInsert = function (selector, before) {\n                return D3Extensions.selectOrInsert(this, selector, before);\n            };\n\n\n    }\n\n    static insertOrAppendSelector(parent, selector, operation, before) {\n\n        var selectorParts = selector.split(/([\\.\\#])/);\n        var element = parent[operation](selectorParts.shift(), before);//\":first-child\"\n\n        while (selectorParts.length > 1) {\n            var selectorModifier = selectorParts.shift();\n            var selectorItem = selectorParts.shift();\n            if (selectorModifier === \".\") {\n                element = element.classed(selectorItem, true);\n            } else if (selectorModifier === \"#\") {\n                element = element.attr('id', selectorItem);\n            }\n        }\n        return element;\n    }\n\n    static insertSelector(parent, selector, before) {\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"insert\", before);\n    }\n\n    static appendSelector(parent, selector) {\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"append\");\n    }\n\n    static selectOrAppend(parent, selector, element) {\n        var selection = parent.select(selector);\n        if (selection.empty()) {\n            if (element) {\n                return parent.append(element);\n            }\n            return D3Extensions.appendSelector(parent, selector);\n\n        }\n        return selection;\n    };\n\n    static selectOrInsert(parent, selector, before) {\n        var selection = parent.select(selector);\n        if (selection.empty()) {\n            return D3Extensions.insertSelector(parent, selector, before);\n        }\n        return selection;\n    };\n}\n","export * from 'd3-dispatch';\nexport * from 'd3-scale';\nexport * from 'd3-selection';\nexport * from 'd3-shape'\nexport * from 'd3-drag';\nexport * from 'd3-brush'\nexport * from 'd3-array'\nexport * from 'd3-hierarchy'\nexport * from 'd3-time-format'\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\n            \"addText\": \"Text hinzufügen \",\n            \"paste\": \"Einfügen\",\n            \"selectAllNodes\": \"Alle Knoten auswählen\"\n        },\n        \"node\":{\n            \"copy\": \"Kopieren\",\n            \"cut\": \"Ausschneiden\",\n            \"paste\": \"Einfügen\",\n            \"delete\": \"Löschen\",\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\n            \"addTerminalNode\": \"Endknotten hinzufügen\",\n            \"convert\":{\n                \"decision\": \"Als Entscheidungsknoten\",\n                \"chance\": \"Als Zufall Knoten\",\n                \"terminal\": \"Als Endknoten\"\n            },\n            \"selectSubtree\": \"Teilbaum wählen\",\n            \"fold\": \"Teilbaum falten\",\n            \"unfold\": \"Teilbaum entfalten\",\n\t\t\t\n            \"flipSubtree\": \"Teilbaum umdrehen\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Entscheidungsknoten Injizieren\",\n            \"injectChanceNode\": \"Zufall Knoten Injizieren\"\n        },\n        \"text\":{\n            \"delete\": \"Löschen\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Pfad, der nicht mit dem Endknoten endet\",\n        \"probabilityDoNotSumUpTo1\": \"Die Summe der Wahrscheinlichkeiten ist nicht gleich 1\",\n        \"invalidProbability\": \"Ungültige Wahrscheinlichkeit im Zweig #{{number}}\",\n        \"invalidPayoff\": \"Ungültige Auszahlung in Zweig #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Auswahlbürste deaktiviert\",\n        \"brushEnabled\": \"Auswahlbürste aktiviert\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Auszahlung {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Aggregierte Auszahlung {{number}}\",\n                \"named\": \"Aggregierte {{name}}\"\n            },\n            \"probabilityToEnter\": \"Wahrscheinlichkeit\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Auszahlung {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Wahrscheinlichkeit: {{value}}\"\n        }\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Add Decision Node\",\n            \"addChanceNode\": \"Add Chance Node\",\n            \"addText\": \"Add Text\",\n            \"paste\": \"Paste\",\n            \"selectAllNodes\": \"Select all nodes\"\n        },\n        \"node\":{\n            \"copy\": \"Copy\",\n            \"cut\": \"Cut\",\n            \"paste\": \"Paste\",\n            \"delete\": \"Delete\",\n            \"addDecisionNode\": \"Add Decision Node\",\n            \"addChanceNode\": \"Add Chance Node\",\n            \"addTerminalNode\": \"Add Terminal Node\",\n            \"convert\":{\n                \"decision\": \"As Decision Node\",\n                \"chance\": \"As Chance Node\",\n                \"terminal\": \"As Terminal Node\"\n            },\n            \"selectSubtree\": \"Select subtree\",\n            \"fold\": \"Fold subtree\",\n            \"unfold\": \"Unfold subtree\",\n            \"flipSubtree\": \"Flip subtree\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Inject Decision Node\",\n            \"injectChanceNode\": \"Inject Chance Node\"\n        },\n        \"text\":{\n            \"delete\": \"Delete\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Path not ending with terminal node\",\n        \"probabilityDoNotSumUpTo1\": \"Probabilities do not sum up to 1\",\n        \"invalidProbability\": \"Invalid probability in edge #{{number}}\",\n        \"invalidPayoff\": \"Invalid payoff in edge #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Selection brush disabled\",\n        \"brushEnabled\": \"Selection brush enabled\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Payoff {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Aggregated Payoff {{number}}\",\n                \"named\": \"Aggregated {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probability to enter\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Payoff {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probability: {{value}}\"\n        }\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Ajouter noud de décision\",\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\n            \"addText\": \"Ajouter du texte\",\n            \"paste\": \"Coller\",\n            \"selectAllNodes\": \"Sélectionner tous les nouds\"\n        },\n        \"node\":{\n            \"copy\": \"Copie\",\n            \"cut\": \"Couper\",\n            \"paste\": \"Coller\",\n            \"delete\": \"Effacer\",\n            \"addDecisionNode\": \"Ajouter noud de décision\",\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\n            \"addTerminalNode\": \"Ajouter un noeud terminal\",\n            \"convert\":{\n                \"decision\": \"Comme noud de décision\",\n                \"chance\": \"Comme noud aléatoire\",\n                \"terminal\": \"Comme un noeud terminal\"\n            },\n            \"selectSubtree\": \"Sélectionner une sous-arborescence\",\n            \"fold\": \"Plier sous-arbre\",\n            \"unfold\": \"Déplier arbre sous-arbre\",\n            \"flipSubtree\": \"Basculer sous-arbre\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Injecter un noeud de décision\",\n            \"injectChanceNode\": \"Injecter un noeud de chance\"\n        },\n        \"text\":{\n            \"delete\": \"Effacer\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Parcours non terminé par noeud terminal\",\n        \"probabilityDoNotSumUpTo1\": \"La somme des probabilités n'est pas 1 ou plus\",\n        \"invalidProbability\": \"Probabilité invalide - le bord #{{number}}\",\n        \"invalidPayoff\": \"Avantage invalide - le bord #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Brosse de sélection désactivée\",\n        \"brushEnabled\": \"Brosse de sélection activée\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Avantage {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Avantage agrégé {{number}}\",\n                \"named\": \"Agrégé  {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probabilité d'entrée\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Avantage {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probabilité: {{value}}\"\n        }\n    }\n}\n","import i18next from 'i18next';\nimport * as en from './en.json'\nimport * as pl from './pl.json'\nimport * as it from './it.json'\nimport * as de from './de.json'\nimport * as fr from './fr.json'\n\nexport class i18n{\n\n    static $instance;\n    static language;\n\n    static init(lng){\n        i18n.language = lng;\n        let resources = {\n            en: {\n                translation: en\n            },\n            pl: {\n                translation: pl\n            },\n            it: {\n                translation: it\n            },\n            de: {\n                translation: de\n            },\n            fr: {\n                translation: fr\n            }\n        };\n        i18n.$instance = i18next.createInstance({\n            lng: lng,\n            fallbackLng: 'en',\n            resources: resources\n        }, (err, t) => {\n        });\n    }\n\n    static t(key, opt){\n        return i18n.$instance.t(key, opt)\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\n            \"addText\": \"Aggiungi testo\",\n            \"paste\": \"Incolla\",\n            \"selectAllNodes\": \"Seleziona tutti i nodi\"\n        },\n        \"node\":{\n            \"copy\": \"Copia\",\n            \"cut\": \"Taglia\",\n            \"paste\": \"Incolla\",\n            \"delete\": \"Cancella\",\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\n            \"addTerminalNode\": \"Aggiungi un nodo terminale\",\n            \"convert\":{\n                \"decision\": \"Come Decision Node\",\n                \"chance\": \"Come Chance Node\",\n                \"terminal\": \"Come Terminal Node\"\n            },\n            \"selectSubtree\": \"Seleziona Sotto-albero\",\n            \"fold\": \"Piega sotto-albero\",\n            \"unfold\": \"Dispiegarsi sotto-albero\",\t\t\t\n            \"flipSubtree\": \"Ribalta sotto-albero\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Inietta nodo di decisione\",\n            \"injectChanceNode\": \"Inietta nodo opportunità\"\n        },\n        \"text\":{\n            \"delete\": \"Cancella\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Percorso senza nodo terminale\",\n        \"probabilityDoNotSumUpTo1\": \"La somma delle probabilità è diversa da 1\",\n        \"invalidProbability\": \"Probabilità non valida - bordo #{{number}}\",\n        \"invalidPayoff\": \"Saldo non valido - bordo #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Selezione pennello disabilitata\",\n        \"brushEnabled\": \"Selezione pennello abilitata\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Saldo {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Saldo aggregato {{number}}\",\n                \"named\": \"Aggregato {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probabilità da inserire\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Saldo {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probabilità: {{value}}\"\n        }\n    }\n}\n","module.exports={\n\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\n            \"addText\": \"Dodaj Tekst\",\n            \"paste\": \"Wklej\",\n            \"selectAllNodes\": \"Zaznacz wszystkie węzły\"\n        },\n        \"node\":{\n            \"copy\": \"Kopiuj\",\n            \"cut\": \"Wytnij\",\n            \"paste\": \"Wklej\",\n            \"delete\": \"Usuń\",\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\n            \"addTerminalNode\": \"Dodaj Węzeł Końcowy\",\n            \"convert\":{\n                \"decision\": \"Jako Węzeł Decyzyjny\",\n                \"chance\": \"Jako Węzeł Losowy\",\n                \"terminal\": \"Jako Węzeł Końcowy\"\n            },\n            \"selectSubtree\": \"Zaznacz poddrzewo\",\n            \"fold\": \"Zwiń poddrzewo\",\n            \"unfold\": \"Rozwiń poddrzewo\",\n            \"flipSubtree\": \"Przewróć poddrzewo\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Wstrzyknij Węzeł Decyzyjny\",\n            \"injectChanceNode\": \"Wstrzyknij Węzeł Losowy\"\n        },\n        \"text\":{\n            \"delete\": \"Usuń\"\n        }\n    },\n\n    \"validation\":{\n        \"incompletePath\": \"Ostatnim węzłem w ścieżce powinien być Węzeł Końcowy\",\n        \"probabilityDoNotSumUpTo1\": \"Prawdopodobieństwa nie sumują sie do 1\",\n        \"invalidProbability\": \"Niepoprawne prawdopodobieństwo na krawędzi #{{number}}\",\n        \"invalidPayoff\": \"Niepoprawna wypłata na krawędzi #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Zaznaczanie wyłączone\",\n        \"brushEnabled\": \"Zaznaczanie włączone\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Wypłata {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Zagregowana wypłata {{number}}\",\n                \"named\": \"Zagregowana {{name}}\"\n            },\n            \"probabilityToEnter\": \"Prawdopodobieństwo wejścia\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Wypłata {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Prawdopodobieństwo: {{value}}\"\n        }\n    }\n}\n","import {D3Extensions} from './d3-extensions'\nD3Extensions.extend();\n\nexport * from './tree-designer'\nexport * from './app-utils'\nexport * from './templates'\nexport * from './tooltip'\nexport * from './d3-extensions'\nexport {default as d3} from './d3'\n\n\n","import {Utils} from 'sd-utils'\nimport {domain as model} from 'sd-model'\nimport * as d3 from './d3'\nimport circleSymbol from './symbols/circle'\nimport triangleSymbol from './symbols/triangle'\nimport {AppUtils} from \"./app-utils\";\n\n/*Tree layout manager*/\nexport class Layout{\n\n    treeDesigner;\n    data;\n    config;\n\n    nodeTypeToSymbol = {\n        'decision': d3.symbolSquare,\n        'chance': circleSymbol,\n        \"terminal\": triangleSymbol\n    };\n\n    static MANUAL_LAYOUT_NAME = 'manual';\n\n\n    onAutoLayoutChanged=[];\n\n    nodeTypeOrder = {\n        'decision' : 0,\n        'chance': 0,\n        'terminal': 1\n    };\n\n    treeMargin = 50;\n    targetSymbolSize={};\n    nodeSeparation = (a, b) => a.parent === b.parent ? 1 : 1.2\n\n    constructor(treeDesigner, data, config){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n        this.config = config;\n\n    }\n\n    update(node){\n        if(node && node.$parent){\n            node.$parent.childEdges.sort((a,b)=>a.childNode.location.y - b.childNode.location.y)\n        }\n        if(!this.isManualLayout()){\n            return this.autoLayout(this.config.type, true);\n        }\n        if(node){\n            this.moveNodeToEmptyPlace(node);\n        }else{\n            this.treeDesigner.redraw(true);\n        }\n    }\n\n    isManualLayout(){\n        return this.config.type === Layout.MANUAL_LAYOUT_NAME;\n    }\n\n    getNewChildLocation(parent){\n        if(!parent){\n            return new model.Point(this.getNodeMinX(), this.getNodeMinY())\n        }\n        var x = parent.location.x + this.config.gridWidth;\n        var y = parent.location.y;\n        if(parent.childEdges.length){\n            y = parent.childEdges[parent.childEdges.length-1].childNode.location.y+1;\n        }\n\n        return new model.Point(x, y)\n    }\n\n    getInjectedNodeLocation(edge){\n\n        var p = edge.$linePoints[2];\n\n        return new model.Point(p[0], p[1])\n    }\n\n    moveNodeToEmptyPlace(node, redrawIfChanged=true){\n        var positionMap = {};\n        var self = this;\n        node.location.x = Math.max(this.getNodeMinX(node), node.location.x);\n        node.location.y = Math.max(this.getNodeMinY(node), node.location.y);\n\n\n        this.nodesSortedByX = this.data.nodes.slice();\n        this.nodesSortedByX.sort((a,b)=>a.location.x - b.location.x);\n\n        function findCollidingNode(node, location){\n            return Utils.find(self.nodesSortedByX, n=>{\n                if(node == n){\n                    return false;\n                }\n\n                var margin = self.config.nodeSize/3;\n                var x = n.location.x;\n                var y = n.location.y;\n\n                return (location.x - margin <= x && location.x + margin >= x\n                    && location.y - margin <= y && location.y + margin >= y)\n            });\n        }\n\n        var stepX = this.config.nodeSize/2;\n        var stepY = this.config.nodeSize+10;\n        var stepXsameParent = 0;\n        var stepYsameParent = 75;\n        var changed = false;\n        var colidingNode;\n        var newLocation = new model.Point(node.location);\n        while(colidingNode = findCollidingNode(node, newLocation)){\n            changed=true;\n            var sameParent = node.$parent && colidingNode.$parent && node.$parent===colidingNode.$parent;\n            if(sameParent){\n                newLocation.move(stepXsameParent, stepYsameParent);\n            }else{\n                newLocation.move(stepX, stepY);\n            }\n        }\n        if(changed){\n            node.moveTo(newLocation.x,newLocation.y, true);\n            if(redrawIfChanged){\n                this.treeDesigner.redraw(true);\n            }\n        }\n    }\n\n    disableAutoLayout(){\n        this.config.type = Layout.MANUAL_LAYOUT_NAME;\n        this._fireOnAutoLayoutChangedCallbacks();\n    }\n\n\n    nodeSymbolSize = {};\n    drawNodeSymbol(path, transition){\n\n        var self = this;\n        var nodeSize = this.config.nodeSize;\n        this.nodeSymbol = d3.symbol().type(d=> self.nodeTypeToSymbol[d.type])\n            .size(d=>self.nodeSymbolSize[d.$id] ? Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", 64) : 64);\n\n        path\n            .each(function (d) {\n                var path = d3.select(this);\n                var prev = path.attr(\"d\");\n                if(!prev){\n                    path.attr(\"d\", self.nodeSymbol);\n                }\n                var size = Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\");\n                if(!size){\n                    var box = path.node().getBBox();\n                    var error = Math.min(nodeSize / box.width, nodeSize / box.height);\n                    size = error * error * (self.nodeSymbolSize[d.$id]||64);\n                    Utils.set(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", size);\n                }\n                if(transition){\n                    path =  path.transition();\n\n                }else{\n                    self.nodeSymbolSize[d.$id] = size;\n                }\n                path.attr(\"d\", self.nodeSymbol);\n                if(transition){\n                    self.nodeSymbolSize[d.$id] = size;\n                }\n            });\n    }\n\n    nodeLabelPosition(selection) {\n        return selection\n            .attr('x', 0)\n            .attr('y', -this.config.nodeSize / 2 - 7)\n    }\n\n    nodePayoffPosition(selection) {\n        return Layout.setHangingPosition(selection)\n            .attr('x', 0)\n            .attr('y', this.config.nodeSize / 2 + 7)\n            .attr('text-anchor', 'middle')\n    }\n\n    nodeAggregatedPayoffPosition(selection) {\n        var x = this.config.nodeSize / 2 + 7;\n        var self = this;\n        selection\n            .attr('x', x)\n            .attr('y', function(d){\n                let fontSize = parseInt(AppUtils.getFontSize(this));\n                let items = d.displayValue('aggregatedPayoff');\n                let number = Utils.isArray(items) ? items.filter(it=>it !== undefined).length : 1;\n                if(number>1){\n                    return -this.getBBox().height/2 + fontSize/2;\n                }\n                return -Math.max(2, 1.8* self.config.nodeSize/fontSize);\n            });\n\n        selection.selectAll('tspan').attr('x', x);\n        return selection;\n            // .attr('text-anchor', 'middle')\n            // .attr('dominant-baseline', 'hanging')\n    }\n\n    nodeProbabilityToEnterPosition(selection) {\n        var self = this;\n\n        return Layout.setHangingPosition(selection)\n            .attr('x', this.config.nodeSize / 2 + 7)\n            .attr('y', function(d){\n                let fontSize = parseInt(AppUtils.getFontSize(this));\n                let aggregatedPayoffs = d.displayValue('aggregatedPayoff');\n                let aggregatedPayoffsNumber = Utils.isArray(aggregatedPayoffs) ? aggregatedPayoffs.filter(it=>it !== undefined).length : 1;\n                if(aggregatedPayoffsNumber>1){\n\n                    return fontSize*0.6\n                }\n\n                return Math.max(2, 1.8* self.config.nodeSize/fontSize);\n            })\n            // .attr('text-anchor', 'middle')\n            // .attr('dominant-baseline', 'central')\n    }\n\n    nodeIndicatorPosition(selection) {\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 8)\n            .attr('y', - this.config.nodeSize/2)\n            .attr('dominant-baseline', 'central')\n            .attr('text-anchor', 'middle')\n    }\n\n    nodeUnfoldButtonPosition(selection) {\n\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 5)\n            .attr('y', 0)\n            .attr('dominant-baseline', 'central')\n    }\n\n    edgeLineD(edge){\n        var line = d3.line()\n            .x(d=> d[0])\n            .y(d=> d[1]);\n        // .curve(d3.curveCatmullRom.alpha(0.5));\n\n\n        var parentNode = edge.parentNode;\n        var childNode = edge.childNode;\n\n        var dX = childNode.location.x - parentNode.location.x;\n        var dY = childNode.location.y - parentNode.location.y;\n\n        var sign = dX>=0 ? 1 : -1;\n\n        var slantStartXOffset = Math.min(dX/2, this.config.nodeSize/2+10);\n        var slantWidth = Math.min(this.config.edgeSlantWidthMax, Math.max(dX/2 - slantStartXOffset, 0));\n\n        var point1 = [parentNode.location.x +this.config.nodeSize/2 + 1, parentNode.location.y];\n        var point2 = [Math.max(parentNode.location.x+slantStartXOffset, point1[0]), parentNode.location.y];\n        var point3 = [parentNode.location.x+slantStartXOffset+slantWidth, childNode.location.y];\n        var point4 = [childNode.location.x - (sign*(Math.max(0, Math.min(this.config.nodeSize/2+8, dX/2)))), childNode.location.y];\n        // var point2 = [parentNode.location.x+dX/2-slantWidth/2, parentNode.location.y];\n        // var point3 = [childNode.location.x-(dX/2-slantWidth/2), childNode.location.y];\n\n        edge.$linePoints = [point1, point2, point3, point4];\n        return line(edge.$linePoints);\n    }\n\n    edgePayoffPosition(selection) {\n        Layout.setHangingPosition(selection)\n            .attr('x', d=>d.$linePoints[2][0] + 2)\n            .attr('y', d=>d.$linePoints[2][1] + 7);\n\n        selection.selectAll('tspan').attr('x', function(d){\n            return d3.select(this.parentNode).datum().$linePoints[2][0] + 2\n        });\n        return selection;\n\n    }\n\n    edgeLabelPosition(selection) {\n        return selection\n            .attr('transform', d=>'translate('+(d.$linePoints[2][0] + 2)+','+(d.$linePoints[2][1] - 7)+')')\n            // .attr('x', d=>d.$linePoints[2][0] + 2)\n            // .attr('y', d=>d.$linePoints[2][1] - 7)\n\n    }\n\n    edgeProbabilityPosition(selection) {\n        return Layout.setHangingPosition(selection)\n            .attr('x', function (d) {\n                var len = this.getComputedTextLength();\n                var min = d.$linePoints[2][0] + 2 + this.previousSibling.childNodes[0].getComputedTextLength() + 7 + len;\n                return Math.max(min, d.$linePoints[3][0] - 8);\n            })\n            .attr('y', d=>d.$linePoints[2][1] + 7)\n    }\n\n    getMinMarginBetweenNodes(){\n      return this.config.nodeSize + 30;\n    }\n\n    getTextMinX(d){\n        let minX = 0;\n        if(d){\n            let bb = this.treeDesigner.getTextD3Selection(d).select('text').node().getBBox();\n            if (bb.x < 0) {\n                minX -= bb.x;\n            }\n        }\n        return minX;\n    }\n\n    getTextMinY(d){\n        let minY = 0;\n        if(d){\n            let bb = this.treeDesigner.getTextD3Selection(d).select('text').node().getBBox();\n            if (bb.y < 0) {\n                minY -= bb.y;\n            }\n        }\n        return minY;\n    }\n\n    getTextMaxX(d){\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n\n    getNodeMinX(d){\n        var self = this;\n        if(d && d.$parent){// && !self.isNodeSelected(d.$parent)\n            return d.$parent.location.x + self.getMinMarginBetweenNodes();\n        }\n        return self.config.nodeSize/2;\n    }\n\n    getNodeMinY(d){\n        return this.config.nodeSize/2;\n    }\n\n    getNodeMaxX(d){\n        var self = this;\n\n        if(d && d.childEdges.length){\n            return d3.min(d.childEdges, e=>!e.childNode.$hidden ? e.childNode.location.x : 9999999)-self.getMinMarginBetweenNodes();\n        }\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    setGridWidth(width, withoutStateSaving){\n        var self=this;\n        if(this.config.gridWidth===width){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    gridWidth: self.config.gridWidth\n                },\n                onUndo: (data)=> {\n                    self.setGridWidth(data.gridWidth, true);\n                },\n                onRedo: (data)=> {\n                    self.setGridWidth(width, true);\n                }\n            });\n        }\n\n        this.config.gridWidth=width;\n        this.update();\n    }\n\n    setGridHeight(gridHeight, withoutStateSaving){\n        var self=this;\n        if(this.config.gridHeight===gridHeight){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    gridHeight: self.config.gridHeight\n                },\n                onUndo: (data)=> {\n                    self.setGridHeight(data.gridHeight, true);\n                },\n                onRedo: (data)=> {\n                    self.setGridHeight(gridHeight, true);\n                }\n            });\n        }\n\n        this.config.gridHeight=gridHeight;\n        this.update();\n    }\n\n    setNodeSize(nodeSize, withoutStateSaving){\n        var self=this;\n        if(this.config.nodeSize===nodeSize){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    nodeSize: self.config.nodeSize\n                },\n                onUndo: (data)=> {\n                    self.setNodeSize(data.nodeSize, true);\n                },\n                onRedo: (data)=> {\n                    self.setNodeSize(nodeSize, true);\n                }\n            });\n        }\n\n        this.config.nodeSize=nodeSize;\n        this.update();\n        if(this.isManualLayout()){\n            this.fitNodesInPlottingRegion(self.data.getRoots());\n            this.treeDesigner.redraw(true);\n        }\n    }\n\n    setEdgeSlantWidthMax(width, withoutStateSaving){\n        var self=this;\n        if(this.config.edgeSlantWidthMax===width){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    edgeSlantWidthMax: self.config.edgeSlantWidthMax\n                },\n                onUndo: (data)=> {\n                    self.setEdgeSlantWidthMax(data.edgeSlantWidthMax, true);\n                },\n                onRedo: (data)=> {\n                    self.setEdgeSlantWidthMax(width, true);\n                }\n            });\n        }\n\n        this.config.edgeSlantWidthMax=width;\n        this.treeDesigner.redraw(true);\n    }\n\n    autoLayout(type, withoutStateSaving){\n        var self=this;\n\n\n\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    newLayout: type,\n                    currentLayout: self.config.type\n                },\n                onUndo: (data)=> {\n                    self.config.type = data.currentLayout;\n                    self._fireOnAutoLayoutChangedCallbacks();\n                },\n                onRedo: (data)=> {\n                    self.autoLayout(data.newLayout, true);\n                }\n            });\n        }\n        this.config.type = type;\n        if(!this.data.nodes.length){\n            this._fireOnAutoLayoutChangedCallbacks();\n            return;\n        }\n\n        var prevTreeMaxY = self.getNodeMinY();\n        this.data.getRoots().forEach(r=>{\n            var root = d3.hierarchy(r, d=>{\n                return d.childEdges.filter(e=>!e.$hidden).map(e=>e.childNode);\n            });\n\n            // root.sort((a,b)=>self.nodeTypeOrder[a.data.type]-self.nodeTypeOrder[b.data.type]);\n            root.sort((a,b)=>a.data.location.y - b.data.location.y);\n\n\n            var layout;\n            if(type==='cluster'){\n                layout = d3.cluster();\n            }else{\n                layout = d3.tree();\n            }\n            layout.nodeSize([self.config.gridHeight, self.config.gridWidth]);\n            layout.separation(self.nodeSeparation);\n\n            layout(root);\n            var minY = 999999999;\n            root.each(d=>{\n                minY = Math.min(minY, d.x);\n            });\n\n            var dy = root.x - minY + prevTreeMaxY;\n            var dx = self.getNodeMinX();\n            var maxY=0;\n            root.each(d=>{\n                d.data.location.x = d.y + dx;\n                d.data.location.y = d.x + dy;\n\n                maxY = Math.max(maxY, d.data.location.y);\n            });\n\n            prevTreeMaxY = maxY + self.config.nodeSize+self.treeMargin;\n        });\n\n\n        // this.transition = true;\n        this.treeDesigner.redraw(true);\n        // this.transition = false;\n\n        this._fireOnAutoLayoutChangedCallbacks();\n        return this;\n    }\n\n    fitNodesInPlottingRegion(nodes){\n        var self = this;\n        var topY = d3.min(nodes, n=>n.location.y);\n        var minY = self.getNodeMinY();\n        var dy = topY - minY;\n\n        var minX = d3.min(nodes, n=>n.location.x);\n        var dx = minX - self.getNodeMinX();\n\n        if(dy<0 ||  dx<0){\n            nodes.forEach(n=>n.move(-dx, -dy));\n        }\n    }\n\n    moveNodes(nodes, dx, dy, pivot){\n        var self = this;\n        var limit = self.config.limitNodePositioning;\n        if(limit){\n            if(dx<0){\n                nodes.sort((a,b)=>a.location.x-b.location.x);\n            }else{\n                nodes.sort((a,b)=>b.location.x-a.location.x);\n            }\n        }\n\n\n        var minY = d3.min(nodes, d=>d.location.y);\n        if(minY + dy < self.getNodeMinY()){\n            dy = self.getNodeMinY() - minY;\n        }\n\n        nodes.forEach(d=>{\n            if(limit){\n                Layout.backupNodeLocation(d);\n                var minX = self.getNodeMinX(d);\n                var maxX = self.getNodeMaxX(d);\n\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\n                d.location.y += dy;\n            }else{\n                d.location.x +=dx;\n                d.location.y += dy;\n            }\n\n        });\n\n\n        var revertX = pivot && self.config.limitNodePositioning && (pivot.location.x === pivot.$location.x);\n\n        nodes.forEach(d=>{\n            if(revertX){\n                d.location.x = d.$location.x;\n            }\n            self.treeDesigner.updateNodePosition(d);\n        });\n\n\n    }\n\n    moveTexts(texts, dx, dy){\n        let self = this;\n        let limit = self.config.limitTextPositioning;\n        if(limit){\n            if(dx<0){\n                texts.sort((a,b)=>a.location.x-b.location.x);\n            }else{\n                texts.sort((a,b)=>b.location.x-a.location.x);\n            }\n        }\n\n\n\n        texts.forEach(d=>{\n\n\n\n\n            if(limit){\n                let minX = self.getTextMinX(d);\n                let maxX = self.getTextMaxX(d);\n                let minY = self.getTextMinY(d);\n\n\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\n                d.location.y = Math.max(d.location.y+dy, minY);\n\n            }else{\n                d.location.move(dx, dy);\n            }\n            self.treeDesigner.updateTextPosition(d);\n\n        });\n\n    }\n\n    static backupNodeLocation(node) {\n        node.$location = new model.Point(node.location);\n    }\n\n    _fireOnAutoLayoutChangedCallbacks(){\n        this.onAutoLayoutChanged.forEach(c=>c(this.config.type));\n    }\n\n    static setHangingPosition(selection){\n        // window.setTimeout(function(){\n        //     selection.each(function(){\n        //         var h =  this.getBBox().height;\n        //         d3.select(this).attr('dy', h);\n        //     });\n        // },0);\n\n        if(AppUtils.isHidden(selection.node())){ // setting hanging position of hidden elements fails on firefox\n            return selection;\n        }\n\n\n        selection.each(function(){\n            var h =  this.getBBox().height;\n            d3.select(this).attr('dy', '0.75em');\n        });\n\n        return selection;\n    }\n\n}\n\n\n","import {AppUtils} from './app-utils'\nimport * as d3 from './d3'\nimport {ContextMenu} from './context-menu/context-menu'\n\nexport class NodeDragHandler{\n\n    treeDesigner;\n    data;\n    config;\n\n    drag;\n\n\n    constructor(treeDesigner, data){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n\n        var self = this;\n        this.drag = d3.drag()\n            .subject(function(d) {\n                if(d==null){\n                    return  {\n                        x: event.x,\n                        y: event.y\n                    };\n                }\n                var t = d3.select(this);\n                return {\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\n                };\n            })\n            .on(\"start\", function(d){\n                self.dragStarted.call(this,d, self)\n            })\n            .on(\"drag\", function (d) {\n                self.onDrag.call(this, d, self);\n            })\n            .on(\"end\", function (d) {\n                self.dragEnded.call(this, d, self);\n            })\n    }\n\n\n    dragStarted(d,self) {\n        if(self.ignoreDrag){\n            self.ignoreDrag=false;\n            self.ignoredDrag=true;\n            return;\n        }\n        self.ignoredDrag=false;\n\n        // self.treeDesigner.layout.disableAutoLayout();\n        ContextMenu.hide();\n        var node = d3.select(this);\n        if(!node.classed(\"selected\")){\n            self.treeDesigner.clearSelection();\n        }\n\n        self.treeDesigner.selectNode(d);\n        node.classed(\"selected dragging\", true);\n        self.selectedNodes = self.treeDesigner.getSelectedNodes(true);\n        self.prevDragEvent = d3.event;\n        self.dragEventCount = 0;\n    }\n\n    onDrag(draggedNode, self){\n        if(self.ignoredDrag){\n            return;\n        }\n\n        if(self.dragEventCount==2){\n            self.data.saveState();\n        }\n        self.dragEventCount++;\n        if(self.selectedNodes.length>5 && self.dragEventCount%2!=1){\n            return;\n        }\n\n        var dx = d3.event.x - self.prevDragEvent.x;\n        var dy = d3.event.y- self.prevDragEvent.y;\n        self.treeDesigner.layout.moveNodes(self.selectedNodes, dx, dy, draggedNode);\n\n\n        self.prevDragEvent = d3.event;\n        self.treeDesigner.redrawEdges();\n        self.treeDesigner.updatePlottingRegionSize();\n    }\n\n    dragEnded(draggedNode, self){\n        var node = d3.select(this).classed(\"dragging\", false);\n        if(self.ignoredDrag){\n            return;\n        }\n        self.treeDesigner.layout.update(draggedNode)\n    }\n\n    cancelDrag(){\n        this.ignoreDrag = true;\n    }\n\n}\n\n\n","var epsilon = 1e-12;\nvar pi = Math.PI;\nvar halfPi = pi / 2;\nvar tau = 2 * pi;\n\nexport default {\n    /*draw: function(context, size) {\n        var r = Math.sqrt(size / pi);\n        context.moveTo(r, 0);\n        context.arc(0, 0, r, 0, tau);\n    }*/\n    draw: function(context, size) {\n\n        var r = Math.sqrt(size / pi);\n        var dist =0.552284749831 * r;\n\n        context.moveTo(-r, 0)\n        // context.lineTo(2*r, 2*r)\n        // context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\n        context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\n\n        context.bezierCurveTo(dist, -r, r, -dist, r,0);\n\n        context.bezierCurveTo(r, dist, dist, r, 0, r);\n\n        context.bezierCurveTo(-dist, r, -r, dist, -r, 0);\n    }\n};\n","var sqrt3 = Math.sqrt(3);\n\nexport default {\n    draw: function(context, size) {\n        var r = Math.sqrt(size / Math.PI);\n        context.moveTo(-r, 0);\n        context.lineTo(0.9*r, -r);\n        context.lineTo(0.9*r, r);\n        context.closePath();\n    }\n};\n","import {Utils} from \"sd-utils\";\nimport {i18n} from './i18n/i18n'\n\nexport class Templates{\n\n    static growl = require('./templates/growl_message.html');\n\n    static get(templateName, variables){\n        var compiled = Utils.template(Templates[templateName],{ 'imports': { 'i18n': i18n, 'Templates': Templates, 'include': function(n, v) {return Templates.get(n, v)} } });\n        if(variables){\n            variables.variables = variables;\n        }else{\n            variables = {variables:{}}\n        }\n        return compiled(variables)\n\n    }\n\n    static styleRule(selector, props){\n        var s = selector+ '{';\n        props.forEach(p=> s+=Templates.styleProp(p[0], p[1]));\n        s+='} ';\n        return s;\n    }\n    static styleProp(styleName, variableName){\n        return  styleName+': <%= '+variableName+' %>; '\n    }\n\n    static treeDesignerSelector = 'svg.sd-tree-designer';\n    static nodeSelector(type, clazz){\n        var s = Templates.treeDesignerSelector+' .node';\n        if(type){\n            s+='.'+type+'-node';\n        }\n        if(clazz){\n            s+='.'+clazz;\n        }\n        return s;\n    }\n    static edgeSelector(clazz){\n        var s = Templates.treeDesignerSelector+' .edge';\n        if(clazz){\n            s+='.'+clazz;\n        }\n        return s;\n    }\n\n    static treeDesignerStyles =\n\n        Templates.styleRule(Templates.treeDesignerSelector,[\n            ['font-size', 'fontSize'],\n            ['font-family', 'fontFamily'],\n            ['font-weight', 'fontWeight'],\n            ['font-style', 'fontStyle']\n        ])+\n        //   node\n        Templates.styleRule(Templates.nodeSelector()+' path',[\n            ['fill', 'node.fill'],\n            ['stroke-width', 'node.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('decision', 'optimal')+' path, '+Templates.nodeSelector('chance', 'optimal')+' path,' +Templates.nodeSelector('terminal', 'optimal')+' path',[\n            ['stroke', 'node.optimal.stroke'],\n            ['stroke-width', 'node.optimal.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .label',[\n            ['font-size', 'node.label.fontSize'],\n            ['fill', 'node.label.color']\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .payoff',[\n            ['font-size', 'node.payoff.fontSize'],\n            ['fill', 'node.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .payoff.negative',[\n            ['fill', 'node.payoff.negativeColor'],\n        ])+\n\n        //    decision node\n        Templates.styleRule(Templates.nodeSelector('decision')+' path',[\n            ['fill', 'node.decision.fill'],\n            ['stroke', 'node.decision.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('decision', 'selected')+' path',[\n            ['fill', 'node.decision.selected.fill']\n        ])+\n\n        //    chance node\n        Templates.styleRule(Templates.nodeSelector('chance')+' path',[\n            ['fill', 'node.chance.fill'],\n            ['stroke', 'node.chance.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('chance', 'selected')+' path',[\n            ['fill', 'node.chance.selected.fill']\n        ])+\n\n        //    terminal node\n        Templates.styleRule(Templates.nodeSelector('terminal')+' path',[\n            ['fill', 'node.terminal.fill'],\n            ['stroke', 'node.terminal.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal', 'selected')+' path',[\n            ['fill', 'node.terminal.selected.fill']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff',[\n            ['font-size', 'node.terminal.payoff.fontSize'],\n            ['fill', 'node.terminal.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff.negative',[\n            ['fill', 'node.terminal.payoff.negativeColor'],\n        ])+\n\n\n        //probability\n        Templates.styleRule(Templates.treeDesignerSelector+' .node .probability-to-enter, '+Templates.treeDesignerSelector+' .edge .probability',[\n            ['font-size', 'probability.fontSize'],\n            ['fill', 'probability.color']\n        ])+\n\n        //edge\n        Templates.styleRule(Templates.edgeSelector()+' path',[\n            ['stroke', 'edge.stroke'],\n            ['stroke-width', 'edge.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow path',[\n            ['fill', 'edge.stroke'],\n        ])+\n        Templates.styleRule(Templates.edgeSelector('optimal')+' path',[\n            ['stroke', 'edge.optimal.stroke'],\n            ['stroke-width', 'edge.optimal.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-optimal path',[\n            ['fill', 'edge.optimal.stroke'],\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector('selected')+' path',[\n            ['stroke', 'edge.selected.stroke'],\n            ['stroke-width', 'edge.selected.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-selected path',[\n            ['fill', 'edge.selected.stroke'],\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector()+' .label',[\n            ['font-size', 'edge.label.fontSize'],\n            ['fill', 'edge.label.color']\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector()+' .payoff',[\n            ['font-size', 'edge.payoff.fontSize'],\n            ['fill', 'edge.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.edgeSelector()+' .payoff.negative',[\n            ['fill', 'edge.payoff.negativeColor'],\n        ])+\n\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-title',[\n            ['font-size', 'title.fontSize'],\n            ['font-weight', 'title.fontWeight'],\n            ['font-style', 'title.fontStyle'],\n            ['fill', 'title.color']\n        ]) +\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-description',[\n            ['font-size', 'description.fontSize'],\n            ['font-weight', 'description.fontWeight'],\n            ['font-style', 'description.fontStyle'],\n            ['fill', 'description.color']\n        ])\n}\n\n\n\n\n","module.exports = \"module.exports = \\\"<div class=\\\\\\\"sd-growl-message <%=type%>\\\\\\\">\\\\n    <div class=\\\\\\\"sd-growl-message-text\\\\\\\">\\\\n        <%= message %>\\\\n    </div>\\\\n</div>\\\\n\\\";\\n\";\n","import {AppUtils} from './app-utils'\nimport * as d3 from './d3'\nimport {ContextMenu} from './context-menu/context-menu'\n\nexport class TextDragHandler{\n\n    treeDesigner;\n    data;\n    config;\n\n    drag;\n\n\n    constructor(treeDesigner, data){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n\n        var self = this;\n        this.drag = d3.drag()\n            .subject(function(d) {\n                if(d==null){\n                    return  {\n                        x: event.x,\n                        y: event.y\n                    };\n                }\n                var t = d3.select(this);\n                return {\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\n                };\n            })\n            .on(\"start\", function(d){\n                self.dragStarted.call(this,d, self)\n            })\n            .on(\"drag\", function (d) {\n                self.onDrag.call(this, d, self);\n            })\n            .on(\"end\", function (d) {\n                self.dragEnded.call(this, d, self);\n            })\n    }\n\n\n    dragStarted(d,self) {\n        // self.treeDesigner.layout.disableAutoLayout();\n        ContextMenu.hide();\n        var text = d3.select(this);\n        if(!text.classed(\"selected\")){\n            self.treeDesigner.clearSelection();\n        }\n\n        self.treeDesigner.selectText(d);\n        text.classed(\"selected dragging\", true);\n        self.selectedNodes = self.treeDesigner.getSelectedNodes();\n        self.prevDragEvent = d3.event;\n        self.dragEventCount = 0;\n    }\n\n    onDrag(draggedText, self){\n        if(self.dragEventCount==2){\n            self.data.saveState();\n        }\n        self.dragEventCount++;\n\n        var dx = d3.event.x - self.prevDragEvent.x;\n        var dy = d3.event.y- self.prevDragEvent.y;\n\n        self.treeDesigner.layout.moveTexts([draggedText], dx, dy);\n\n        self.prevDragEvent = d3.event;\n        self.treeDesigner.updatePlottingRegionSize();\n    }\n\n    dragEnded(draggedNode, self){\n         d3.select(this).classed(\"dragging\", false);\n    }\n\n}\n\n\n","import * as d3 from './d3'\nimport {Utils} from 'sd-utils'\n\nexport class Tooltip {\n    static getContainer(){\n        return d3.select(\"body\").selectOrAppend('div.sd-tooltip');\n    }\n\n    static show(html, xOffset = 5, yOffset = 28, event, duration=null) {\n        var container = Tooltip.getContainer()\n            .style(\"opacity\", 0);\n        container.transition()\n            .duration(200)\n            .style(\"opacity\", .98);\n        container.html(html);\n        Tooltip.updatePosition(xOffset, yOffset, event);\n        if(duration){\n            setTimeout(function(){\n                Tooltip.hide();\n            }, duration)\n        }\n    }\n\n    static updatePosition(xOffset = 5, yOffset = 28, event) {\n        event = event || d3.event;\n        Tooltip.getContainer()\n            .style(\"left\", (event.pageX + xOffset) + \"px\")\n            .style(\"top\", (event.pageY - yOffset) + \"px\");\n    }\n\n    static hide(duration = 500) {\n        var t = Tooltip.getContainer();\n        if(duration){\n            t = t.transition().duration(duration)\n        }\n        t.style(\"opacity\", 0);\n    }\n\n    static attach(target, htmlOrFn, xOffset, yOffset) {\n        target.on('mouseover', function (d, i) {\n            var html = null;\n            if (Utils.isFunction(htmlOrFn)) {\n                html = htmlOrFn(d, i);\n            } else {\n                html = htmlOrFn;\n            }\n\n            if (html !== null && html !== undefined && html !== '') {\n                Tooltip.show(html, xOffset, yOffset);\n            }else{\n                Tooltip.hide(0);\n            }\n\n        }).on('mousemove', function (d) {\n            Tooltip.updatePosition(xOffset, yOffset);\n        }).on(\"mouseout\", function (d) {\n            Tooltip.hide();\n        });\n    }\n}\n","import * as d3 from \"./d3\";\nimport {Utils} from \"sd-utils\";\nimport {AppUtils} from \"./app-utils\";\nimport {domain as model} from \"sd-model\";\nimport {ContextMenu} from \"./context-menu/context-menu\";\nimport {MainContextMenu} from \"./context-menu/main-context-menu\";\nimport {NodeContextMenu} from \"./context-menu/node-context-menu\";\nimport {Layout} from \"./layout\";\nimport {NodeDragHandler} from \"./node-drag-handler\";\nimport {Tooltip} from \"./tooltip\";\nimport {Templates} from \"./templates\";\nimport {TextDragHandler} from \"./text-drag-handler\";\nimport {TextContextMenu} from \"./context-menu/text-context-menu\";\nimport {EdgeContextMenu} from \"./context-menu/edge-context-menu\";\nimport * as Hammer from \"hammerjs\";\nimport {i18n} from \"./i18n/i18n\";\n\n\nexport class TreeDesignerConfig {\n    width = undefined;\n    height = undefined;\n    margin = {\n        left: 25,\n        right: 25,\n        top: 25,\n        bottom: 25\n    };\n    scale = 1;\n    lng = 'en';\n    layout= {\n        type: 'tree',\n        nodeSize: 40,\n        limitNodePositioning: true,\n        limitTextPositioning: true,\n        gridHeight: 75,\n        gridWidth: 150,\n        edgeSlantWidthMax: 20\n    };\n    fontFamily = 'sans-serif';\n    fontSize = '12px';\n    fontWeight = 'normal';\n    fontStyle = 'normal';\n    node = {\n        strokeWidth: '1px',\n        optimal: {\n            stroke: '#006f00',\n            strokeWidth: '1.5px',\n        },\n        label: {\n            fontSize: '1em',\n            color: 'black'\n        },\n        payoff: {\n            fontSize: '1em',\n            color: 'black',\n            negativeColor: '#b60000'\n        },\n        decision: {\n            fill: '#ff7777',\n            stroke: '#660000',\n\n            selected: {\n                fill: '#aa3333',\n                // stroke: '#666600'\n            }\n        },\n        chance: {\n            fill: '#ffff44',\n            stroke: '#666600',\n\n            selected: {\n                fill: '#aaaa00',\n                // stroke: '#666600'\n            }\n        },\n        terminal:{\n            fill: '#44ff44',\n            stroke: 'black',\n            selected: {\n                fill: '#00aa00',\n                // stroke: 'black'\n            },\n            payoff: {\n                fontSize: '1em',\n                color: 'black',\n                negativeColor: '#b60000'\n            },\n        }\n    };\n    edge={\n        stroke: '#424242',\n        strokeWidth: '1.5',\n        optimal:{\n            stroke: '#006f00',\n            strokeWidth: '2.4',\n        },\n        selected:{\n            stroke: '#045ad1',\n            strokeWidth: '3.5',\n        },\n        label: {\n            fontSize: '1em',\n            color: 'back'\n        },\n        payoff:{\n            fontSize: '1em',\n            color: 'black',\n            negativeColor: '#b60000'\n        }\n\n    };\n    probability = {\n        fontSize: '1em',\n        color: '#0000d7'\n    };\n    title = {\n        fontSize: '16px',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        color: '#000000',\n        margin:{\n            top: 15,\n            bottom: 10\n        }\n    };\n    description = {\n        show: true,\n        fontSize: '12px',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        color: '#000000',\n        margin:{\n            top: 5,\n            bottom: 10\n        }\n    };\n\n    readOnly= false;\n    disableAnimations=false;\n    forceFullEdgeRedraw=false;\n    hideLabels=false;\n    hidePayoffs=false;\n    hideProbabilities=false;\n    raw=false;\n\n\n    payoffNumberFormatter = (v, i)=> v;\n    probabilityNumberFormatter  = (v)=> v;\n\n    onNodeSelected = (node) => {};\n    onEdgeSelected = (edge) => {};\n    onTextSelected = (text) => {};\n    onSelectionCleared = () => {};\n\n    operationsForObject = (o) => [];\n\n    payoffNames = [null, null];\n    maxPayoffsToDisplay = 1;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n\nexport class TreeDesigner {\n\n    config;\n    container;\n    data; //data model manager\n    svg;\n\n    constructor(container, dataModel, config){\n        this.setConfig(config);\n        this.data = dataModel;\n        this.initContainer(container);\n        this.init();\n    }\n\n    setConfig(config) {\n        this.config = new TreeDesignerConfig(config);\n        if(this.layout){\n            this.layout.config=this.config.layout;\n        }\n        this.updateCustomStyles();\n        return this;\n    }\n\n    init(){\n\n        this.initSvg();\n        this.initLayout();\n        this.initI18n();\n        this.initBrush();\n        this.initEdgeMarkers();\n\n        this.updateCustomStyles();\n        if(!this.config.readOnly){\n            this.initMainContextMenu();\n            this.initNodeContextMenu();\n            this.initEdgeContextMenu();\n            this.initNodeDragHandler();\n            this.initTextDragHandler();\n            this.initTextContextMenu();\n        }\n        this.redraw();\n    }\n\n    initI18n() {\n        i18n.init(this.config.lng);\n    }\n\n\n    updateCustomStyles(){\n        d3.select('head').selectOrAppend('style#sd-tree-designer-style').html(Templates.get('treeDesignerStyles', this.config));\n        return this;\n    }\n\n    initLayout(){\n        this.layout = new Layout(this, this.data, this.config.layout);\n    }\n\n    initNodeDragHandler(){\n        this.nodeDragHandler = new NodeDragHandler(this, this.data);\n    }\n\n    initTextDragHandler(){\n        this.textDragHandler = new TextDragHandler(this, this.data);\n    }\n\n    redraw(withTransitions=false){\n\n        var self = this;\n        withTransitions = !self.config.disableAnimations && withTransitions;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateScale(withTransitions);\n        this.updateMargin(withTransitions);\n        if(withTransitions){\n            self.transitionPrev = self.transition;\n            self.transition = true;\n        }\n        this.redrawNodes();\n        this.redrawEdges();\n        this.redrawFloatingTexts();\n        this.updateValidationMessages();\n        if(withTransitions){\n            self.transition =  self.transitionPrev;\n        }\n        setTimeout(function(){\n            self.updatePlottingRegionSize();\n        },10);\n\n        return this;\n    }\n\n    computeAvailableSpace(){\n        this.availableHeight = AppUtils.sanitizeHeight(this.config.height, this.container, this.config.margin);\n        this.availableWidth = AppUtils.sanitizeWidth(this.config.width, this.container, this.config.margin);\n    }\n\n    initSvg() {\n        var c = this;\n        var self = this;\n        this.computeAvailableSpace();\n        this.svg = this.container.selectOrAppend('svg.sd-tree-designer');\n        this.svg.attr('width', this.availableWidth).attr('height', this.availableHeight);\n\n        this.wrapperGroup = this.svg.selectOrAppend('g.sd-wrapper-group');\n        this.mainGroup = this.wrapperGroup.selectOrAppend('g.main-group');\n        this.updateScale();\n        this.updateMargin();\n\n\n        if (!this.config.width) {\n            d3.select(window)\n                .on(\"resize.tree-designer\", function () {\n                    self.updatePlottingRegionSize();\n                    self.redrawDiagramTitle();\n                });\n        }\n\n        var mc = new Hammer.Manager(this.svg.node(), {touchAction : 'auto'});\n        mc.add(new Hammer.Press({\n            pointerType: 'touch'\n        }));\n\n        mc.add(new Hammer.Pinch({\n            pointerType: 'touch'\n        }));\n\n        var cancel;\n        mc.on('pinchstart', function(){\n            self.disableBrush();\n        })\n        mc.on('pinch', function(){\n            cancel = Utils.waitForFinalEvent(()=>self.enableBrush(), 'pinchend', 5000)\n        })\n    }\n\n    updateMargin(withTransitions){\n        var self = this;\n        var margin = this.config.margin;\n        var group = this.mainGroup;\n        if(withTransitions){\n            group = group.transition();\n        }\n\n        this.topMargin = margin.top;\n        if(this.diagramTitle||this.diagramDescription){\n            this.topMargin = parseInt(this.diagramTitle ? this.config.title.margin.top : 0) + this.getTitleGroupHeight()\n                +  Math.max(this.topMargin, parseInt(this.config.title.margin.bottom));\n        }\n\n        group.attr(\"transform\", \"translate(\" + margin.left + \",\" + this.topMargin + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\n    }\n\n    setMargin(margin, withoutStateSaving){\n        var self=this;\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    margin: Utils.clone(self.config.margin)\n                },\n                onUndo: (data)=> {\n                    self.setMargin(data.margin, true);\n                },\n                onRedo: (data)=> {\n                    self.setMargin(margin, true);\n                }\n            });\n        }\n        Utils.deepExtend(this.config.margin, margin);\n        this.redrawDiagramTitle();\n        this.updateMargin(true);\n    }\n\n\n    updateScale(withTransitions){\n        var self = this;\n        var scale = this.config.scale;\n        var group = this.wrapperGroup;\n        if(withTransitions){\n            group = group.transition();\n        }\n\n        group.attr(\"transform\", \"scale(\" + scale + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\n    }\n\n    setScale(scale, withoutStateSaving){\n        var self=this;\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    scale: Utils.clone(self.config.scale)\n                },\n                onUndo: (data)=> {\n                    self.setScale(data.scale, true);\n                },\n                onRedo: (data)=> {\n                    self.setScale(scale, true);\n                }\n            });\n        }\n        this.config.scale = scale;\n        this.updateScale(true);\n    }\n\n    initContainer(containerIdOrElem) {\n        if (Utils.isString(containerIdOrElem)) {\n            var selector = containerIdOrElem.trim();\n\n            if (!Utils.startsWith(selector, '#') && !Utils.startsWith(selector, '.')) {\n                selector = '#' + selector;\n            }\n            this.container = d3.select(selector);\n        } else if(containerIdOrElem._parents){\n            this.container = containerIdOrElem\n        }else{\n            this.container = d3.select(containerIdOrElem);\n        }\n    }\n\n    updatePlottingRegionSize() {\n        var changed = false;\n        this.computeAvailableSpace();\n        var margin = this.config.margin;\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        var mainGroupBox = this.mainGroup.node().getBBox();\n        let boxWidth = mainGroupBox.width;\n        var newSvgWidth = boxWidth+mainGroupBox.x+margin.left+margin.right;\n        newSvgWidth  *= this.config.scale;\n        this.container.classed('with-overflow-x', newSvgWidth>=this.availableWidth);\n        newSvgWidth = Math.max(newSvgWidth, this.availableWidth);\n        if(svgWidth!=newSvgWidth){\n            changed = true;\n            this.svg.attr('width', newSvgWidth);\n        }\n        let boxHeight = mainGroupBox.height;\n        var newSvgHeight = boxHeight+mainGroupBox.y+this.topMargin+margin.bottom;\n        newSvgHeight *= this.config.scale;\n        this.container.classed('with-overflow-y', newSvgHeight>=this.availableHeight);\n        newSvgHeight = Math.max(newSvgHeight, this.availableHeight);\n        if(svgHeight!=newSvgHeight){\n            changed=true;\n            this.svg.attr('height', newSvgHeight);\n        }\n        if(changed){\n            this.updateBrushExtent()\n        }\n\n\n    }\n\n    redrawNodes() {\n        var self = this;\n\n\n        var nodesContainer = this.mainGroup.selectOrAppend('g.nodes');\n        var nodes = nodesContainer.selectAll('.node').data(this.data.nodes.filter(d=>!d.$hidden), (d,i)=> d.$id);\n        nodes.exit().remove();\n        var nodesEnter = nodes.enter().append('g')\n            .attr('id', d=>'node-'+d.$id)\n            .attr('class', d=>d.type+'-node node')\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\n        nodesEnter.append('path');\n\n        var labelEnter = nodesEnter.append('text').attr('class', 'label');\n        var payoffEnter = nodesEnter.append('text').attr('class', 'payoff computed');\n        var indicatorEnter = nodesEnter.append('text').attr('class', 'error-indicator').text('!!');\n        var aggregatedPayoffEnter = nodesEnter.append('text').attr('class', 'aggregated-payoff');\n        var probabilityToEnterEnter = nodesEnter.append('text').attr('class', 'probability-to-enter');\n\n        var nodesMerge = nodesEnter.merge(nodes);\n        nodesMerge.classed('optimal', (d)=>self.isOptimal(d));\n\n        var nodesMergeT = nodesMerge;\n        if(this.transition){\n            nodesMergeT = nodesMerge.transition();\n            nodesMergeT.on('end', ()=> self.updatePlottingRegionSize())\n        }\n        nodesMergeT\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')')\n\n        var path = nodesMerge.select('path');\n        this.layout.drawNodeSymbol(path,this.transition);\n\n        /*path\n            .style('fill', d=> {\n                // if(self.isNodeSelected(d)){\n                //     return self.config.node[d.type].selected.fill\n                // }\n                return self.config.node[d.type].fill\n            })\n            .style('stroke', d=> self.config.node[d.type].stroke)\n            .style('stroke-width', d=> {\n                if(self.config.node[d.type].strokeWidth!==undefined){\n                    return self.config.node[d.type].strokeWidth;\n                }\n                return self.config.node.strokeWidth;\n            });\n        */\n        this.layout.nodeLabelPosition(labelEnter);\n        var labelMerge = nodesMerge.select('text.label');\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\n        var labelMergeT = nodesMergeT.select('text.label');\n        labelMergeT.each(this.updateTextLines);\n        this.layout.nodeLabelPosition(labelMergeT)\n            .attr('text-anchor', 'middle')\n\n        var payoff = nodesMerge.select('text.payoff');\n\n        var payoffTspans = payoff.selectAll('tspan').data(d=>{\n            let item = d.displayValue('childrenPayoff');\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\n        });\n        payoffTspans.exit().remove();\n\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\n        payoffTspansM\n            // .attr('dominant-baseline', 'hanging')\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0')\n            .classed('negative', d=> {\n                return d!==null && d<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\n            .text((d, i)=> {\n                var val = d\n\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\n            });\n        this.attachPayoffTooltip(payoffTspansM);\n\n\n        var payoffT = payoff;\n        if(this.transition){\n            payoffT = payoff.transition();\n        }\n\n        this.layout.nodePayoffPosition(payoffEnter);\n        this.layout.nodePayoffPosition(payoffT);\n\n        var aggregatedPayoff = nodesMerge.select('text.aggregated-payoff');\n        var aggregatedPayoffTspans = aggregatedPayoff.selectAll('tspan').data(d=>{\n            let item = d.displayValue('aggregatedPayoff');\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\n        });\n        aggregatedPayoffTspans.exit().remove();\n        var aggregatedPayoffTspansM = aggregatedPayoffTspans.enter().append('tspan').merge(aggregatedPayoffTspans)\n            .attr('dy', (d,i)=>i>0 ? '0.95em': undefined)\n            .classed('negative', d=> {\n                return d!==null && d<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\n            .text((val, i)=> {\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\n            });\n\n        this.attachPayoffTooltip(aggregatedPayoffTspansM, 'aggregatedPayoff');\n\n        var aggregatedPayoffT = aggregatedPayoff;\n        if(this.transition){\n            aggregatedPayoffT = aggregatedPayoff.transition();\n        }\n\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffEnter);\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffT);\n\n        var probabilityToEnter = nodesMerge.select('text.probability-to-enter')\n            .text(d=>{\n                var val = d.displayValue('probabilityToEnter');\n                return val!==null ? (isNaN(val) ? val : self.config.probabilityNumberFormatter(val)): ''\n            })\n            .classed('sd-hidden', this.config.hideProbabilities || this.config.raw);\n        Tooltip.attach(probabilityToEnter, i18n.t('tooltip.node.probabilityToEnter'));\n\n\n        var probabilityToEnterT = probabilityToEnter;\n        if(this.transition){\n            probabilityToEnterT = probabilityToEnter.transition();\n        }\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterEnter);\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterT);\n\n\n        var indicator = nodesMerge.select('text.error-indicator');\n        indicator.classed('sd-hidden', this.config.raw)\n        this.layout.nodeIndicatorPosition(indicatorEnter);\n        this.layout.nodeIndicatorPosition(indicator);\n\n        if(this.nodeDragHandler){\n            nodesMerge.call(this.nodeDragHandler.drag);\n        }\n\n        nodesMerge.on('contextmenu', this.nodeContextMenu);\n        nodesMerge.on('dblclick', this.nodeContextMenu)\n        nodesMerge.each(function(d, i){\n            var nodeElem = this;\n            var mc = new Hammer.Manager(nodeElem);\n            mc.add(new Hammer.Press({\n                pointerType: 'touch'\n            }));\n            mc.on('press', function(e){\n                if(e.pointerType=='touch'){\n                    self.nodeDragHandler.cancelDrag();\n                }\n            })\n\n\n            if(d.folded){\n                let button = d3.select(nodeElem).selectOrAppend('text.sd-unfold-button')\n                    .text(\"[+]\")\n                    .on('click dbclick mousedown', ()=>self.foldSubtree(d, false)); //firefox detects only mousedown event - related to drag handler\n\n                self.layout.nodeUnfoldButtonPosition(button);\n                Tooltip.attach(button, i18n.t('contextMenu.node.unfold'));\n            }else{\n                d3.select(nodeElem).select('.sd-unfold-button').remove();\n            }\n\n        })\n    }\n\n    attachPayoffTooltip(selection, payoffFiledName = 'payoff', object='node'){\n        var self = this;\n        Tooltip.attach(selection, (d, i)=>{\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\n                return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.named',{value: d.payoff, number: i+1, name: self.config.payoffNames[i]})\n            }\n            return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.default',{value: d.payoff, number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\n        });\n    }\n\n    updateTextLines(d){ //helper method for splitting text to tspans\n        var lines = d.name ? d.name.split('\\n') : [];\n        lines.reverse();\n        var tspans = d3.select(this).selectAll('tspan').data(lines);\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .text(l=>l)\n            .attr('dy', (d,i)=>i>0 ? '-1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n    }\n\n    isOptimal(d){\n        return d.displayValue('optimal');\n    }\n\n    redrawEdges() {\n        var self = this;\n        var edgesContainer = this.mainGroup.selectOrAppend('g.edges');\n        if(self.config.forceFullEdgeRedraw){\n            edgesContainer.selectAll(\"*\").remove();\n        }\n\n        var edges = edgesContainer.selectAll('.edge').data(this.data.edges.filter(e=>!e.$hidden), (d,i)=> d.$id);\n        edges.exit().remove();\n        var edgesEnter = edges.enter().append('g')\n            .attr('id', d=>'edge-'+d.$id)\n            .attr('class', 'edge');\n\n\n        edgesEnter.append('path');\n        var labelEnter = edgesEnter.appendSelector('g.label-group');\n        labelEnter.append('text').attr('class', 'label');\n        var payoffEnter = edgesEnter.append('text').attr('class', 'payoff');\n        var probabilityEnter = edgesEnter.append('text').attr('class', 'probability');\n\n\n        var edgesMerge = edgesEnter.merge(edges);\n\n\n        var optimalClassName = 'optimal';\n        edgesMerge.classed(optimalClassName, (d)=>self.isOptimal(d));\n\n        var edgesMergeT = edgesMerge;\n        if(this.transition){\n            edgesMergeT = edgesMerge.transition();\n        }\n\n        edgesMergeT.select('path')\n            .attr('d', d=> this.layout.edgeLineD(d))\n            // .attr(\"stroke\", \"black\")\n            // .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .attr(\"marker-end\", function(d) {\n                var suffix = d3.select(this.parentNode).classed('selected') ? '-selected' : (self.isOptimal(d)?'-optimal':'');\n                return \"url(#arrow\"+ suffix+\")\"\n            });\n            // .attr(\"shape-rendering\", \"optimizeQuality\")\n\n\n        edgesMerge.on('click', d=>{\n            self.selectEdge(d, true)\n        });\n\n        this.layout.edgeLabelPosition(labelEnter);\n        edgesMergeT.select('text.label').each(this.updateTextLines);\n        var labelMerge = edgesMerge.select('g.label-group');\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\n        var labelMergeT = edgesMergeT.select('g.label-group');\n        this.layout.edgeLabelPosition(labelMergeT);\n            // .text(d=>d.name);\n\n        var payoff = edgesMerge.select('text.payoff');\n\n        var payoffTspans = payoff.selectAll('tspan').data(d => {\n            let item = d.displayValue('payoff');\n            return Utils.isArray(item) ? item.slice(0, Math.min(item.length, self.config.maxPayoffsToDisplay)).map(_=>d) : [d];\n        });\n        payoffTspans.exit().remove();\n\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\n        payoffTspansM\n        // .attr('dominant-baseline', 'hanging')\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            // .attr('x', '0')\n\n            // .attr('dominant-baseline', 'hanging')\n            .classed('negative', (d, i)=> {\n                var val = d.displayPayoff(undefined, i);\n                return val!==null && val<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs)\n            // .text(d=> isNaN(d.payoff) ? d.payoff : self.config.payoffNumberFormatter(d.payoff))\n            .text((d, i)=>{\n                if(this.config.raw){\n                    return d.payoff[i];\n                }\n\n                let item = d.displayValue('payoff');\n                let items = Utils.isArray(item) ? item : [item];\n\n                let val = items[i];\n                if (val !== null) {\n                    if (!isNaN(val)) {\n                        return self.config.payoffNumberFormatter(val, i);\n                    }\n                    if (Utils.isString(val)) {\n                        return val;\n                    }\n                }\n\n                if (d.payoff[i] !== null && !isNaN(d.payoff[i]))\n                    return self.config.payoffNumberFormatter(d.payoff[i], i);\n\n                return d.payoff[i];\n\n            });\n\n        Tooltip.attach(payoffTspansM, (d, i)=>{\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\n                return i18n.t('tooltip.edge.payoff.named',{value: d.payoff[i], number: i+1, name: self.config.payoffNames[i]})\n            }\n            return i18n.t('tooltip.edge.payoff.default',{value: d.payoff[i], number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\n        });\n\n        var payoffTextT = payoff;\n        if(this.transition){\n            payoffTextT = payoff.transition();\n        }\n        this.layout.edgePayoffPosition(payoffEnter);\n        this.layout.edgePayoffPosition(payoffTextT);\n\n        Tooltip.attach(edgesMerge.select('text.probability'), d=>i18n.t('tooltip.edge.probability',{value: d.probability=== undefined ? d.displayProbability() : d.probability}));\n\n        edgesMerge.select('text.probability')\n            .classed('sd-hidden', this.config.hideProbabilities);\n        var probabilityMerge = edgesMerge.select('text.probability');\n        probabilityMerge\n            .attr('text-anchor', 'end')\n            .text(d=>{\n                if(this.config.raw){\n                    return d.probability;\n                }\n                var val = d.displayProbability();\n\n                if(val!==null){\n                    if(!isNaN(val)){\n                        return self.config.probabilityNumberFormatter(val);\n                    }\n                    if(Utils.isString(val)){\n                        return val;\n                    }\n                }\n\n                if(d.probability!==null && !isNaN(d.probability))\n                    return self.config.probabilityNumberFormatter(d.probability);\n\n                return d.probability;\n            });\n        var probabilityMergeT = probabilityMerge;\n        if(this.transition){\n            probabilityMergeT = probabilityMerge.transition();\n        }\n\n        this.layout.edgeProbabilityPosition(probabilityEnter);\n        this.layout.edgeProbabilityPosition(probabilityMergeT);\n\n\n        edgesContainer.selectAll('.edge.'+optimalClassName).raise();\n\n        edgesMerge.on('contextmenu', this.edgeContextMenu);\n        edgesMerge.on('dblclick', this.edgeContextMenu);\n        edgesMerge.each(function(d, i){\n            var elem = this;\n            var mc = new Hammer.Manager(elem);\n            mc.add(new Hammer.Press({\n                pointerType: Hammer.POINTER_TOUCH\n            }));\n        })\n    }\n\n    redrawFloatingTexts() {\n        var self = this;\n\n\n        var textsContainer = this.mainGroup.selectOrAppend('g.floating-texts');\n        var texts = textsContainer.selectAll('.floating-text').data(this.data.texts, (d,i)=> d.$id);\n        texts.exit().remove();\n        var textsEnter = texts.enter().appendSelector('g.floating-text')\n            .attr('id', d=>'text-'+d.$id);\n\n\n        var rectWidth = 40;\n        var rectHeight = 20;\n\n        textsEnter.append('rect').attr('x', -5).attr('y', -16).attr('fill-opacity', 0);\n        textsEnter.append('text');\n\n        var textsMerge = textsEnter.merge(texts);\n        var textsMergeT = textsMerge;\n        if(this.transition){\n            textsMergeT = textsMerge.transition();\n        }\n\n        textsMergeT.attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\n\n        var tspans = textsMerge.select('text').selectAll('tspan').data(d=>d.value ? d.value.split('\\n') : []);\n\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n        textsMerge.classed('sd-empty', d=>!d.value || !d.value.trim());\n        textsMerge.select('rect').attr('width', rectWidth).attr('height', rectHeight);\n\n        textsMerge.each(function(d){\n            if(!d.value){\n                return;\n            }\n            var bb = d3.select(this).select('text').node().getBBox();\n           d3.select(this).select('rect')\n               .attr('y', bb.y-5)\n               .attr('width', Math.max(bb.width+10, rectWidth))\n               .attr('height', Math.max(bb.height+10, rectHeight))\n        });\n\n        if(this.textDragHandler){\n            textsMerge.call(this.textDragHandler.drag);\n        }\n        textsMerge.on('contextmenu', this.textContextMenu);\n        textsMerge.on('dblclick', this.textContextMenu);\n        textsMerge.each(function(d, i){\n            var elem = this;\n            var mc = new Hammer.Manager(elem);\n            mc.add(new Hammer.Press({\n                pointerType: 'touch'\n            }));\n        })\n\n    }\n\n    updateValidationMessages() {\n        var nodes = this.mainGroup.selectAll('.node');\n        nodes.classed('error', false);\n\n        this.data.validationResults.forEach(validationResult=>{\n            if(validationResult.isValid()){\n                return;\n            }\n\n            Object.getOwnPropertyNames(validationResult.objectIdToError).forEach(id=>{\n                var errors = validationResult.objectIdToError[id];\n                var nodeSelection = this.getNodeD3SelectionById(id);\n                nodeSelection.classed('error', true);\n                var tooltipHtml = '';\n                errors.forEach(e=>{\n                    if(tooltipHtml){\n                        tooltipHtml+='<br/>'\n                    }\n                    tooltipHtml+=AppUtils.getValidationMessage(e);\n                });\n\n                Tooltip.attach(nodeSelection.select('.error-indicator'), tooltipHtml);\n\n\n            })\n        });\n    }\n\n\n    initEdgeMarkers() {\n        var defs = this.svg.append(\"svg:defs\");\n\n        this.initArrowMarker(\"arrow\");\n        this.initArrowMarker(\"arrow-optimal\");\n        this.initArrowMarker(\"arrow-selected\");\n    }\n\n    initArrowMarker(id) {\n\n        var defs = this.svg.select(\"defs\");\n        defs.append(\"marker\")\n            .attr(\"id\",id)\n            .attr(\"viewBox\",\"0 -5 10 10\")\n            .attr(\"refX\",5)\n            .attr(\"refY\",0)\n            .attr(\"markerWidth\",4)\n            .attr(\"markerHeight\",4)\n            .attr(\"orient\",\"auto\")\n            .append(\"path\")\n            .attr(\"d\", \"M0,-5L10,0L0,5\")\n            .attr(\"class\",\"arrowHead\");\n    }\n\n    updateBrushExtent() {\n        var self =this;\n        this.brush.extent([[0, 0], [self.svg.attr('width'), self.svg.attr('height')]]);\n        this.brushContainer.call(this.brush);\n    }\n    initBrush() {\n        var self = this;\n\n        var brushContainer = self.brushContainer = this.brushContainer= this.wrapperGroup.selectOrInsert(\"g.brush\", \":first-child\")\n            .attr(\"class\", \"brush\");\n\n        var brush = this.brush = d3.brush()\n            .on(\"start\", brushstart)\n            .on(\"brush\", brushmove)\n            .on(\"end\", brushend);\n\n\n\n        this.updateBrushExtent();\n\n        brushContainer.select('.overlay').on(\"mousemove.edgeSelection\", mousemoved);\n        function mousemoved() {\n            var m = d3.mouse(this);\n            var mgt = self.getMainGroupTranslation();\n            var margin = 10;\n\n            var closest = [null, 999999999];\n            var closeEdges = [];\n            self.mainGroup.selectAll('.edge').each(function(d){\n                var selection = d3.select(this);\n                selection.classed('sd-hover', false);\n                var pathNode = selection.select('path').node();\n                var b = pathNode.getBBox();\n                if(b.x+mgt[0] <=m[0] && b.x+b.width+mgt[0] >= m[0] &&\n                   b.y+mgt[1]-margin <=m[1] && b.y+b.height+mgt[1]+margin >= m[1]){\n\n                    var cp = AppUtils.closestPoint(pathNode, [m[0]-mgt[0], m[1]-mgt[1]]);\n                    if(cp.distance < margin && cp.distance<closest[1]){\n                        closest = [selection, cp.distance];\n                    }\n                }\n\n            });\n\n            self.hoveredEdge = null;\n            if(closest[0]){\n                closest[0].classed('sd-hover', true);\n                self.hoveredEdge = closest[0];\n            }\n\n        }\n\n        function brushstart() {\n            if (!d3.event.selection) return;\n            if(self.hoveredEdge){\n                self.selectEdge(self.hoveredEdge.datum(), true)\n            }else{\n                self.clearSelection();\n            }\n            ContextMenu.hide();\n        }\n\n        // Highlight the selected nodes.\n        function brushmove() {\n            var s = d3.event.selection;\n            if(!s)return;\n\n            self.mainGroup.selectAll(\".node\").classed('selected', function (d) {\n                var mainGroupTranslation = self.getMainGroupTranslation();\n                var x = d.location.x+mainGroupTranslation[0];\n                var y = d.location.y+mainGroupTranslation[1];\n                var nodeSize = self.config.layout.nodeSize;\n                var offset = nodeSize*0.25;\n                return s[0][0] <= x+offset && x-offset <= s[1][0]\n                    && s[0][1] <= y+offset && y-offset <= s[1][1];\n            });\n        }\n        // If the brush is empty, select all circles.\n        function brushend() {\n            if (!d3.event.selection) return;\n            brush.move(brushContainer, null);\n\n            var selectedNodes = self.getSelectedNodes();\n            if(selectedNodes && selectedNodes.length === 1){\n                self.selectNode(selectedNodes[0]);\n            }\n            // if (!d3.event.selection) self.mainGroup.selectAll(\".selected\").classed('selected', false);\n        }\n    }\n\n    disableBrush(){\n        if(!this.brushDisabled){\n            AppUtils.growl(i18n.t('growl.brushDisabled'), 'info', 'left')\n        }\n        this.brushDisabled = true;\n        this.brushContainer.remove();\n    }\n\n    enableBrush(){\n        if(this.brushDisabled){\n            AppUtils.growl(i18n.t('growl.brushEnabled'), 'info', 'left')\n            this.initBrush();\n            this.brushDisabled = false;\n        }\n\n\n    }\n\n    getMainGroupTranslation(invert) {\n        var translation = AppUtils.getTranslation(this.mainGroup.attr(\"transform\"));\n        if(invert){\n            translation[0] = -translation[0];\n            translation[1] = -translation[1]\n        }\n        return translation;\n    }\n\n    initNodeContextMenu() {\n        this.nodeContextMenu = new NodeContextMenu(this, this.config.operationsForObject);\n    }\n\n    initEdgeContextMenu() {\n        this.edgeContextMenu = new EdgeContextMenu(this);\n    }\n\n    initTextContextMenu() {\n        this.textContextMenu = new TextContextMenu(this);\n    }\n\n\n\n    initMainContextMenu() {\n        this.mainContextMenu = new MainContextMenu(this);\n        this.svg.on('contextmenu',this.mainContextMenu);\n        this.svg.on('dblclick',this.mainContextMenu);\n    }\n\n    addText(text){\n        this.data.saveState();\n        this.data.addText(text);\n        this.redraw();\n        this.selectText(text);\n    }\n\n    addNode(node, parent, redraw=false){\n        this.data.saveState();\n        this.data.addNode(node, parent);\n        this.redraw(true);\n        this.layout.update(node);\n        return node;\n    }\n\n    addDecisionNode(parent){\n        var newNode = new model.DecisionNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n    addChanceNode(parent){\n        var newNode = new model.ChanceNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n    addTerminalNode(parent){\n        var newNode = new model.TerminalNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n\n    injectNode(node, edge){\n        this.data.saveState();\n        this.data.injectNode(node, edge);\n        this.redraw();\n        this.layout.update(node);\n        return node;\n    }\n\n    injectDecisionNode(edge){\n        var newNode = new model.DecisionNode(this.layout.getInjectedNodeLocation(edge));\n        this.injectNode(newNode, edge);\n\n    }\n\n    injectChanceNode(edge){\n        var newNode = new model.ChanceNode(this.layout.getInjectedNodeLocation(edge));\n        this.injectNode(newNode, edge);\n    }\n\n    removeNode(node) {\n        this.data.saveState();\n        this.data.removeNode(node);\n\n\n        if(!this.layout.isManualLayout()){\n            this.layout.update();\n        }else{\n            this.redraw();\n        }\n    }\n\n    removeSelectedNodes() {\n        var selectedNodes = this.getSelectedNodes();\n        if(!selectedNodes.length){\n            return;\n        }\n        this.data.saveState();\n        this.data.removeNodes(selectedNodes);\n        this.clearSelection();\n        this.redraw();\n        this.layout.update();\n    }\n\n    removeSelectedTexts(){\n        var selectedTexts = this.getSelectedTexts();\n\n        if(!selectedTexts.length){\n            return;\n        }\n        this.data.saveState();\n        this.data.removeTexts(selectedTexts);\n        this.clearSelection();\n        this.redraw();\n    }\n\n    copyNode(d, notClearPrevSelection) {\n        var clone = this.data.cloneSubtree(d);\n        if(notClearPrevSelection){\n            if(!this.copiedNodes){\n                this.copiedNodes=[];\n            }\n            this.copiedNodes.push(clone);\n        }else{\n            this.copiedNodes = [clone];\n        }\n\n    }\n\n    cutNode(d) {\n        this.copyNode(d);\n        this.removeNode(d);\n    }\n\n    cutSelectedNodes(){\n        var selectedNodes = this.getSelectedNodes();\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\n        this.copyNodes(selectedRoots);\n        this.removeSelectedNodes();\n    }\n\n    copySelectedNodes() {\n        var self;\n        var selectedNodes = this.getSelectedNodes();\n\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\n        this.copyNodes(selectedRoots);\n\n\n    }\n\n    copyNodes(nodes){\n        this.copiedNodes = nodes.map(d=>this.data.cloneSubtree(d));\n    }\n\n\n\n    pasteToNode(node) {\n        if(!this.copiedNodes || !this.copiedNodes.length){\n            return;\n        }\n        this.data.saveState();\n        var self = this;\n        self.clearSelection();\n        var nodesToAttach = this.copiedNodes;\n        self.copyNodes(this.copiedNodes);\n        nodesToAttach.forEach(toAttach=>{\n            var attached = this.data.attachSubtree(toAttach, node).childNode;\n            if(attached.folded){\n                self.foldSubtree(attached, attached.folded, false);\n            }\n            var location = self.layout.getNewChildLocation(node);\n            attached.moveTo(location.x, location.y, true);\n            self.layout.moveNodeToEmptyPlace(attached, false);\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\n\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\n        });\n\n        if(node.folded){\n            self.foldSubtree(node, node.folded, false);\n        }\n\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n\n    }\n\n    pasteToNewLocation(point) {\n        this.data.saveState();\n        var self = this;\n        self.clearSelection();\n        var nodesToAttach = this.copiedNodes;\n        self.copyNodes(this.copiedNodes);\n        nodesToAttach.forEach(toAttach=> {\n            var attached = this.data.attachSubtree(toAttach);\n            if(attached.folded){\n                self.foldSubtree(attached, attached.folded, false);\n            }\n            attached.moveTo(point.x, point.y, true);\n            self.layout.moveNodeToEmptyPlace(attached, false);\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\n\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\n        });\n\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n\n    }\n\n    convertNode(node, typeToConvertTo){\n        var self = this;\n        this.data.saveState();\n        this.data.convertNode(node, typeToConvertTo);\n        setTimeout(function(){\n            self.redraw(true);\n        },10)\n    }\n\n    performOperation(object, operation){\n        var self = this;\n        this.data.saveState();\n        operation.perform(object);\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n    }\n\n    foldSubtree(node, fold = true, redraw=true){\n        let self = this;\n        node.folded = fold;\n\n        this.data.getAllDescendantNodes(node).forEach(n=>{\n            n.$hidden = fold;\n            n.folded = false;\n        });\n        this.data.getAllDescendantEdges(node).forEach(e=>e.$hidden = fold);\n\n        if(!redraw){\n            return;\n        }\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n    }\n\n    updateVisibility(node = null){\n        if(!node){\n            this.data.getRoots().forEach(n=>this.updateVisibility(n));\n            return;\n        }\n\n        if(node.folded){\n            this.foldSubtree(node, true, false);\n            return;\n        }\n\n        node.childEdges.forEach(e => this.updateVisibility(e.childNode));\n\n    }\n\n    moveNodeTo(x,y){\n\n    }\n\n    updateNodePosition(node) {\n        this.getNodeD3Selection(node).raise().attr('transform', 'translate('+node.location.x+' '+node.location.y+')');\n    }\n\n    updateTextPosition(text) {\n        this.getTextD3Selection(text).raise().attr('transform', 'translate('+text.location.x+' '+text.location.y+')');\n    }\n\n    getNodeD3Selection(node){\n        return this.getNodeD3SelectionById(node.$id);\n    }\n\n    getNodeD3SelectionById(id){\n        return this.mainGroup.select('#node-'+id);\n    }\n    getTextD3Selection(text){\n        return this.getTextD3SelectionById(text.$id);\n    }\n    getTextD3SelectionById(id){\n        return this.mainGroup.select('#text-'+id);\n    }\n\n    getSelectedNodes(visibleOnly = false) {\n        let selectedVisible = this.mainGroup.selectAll(\".node.selected\").data();\n        if(visibleOnly){\n            return selectedVisible;\n        }\n\n        let allSelected  = [];\n        allSelected.push(...selectedVisible);\n\n        selectedVisible.forEach(n=>{\n            if(n.folded){\n                let descendants = this.data.getAllDescendantNodes(n);\n                if(descendants){\n                    allSelected.push(...descendants);\n                }\n            }\n        });\n\n        return allSelected;\n    }\n\n    getSelectedTexts(){\n        return this.mainGroup.selectAll(\".floating-text.selected\").data();\n    }\n\n    clearSelection(){\n        this.mainGroup.selectAll(\".edge.selected\").select('path').attr(\"marker-end\", d => \"url(#arrow\"+(this.isOptimal(d)?'-optimal':'')+\")\")\n        this.mainGroup.selectAll(\".selected\").classed('selected', false);\n        this.config.onSelectionCleared();\n    }\n\n    selectEdge(edge, clearSelectionBeforeSelect){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n        this.config.onEdgeSelected(edge);\n        this.mainGroup.select('#edge-'+edge.$id)\n            .classed('selected', true)\n            .select('path')\n            .attr(\"marker-end\", d => \"url(#arrow-selected)\")\n    }\n\n    isNodeSelected(node){\n        return this.getNodeD3Selection(node).classed('selected');\n    }\n\n    selectNode(node, clearSelectionBeforeSelect, skipCallback){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n\n        if(!skipCallback){\n            this.config.onNodeSelected(node);\n        }\n\n        this.getNodeD3SelectionById(node.$id).classed('selected', true);\n    }\n\n    selectText(text, clearSelectionBeforeSelect, skipCallback){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n\n        if(!skipCallback){\n            this.config.onTextSelected(text)\n        }\n\n        this.getTextD3SelectionById(text.$id).classed('selected', true);\n    }\n\n    selectSubTree(node, clearSelectionBeforeSelect,skipCallback) {\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n        this.selectNode(node, false, skipCallback);\n        node.childEdges.forEach(e=>this.selectSubTree(e.childNode, false, true));\n    }\n\n    selectAllNodes() {\n        this.mainGroup.selectAll(\".node\").classed('selected', true);\n    }\n\n    autoLayout(type, withoutStateSaving){\n        this.layout.autoLayout(type, withoutStateSaving);\n    }\n\n    updateDiagramTitle(titleValue){\n        if(!titleValue){\n            titleValue = '';\n        }\n        this.diagramTitle = titleValue;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(true);\n    }\n\n    redrawDiagramTitle(){\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\n\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\n        title.text(this.diagramTitle);\n        Layout.setHangingPosition(title);\n\n        var marginTop = parseInt(this.config.title.margin.top);\n        this.titleContainer.attr('transform', 'translate('+(svgWidth/2)+','+( marginTop)+')');\n    }\n    redrawDiagramDescription(){\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\n\n        var desc = this.titleContainer.selectOrAppend('text.sd-description');\n\n        if(!this.config.description.show){\n            desc.remove();\n            return;\n        }\n\n        var lines = this.diagramDescription ? this.diagramDescription.split('\\n') : [];\n        var tspans = desc.selectAll('tspan').data(lines);\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n        Layout.setHangingPosition(desc);\n\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\n\n        var marginTop = 0;\n        if(this.diagramTitle){\n            marginTop += title.node().getBBox().height;\n            marginTop+= Math.max(parseInt(this.config.description.margin.top), 0);\n        }\n\n\n        desc.attr('transform', 'translate(0,'+( marginTop)+')');\n    }\n\n    updateDiagramDescription(descriptionValue){\n        if(!descriptionValue){\n            descriptionValue = '';\n        }\n        this.diagramDescription = descriptionValue;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(true);\n    }\n\n\n    getTitleGroupHeight(withMargins){\n        if(!this.titleContainer){\n            return 0;\n        }\n        var h = this.titleContainer.node().getBBox().height;\n        if(withMargins){\n            h+= parseInt(this.config.title.margin.bottom);\n            h+= parseInt(this.config.title.margin.top);\n        }\n        return h;\n    }\n\n}\n","export * from './src/index'\n"]}