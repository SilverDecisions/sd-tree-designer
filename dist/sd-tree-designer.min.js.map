{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app-utils.js","src/context-menu/context-menu.js","src/context-menu/edge-context-menu.js","src/context-menu/main-context-menu.js","src/context-menu/node-context-menu.js","src/context-menu/text-context-menu.js","src/d3-extensions.js","src/d3.js","src/i18n/de.json","src/i18n/en.json","src/i18n/fr.json","src/i18n/i18n.js","src/i18n/it.json","src/i18n/pl.json","src/index.js","src/layout.js","src/node-drag-handler.js","src/symbols/circle.js","src/symbols/triangle.js","src/templates.js","src/templates/growl_message.html","src/text-drag-handler.js","src/tooltip.js","src/tree-designer.js","index.js"],"names":["require","r","e","n","t","o","i","f","c","u","a","Error","code","p","exports","call","length","1","module","d3","_interopRequireWildcard","_templates","_i18n","_sdUtils","AppUtils","textD3Obj","textString","width","textObj","node","textContent","getComputedTextLength","x","getSubStringLength","substring","tooltip","placeTextWithEllipsis","on","d","transition","duration","style","html","event","pageX","pageY","element","window","getComputedStyle","getPropertyValue","transform","g","document","createElementNS","setAttributeNS","matrix","baseVal","consolidate","pathNode","point","best","bestLength","scan","scanDistance","before","after","beforeLength","afterLength","beforeDistance","afterDistance","pathLength","getTotalLength","precision","bestDistance","Infinity","scanLength","distance2","getPointAtLength","y","distance","Math","sqrt","dx","dy","message","type","arguments","undefined","position","time","Templates","get","select","selectOrAppend","append","setTimeout","remove","tag","attribs","parent","el","createElement","deepExtend","appendChild","parentNode","removeChild","text","replace","createTextNode","div","innerHTML","name","evt","createEvent","initEvent","dispatchEvent","fireEvent","data","CustomEvent","detail","initCustomEvent","error","Utils","isString","key","i18n","selection","classed","_show","offsetParent","display","url","callback","xhr","XMLHttpRequest","open","responseType","onload","status","response","send","sanitizeHeight","height","container","parseInt","sanitizeWidth","availableHeight","margin","max","top","bottom","availableWidth","left","right","ContextMenu","menu","opts","_classCallCheck","this","self","openCallback","onOpen","closeCallback","onClose","selectAll","enter","attr","index","elm","preventDefault","stopPropagation","ret","divider","disabled","action","title","console","_contextMenu","EdgeContextMenu","treeDesigner","_this","_super","push","injectDecisionNode","injectChanceNode","_sdModel","MainContextMenu","mousePosition","newNode","domain","DecisionNode","addNode","ChanceNode","newText","Text","addText","pasteToNewLocation","copiedNodes","selectAllNodes","clearSelection","Point","mouse","svg","move","getMainGroupTranslation","NodeContextMenu","operationsForObject","operations","copyMenuItem","selectNode","isNodeSelected","copySelectedNodes","cutMenuItem","cutSelectedNodes","pasteMenuItem","pasteToNode","folded","deleteMenuItem","removeSelectedNodes","TerminalNode","$TYPE","addNodeConversionOptions","addDecisionNode","addChanceNode","addTerminalNode","selectSubTree","foldSubtree","forEach","op","performOperation","canPerform","conversionOptions","getNodeConversionOptions","options","allAllowedTypes","childEdges","$parent","filter","getNodeConversionOption","typeToConvertTo","convertNode","TextContextMenu","selectText","removeSelectedTexts","D3Extensions","prototype","insertSelector","selector","appendSelector","selectOrInsert","operation","selectorParts","split","shift","selectorModifier","selectorItem","insertOrAppendSelector","empty","_d3Dispatch","Object","keys","defineProperty","enumerable","_d3Scale","_d3Selection","_d3Shape","_d3Drag","_d3Brush","_d3Array","_d3Hierarchy","_d3TimeFormat","contextMenu","main","paste","copy","cut","delete","convert","decision","chance","terminal","selectSubtree","fold","unfold","flipSubtree","payoffsTransformation","edge","validation","incompletePath","probabilityDoNotSumUpTo1","invalidProbability","invalidPayoff","growl","brushDisabled","brushEnabled","payoff","default","named","aggregatedPayoff","probabilityToEnter","probability","_i18next","en","pl","it","de","fr","lng","language","resources","translation","$instance","createInstance","fallbackLng","err","opt","_d3Extensions","hasOwnProperty","_exportNames","_treeDesigner","_appUtils","_tooltip","_d","extend","_circle","_interopRequireDefault","_triangle","Layout","config","nodeTypeToSymbol","symbolSquare","onAutoLayoutChanged","nodeTypeOrder","treeMargin","targetSymbolSize","nodeSeparation","b","nodeSymbolSize","$location","location","isHidden","each","getBBox","sort","childNode","isManualLayout","autoLayout","moveNodeToEmptyPlace","redraw","MANUAL_LAYOUT_NAME","getNodeMinX","getNodeMinY","gridWidth","$linePoints","redrawIfChanged","nodesSortedByX","nodes","slice","colidingNode","stepX","nodeSize","stepY","changed","newLocation","find","findCollidingNode","moveTo","_fireOnAutoLayoutChangedCallbacks","path","nodeSymbol","symbol","size","id","box","min","set","setHangingPosition","fontSize","getFontSize","items","displayValue","isArray","aggregatedPayoffs","line","dX","sign","slantStartXOffset","slantWidth","edgeSlantWidthMax","point1","point2","point3","point4","datum","len","previousSibling","childNodes","bb","minX","getTextD3Selection","minY","Number","MAX_SAFE_INTEGER","getMinMarginBetweenNodes","$hidden","withoutStateSaving","saveState","onUndo","setGridWidth","onRedo","update","gridHeight","setGridHeight","setNodeSize","fitNodesInPlottingRegion","getRoots","setEdgeSlantWidthMax","newLayout","currentLayout","prevTreeMaxY","layout","root","hierarchy","map","cluster","tree","separation","maxY","pivot","limit","limitNodePositioning","maxX","backupNodeLocation","getNodeMaxX","revertX","updateNodePosition","texts","limitTextPositioning","getTextMinX","getTextMaxX","getTextMinY","updateTextPosition","NodeDragHandler","stateSnapshot","drag","subject","getTranslation","dragStarted","onDrag","dragEnded","ignoreDrag","ignoredDrag","createStateSnapshot","hide","selectedNodes","getSelectedNodes","prevDragEvent","dragEventCount","draggedNode","saveStateFromSnapshot","moveNodes","redrawEdges","updatePlottingRegionSize","pi","PI","draw","context","dist","bezierCurveTo","lineTo","closePath","templateName","variables","compiled","template","imports","include","v","props","s","styleProp","styleName","variableName","clazz","treeDesignerSelector","treeDesignerStyles","styleRule","nodeSelector","edgeSelector","TextDragHandler","draggedText","moveTexts","Tooltip","xOffset","yOffset","getContainer","updatePosition","target","htmlOrFn","isFunction","show","_mainContextMenu","_nodeContextMenu","_layout","_nodeDragHandler","_textDragHandler","_textContextMenu","_edgeContextMenu","Hammer","TreeDesignerConfig","custom","scale","fontFamily","fontWeight","fontStyle","strokeWidth","optimal","stroke","label","color","negativeColor","fill","selected","description","readOnly","disableAnimations","forceFullEdgeRedraw","hideLabels","hidePayoffs","hideProbabilities","raw","payoffNumberFormatter","probabilityNumberFormatter","onNodeSelected","onEdgeSelected","onTextSelected","onSelectionCleared","object","Promise","resolve","payoffNames","maxPayoffsToDisplay","TreeDesigner","dataModel","setConfig","initContainer","init","updateCustomStyles","initSvg","initLayout","initI18n","initBrush","initEdgeMarkers","initMainContextMenu","initNodeContextMenu","initEdgeContextMenu","initNodeDragHandler","initTextDragHandler","initTextContextMenu","nodeDragHandler","textDragHandler","withTransitions","redrawDiagramTitle","redrawDiagramDescription","updateScale","updateMargin","transitionPrev","redrawNodes","redrawFloatingTexts","updateValidationMessages","computeAvailableSpace","wrapperGroup","mainGroup","mc","Manager","touchAction","add","Press","pointerType","Pinch","disableBrush","waitForFinalEvent","enableBrush","group","topMargin","diagramTitle","diagramDescription","getTitleGroupHeight","clone","setMargin","setScale","containerIdOrElem","trim","startsWith","_parents","svgWidth","svgHeight","mainGroupBox","newSvgWidth","newSvgHeight","updateBrushExtent","exit","nodesEnter","labelEnter","payoffEnter","indicatorEnter","aggregatedPayoffEnter","probabilityToEnterEnter","nodesMerge","merge","isOptimal","nodesMergeT","drawNodeSymbol","nodeLabelPosition","labelMergeT","updateTextLines","payoffTspans","item","payoffTspansM","val","isNaN","attachPayoffTooltip","payoffT","nodePayoffPosition","aggregatedPayoffTspans","aggregatedPayoffTspansM","aggregatedPayoffT","nodeAggregatedPayoffPosition","attach","probabilityToEnterT","nodeProbabilityToEnterPosition","indicator","nodeIndicatorPosition","nodeContextMenu","button","cancelDrag","nodeUnfoldButtonPosition","payoffFiledName","value","number","lines","reverse","tspans","l","edgesContainer","edges","edgesEnter","probabilityEnter","edgesMerge","optimalClassName","edgesMergeT","edgeLineD","selectEdge","edgeLabelPosition","_","displayPayoff","payoffTextT","edgePayoffPosition","displayProbability","probabilityMerge","probabilityMergeT","edgeProbabilityPosition","raise","edgeContextMenu","POINTER_TOUCH","textsEnter","textsMerge","textsMergeT","replaceUrls","escapeHtml","textContextMenu","_this2","validationResults","validationResult","isValid","getOwnPropertyNames","objectIdToError","errors","nodeSelection","getNodeD3SelectionById","tooltipHtml","getValidationMessage","initArrowMarker","brush","extent","brushContainer","hoveredEdge","mainGroupTranslation","offset","m","mgt","closest","cp","closestPoint","invert","mainContextMenu","getNewChildLocation","injectNode","getInjectedNodeLocation","removeNode","removeNodes","selectedTexts","getSelectedTexts","removeTexts","notClearPrevSelection","cloneSubtree","copyNode","selectedRoots","findSubtreeRoots","copyNodes","_this3","nodesToAttach","_this4","toAttach","attached","attachSubtree","getAllDescendantNodes","_this5","then","getAllDescendantEdges","_this6","updateVisibility","getNodeD3Selection","getTextD3SelectionById","_this7","visibleOnly","selectedVisible","allSelected","apply","_toConsumableArray","descendants","_this8","clearSelectionBeforeSelect","skipCallback","_this9","titleValue","titleContainer","marginTop","desc","descriptionValue","withMargins","h","_index"],"mappings":"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","file":"sd-tree-designer.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import * as d3 from \"./d3\";\nimport {Templates} from \"./templates\";\nimport {i18n} from \"./i18n/i18n\";\nimport {Utils} from \"sd-utils\";\n\nexport class AppUtils {\n\n    static sanitizeHeight = function (height, container) {\n        return (height || parseInt(container.style('height'), 10) || 400);\n    };\n\n    static sanitizeWidth = function (width, container) {\n        return (width || parseInt(container.style('width'), 10) || 960);\n    };\n\n    static availableHeight = function (height, container, margin) {\n        return Math.max(0, AppUtils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n    };\n\n    static availableWidth = function (width, container, margin) {\n        return Math.max(0, AppUtils.sanitizeWidth(width, container) - margin.left - margin.right);\n    };\n\n    //places textString in textObj, adds an ellipsis if text can't fit in width\n    static placeTextWithEllipsis(textD3Obj, textString, width) {\n        var textObj = textD3Obj.node();\n        textObj.textContent = textString;\n\n        var margin = 0;\n        var ellipsisLength = 9;\n        //ellipsis is needed\n        if (textObj.getComputedTextLength() > width + margin) {\n            for (var x = textString.length - 3; x > 0; x -= 1) {\n                if (textObj.getSubStringLength(0, x) + ellipsisLength <= width + margin) {\n                    textObj.textContent = textString.substring(0, x) + \"...\";\n                    return true;\n                }\n            }\n            textObj.textContent = \"...\"; //can't place at all\n            return true;\n        }\n        return false;\n    }\n\n    static placeTextWithEllipsisAndTooltip(textD3Obj, textString, width, tooltip) {\n        var ellipsisPlaced = AppUtils.placeTextWithEllipsis(textD3Obj, textString, width);\n        if (ellipsisPlaced && tooltip) {\n            textD3Obj.on(\"mouseover\", function (d) {\n                tooltip.transition()\n                    .duration(200)\n                    .style(\"opacity\", .9);\n                tooltip.html(textString)\n                    .style(\"left\", (d3.event.pageX + 5) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            });\n\n            textD3Obj.on(\"mouseout\", function (d) {\n                tooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0);\n            });\n        }\n\n    }\n\n    static getFontSize(element) {\n        return window.getComputedStyle(element, null).getPropertyValue(\"font-size\");\n    }\n\n    static getTranslation(transform) {\n        // Create a dummy g for calculation purposes only. This will never\n        // be appended to the DOM and will be discarded once this function\n        // returns.\n        var g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n\n        // Set the transform attribute to the provided string value.\n        g.setAttributeNS(null, \"transform\", transform);\n\n        // consolidate the SVGTransformList containing all transformations\n        // to a single SVGTransform of type SVG_TRANSFORM_MATRIX and get\n        // its SVGMatrix.\n        var matrix = g.transform.baseVal.consolidate().matrix;\n\n        // As per definition values e and f are the ones for the translation.\n        return [matrix.e, matrix.f];\n    }\n\n\n    static closestPoint(pathNode, point) {\n        var pathLength = pathNode.getTotalLength(),\n            precision = 8,\n            best,\n            bestLength,\n            bestDistance = Infinity;\n\n        // linear scan for coarse approximation\n        for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n            if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n                best = scan, bestLength = scanLength, bestDistance = scanDistance;\n            }\n        }\n\n        // binary search for precise estimate\n        precision /= 2;\n        while (precision > 0.5) {\n            var before,\n                after,\n                beforeLength,\n                afterLength,\n                beforeDistance,\n                afterDistance;\n            if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n                best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n            } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n                best = after, bestLength = afterLength, bestDistance = afterDistance;\n            } else {\n                precision /= 2;\n            }\n        }\n\n        best = [best.x, best.y];\n        best.distance = Math.sqrt(bestDistance);\n        return best;\n\n        function distance2(p) {\n            var dx = p.x - point[0],\n                dy = p.y - point[1];\n            return dx * dx + dy * dy;\n        }\n    }\n\n    static growl(message, type='info', position='right', time = 2000){\n        var html = Templates.get('growl', {message:message, type:type})\n\n        var g = d3.select('body').selectOrAppend('div.sd-growl-list.'+position).append('div').html(html);\n        setTimeout(function(){\n            g.remove();\n        }, time)\n    }\n\n\n    static createElement(tag, attribs, parent) {\n        var el = document.createElement(tag);\n\n        if (attribs) {\n            AppUtils.deepExtend(el, attribs);\n        }\n        if (parent) {\n            parent.appendChild(el);\n        }\n        return el;\n    };\n\n    static removeElement(element) {\n        element.parentNode.removeChild(element);\n    }\n\n    static replaceUrls(text){\n        if(!text){\n            return text;\n        }\n        var urlRegexp = /((ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?)/\n\n        return text.replace(urlRegexp, '<a href=\"$1\" target=\"_blank\">$1</a>');\n    }\n\n    static escapeHtml(html)\n    {\n        var text = document.createTextNode(html);\n        var div = document.createElement('div');\n        div.appendChild(text);\n        return div.innerHTML;\n    }\n\n    static dispatchHtmlEvent(element, name){\n        if (\"createEvent\" in document) {\n            var evt = document.createEvent(\"HTMLEvents\");\n            evt.initEvent(name, false, true);\n            element.dispatchEvent(evt);\n        }\n        else\n            element.fireEvent(\"on\"+name);\n    }\n\n    static dispatchEvent(name, data){\n        var event;\n        try{\n            event = new  CustomEvent(name,{ 'detail': data });\n        }catch (e){ //IE\n            event = document.createEvent('CustomEvent');\n            event.initCustomEvent(name, false, false, data);\n        }\n        document.dispatchEvent(event);\n    }\n\n    static getValidationMessage(error){\n        if(Utils.isString(error)){\n            error = {name: error};\n        }\n        var key = 'validation.' + error.name;\n        return i18n.t(key, error.data);\n    }\n\n    static hide(selection){\n        selection.classed('sd-hidden', true);\n    }\n\n    static show(selection, show=true){\n        selection.classed('sd-hidden', !show);\n    }\n\n\n\n    static isHidden(el, exact = true) {\n        if(!el){\n            return true;\n        }\n        if(exact){\n            var style = window.getComputedStyle(el);\n            return (style.display === 'none')\n        }\n        return (el.offsetParent === null)\n    }\n\n    static getJSON(url, callback) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('get', url, true);\n        xhr.responseType = 'json';\n        xhr.onload = function () {\n            var status = xhr.status;\n            if (status == 200) {\n                callback(xhr.response, null);\n            } else {\n                callback(null, status);\n            }\n        };\n        xhr.send();\n    }\n}\n","import * as d3 from '../d3'\n\n/*based on:\n * github.com/patorjk/d3-context-menu */\n\nexport class ContextMenu {\n    openCallback;\n    closeCallback;\n\n    constructor(menu, opts) {\n        var self = this;\n\n        if (typeof opts === 'function') {\n            self.openCallback = opts;\n        } else {\n            opts = opts || {};\n            self.openCallback = opts.onOpen;\n            self.closeCallback = opts.onClose;\n        }\n\n        // create the div element that will hold the context menu\n        d3.selectAll('.d3-context-menu').data([1])\n            .enter()\n            .append('div')\n            .attr('class', 'd3-context-menu');\n\n        // close menu\n        d3.select('body').on('click.d3-context-menu', function () {\n            d3.select('.d3-context-menu').style('display', 'none');\n            if (self.closeCallback) {\n                self.closeCallback();\n            }\n        });\n\n        // this gets executed when a contextmenu event occurs\n        return function (data, index) {\n            var elm = this;\n\n            d3.selectAll('.d3-context-menu').html('');\n            var list = d3.selectAll('.d3-context-menu')\n                .on('contextmenu', function (d) {\n                    d3.select('.d3-context-menu').style('display', 'none');\n                    d3.event.preventDefault();\n                    d3.event.stopPropagation();\n                })\n                .append('ul');\n            list.selectAll('li').data(typeof menu === 'function' ? menu(data) : menu).enter()\n                .append('li')\n                .attr('class', function (d) {\n                    var ret = '';\n                    if (d.divider) {\n                        ret += ' is-divider';\n                    }\n                    if (d.disabled) {\n                        ret += ' is-disabled';\n                    }\n                    if (!d.action) {\n                        ret += ' is-header';\n                    }\n                    return ret;\n                })\n                .html(function (d) {\n                    if (d.divider) {\n                        return '<hr>';\n                    }\n                    if (!d.title) {\n                        console.error('No title attribute set. Check the spelling of your options.');\n                    }\n                    return (typeof d.title === 'string') ? d.title : d.title(data);\n                })\n                .on('click', function (d, i) {\n                    if (d.disabled) return; // do nothing if disabled\n                    if (!d.action) return; // headers have no \"action\"\n                    d.action(elm, data, index);\n                    d3.select('.d3-context-menu').style('display', 'none');\n\n                    if (self.closeCallback) {\n                        self.closeCallback();\n                    }\n                });\n\n            // the openCallback allows an action to fire before the menu is displayed\n            // an example usage would be closing a tooltip\n            if (self.openCallback) {\n                if (self.openCallback(data, index) === false) {\n                    return;\n                }\n            }\n\n            // display context menu\n            d3.select('.d3-context-menu')\n                .style('left', (d3.event.pageX - 2) + 'px')\n                .style('top', (d3.event.pageY - 2) + 'px')\n                .style('display', 'block');\n\n            d3.event.preventDefault();\n            d3.event.stopPropagation();\n        };\n    };\n\n    static hide() {\n        d3.select('.d3-context-menu').style('display', 'none');\n    }\n\n}\n","import {ContextMenu} from './context-menu'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class EdgeContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var menu = function (d) {\n\n            var menu = [];\n\n            menu.push({\n                title: i18n.t('contextMenu.edge.injectDecisionNode'),\n                action: function (elm, d, i) {\n                    treeDesigner.injectDecisionNode(d)\n                }\n            });\n            menu.push({\n                title: i18n.t('contextMenu.edge.injectChanceNode'),\n                action: function (elm, d, i) {\n                    treeDesigner.injectChanceNode(d)\n                }\n            });\n\n\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {domain as model} from 'sd-model'\nimport * as d3 from '../d3'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class MainContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var mousePosition = null;\n        var menu = function (d) {\n\n            var menu = [];\n            menu.push({\n                title: i18n.t('contextMenu.main.addDecisionNode'),\n                action: function (elm, d, i) {\n                    var newNode = new model.DecisionNode(mousePosition);\n                    treeDesigner.addNode(newNode)\n                }\n            });\n            menu.push({\n                title: i18n.t('contextMenu.main.addChanceNode'),\n                action: function (elm, d, i) {\n                    var newNode = new model.ChanceNode(mousePosition);\n                    treeDesigner.addNode(newNode)\n                }\n            });\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.main.addText'),\n                action: function (elm, d, i) {\n                    var newText = new model.Text(mousePosition);\n                    treeDesigner.addText(newText);\n                },\n\n            });\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.main.paste'),\n                action: function (elm, d, i) {\n                    treeDesigner.pasteToNewLocation(mousePosition);\n                },\n                disabled: !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\n\n            });\n            menu.push({divider: true});\n\n            menu.push({\n                title: i18n.t('contextMenu.main.selectAllNodes'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectAllNodes();\n                }\n            });\n            return menu;\n        };\n\n        super(menu, {onOpen: () => {\n            treeDesigner.clearSelection();\n            mousePosition = new model.Point(d3.mouse(treeDesigner.svg.node())).move(treeDesigner.getMainGroupTranslation(true));\n\n        }});\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {domain as model} from 'sd-model'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class NodeContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner, operationsForObject) {\n        var menu = function (d) {\n\n            var copyMenuItem = {\n                title: i18n.t('contextMenu.node.copy'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.copySelectedNodes();\n                }\n            };\n            var cutMenuItem = {\n                title: i18n.t('contextMenu.node.cut'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.cutSelectedNodes();\n                }\n            };\n            var pasteMenuItem = {\n                title: i18n.t('contextMenu.node.paste'),\n                action: function (elm, d, i) {\n                    treeDesigner.pasteToNode(d);\n                },\n                disabled: d.folded || !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\n\n            };\n            var deleteMenuItem = {\n                title: i18n.t('contextMenu.node.delete'),\n                action: function (elm, d, i) {\n\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.removeSelectedNodes();\n\n                }\n            };\n\n            var menu = [];\n            if (d.type == model.TerminalNode.$TYPE) {\n                menu = [copyMenuItem, cutMenuItem, deleteMenuItem];\n                NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\n                return menu;\n            }\n\n            if(!d.folded){\n                menu.push({\n                    title: i18n.t('contextMenu.node.addDecisionNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addDecisionNode(d)\n                    }\n                });\n                menu.push({\n                    title: i18n.t('contextMenu.node.addChanceNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addChanceNode(d)\n                    }\n                });\n                menu.push({\n                    title: i18n.t('contextMenu.node.addTerminalNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addTerminalNode(d)\n                    }\n                });\n                menu.push({divider: true});\n            }\n\n            menu.push(copyMenuItem);\n            menu.push(cutMenuItem);\n            menu.push(pasteMenuItem);\n            menu.push(deleteMenuItem);\n\n            NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.node.selectSubtree'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectSubTree(d, true);\n                }\n            });\n\n            if(!d.folded){\n                menu.push({\n                    title: i18n.t('contextMenu.node.fold'),\n                    action: function (elm, d, i) {\n                        treeDesigner.foldSubtree(d);\n                    }\n                });\n            }else{\n                menu.push({\n                    title: i18n.t('contextMenu.node.unfold'),\n                    action: function (elm, d, i) {\n                        treeDesigner.foldSubtree(d, false);\n                    }\n                });\n            }\n\n            if(operationsForObject){\n                var operations = operationsForObject(d);\n                if(operations.length) {\n                    menu.push({divider: true});\n                    operations.forEach(op=>{\n                        menu.push({\n                            title: i18n.t('contextMenu.node.'+op.name),\n                            action: function (elm, d, i) {\n                                treeDesigner.performOperation(d, op);\n                            },\n                            disabled: !op.canPerform(d)\n                        });\n                    })\n                }\n            }\n\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n\n    static addNodeConversionOptions(d, menu, treeDesigner){\n        var conversionOptions = NodeContextMenu.getNodeConversionOptions(d, treeDesigner);\n        if(conversionOptions.length){\n            menu.push({divider: true});\n            conversionOptions.forEach(o=>menu.push(o));\n\n        }\n    }\n\n    static getNodeConversionOptions(d, treeDesigner){\n        var options = [];\n\n        if(d.folded){\n            return [];\n        }\n\n        var allAllowedTypes = [model.DecisionNode.$TYPE, model.ChanceNode.$TYPE, model.TerminalNode.$TYPE];\n\n        if(!d.childEdges.length && d.$parent){\n            allAllowedTypes.filter(t=>t!==d.type).forEach(type=>{\n                options.push(NodeContextMenu.getNodeConversionOption(type, treeDesigner))\n            })\n        }else{\n            if(d instanceof model.DecisionNode){\n                options.push(NodeContextMenu.getNodeConversionOption(model.ChanceNode.$TYPE, treeDesigner))\n            }else{\n                options.push(NodeContextMenu.getNodeConversionOption(model.DecisionNode.$TYPE, treeDesigner))\n            }\n        }\n        return options;\n    }\n\n    static getNodeConversionOption(typeToConvertTo, treeDesigner){\n        return {\n            title: i18n.t('contextMenu.node.convert.'+typeToConvertTo),\n            action: function (elm, d, i) {\n                treeDesigner.convertNode(d, typeToConvertTo);\n            },\n        }\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class TextContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var menu = function (d) {\n\n\n            var deleteMenuItem = {\n                title: i18n.t('contextMenu.text.delete'),\n                action: function (elm, d, i) {\n\n                    treeDesigner.selectText(d, true, true);\n                    treeDesigner.removeSelectedTexts()\n\n                }\n            };\n            var menu = [];\n            menu.push(deleteMenuItem);\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import * as d3 from './d3'\n\nexport class D3Extensions {\n\n    static extend() {\n\n        d3.selection.prototype.enter.prototype.insertSelector =\n            d3.selection.prototype.insertSelector = function (selector, before) {\n                return D3Extensions.insertSelector(this, selector, before);\n            };\n\n\n        d3.selection.prototype.enter.prototype.appendSelector =\n            d3.selection.prototype.appendSelector = function (selector) {\n                return D3Extensions.appendSelector(this, selector);\n            };\n\n        d3.selection.prototype.enter.prototype.selectOrAppend =\n            d3.selection.prototype.selectOrAppend = function (selector) {\n                return D3Extensions.selectOrAppend(this, selector);\n            };\n\n        d3.selection.prototype.enter.prototype.selectOrInsert =\n            d3.selection.prototype.selectOrInsert = function (selector, before) {\n                return D3Extensions.selectOrInsert(this, selector, before);\n            };\n\n\n    }\n\n    static insertOrAppendSelector(parent, selector, operation, before) {\n\n        var selectorParts = selector.split(/([\\.\\#])/);\n        var element = parent[operation](selectorParts.shift(), before);//\":first-child\"\n\n        while (selectorParts.length > 1) {\n            var selectorModifier = selectorParts.shift();\n            var selectorItem = selectorParts.shift();\n            if (selectorModifier === \".\") {\n                element = element.classed(selectorItem, true);\n            } else if (selectorModifier === \"#\") {\n                element = element.attr('id', selectorItem);\n            }\n        }\n        return element;\n    }\n\n    static insertSelector(parent, selector, before) {\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"insert\", before);\n    }\n\n    static appendSelector(parent, selector) {\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"append\");\n    }\n\n    static selectOrAppend(parent, selector, element) {\n        var selection = parent.select(selector);\n        if (selection.empty()) {\n            if (element) {\n                return parent.append(element);\n            }\n            return D3Extensions.appendSelector(parent, selector);\n\n        }\n        return selection;\n    };\n\n    static selectOrInsert(parent, selector, before) {\n        var selection = parent.select(selector);\n        if (selection.empty()) {\n            return D3Extensions.insertSelector(parent, selector, before);\n        }\n        return selection;\n    };\n}\n","export * from 'd3-dispatch';\nexport * from 'd3-scale';\nexport * from 'd3-selection';\nexport * from 'd3-shape'\nexport * from 'd3-drag';\nexport * from 'd3-brush'\nexport * from 'd3-array'\nexport * from 'd3-hierarchy'\nexport * from 'd3-time-format'\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\n            \"addText\": \"Text hinzufügen \",\n            \"paste\": \"Einfügen\",\n            \"selectAllNodes\": \"Alle Knoten auswählen\"\n        },\n        \"node\":{\n            \"copy\": \"Kopieren\",\n            \"cut\": \"Ausschneiden\",\n            \"paste\": \"Einfügen\",\n            \"delete\": \"Löschen\",\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\n            \"addTerminalNode\": \"Endknotten hinzufügen\",\n            \"convert\":{\n                \"decision\": \"Als Entscheidungsknoten\",\n                \"chance\": \"Als Zufall Knoten\",\n                \"terminal\": \"Als Endknoten\"\n            },\n            \"selectSubtree\": \"Teilbaum wählen\",\n            \"fold\": \"Teilbaum falten\",\n            \"unfold\": \"Teilbaum entfalten\",\n\n            \"flipSubtree\": \"Teilbaum umdrehen\",\n            \"payoffsTransformation\": \"Auszahlungen transformieren\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Entscheidungsknoten Injizieren\",\n            \"injectChanceNode\": \"Zufall Knoten Injizieren\"\n        },\n        \"text\":{\n            \"delete\": \"Löschen\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Pfad, der nicht mit dem Endknoten endet\",\n        \"probabilityDoNotSumUpTo1\": \"Die Summe der Wahrscheinlichkeiten ist nicht gleich 1\",\n        \"invalidProbability\": \"Ungültige Wahrscheinlichkeit im Zweig #{{number}}\",\n        \"invalidPayoff\": \"Ungültige Auszahlung in Zweig #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Auswahlbürste deaktiviert\",\n        \"brushEnabled\": \"Auswahlbürste aktiviert\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Auszahlung {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Aggregierte Auszahlung {{number}}\",\n                \"named\": \"Aggregierte {{name}}\"\n            },\n            \"probabilityToEnter\": \"Wahrscheinlichkeit\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Auszahlung {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Wahrscheinlichkeit: {{value}}\"\n        }\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Add Decision Node\",\n            \"addChanceNode\": \"Add Chance Node\",\n            \"addText\": \"Add Text\",\n            \"paste\": \"Paste\",\n            \"selectAllNodes\": \"Select all nodes\"\n        },\n        \"node\":{\n            \"copy\": \"Copy\",\n            \"cut\": \"Cut\",\n            \"paste\": \"Paste\",\n            \"delete\": \"Delete\",\n            \"addDecisionNode\": \"Add Decision Node\",\n            \"addChanceNode\": \"Add Chance Node\",\n            \"addTerminalNode\": \"Add Terminal Node\",\n            \"convert\":{\n                \"decision\": \"As Decision Node\",\n                \"chance\": \"As Chance Node\",\n                \"terminal\": \"As Terminal Node\"\n            },\n            \"selectSubtree\": \"Select subtree\",\n            \"fold\": \"Fold subtree\",\n            \"unfold\": \"Unfold subtree\",\n            \"flipSubtree\": \"Flip subtree\",\n            \"payoffsTransformation\": \"Transform payoffs\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Inject Decision Node\",\n            \"injectChanceNode\": \"Inject Chance Node\"\n        },\n        \"text\":{\n            \"delete\": \"Delete\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Path not ending with terminal node\",\n        \"probabilityDoNotSumUpTo1\": \"Probabilities do not sum up to 1\",\n        \"invalidProbability\": \"Invalid probability in edge #{{number}}\",\n        \"invalidPayoff\": \"Invalid payoff in edge #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Selection brush disabled\",\n        \"brushEnabled\": \"Selection brush enabled\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Payoff {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Aggregated Payoff {{number}}\",\n                \"named\": \"Aggregated {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probability to enter\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Payoff {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probability: {{value}}\"\n        }\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Ajouter noud de décision\",\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\n            \"addText\": \"Ajouter du texte\",\n            \"paste\": \"Coller\",\n            \"selectAllNodes\": \"Sélectionner tous les nouds\"\n        },\n        \"node\":{\n            \"copy\": \"Copie\",\n            \"cut\": \"Couper\",\n            \"paste\": \"Coller\",\n            \"delete\": \"Effacer\",\n            \"addDecisionNode\": \"Ajouter noud de décision\",\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\n            \"addTerminalNode\": \"Ajouter un noeud terminal\",\n            \"convert\":{\n                \"decision\": \"Comme noud de décision\",\n                \"chance\": \"Comme noud aléatoire\",\n                \"terminal\": \"Comme un noeud terminal\"\n            },\n            \"selectSubtree\": \"Sélectionner une sous-arborescence\",\n            \"fold\": \"Plier sous-arbre\",\n            \"unfold\": \"Déplier arbre sous-arbre\",\n            \"flipSubtree\": \"Basculer sous-arbre\",\n            \"payoffsTransformation\": \"Transformez les gains\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Injecter un noeud de décision\",\n            \"injectChanceNode\": \"Injecter un noeud de chance\"\n        },\n        \"text\":{\n            \"delete\": \"Effacer\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Parcours non terminé par noeud terminal\",\n        \"probabilityDoNotSumUpTo1\": \"La somme des probabilités n'est pas 1 ou plus\",\n        \"invalidProbability\": \"Probabilité invalide - le bord #{{number}}\",\n        \"invalidPayoff\": \"Avantage invalide - le bord #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Brosse de sélection désactivée\",\n        \"brushEnabled\": \"Brosse de sélection activée\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Avantage {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Avantage agrégé {{number}}\",\n                \"named\": \"Agrégé  {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probabilité d'entrée\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Avantage {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probabilité: {{value}}\"\n        }\n    }\n}\n","import i18next from 'i18next';\nimport * as en from './en.json'\nimport * as pl from './pl.json'\nimport * as it from './it.json'\nimport * as de from './de.json'\nimport * as fr from './fr.json'\n\nexport class i18n{\n\n    static $instance;\n    static language;\n\n    static init(lng){\n        i18n.language = lng;\n        let resources = {\n            en: {\n                translation: en\n            },\n            pl: {\n                translation: pl\n            },\n            it: {\n                translation: it\n            },\n            de: {\n                translation: de\n            },\n            fr: {\n                translation: fr\n            }\n        };\n        i18n.$instance = i18next.createInstance({\n            lng: lng,\n            fallbackLng: 'en',\n            resources: resources\n        }, (err, t) => {\n        });\n    }\n\n    static t(key, opt){\n        return i18n.$instance.t(key, opt)\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\n            \"addText\": \"Aggiungi testo\",\n            \"paste\": \"Incolla\",\n            \"selectAllNodes\": \"Seleziona tutti i nodi\"\n        },\n        \"node\":{\n            \"copy\": \"Copia\",\n            \"cut\": \"Taglia\",\n            \"paste\": \"Incolla\",\n            \"delete\": \"Cancella\",\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\n            \"addTerminalNode\": \"Aggiungi un nodo terminale\",\n            \"convert\":{\n                \"decision\": \"Come Decision Node\",\n                \"chance\": \"Come Chance Node\",\n                \"terminal\": \"Come Terminal Node\"\n            },\n            \"selectSubtree\": \"Seleziona Sotto-albero\",\n            \"fold\": \"Piega sotto-albero\",\n            \"unfold\": \"Dispiegarsi sotto-albero\",\n            \"flipSubtree\": \"Ribalta sotto-albero\",\n            \"payoffsTransformation\": \"Trasforma i profitti\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Inietta nodo di decisione\",\n            \"injectChanceNode\": \"Inietta nodo opportunità\"\n        },\n        \"text\":{\n            \"delete\": \"Cancella\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Percorso senza nodo terminale\",\n        \"probabilityDoNotSumUpTo1\": \"La somma delle probabilità è diversa da 1\",\n        \"invalidProbability\": \"Probabilità non valida - bordo #{{number}}\",\n        \"invalidPayoff\": \"Saldo non valido - bordo #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Selezione pennello disabilitata\",\n        \"brushEnabled\": \"Selezione pennello abilitata\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Saldo {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Saldo aggregato {{number}}\",\n                \"named\": \"Aggregato {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probabilità da inserire\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Saldo {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probabilità: {{value}}\"\n        }\n    }\n}\n","module.exports={\n\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\n            \"addText\": \"Dodaj Tekst\",\n            \"paste\": \"Wklej\",\n            \"selectAllNodes\": \"Zaznacz wszystkie węzły\"\n        },\n        \"node\":{\n            \"copy\": \"Kopiuj\",\n            \"cut\": \"Wytnij\",\n            \"paste\": \"Wklej\",\n            \"delete\": \"Usuń\",\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\n            \"addTerminalNode\": \"Dodaj Węzeł Końcowy\",\n            \"convert\":{\n                \"decision\": \"Jako Węzeł Decyzyjny\",\n                \"chance\": \"Jako Węzeł Losowy\",\n                \"terminal\": \"Jako Węzeł Końcowy\"\n            },\n            \"selectSubtree\": \"Zaznacz poddrzewo\",\n            \"fold\": \"Zwiń poddrzewo\",\n            \"unfold\": \"Rozwiń poddrzewo\",\n            \"flipSubtree\": \"Przewróć poddrzewo\",\n            \"payoffsTransformation\": \"Przekształć wypłaty\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Wstrzyknij Węzeł Decyzyjny\",\n            \"injectChanceNode\": \"Wstrzyknij Węzeł Losowy\"\n        },\n        \"text\":{\n            \"delete\": \"Usuń\"\n        }\n    },\n\n    \"validation\":{\n        \"incompletePath\": \"Ostatnim węzłem w ścieżce powinien być Węzeł Końcowy\",\n        \"probabilityDoNotSumUpTo1\": \"Prawdopodobieństwa nie sumują sie do 1\",\n        \"invalidProbability\": \"Niepoprawne prawdopodobieństwo na krawędzi #{{number}}\",\n        \"invalidPayoff\": \"Niepoprawna wypłata na krawędzi #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Zaznaczanie wyłączone\",\n        \"brushEnabled\": \"Zaznaczanie włączone\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Wypłata {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Zagregowana wypłata {{number}}\",\n                \"named\": \"Zagregowana {{name}}\"\n            },\n            \"probabilityToEnter\": \"Prawdopodobieństwo wejścia\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Wypłata {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Prawdopodobieństwo: {{value}}\"\n        }\n    }\n}\n","import {D3Extensions} from './d3-extensions'\nD3Extensions.extend();\n\nexport * from './tree-designer'\nexport * from './app-utils'\nexport * from './templates'\nexport * from './tooltip'\nexport * from './d3-extensions'\nexport {default as d3} from './d3'\n\n\n","import {Utils} from 'sd-utils'\nimport {domain as model} from 'sd-model'\nimport * as d3 from './d3'\nimport circleSymbol from './symbols/circle'\nimport triangleSymbol from './symbols/triangle'\nimport {AppUtils} from \"./app-utils\";\n\n/*Tree layout manager*/\nexport class Layout{\n\n    treeDesigner;\n    data;\n    config;\n\n    nodeTypeToSymbol = {\n        'decision': d3.symbolSquare,\n        'chance': circleSymbol,\n        \"terminal\": triangleSymbol\n    };\n\n    static MANUAL_LAYOUT_NAME = 'manual';\n\n\n    onAutoLayoutChanged=[];\n\n    nodeTypeOrder = {\n        'decision' : 0,\n        'chance': 0,\n        'terminal': 1\n    };\n\n    treeMargin = 50;\n    targetSymbolSize={};\n    nodeSeparation = (a, b) => a.parent === b.parent ? 1 : 1.2\n\n    constructor(treeDesigner, data, config){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n        this.config = config;\n\n    }\n\n    update(node){\n        if(node && node.$parent){\n            node.$parent.childEdges.sort((a,b)=>a.childNode.location.y - b.childNode.location.y)\n        }\n        if(!this.isManualLayout()){\n            return this.autoLayout(this.config.type, true);\n        }\n        if(node){\n            this.moveNodeToEmptyPlace(node);\n        }else{\n            this.treeDesigner.redraw(true);\n        }\n    }\n\n    isManualLayout(){\n        return this.config.type === Layout.MANUAL_LAYOUT_NAME;\n    }\n\n    getNewChildLocation(parent){\n        if(!parent){\n            return new model.Point(this.getNodeMinX(), this.getNodeMinY())\n        }\n        var x = parent.location.x + this.config.gridWidth;\n        var y = parent.location.y;\n        if(parent.childEdges.length){\n            y = parent.childEdges[parent.childEdges.length-1].childNode.location.y+1;\n        }\n\n        return new model.Point(x, y)\n    }\n\n    getInjectedNodeLocation(edge){\n\n        var p = edge.$linePoints[2];\n\n        return new model.Point(p[0], p[1])\n    }\n\n    moveNodeToEmptyPlace(node, redrawIfChanged=true){\n        var positionMap = {};\n        var self = this;\n        node.location.x = Math.max(this.getNodeMinX(node), node.location.x);\n        node.location.y = Math.max(this.getNodeMinY(node), node.location.y);\n\n\n        this.nodesSortedByX = this.data.nodes.slice();\n        this.nodesSortedByX.sort((a,b)=>a.location.x - b.location.x);\n\n        function findCollidingNode(node, location){\n            return Utils.find(self.nodesSortedByX, n=>{\n                if(node == n){\n                    return false;\n                }\n\n                var margin = self.config.nodeSize/3;\n                var x = n.location.x;\n                var y = n.location.y;\n\n                return (location.x - margin <= x && location.x + margin >= x\n                    && location.y - margin <= y && location.y + margin >= y)\n            });\n        }\n\n        var stepX = this.config.nodeSize/2;\n        var stepY = this.config.nodeSize+10;\n        var stepXsameParent = 0;\n        var stepYsameParent = 75;\n        var changed = false;\n        var colidingNode;\n        var newLocation = new model.Point(node.location);\n        while(colidingNode = findCollidingNode(node, newLocation)){\n            changed=true;\n            var sameParent = node.$parent && colidingNode.$parent && node.$parent===colidingNode.$parent;\n            if(sameParent){\n                newLocation.move(stepXsameParent, stepYsameParent);\n            }else{\n                newLocation.move(stepX, stepY);\n            }\n        }\n        if(changed){\n            node.moveTo(newLocation.x,newLocation.y, true);\n            if(redrawIfChanged){\n                this.treeDesigner.redraw(true);\n            }\n        }\n    }\n\n    disableAutoLayout(){\n        this.config.type = Layout.MANUAL_LAYOUT_NAME;\n        this._fireOnAutoLayoutChangedCallbacks();\n    }\n\n\n    nodeSymbolSize = {};\n    drawNodeSymbol(path, transition){\n\n        var self = this;\n        var nodeSize = this.config.nodeSize;\n        this.nodeSymbol = d3.symbol().type(d=> self.nodeTypeToSymbol[d.type])\n            .size(d=>self.nodeSymbolSize[d.id] ? Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", 64) : 64);\n\n        path\n            .each(function (d) {\n                var path = d3.select(this);\n                var prev = path.attr(\"d\");\n                if(!prev){\n                    path.attr(\"d\", self.nodeSymbol);\n                }\n                var size = Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\");\n                if(!size){\n                    var box = path.node().getBBox();\n                    var error = Math.min(nodeSize / box.width, nodeSize / box.height);\n                    size = error * error * (self.nodeSymbolSize[d.id]||64);\n                    Utils.set(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", size);\n                }\n                if(transition){\n                    path =  path.transition();\n\n                }else{\n                    self.nodeSymbolSize[d.id] = size;\n                }\n                path.attr(\"d\", self.nodeSymbol);\n                if(transition){\n                    self.nodeSymbolSize[d.id] = size;\n                }\n            });\n    }\n\n    nodeLabelPosition(selection) {\n        return selection\n            .attr('x', 0)\n            .attr('y', -this.config.nodeSize / 2 - 7)\n    }\n\n    nodePayoffPosition(selection) {\n        return Layout.setHangingPosition(selection)\n            .attr('x', 0)\n            .attr('y', this.config.nodeSize / 2 + 7)\n            .attr('text-anchor', 'middle')\n    }\n\n    nodeAggregatedPayoffPosition(selection) {\n        var x = this.config.nodeSize / 2 + 7;\n        var self = this;\n        selection\n            .attr('x', x)\n            .attr('y', function(d){\n                let fontSize = parseInt(AppUtils.getFontSize(this));\n                let items = d.displayValue('aggregatedPayoff');\n                let number = Utils.isArray(items) ? items.filter(it=>it !== undefined).length : 1;\n                if(number>1){\n                    return -this.getBBox().height/2 + fontSize/2;\n                }\n                return -Math.max(2, 1.8* self.config.nodeSize/fontSize);\n            });\n\n        selection.selectAll('tspan').attr('x', x);\n        return selection;\n            // .attr('text-anchor', 'middle')\n            // .attr('dominant-baseline', 'hanging')\n    }\n\n    nodeProbabilityToEnterPosition(selection) {\n        var self = this;\n\n        return Layout.setHangingPosition(selection)\n            .attr('x', this.config.nodeSize / 2 + 7)\n            .attr('y', function(d){\n                let fontSize = parseInt(AppUtils.getFontSize(this));\n                let aggregatedPayoffs = d.displayValue('aggregatedPayoff');\n                let aggregatedPayoffsNumber = Utils.isArray(aggregatedPayoffs) ? aggregatedPayoffs.filter(it=>it !== undefined).length : 1;\n                if(aggregatedPayoffsNumber>1){\n\n                    return fontSize*0.6\n                }\n\n                return Math.max(2, 1.8* self.config.nodeSize/fontSize);\n            })\n            // .attr('text-anchor', 'middle')\n            // .attr('dominant-baseline', 'central')\n    }\n\n    nodeIndicatorPosition(selection) {\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 8)\n            .attr('y', - this.config.nodeSize/2)\n            .attr('dominant-baseline', 'central')\n            .attr('text-anchor', 'middle')\n    }\n\n    nodeUnfoldButtonPosition(selection) {\n\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 5)\n            .attr('y', 0)\n            .attr('dominant-baseline', 'central')\n    }\n\n    edgeLineD(edge){\n        var line = d3.line()\n            .x(d=> d[0])\n            .y(d=> d[1]);\n        // .curve(d3.curveCatmullRom.alpha(0.5));\n\n\n        var parentNode = edge.parentNode;\n        var childNode = edge.childNode;\n\n        var dX = childNode.location.x - parentNode.location.x;\n        var dY = childNode.location.y - parentNode.location.y;\n\n        var sign = dX>=0 ? 1 : -1;\n\n        var slantStartXOffset = Math.min(dX/2, this.config.nodeSize/2+10);\n        var slantWidth = Math.min(this.config.edgeSlantWidthMax, Math.max(dX/2 - slantStartXOffset, 0));\n\n        var point1 = [parentNode.location.x +this.config.nodeSize/2 + 1, parentNode.location.y];\n        var point2 = [Math.max(parentNode.location.x+slantStartXOffset, point1[0]), parentNode.location.y];\n        var point3 = [parentNode.location.x+slantStartXOffset+slantWidth, childNode.location.y];\n        var point4 = [childNode.location.x - (sign*(Math.max(0, Math.min(this.config.nodeSize/2+8, dX/2)))), childNode.location.y];\n        // var point2 = [parentNode.location.x+dX/2-slantWidth/2, parentNode.location.y];\n        // var point3 = [childNode.location.x-(dX/2-slantWidth/2), childNode.location.y];\n\n        edge.$linePoints = [point1, point2, point3, point4];\n        return line(edge.$linePoints);\n    }\n\n    edgePayoffPosition(selection) {\n        Layout.setHangingPosition(selection)\n            .attr('x', d=>d.$linePoints[2][0] + 2)\n            .attr('y', d=>d.$linePoints[2][1] + 7);\n\n        selection.selectAll('tspan').attr('x', function(d){\n            return d3.select(this.parentNode).datum().$linePoints[2][0] + 2\n        });\n        return selection;\n\n    }\n\n    edgeLabelPosition(selection) {\n        return selection\n            .attr('transform', d=>'translate('+(d.$linePoints[2][0] + 2)+','+(d.$linePoints[2][1] - 7)+')')\n            // .attr('x', d=>d.$linePoints[2][0] + 2)\n            // .attr('y', d=>d.$linePoints[2][1] - 7)\n\n    }\n\n    edgeProbabilityPosition(selection) {\n        return Layout.setHangingPosition(selection)\n            .attr('x', function (d) {\n                var len = this.getComputedTextLength();\n                var min = d.$linePoints[2][0] + 2 + this.previousSibling.childNodes[0].getComputedTextLength() + 7 + len;\n                return Math.max(min, d.$linePoints[3][0] - 8);\n            })\n            .attr('y', d=>d.$linePoints[2][1] + 7)\n    }\n\n    getMinMarginBetweenNodes(){\n      return this.config.nodeSize + 30;\n    }\n\n    getTextMinX(d){\n        let minX = 0;\n        if(d){\n            let bb = this.treeDesigner.getTextD3Selection(d).select('text').node().getBBox();\n            if (bb.x < 0) {\n                minX -= bb.x;\n            }\n        }\n        return minX;\n    }\n\n    getTextMinY(d){\n        let minY = 0;\n        if(d){\n            let bb = this.treeDesigner.getTextD3Selection(d).select('text').node().getBBox();\n            if (bb.y < 0) {\n                minY -= bb.y;\n            }\n        }\n        return minY;\n    }\n\n    getTextMaxX(d){\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n\n    getNodeMinX(d){\n        var self = this;\n        if(d && d.$parent){// && !self.isNodeSelected(d.$parent)\n            return d.$parent.location.x + self.getMinMarginBetweenNodes();\n        }\n        return self.config.nodeSize/2;\n    }\n\n    getNodeMinY(d){\n        return this.config.nodeSize/2;\n    }\n\n    getNodeMaxX(d){\n        var self = this;\n\n        if(d && d.childEdges.length){\n            return d3.min(d.childEdges, e=>!e.childNode.$hidden ? e.childNode.location.x : 9999999)-self.getMinMarginBetweenNodes();\n        }\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    setGridWidth(width, withoutStateSaving){\n        var self=this;\n        if(this.config.gridWidth===width){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    gridWidth: self.config.gridWidth\n                },\n                onUndo: (data)=> {\n                    self.setGridWidth(data.gridWidth, true);\n                },\n                onRedo: (data)=> {\n                    self.setGridWidth(width, true);\n                }\n            });\n        }\n\n        this.config.gridWidth=width;\n        this.update();\n    }\n\n    setGridHeight(gridHeight, withoutStateSaving){\n        var self=this;\n        if(this.config.gridHeight===gridHeight){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    gridHeight: self.config.gridHeight\n                },\n                onUndo: (data)=> {\n                    self.setGridHeight(data.gridHeight, true);\n                },\n                onRedo: (data)=> {\n                    self.setGridHeight(gridHeight, true);\n                }\n            });\n        }\n\n        this.config.gridHeight=gridHeight;\n        this.update();\n    }\n\n    setNodeSize(nodeSize, withoutStateSaving){\n        var self=this;\n        if(this.config.nodeSize===nodeSize){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    nodeSize: self.config.nodeSize\n                },\n                onUndo: (data)=> {\n                    self.setNodeSize(data.nodeSize, true);\n                },\n                onRedo: (data)=> {\n                    self.setNodeSize(nodeSize, true);\n                }\n            });\n        }\n\n        this.config.nodeSize=nodeSize;\n        this.update();\n        if(this.isManualLayout()){\n            this.fitNodesInPlottingRegion(self.data.getRoots());\n            this.treeDesigner.redraw(true);\n        }\n    }\n\n    setEdgeSlantWidthMax(width, withoutStateSaving){\n        var self=this;\n        if(this.config.edgeSlantWidthMax===width){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    edgeSlantWidthMax: self.config.edgeSlantWidthMax\n                },\n                onUndo: (data)=> {\n                    self.setEdgeSlantWidthMax(data.edgeSlantWidthMax, true);\n                },\n                onRedo: (data)=> {\n                    self.setEdgeSlantWidthMax(width, true);\n                }\n            });\n        }\n\n        this.config.edgeSlantWidthMax=width;\n        this.treeDesigner.redraw(true);\n    }\n\n    autoLayout(type, withoutStateSaving){\n        var self=this;\n\n\n\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    newLayout: type,\n                    currentLayout: self.config.type\n                },\n                onUndo: (data)=> {\n                    self.config.type = data.currentLayout;\n                    self._fireOnAutoLayoutChangedCallbacks();\n                },\n                onRedo: (data)=> {\n                    self.autoLayout(data.newLayout, true);\n                }\n            });\n        }\n        this.config.type = type;\n        if(!this.data.nodes.length){\n            this._fireOnAutoLayoutChangedCallbacks();\n            return;\n        }\n\n        var prevTreeMaxY = self.getNodeMinY();\n        this.data.getRoots().forEach(r=>{\n            var root = d3.hierarchy(r, d=>{\n                return d.childEdges.filter(e=>!e.$hidden).map(e=>e.childNode);\n            });\n\n            // root.sort((a,b)=>self.nodeTypeOrder[a.data.type]-self.nodeTypeOrder[b.data.type]);\n            root.sort((a,b)=>a.data.location.y - b.data.location.y);\n\n\n            var layout;\n            if(type==='cluster'){\n                layout = d3.cluster();\n            }else{\n                layout = d3.tree();\n            }\n            layout.nodeSize([self.config.gridHeight, self.config.gridWidth]);\n            layout.separation(self.nodeSeparation);\n\n            layout(root);\n            var minY = 999999999;\n            root.each(d=>{\n                minY = Math.min(minY, d.x);\n            });\n\n            var dy = root.x - minY + prevTreeMaxY;\n            var dx = self.getNodeMinX();\n            var maxY=0;\n            root.each(d=>{\n                d.data.location.x = d.y + dx;\n                d.data.location.y = d.x + dy;\n\n                maxY = Math.max(maxY, d.data.location.y);\n            });\n\n            prevTreeMaxY = maxY + self.config.nodeSize+self.treeMargin;\n        });\n\n\n        // this.transition = true;\n        this.treeDesigner.redraw(true);\n        // this.transition = false;\n\n        this._fireOnAutoLayoutChangedCallbacks();\n        return this;\n    }\n\n    fitNodesInPlottingRegion(nodes){\n        var self = this;\n        var topY = d3.min(nodes, n=>n.location.y);\n        var minY = self.getNodeMinY();\n        var dy = topY - minY;\n\n        var minX = d3.min(nodes, n=>n.location.x);\n        var dx = minX - self.getNodeMinX();\n\n        if(dy<0 ||  dx<0){\n            nodes.forEach(n=>n.move(-dx, -dy));\n        }\n    }\n\n    moveNodes(nodes, dx, dy, pivot){\n        var self = this;\n        var limit = self.config.limitNodePositioning;\n        if(limit){\n            if(dx<0){\n                nodes.sort((a,b)=>a.location.x-b.location.x);\n            }else{\n                nodes.sort((a,b)=>b.location.x-a.location.x);\n            }\n        }\n\n\n        var minY = d3.min(nodes, d=>d.location.y);\n        if(minY + dy < self.getNodeMinY()){\n            dy = self.getNodeMinY() - minY;\n        }\n\n        nodes.forEach(d=>{\n            if(limit){\n                Layout.backupNodeLocation(d);\n                var minX = self.getNodeMinX(d);\n                var maxX = self.getNodeMaxX(d);\n\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\n                d.location.y += dy;\n            }else{\n                d.location.x +=dx;\n                d.location.y += dy;\n            }\n\n        });\n\n\n        var revertX = pivot && self.config.limitNodePositioning && (pivot.location.x === pivot.$location.x);\n\n        nodes.forEach(d=>{\n            if(revertX){\n                d.location.x = d.$location.x;\n            }\n            self.treeDesigner.updateNodePosition(d);\n        });\n\n\n    }\n\n    moveTexts(texts, dx, dy){\n        let self = this;\n        let limit = self.config.limitTextPositioning;\n        if(limit){\n            if(dx<0){\n                texts.sort((a,b)=>a.location.x-b.location.x);\n            }else{\n                texts.sort((a,b)=>b.location.x-a.location.x);\n            }\n        }\n\n\n\n        texts.forEach(d=>{\n\n\n\n\n            if(limit){\n                let minX = self.getTextMinX(d);\n                let maxX = self.getTextMaxX(d);\n                let minY = self.getTextMinY(d);\n\n\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\n                d.location.y = Math.max(d.location.y+dy, minY);\n\n            }else{\n                d.location.move(dx, dy);\n            }\n            self.treeDesigner.updateTextPosition(d);\n\n        });\n\n    }\n\n    static backupNodeLocation(node) {\n        node.$location = new model.Point(node.location);\n    }\n\n    _fireOnAutoLayoutChangedCallbacks(){\n        this.onAutoLayoutChanged.forEach(c=>c(this.config.type));\n    }\n\n    static setHangingPosition(selection){\n        // window.setTimeout(function(){\n        //     selection.each(function(){\n        //         var h =  this.getBBox().height;\n        //         d3.select(this).attr('dy', h);\n        //     });\n        // },0);\n\n        if(AppUtils.isHidden(selection.node())){ // setting hanging position of hidden elements fails on firefox\n            return selection;\n        }\n\n\n        selection.each(function(){\n            var h =  this.getBBox().height;\n            d3.select(this).attr('dy', '0.75em');\n        });\n\n        return selection;\n    }\n\n}\n\n\n","import {AppUtils} from './app-utils'\nimport * as d3 from './d3'\nimport {ContextMenu} from './context-menu/context-menu'\n\nexport class NodeDragHandler{\n\n    treeDesigner;\n    data;\n    config;\n\n    drag;\n    stateSnapshot = null;\n\n\n    constructor(treeDesigner, data){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n\n        var self = this;\n        this.drag = d3.drag()\n            .subject(function(d) {\n                if(d==null){\n                    return  {\n                        x: event.x,\n                        y: event.y\n                    };\n                }\n                var t = d3.select(this);\n                return {\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\n                };\n            })\n            .on(\"start\", function(d){\n                self.dragStarted.call(this,d, self)\n            })\n            .on(\"drag\", function (d) {\n                self.onDrag.call(this, d, self);\n            })\n            .on(\"end\", function (d) {\n                self.dragEnded.call(this, d, self);\n            })\n    }\n\n\n    dragStarted(d,self) {\n        if(self.ignoreDrag){\n            self.ignoreDrag=false;\n            self.ignoredDrag=true;\n            return;\n        }\n        self.ignoredDrag=false;\n        self.stateSnapshot = self.data.createStateSnapshot();\n\n        // self.treeDesigner.layout.disableAutoLayout();\n        ContextMenu.hide();\n        var node = d3.select(this);\n        if(!node.classed(\"selected\")){\n            self.treeDesigner.clearSelection();\n        }\n\n        self.treeDesigner.selectNode(d);\n        node.classed(\"selected dragging\", true);\n        self.selectedNodes = self.treeDesigner.getSelectedNodes(true);\n        self.prevDragEvent = d3.event;\n        self.dragEventCount = 0;\n    }\n\n    onDrag(draggedNode, self){\n        if(self.ignoredDrag){\n            return;\n        }\n\n        if(self.dragEventCount===2 && self.stateSnapshot){\n            self.data.saveStateFromSnapshot(self.stateSnapshot); // TODO save only if something has really changed\n            self.stateSnapshot = null;\n        }\n        self.dragEventCount++;\n        if(self.selectedNodes.length>5 && self.dragEventCount%2!==1){\n            return;\n        }\n\n        var dx = d3.event.x - self.prevDragEvent.x;\n        var dy = d3.event.y- self.prevDragEvent.y;\n        self.treeDesigner.layout.moveNodes(self.selectedNodes, dx, dy, draggedNode);\n\n\n        self.prevDragEvent = d3.event;\n        self.treeDesigner.redrawEdges();\n        self.treeDesigner.updatePlottingRegionSize();\n    }\n\n    dragEnded(draggedNode, self){\n        var node = d3.select(this).classed(\"dragging\", false);\n        if(self.ignoredDrag){\n            return;\n        }\n        self.treeDesigner.layout.update(draggedNode)\n    }\n\n    cancelDrag(){\n        this.ignoreDrag = true;\n    }\n\n}\n\n\n","var epsilon = 1e-12;\nvar pi = Math.PI;\nvar halfPi = pi / 2;\nvar tau = 2 * pi;\n\nexport default {\n    /*draw: function(context, size) {\n        var r = Math.sqrt(size / pi);\n        context.moveTo(r, 0);\n        context.arc(0, 0, r, 0, tau);\n    }*/\n    draw: function(context, size) {\n\n        var r = Math.sqrt(size / pi);\n        var dist =0.552284749831 * r;\n\n        context.moveTo(-r, 0)\n        // context.lineTo(2*r, 2*r)\n        // context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\n        context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\n\n        context.bezierCurveTo(dist, -r, r, -dist, r,0);\n\n        context.bezierCurveTo(r, dist, dist, r, 0, r);\n\n        context.bezierCurveTo(-dist, r, -r, dist, -r, 0);\n    }\n};\n","var sqrt3 = Math.sqrt(3);\n\nexport default {\n    draw: function(context, size) {\n        var r = Math.sqrt(size / Math.PI);\n        context.moveTo(-r, 0);\n        context.lineTo(0.9*r, -r);\n        context.lineTo(0.9*r, r);\n        context.closePath();\n    }\n};\n","import {Utils} from \"sd-utils\";\nimport {i18n} from './i18n/i18n'\n\nexport class Templates{\n\n    static growl = require('./templates/growl_message.html');\n\n    static get(templateName, variables){\n        var compiled = Utils.template(Templates[templateName],{ 'imports': { 'i18n': i18n, 'Templates': Templates, 'include': function(n, v) {return Templates.get(n, v)} } });\n        if(variables){\n            variables.variables = variables;\n        }else{\n            variables = {variables:{}}\n        }\n        return compiled(variables)\n\n    }\n\n    static styleRule(selector, props){\n        var s = selector+ '{';\n        props.forEach(p=> s+=Templates.styleProp(p[0], p[1]));\n        s+='} ';\n        return s;\n    }\n    static styleProp(styleName, variableName){\n        return  styleName+': <%= '+variableName+' %>; '\n    }\n\n    static treeDesignerSelector = 'svg.sd-tree-designer';\n    static nodeSelector(type, clazz){\n        var s = Templates.treeDesignerSelector+' .node';\n        if(type){\n            s+='.'+type+'-node';\n        }\n        if(clazz){\n            s+='.'+clazz;\n        }\n        return s;\n    }\n    static edgeSelector(clazz){\n        var s = Templates.treeDesignerSelector+' .edge';\n        if(clazz){\n            s+='.'+clazz;\n        }\n        return s;\n    }\n\n    static treeDesignerStyles =\n\n        Templates.styleRule(Templates.treeDesignerSelector,[\n            ['font-size', 'fontSize'],\n            ['font-family', 'fontFamily'],\n            ['font-weight', 'fontWeight'],\n            ['font-style', 'fontStyle']\n        ])+\n        //   node\n        Templates.styleRule(Templates.nodeSelector()+' path',[\n            ['fill', 'node.fill'],\n            ['stroke-width', 'node.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('decision', 'optimal')+' path, '+Templates.nodeSelector('chance', 'optimal')+' path,' +Templates.nodeSelector('terminal', 'optimal')+' path',[\n            ['stroke', 'node.optimal.stroke'],\n            ['stroke-width', 'node.optimal.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .label',[\n            ['font-size', 'node.label.fontSize'],\n            ['fill', 'node.label.color']\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .payoff',[\n            ['font-size', 'node.payoff.fontSize'],\n            ['fill', 'node.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .payoff.negative',[\n            ['fill', 'node.payoff.negativeColor'],\n        ])+\n\n        //    decision node\n        Templates.styleRule(Templates.nodeSelector('decision')+' path',[\n            ['fill', 'node.decision.fill'],\n            ['stroke', 'node.decision.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('decision', 'selected')+' path',[\n            ['fill', 'node.decision.selected.fill']\n        ])+\n\n        //    chance node\n        Templates.styleRule(Templates.nodeSelector('chance')+' path',[\n            ['fill', 'node.chance.fill'],\n            ['stroke', 'node.chance.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('chance', 'selected')+' path',[\n            ['fill', 'node.chance.selected.fill']\n        ])+\n\n        //    terminal node\n        Templates.styleRule(Templates.nodeSelector('terminal')+' path',[\n            ['fill', 'node.terminal.fill'],\n            ['stroke', 'node.terminal.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal', 'selected')+' path',[\n            ['fill', 'node.terminal.selected.fill']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff',[\n            ['font-size', 'node.terminal.payoff.fontSize'],\n            ['fill', 'node.terminal.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff.negative',[\n            ['fill', 'node.terminal.payoff.negativeColor'],\n        ])+\n\n\n        //probability\n        Templates.styleRule(Templates.treeDesignerSelector+' .node .probability-to-enter, '+Templates.treeDesignerSelector+' .edge .probability',[\n            ['font-size', 'probability.fontSize'],\n            ['fill', 'probability.color']\n        ])+\n\n        //edge\n        Templates.styleRule(Templates.edgeSelector()+' path',[\n            ['stroke', 'edge.stroke'],\n            ['stroke-width', 'edge.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow path',[\n            ['fill', 'edge.stroke'],\n        ])+\n        Templates.styleRule(Templates.edgeSelector('optimal')+' path',[\n            ['stroke', 'edge.optimal.stroke'],\n            ['stroke-width', 'edge.optimal.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-optimal path',[\n            ['fill', 'edge.optimal.stroke'],\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector('selected')+' path',[\n            ['stroke', 'edge.selected.stroke'],\n            ['stroke-width', 'edge.selected.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-selected path',[\n            ['fill', 'edge.selected.stroke'],\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector()+' .label',[\n            ['font-size', 'edge.label.fontSize'],\n            ['fill', 'edge.label.color']\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector()+' .payoff',[\n            ['font-size', 'edge.payoff.fontSize'],\n            ['fill', 'edge.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.edgeSelector()+' .payoff.negative',[\n            ['fill', 'edge.payoff.negativeColor'],\n        ])+\n\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-title',[\n            ['font-size', 'title.fontSize'],\n            ['font-weight', 'title.fontWeight'],\n            ['font-style', 'title.fontStyle'],\n            ['fill', 'title.color']\n        ]) +\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-description',[\n            ['font-size', 'description.fontSize'],\n            ['font-weight', 'description.fontWeight'],\n            ['font-style', 'description.fontStyle'],\n            ['fill', 'description.color']\n        ])\n}\n\n\n\n\n","module.exports = \"module.exports = \\\"<div class=\\\\\\\"sd-growl-message <%=type%>\\\\\\\">\\\\n    <div class=\\\\\\\"sd-growl-message-text\\\\\\\">\\\\n        <%= message %>\\\\n    </div>\\\\n</div>\\\\n\\\";\\n\";\n","import {AppUtils} from './app-utils'\nimport * as d3 from './d3'\nimport {ContextMenu} from './context-menu/context-menu'\n\nexport class TextDragHandler{\n\n    treeDesigner;\n    data;\n    config;\n\n    drag;\n\n\n    constructor(treeDesigner, data){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n\n        var self = this;\n        this.drag = d3.drag()\n            .subject(function(d) {\n                if(d==null){\n                    return  {\n                        x: event.x,\n                        y: event.y\n                    };\n                }\n                var t = d3.select(this);\n                return {\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\n                };\n            })\n            .on(\"start\", function(d){\n                self.dragStarted.call(this,d, self)\n            })\n            .on(\"drag\", function (d) {\n                self.onDrag.call(this, d, self);\n            })\n            .on(\"end\", function (d) {\n                self.dragEnded.call(this, d, self);\n            })\n    }\n\n\n    dragStarted(d,self) {\n        // self.treeDesigner.layout.disableAutoLayout();\n        ContextMenu.hide();\n        var text = d3.select(this);\n        if(!text.classed(\"selected\")){\n            self.treeDesigner.clearSelection();\n        }\n\n        self.treeDesigner.selectText(d);\n        text.classed(\"selected dragging\", true);\n        self.selectedNodes = self.treeDesigner.getSelectedNodes();\n        self.prevDragEvent = d3.event;\n        self.dragEventCount = 0;\n    }\n\n    onDrag(draggedText, self){\n        if(self.dragEventCount==2){\n            self.data.saveState();\n        }\n        self.dragEventCount++;\n\n        var dx = d3.event.x - self.prevDragEvent.x;\n        var dy = d3.event.y- self.prevDragEvent.y;\n\n        self.treeDesigner.layout.moveTexts([draggedText], dx, dy);\n\n        self.prevDragEvent = d3.event;\n        self.treeDesigner.updatePlottingRegionSize();\n    }\n\n    dragEnded(draggedNode, self){\n         d3.select(this).classed(\"dragging\", false);\n    }\n\n}\n\n\n","import * as d3 from './d3'\nimport {Utils} from 'sd-utils'\n\nexport class Tooltip {\n    static getContainer(){\n        return d3.select(\"body\").selectOrAppend('div.sd-tooltip');\n    }\n\n    static show(html, xOffset = 5, yOffset = 28, event, duration=null) {\n        var container = Tooltip.getContainer()\n            .style(\"opacity\", 0);\n        container.transition()\n            .duration(200)\n            .style(\"opacity\", .98);\n        container.html(html);\n        Tooltip.updatePosition(xOffset, yOffset, event);\n        if(duration){\n            setTimeout(function(){\n                Tooltip.hide();\n            }, duration)\n        }\n    }\n\n    static updatePosition(xOffset = 5, yOffset = 28, event) {\n        event = event || d3.event;\n        Tooltip.getContainer()\n            .style(\"left\", (event.pageX + xOffset) + \"px\")\n            .style(\"top\", (event.pageY - yOffset) + \"px\");\n    }\n\n    static hide(duration = 500) {\n        var t = Tooltip.getContainer();\n        if(duration){\n            t = t.transition().duration(duration)\n        }\n        t.style(\"opacity\", 0);\n    }\n\n    static attach(target, htmlOrFn, xOffset, yOffset) {\n        target.on('mouseover', function (d, i) {\n            var html = null;\n            if (Utils.isFunction(htmlOrFn)) {\n                html = htmlOrFn(d, i);\n            } else {\n                html = htmlOrFn;\n            }\n\n            if (html !== null && html !== undefined && html !== '') {\n                Tooltip.show(html, xOffset, yOffset);\n            }else{\n                Tooltip.hide(0);\n            }\n\n        }).on('mousemove', function (d) {\n            Tooltip.updatePosition(xOffset, yOffset);\n        }).on(\"mouseout\", function (d) {\n            Tooltip.hide();\n        });\n    }\n}\n","import * as d3 from \"./d3\";\nimport {Utils} from \"sd-utils\";\nimport {AppUtils} from \"./app-utils\";\nimport {domain as model} from \"sd-model\";\nimport {ContextMenu} from \"./context-menu/context-menu\";\nimport {MainContextMenu} from \"./context-menu/main-context-menu\";\nimport {NodeContextMenu} from \"./context-menu/node-context-menu\";\nimport {Layout} from \"./layout\";\nimport {NodeDragHandler} from \"./node-drag-handler\";\nimport {Tooltip} from \"./tooltip\";\nimport {Templates} from \"./templates\";\nimport {TextDragHandler} from \"./text-drag-handler\";\nimport {TextContextMenu} from \"./context-menu/text-context-menu\";\nimport {EdgeContextMenu} from \"./context-menu/edge-context-menu\";\nimport * as Hammer from \"hammerjs\";\nimport {i18n} from \"./i18n/i18n\";\n\n\nexport class TreeDesignerConfig {\n    width = undefined;\n    height = undefined;\n    margin = {\n        left: 25,\n        right: 25,\n        top: 25,\n        bottom: 25\n    };\n    scale = 1;\n    lng = 'en';\n    layout= {\n        type: 'tree',\n        nodeSize: 40,\n        limitNodePositioning: true,\n        limitTextPositioning: true,\n        gridHeight: 75,\n        gridWidth: 150,\n        edgeSlantWidthMax: 20\n    };\n    fontFamily = 'sans-serif';\n    fontSize = '12px';\n    fontWeight = 'normal';\n    fontStyle = 'normal';\n    node = {\n        strokeWidth: '1px',\n        optimal: {\n            stroke: '#006f00',\n            strokeWidth: '1.5px',\n        },\n        label: {\n            fontSize: '1em',\n            color: 'black'\n        },\n        payoff: {\n            fontSize: '1em',\n            color: 'black',\n            negativeColor: '#b60000'\n        },\n        decision: {\n            fill: '#ff7777',\n            stroke: '#660000',\n\n            selected: {\n                fill: '#aa3333',\n                // stroke: '#666600'\n            }\n        },\n        chance: {\n            fill: '#ffff44',\n            stroke: '#666600',\n\n            selected: {\n                fill: '#aaaa00',\n                // stroke: '#666600'\n            }\n        },\n        terminal:{\n            fill: '#44ff44',\n            stroke: 'black',\n            selected: {\n                fill: '#00aa00',\n                // stroke: 'black'\n            },\n            payoff: {\n                fontSize: '1em',\n                color: 'black',\n                negativeColor: '#b60000'\n            },\n        }\n    };\n    edge={\n        stroke: '#424242',\n        strokeWidth: '1.5',\n        optimal:{\n            stroke: '#006f00',\n            strokeWidth: '2.4',\n        },\n        selected:{\n            stroke: '#045ad1',\n            strokeWidth: '3.5',\n        },\n        label: {\n            fontSize: '1em',\n            color: 'back'\n        },\n        payoff:{\n            fontSize: '1em',\n            color: 'black',\n            negativeColor: '#b60000'\n        }\n\n    };\n    probability = {\n        fontSize: '1em',\n        color: '#0000d7'\n    };\n    title = {\n        fontSize: '16px',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        color: '#000000',\n        margin:{\n            top: 15,\n            bottom: 10\n        }\n    };\n    description = {\n        show: true,\n        fontSize: '12px',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        color: '#000000',\n        margin:{\n            top: 5,\n            bottom: 10\n        }\n    };\n\n    readOnly= false;\n    disableAnimations=false;\n    forceFullEdgeRedraw=false;\n    hideLabels=false;\n    hidePayoffs=false;\n    hideProbabilities=false;\n    raw=false;\n\n\n    payoffNumberFormatter = (v, i)=> v;\n    probabilityNumberFormatter  = (v)=> v;\n\n    onNodeSelected = (node) => {};\n    onEdgeSelected = (edge) => {};\n    onTextSelected = (text) => {};\n    onSelectionCleared = () => {};\n\n    operationsForObject = (o) => [];\n    performOperation = (object, operation) => Promise.resolve();\n\n    payoffNames = [null, null];\n    maxPayoffsToDisplay = 1;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n\nexport class TreeDesigner {\n\n    config;\n    container;\n    data; //data model manager\n    svg;\n\n    constructor(container, dataModel, config){\n        this.setConfig(config);\n        this.data = dataModel;\n        this.initContainer(container);\n        this.init();\n    }\n\n    setConfig(config) {\n        this.config = new TreeDesignerConfig(config);\n        if(this.layout){\n            this.layout.config=this.config.layout;\n        }\n        this.updateCustomStyles();\n        return this;\n    }\n\n    init(){\n\n        this.initSvg();\n        this.initLayout();\n        this.initI18n();\n        this.initBrush();\n        this.initEdgeMarkers();\n\n        this.updateCustomStyles();\n        if(!this.config.readOnly){\n            this.initMainContextMenu();\n            this.initNodeContextMenu();\n            this.initEdgeContextMenu();\n            this.initNodeDragHandler();\n            this.initTextDragHandler();\n            this.initTextContextMenu();\n        }\n        this.redraw();\n    }\n\n    initI18n() {\n        i18n.init(this.config.lng);\n    }\n\n\n    updateCustomStyles(){\n        d3.select('head').selectOrAppend('style#sd-tree-designer-style').html(Templates.get('treeDesignerStyles', this.config));\n        return this;\n    }\n\n    initLayout(){\n        this.layout = new Layout(this, this.data, this.config.layout);\n    }\n\n    initNodeDragHandler(){\n        this.nodeDragHandler = new NodeDragHandler(this, this.data);\n    }\n\n    initTextDragHandler(){\n        this.textDragHandler = new TextDragHandler(this, this.data);\n    }\n\n    redraw(withTransitions=false){\n\n        var self = this;\n        withTransitions = !self.config.disableAnimations && withTransitions;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateScale(withTransitions);\n        this.updateMargin(withTransitions);\n        if(withTransitions){\n            self.transitionPrev = self.transition;\n            self.transition = true;\n        }\n        this.redrawNodes();\n        this.redrawEdges();\n        this.redrawFloatingTexts();\n        this.updateValidationMessages();\n        if(withTransitions){\n            self.transition =  self.transitionPrev;\n        }\n        setTimeout(function(){\n            self.updatePlottingRegionSize();\n        },10);\n\n        return this;\n    }\n\n    computeAvailableSpace(){\n        this.availableHeight = AppUtils.sanitizeHeight(this.config.height, this.container, this.config.margin);\n        this.availableWidth = AppUtils.sanitizeWidth(this.config.width, this.container, this.config.margin);\n    }\n\n    initSvg() {\n        var c = this;\n        var self = this;\n        this.computeAvailableSpace();\n        this.svg = this.container.selectOrAppend('svg.sd-tree-designer');\n        this.svg.attr('width', this.availableWidth).attr('height', this.availableHeight);\n\n        this.wrapperGroup = this.svg.selectOrAppend('g.sd-wrapper-group');\n        this.mainGroup = this.wrapperGroup.selectOrAppend('g.main-group');\n        this.updateScale();\n        this.updateMargin();\n\n\n        if (!this.config.width) {\n            d3.select(window)\n                .on(\"resize.tree-designer\", function () {\n                    self.updatePlottingRegionSize();\n                    self.redrawDiagramTitle();\n                });\n        }\n\n        var mc = new Hammer.Manager(this.svg.node(), {touchAction : 'auto'});\n        mc.add(new Hammer.Press({\n            pointerType: 'touch'\n        }));\n\n        mc.add(new Hammer.Pinch({\n            pointerType: 'touch'\n        }));\n\n        var cancel;\n        mc.on('pinchstart', function(){\n            self.disableBrush();\n        })\n        mc.on('pinch', function(){\n            cancel = Utils.waitForFinalEvent(()=>self.enableBrush(), 'pinchend', 5000)\n        })\n    }\n\n    updateMargin(withTransitions){\n        var self = this;\n        var margin = this.config.margin;\n        var group = this.mainGroup;\n        if(withTransitions){\n            group = group.transition();\n        }\n\n        this.topMargin = margin.top;\n        if(this.diagramTitle||this.diagramDescription){\n            this.topMargin = parseInt(this.diagramTitle ? this.config.title.margin.top : 0) + this.getTitleGroupHeight()\n                +  Math.max(this.topMargin, parseInt(this.config.title.margin.bottom));\n        }\n\n        group.attr(\"transform\", \"translate(\" + margin.left + \",\" + this.topMargin + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\n    }\n\n    setMargin(margin, withoutStateSaving){\n        var self=this;\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    margin: Utils.clone(self.config.margin)\n                },\n                onUndo: (data)=> {\n                    self.setMargin(data.margin, true);\n                },\n                onRedo: (data)=> {\n                    self.setMargin(margin, true);\n                }\n            });\n        }\n        Utils.deepExtend(this.config.margin, margin);\n        this.redrawDiagramTitle();\n        this.updateMargin(true);\n    }\n\n\n    updateScale(withTransitions){\n        var self = this;\n        var scale = this.config.scale;\n        var group = this.wrapperGroup;\n        if(withTransitions){\n            group = group.transition();\n        }\n\n        group.attr(\"transform\", \"scale(\" + scale + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\n    }\n\n    setScale(scale, withoutStateSaving){\n        var self=this;\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    scale: Utils.clone(self.config.scale)\n                },\n                onUndo: (data)=> {\n                    self.setScale(data.scale, true);\n                },\n                onRedo: (data)=> {\n                    self.setScale(scale, true);\n                }\n            });\n        }\n        this.config.scale = scale;\n        this.updateScale(true);\n    }\n\n    initContainer(containerIdOrElem) {\n        if (Utils.isString(containerIdOrElem)) {\n            var selector = containerIdOrElem.trim();\n\n            if (!Utils.startsWith(selector, '#') && !Utils.startsWith(selector, '.')) {\n                selector = '#' + selector;\n            }\n            this.container = d3.select(selector);\n        } else if(containerIdOrElem._parents){\n            this.container = containerIdOrElem\n        }else{\n            this.container = d3.select(containerIdOrElem);\n        }\n    }\n\n    updatePlottingRegionSize() {\n        var changed = false;\n        this.computeAvailableSpace();\n        var margin = this.config.margin;\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        var mainGroupBox = this.mainGroup.node().getBBox();\n        let boxWidth = mainGroupBox.width;\n        var newSvgWidth = boxWidth+mainGroupBox.x+margin.left+margin.right;\n        newSvgWidth  *= this.config.scale;\n        this.container.classed('with-overflow-x', newSvgWidth>=this.availableWidth);\n        newSvgWidth = Math.max(newSvgWidth, this.availableWidth);\n        if(svgWidth!=newSvgWidth){\n            changed = true;\n            this.svg.attr('width', newSvgWidth);\n        }\n        let boxHeight = mainGroupBox.height;\n        var newSvgHeight = boxHeight+mainGroupBox.y+this.topMargin+margin.bottom;\n        newSvgHeight *= this.config.scale;\n        this.container.classed('with-overflow-y', newSvgHeight>=this.availableHeight);\n        newSvgHeight = Math.max(newSvgHeight, this.availableHeight);\n        if(svgHeight!=newSvgHeight){\n            changed=true;\n            this.svg.attr('height', newSvgHeight);\n        }\n        if(changed){\n            this.updateBrushExtent()\n        }\n\n\n    }\n\n    redrawNodes() {\n        var self = this;\n\n\n        var nodesContainer = this.mainGroup.selectOrAppend('g.nodes');\n        var nodes = nodesContainer.selectAll('.node').data(this.data.nodes.filter(d=>!d.$hidden), (d,i)=> d.id);\n        nodes.exit().remove();\n        var nodesEnter = nodes.enter().append('g')\n            .attr('id', d=>'node-'+d.id)\n            .attr('class', d=>d.type+'-node node')\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\n        nodesEnter.append('path');\n\n        var labelEnter = nodesEnter.append('text').attr('class', 'label');\n        var payoffEnter = nodesEnter.append('text').attr('class', 'payoff computed');\n        var indicatorEnter = nodesEnter.append('text').attr('class', 'error-indicator').text('!!');\n        var aggregatedPayoffEnter = nodesEnter.append('text').attr('class', 'aggregated-payoff');\n        var probabilityToEnterEnter = nodesEnter.append('text').attr('class', 'probability-to-enter');\n\n        var nodesMerge = nodesEnter.merge(nodes);\n        nodesMerge.classed('optimal', (d)=>self.isOptimal(d));\n\n        var nodesMergeT = nodesMerge;\n        if(this.transition){\n            nodesMergeT = nodesMerge.transition();\n            nodesMergeT.on('end', ()=> self.updatePlottingRegionSize())\n        }\n        nodesMergeT\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')')\n\n        var path = nodesMerge.select('path');\n        this.layout.drawNodeSymbol(path,this.transition);\n\n        /*path\n            .style('fill', d=> {\n                // if(self.isNodeSelected(d)){\n                //     return self.config.node[d.type].selected.fill\n                // }\n                return self.config.node[d.type].fill\n            })\n            .style('stroke', d=> self.config.node[d.type].stroke)\n            .style('stroke-width', d=> {\n                if(self.config.node[d.type].strokeWidth!==undefined){\n                    return self.config.node[d.type].strokeWidth;\n                }\n                return self.config.node.strokeWidth;\n            });\n        */\n        this.layout.nodeLabelPosition(labelEnter);\n        var labelMerge = nodesMerge.select('text.label');\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\n        var labelMergeT = nodesMergeT.select('text.label');\n        labelMergeT.each(this.updateTextLines);\n        this.layout.nodeLabelPosition(labelMergeT)\n            .attr('text-anchor', 'middle')\n\n        var payoff = nodesMerge.select('text.payoff');\n\n        var payoffTspans = payoff.selectAll('tspan').data(d=>{\n            let item = d.displayValue('childrenPayoff');\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\n        });\n        payoffTspans.exit().remove();\n\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\n        payoffTspansM\n            // .attr('dominant-baseline', 'hanging')\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0')\n            .classed('negative', d=> {\n                return d!==null && d<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\n            .text((d, i)=> {\n                var val = d\n\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\n            });\n        this.attachPayoffTooltip(payoffTspansM);\n\n\n        var payoffT = payoff;\n        if(this.transition){\n            payoffT = payoff.transition();\n        }\n\n        this.layout.nodePayoffPosition(payoffEnter);\n        this.layout.nodePayoffPosition(payoffT);\n\n        var aggregatedPayoff = nodesMerge.select('text.aggregated-payoff');\n        var aggregatedPayoffTspans = aggregatedPayoff.selectAll('tspan').data(d=>{\n            let item = d.displayValue('aggregatedPayoff');\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\n        });\n        aggregatedPayoffTspans.exit().remove();\n        var aggregatedPayoffTspansM = aggregatedPayoffTspans.enter().append('tspan').merge(aggregatedPayoffTspans)\n            .attr('dy', (d,i)=>i>0 ? '0.95em': undefined)\n            .classed('negative', d=> {\n                return d!==null && d<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\n            .text((val, i)=> {\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\n            });\n\n        this.attachPayoffTooltip(aggregatedPayoffTspansM, 'aggregatedPayoff');\n\n        var aggregatedPayoffT = aggregatedPayoff;\n        if(this.transition){\n            aggregatedPayoffT = aggregatedPayoff.transition();\n        }\n\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffEnter);\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffT);\n\n        var probabilityToEnter = nodesMerge.select('text.probability-to-enter')\n            .text(d=>{\n                var val = d.displayValue('probabilityToEnter');\n                return val!==null ? (isNaN(val) ? val : self.config.probabilityNumberFormatter(val)): ''\n            })\n            .classed('sd-hidden', this.config.hideProbabilities || this.config.raw);\n        Tooltip.attach(probabilityToEnter, i18n.t('tooltip.node.probabilityToEnter'));\n\n\n        var probabilityToEnterT = probabilityToEnter;\n        if(this.transition){\n            probabilityToEnterT = probabilityToEnter.transition();\n        }\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterEnter);\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterT);\n\n\n        var indicator = nodesMerge.select('text.error-indicator');\n        indicator.classed('sd-hidden', this.config.raw)\n        this.layout.nodeIndicatorPosition(indicatorEnter);\n        this.layout.nodeIndicatorPosition(indicator);\n\n        if(this.nodeDragHandler){\n            nodesMerge.call(this.nodeDragHandler.drag);\n        }\n\n        nodesMerge.on('contextmenu', this.nodeContextMenu);\n        nodesMerge.on('dblclick', this.nodeContextMenu)\n        nodesMerge.each(function(d, i){\n            var nodeElem = this;\n            var mc = new Hammer.Manager(nodeElem);\n            mc.add(new Hammer.Press({\n                pointerType: 'touch'\n            }));\n            mc.on('press', function(e){\n                if(e.pointerType=='touch'){\n                    self.nodeDragHandler.cancelDrag();\n                }\n            })\n\n\n            if(d.folded){\n                let button = d3.select(nodeElem).selectOrAppend('text.sd-unfold-button')\n                    .text(\"[+]\")\n                    .on('click dbclick mousedown', ()=>self.foldSubtree(d, false)); //firefox detects only mousedown event - related to drag handler\n\n                self.layout.nodeUnfoldButtonPosition(button);\n                Tooltip.attach(button, i18n.t('contextMenu.node.unfold'));\n            }else{\n                d3.select(nodeElem).select('.sd-unfold-button').remove();\n            }\n\n        })\n    }\n\n    attachPayoffTooltip(selection, payoffFiledName = 'payoff', object='node'){\n        var self = this;\n        Tooltip.attach(selection, (d, i)=>{\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\n                return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.named',{value: d.payoff, number: i+1, name: self.config.payoffNames[i]})\n            }\n            return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.default',{value: d.payoff, number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\n        });\n    }\n\n    updateTextLines(d){ //helper method for splitting text to tspans\n        var lines = d.name ? d.name.split('\\n') : [];\n        lines.reverse();\n        var tspans = d3.select(this).selectAll('tspan').data(lines);\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .text(l=>l)\n            .attr('dy', (d,i)=>i>0 ? '-1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n    }\n\n    isOptimal(d){\n        return d.displayValue('optimal');\n    }\n\n    redrawEdges() {\n        var self = this;\n        var edgesContainer = this.mainGroup.selectOrAppend('g.edges');\n        if(self.config.forceFullEdgeRedraw){\n            edgesContainer.selectAll(\"*\").remove();\n        }\n\n        var edges = edgesContainer.selectAll('.edge').data(this.data.edges.filter(e=>!e.$hidden), (d,i)=> d.id);\n        edges.exit().remove();\n        var edgesEnter = edges.enter().append('g')\n            .attr('id', d=>'edge-'+d.id)\n            .attr('class', 'edge');\n\n\n        edgesEnter.append('path');\n        var labelEnter = edgesEnter.appendSelector('g.label-group');\n        labelEnter.append('text').attr('class', 'label');\n        var payoffEnter = edgesEnter.append('text').attr('class', 'payoff');\n        var probabilityEnter = edgesEnter.append('text').attr('class', 'probability');\n\n\n        var edgesMerge = edgesEnter.merge(edges);\n\n\n        var optimalClassName = 'optimal';\n        edgesMerge.classed(optimalClassName, (d)=>self.isOptimal(d));\n\n        var edgesMergeT = edgesMerge;\n        if(this.transition){\n            edgesMergeT = edgesMerge.transition();\n        }\n\n        edgesMergeT.select('path')\n            .attr('d', d=> this.layout.edgeLineD(d))\n            // .attr(\"stroke\", \"black\")\n            // .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .attr(\"marker-end\", function(d) {\n                var suffix = d3.select(this.parentNode).classed('selected') ? '-selected' : (self.isOptimal(d)?'-optimal':'');\n                return \"url(#arrow\"+ suffix+\")\"\n            });\n            // .attr(\"shape-rendering\", \"optimizeQuality\")\n\n\n        edgesMerge.on('click', d=>{\n            self.selectEdge(d, true)\n        });\n\n        this.layout.edgeLabelPosition(labelEnter);\n        edgesMergeT.select('text.label').each(this.updateTextLines);\n        var labelMerge = edgesMerge.select('g.label-group');\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\n        var labelMergeT = edgesMergeT.select('g.label-group');\n        this.layout.edgeLabelPosition(labelMergeT);\n            // .text(d=>d.name);\n\n        var payoff = edgesMerge.select('text.payoff');\n\n        var payoffTspans = payoff.selectAll('tspan').data(d => {\n            let item = d.displayValue('payoff');\n            return Utils.isArray(item) ? item.slice(0, Math.min(item.length, self.config.maxPayoffsToDisplay)).map(_=>d) : [d];\n        });\n        payoffTspans.exit().remove();\n\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\n        payoffTspansM\n        // .attr('dominant-baseline', 'hanging')\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            // .attr('x', '0')\n\n            // .attr('dominant-baseline', 'hanging')\n            .classed('negative', (d, i)=> {\n                var val = d.displayPayoff(undefined, i);\n                return val!==null && val<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs)\n            // .text(d=> isNaN(d.payoff) ? d.payoff : self.config.payoffNumberFormatter(d.payoff))\n            .text((d, i)=>{\n                if(this.config.raw){\n                    return d.payoff[i];\n                }\n\n                let item = d.displayValue('payoff');\n                let items = Utils.isArray(item) ? item : [item];\n\n                let val = items[i];\n                if (val !== null) {\n                    if (!isNaN(val)) {\n                        return self.config.payoffNumberFormatter(val, i);\n                    }\n                    if (Utils.isString(val)) {\n                        return val;\n                    }\n                }\n\n                if (d.payoff[i] !== null && !isNaN(d.payoff[i]))\n                    return self.config.payoffNumberFormatter(d.payoff[i], i);\n\n                return d.payoff[i];\n\n            });\n\n        Tooltip.attach(payoffTspansM, (d, i)=>{\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\n                return i18n.t('tooltip.edge.payoff.named',{value: d.payoff[i], number: i+1, name: self.config.payoffNames[i]})\n            }\n            return i18n.t('tooltip.edge.payoff.default',{value: d.payoff[i], number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\n        });\n\n        var payoffTextT = payoff;\n        if(this.transition){\n            payoffTextT = payoff.transition();\n        }\n        this.layout.edgePayoffPosition(payoffEnter);\n        this.layout.edgePayoffPosition(payoffTextT);\n\n        Tooltip.attach(edgesMerge.select('text.probability'), d=>i18n.t('tooltip.edge.probability',{value: d.probability=== undefined ? d.displayProbability() : d.probability}));\n\n        edgesMerge.select('text.probability')\n            .classed('sd-hidden', this.config.hideProbabilities);\n        var probabilityMerge = edgesMerge.select('text.probability');\n        probabilityMerge\n            .attr('text-anchor', 'end')\n            .text(d=>{\n                if(this.config.raw){\n                    return d.probability;\n                }\n                var val = d.displayProbability();\n\n                if(val!==null){\n                    if(!isNaN(val)){\n                        return self.config.probabilityNumberFormatter(val);\n                    }\n                    if(Utils.isString(val)){\n                        return val;\n                    }\n                }\n\n                if(d.probability!==null && !isNaN(d.probability))\n                    return self.config.probabilityNumberFormatter(d.probability);\n\n                return d.probability;\n            });\n        var probabilityMergeT = probabilityMerge;\n        if(this.transition){\n            probabilityMergeT = probabilityMerge.transition();\n        }\n\n        this.layout.edgeProbabilityPosition(probabilityEnter);\n        this.layout.edgeProbabilityPosition(probabilityMergeT);\n\n\n        edgesContainer.selectAll('.edge.'+optimalClassName).raise();\n\n        edgesMerge.on('contextmenu', this.edgeContextMenu);\n        edgesMerge.on('dblclick', this.edgeContextMenu);\n        edgesMerge.each(function(d, i){\n            var elem = this;\n            var mc = new Hammer.Manager(elem);\n            mc.add(new Hammer.Press({\n                pointerType: Hammer.POINTER_TOUCH\n            }));\n        })\n    }\n\n    redrawFloatingTexts() {\n        var self = this;\n\n\n        var textsContainer = this.mainGroup.selectOrAppend('g.floating-texts');\n        var texts = textsContainer.selectAll('.floating-text').data(this.data.texts, (d,i)=> d.id);\n        texts.exit().remove();\n        var textsEnter = texts.enter().appendSelector('g.floating-text')\n            .attr('id', d=>'text-'+d.id);\n\n\n        var rectWidth = 40;\n        var rectHeight = 20;\n\n        textsEnter.append('rect').attr('x', -5).attr('y', -16).attr('fill-opacity', 0);\n        textsEnter.append('text');\n\n        var textsMerge = textsEnter.merge(texts);\n        var textsMergeT = textsMerge;\n        if(this.transition){\n            textsMergeT = textsMerge.transition();\n        }\n\n        textsMergeT.attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\n\n        var tspans = textsMerge.select('text').selectAll('tspan').data(d=>d.value ? d.value.split('\\n') : []);\n\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n        textsMerge.classed('sd-empty', d=>!d.value || !d.value.trim());\n        textsMerge.select('rect').attr('width', rectWidth).attr('height', rectHeight);\n\n        textsMerge.each(function(d){\n            if(!d.value){\n                return;\n            }\n            var bb = d3.select(this).select('text').node().getBBox();\n           d3.select(this).select('rect')\n               .attr('y', bb.y-5)\n               .attr('width', Math.max(bb.width+10, rectWidth))\n               .attr('height', Math.max(bb.height+10, rectHeight))\n        });\n\n        if(this.textDragHandler){\n            textsMerge.call(this.textDragHandler.drag);\n        }\n        textsMerge.on('contextmenu', this.textContextMenu);\n        textsMerge.on('dblclick', this.textContextMenu);\n        textsMerge.each(function(d, i){\n            var elem = this;\n            var mc = new Hammer.Manager(elem);\n            mc.add(new Hammer.Press({\n                pointerType: 'touch'\n            }));\n        })\n\n    }\n\n    updateValidationMessages() {\n        var nodes = this.mainGroup.selectAll('.node');\n        nodes.classed('error', false);\n\n        this.data.validationResults.forEach(validationResult=>{\n            if(validationResult.isValid()){\n                return;\n            }\n\n            Object.getOwnPropertyNames(validationResult.objectIdToError).forEach(id=>{\n                var errors = validationResult.objectIdToError[id];\n                var nodeSelection = this.getNodeD3SelectionById(id);\n                nodeSelection.classed('error', true);\n                var tooltipHtml = '';\n                errors.forEach(e=>{\n                    if(tooltipHtml){\n                        tooltipHtml+='<br/>'\n                    }\n                    tooltipHtml+=AppUtils.getValidationMessage(e);\n                });\n\n                Tooltip.attach(nodeSelection.select('.error-indicator'), tooltipHtml);\n\n\n            })\n        });\n    }\n\n\n    initEdgeMarkers() {\n        var defs = this.svg.append(\"svg:defs\");\n\n        this.initArrowMarker(\"arrow\");\n        this.initArrowMarker(\"arrow-optimal\");\n        this.initArrowMarker(\"arrow-selected\");\n    }\n\n    initArrowMarker(id) {\n\n        var defs = this.svg.select(\"defs\");\n        defs.append(\"marker\")\n            .attr(\"id\",id)\n            .attr(\"viewBox\",\"0 -5 10 10\")\n            .attr(\"refX\",5)\n            .attr(\"refY\",0)\n            .attr(\"markerWidth\",4)\n            .attr(\"markerHeight\",4)\n            .attr(\"orient\",\"auto\")\n            .append(\"path\")\n            .attr(\"d\", \"M0,-5L10,0L0,5\")\n            .attr(\"class\",\"arrowHead\");\n    }\n\n    updateBrushExtent() {\n        var self =this;\n        this.brush.extent([[0, 0], [self.svg.attr('width'), self.svg.attr('height')]]);\n        this.brushContainer.call(this.brush);\n    }\n    initBrush() {\n        var self = this;\n\n        var brushContainer = self.brushContainer = this.brushContainer= this.wrapperGroup.selectOrInsert(\"g.brush\", \":first-child\")\n            .attr(\"class\", \"brush\");\n\n        var brush = this.brush = d3.brush()\n            .on(\"start\", brushstart)\n            .on(\"brush\", brushmove)\n            .on(\"end\", brushend);\n\n\n\n        this.updateBrushExtent();\n\n        brushContainer.select('.overlay').on(\"mousemove.edgeSelection\", mousemoved);\n        function mousemoved() {\n            var m = d3.mouse(this);\n            var mgt = self.getMainGroupTranslation();\n            var margin = 10;\n\n            var closest = [null, 999999999];\n            var closeEdges = [];\n            self.mainGroup.selectAll('.edge').each(function(d){\n                var selection = d3.select(this);\n                selection.classed('sd-hover', false);\n                var pathNode = selection.select('path').node();\n                var b = pathNode.getBBox();\n                if(b.x+mgt[0] <=m[0] && b.x+b.width+mgt[0] >= m[0] &&\n                   b.y+mgt[1]-margin <=m[1] && b.y+b.height+mgt[1]+margin >= m[1]){\n\n                    var cp = AppUtils.closestPoint(pathNode, [m[0]-mgt[0], m[1]-mgt[1]]);\n                    if(cp.distance < margin && cp.distance<closest[1]){\n                        closest = [selection, cp.distance];\n                    }\n                }\n\n            });\n\n            self.hoveredEdge = null;\n            if(closest[0]){\n                closest[0].classed('sd-hover', true);\n                self.hoveredEdge = closest[0];\n            }\n\n        }\n\n        function brushstart() {\n            if (!d3.event.selection) return;\n            if(self.hoveredEdge){\n                self.selectEdge(self.hoveredEdge.datum(), true)\n            }else{\n                self.clearSelection();\n            }\n            ContextMenu.hide();\n        }\n\n        // Highlight the selected nodes.\n        function brushmove() {\n            var s = d3.event.selection;\n            if(!s)return;\n\n            self.mainGroup.selectAll(\".node\").classed('selected', function (d) {\n                var mainGroupTranslation = self.getMainGroupTranslation();\n                var x = d.location.x+mainGroupTranslation[0];\n                var y = d.location.y+mainGroupTranslation[1];\n                var nodeSize = self.config.layout.nodeSize;\n                var offset = nodeSize*0.25;\n                return s[0][0] <= x+offset && x-offset <= s[1][0]\n                    && s[0][1] <= y+offset && y-offset <= s[1][1];\n            });\n        }\n        // If the brush is empty, select all circles.\n        function brushend() {\n            if (!d3.event.selection) return;\n            brush.move(brushContainer, null);\n\n            var selectedNodes = self.getSelectedNodes();\n            if(selectedNodes && selectedNodes.length === 1){\n                self.selectNode(selectedNodes[0]);\n            }\n            // if (!d3.event.selection) self.mainGroup.selectAll(\".selected\").classed('selected', false);\n        }\n    }\n\n    disableBrush(){\n        if(!this.brushDisabled){\n            AppUtils.growl(i18n.t('growl.brushDisabled'), 'info', 'left')\n        }\n        this.brushDisabled = true;\n        this.brushContainer.remove();\n    }\n\n    enableBrush(){\n        if(this.brushDisabled){\n            AppUtils.growl(i18n.t('growl.brushEnabled'), 'info', 'left')\n            this.initBrush();\n            this.brushDisabled = false;\n        }\n\n\n    }\n\n    getMainGroupTranslation(invert) {\n        var translation = AppUtils.getTranslation(this.mainGroup.attr(\"transform\"));\n        if(invert){\n            translation[0] = -translation[0];\n            translation[1] = -translation[1]\n        }\n        return translation;\n    }\n\n    initNodeContextMenu() {\n        this.nodeContextMenu = new NodeContextMenu(this, this.config.operationsForObject);\n    }\n\n    initEdgeContextMenu() {\n        this.edgeContextMenu = new EdgeContextMenu(this);\n    }\n\n    initTextContextMenu() {\n        this.textContextMenu = new TextContextMenu(this);\n    }\n\n\n\n    initMainContextMenu() {\n        this.mainContextMenu = new MainContextMenu(this);\n        this.svg.on('contextmenu',this.mainContextMenu);\n        this.svg.on('dblclick',this.mainContextMenu);\n    }\n\n    addText(text){\n        this.data.saveState();\n        this.data.addText(text);\n        this.redraw();\n        this.selectText(text);\n    }\n\n    addNode(node, parent, redraw=false){\n        this.data.saveState();\n        this.data.addNode(node, parent);\n        this.redraw(true);\n        this.layout.update(node);\n        return node;\n    }\n\n    addDecisionNode(parent){\n        var newNode = new model.DecisionNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n    addChanceNode(parent){\n        var newNode = new model.ChanceNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n    addTerminalNode(parent){\n        var newNode = new model.TerminalNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n\n    injectNode(node, edge){\n        this.data.saveState();\n        this.data.injectNode(node, edge);\n        this.redraw();\n        this.layout.update(node);\n        return node;\n    }\n\n    injectDecisionNode(edge){\n        var newNode = new model.DecisionNode(this.layout.getInjectedNodeLocation(edge));\n        this.injectNode(newNode, edge);\n\n    }\n\n    injectChanceNode(edge){\n        var newNode = new model.ChanceNode(this.layout.getInjectedNodeLocation(edge));\n        this.injectNode(newNode, edge);\n    }\n\n    removeNode(node) {\n        this.data.saveState();\n        this.data.removeNode(node);\n\n\n        if(!this.layout.isManualLayout()){\n            this.layout.update();\n        }else{\n            this.redraw();\n        }\n    }\n\n    removeSelectedNodes() {\n        var selectedNodes = this.getSelectedNodes();\n        if(!selectedNodes.length){\n            return;\n        }\n        this.data.saveState();\n        this.data.removeNodes(selectedNodes);\n        this.clearSelection();\n        this.redraw();\n        this.layout.update();\n    }\n\n    removeSelectedTexts(){\n        var selectedTexts = this.getSelectedTexts();\n\n        if(!selectedTexts.length){\n            return;\n        }\n        this.data.saveState();\n        this.data.removeTexts(selectedTexts);\n        this.clearSelection();\n        this.redraw();\n    }\n\n    copyNode(d, notClearPrevSelection) {\n        var clone = this.data.cloneSubtree(d);\n        if(notClearPrevSelection){\n            if(!this.copiedNodes){\n                this.copiedNodes=[];\n            }\n            this.copiedNodes.push(clone);\n        }else{\n            this.copiedNodes = [clone];\n        }\n\n    }\n\n    cutNode(d) {\n        this.copyNode(d);\n        this.removeNode(d);\n    }\n\n    cutSelectedNodes(){\n        var selectedNodes = this.getSelectedNodes();\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\n        this.copyNodes(selectedRoots);\n        this.removeSelectedNodes();\n    }\n\n    copySelectedNodes() {\n        var self;\n        var selectedNodes = this.getSelectedNodes();\n\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\n        this.copyNodes(selectedRoots);\n\n\n    }\n\n    copyNodes(nodes){\n        this.copiedNodes = nodes.map(d=>this.data.cloneSubtree(d));\n    }\n\n\n\n    pasteToNode(node) {\n        if(!this.copiedNodes || !this.copiedNodes.length){\n            return;\n        }\n        this.data.saveState();\n        var self = this;\n        self.clearSelection();\n        var nodesToAttach = this.copiedNodes;\n        self.copyNodes(this.copiedNodes);\n        nodesToAttach.forEach(toAttach=>{\n            var attached = this.data.attachSubtree(toAttach, node).childNode;\n            if(attached.folded){\n                self.foldSubtree(attached, attached.folded, false);\n            }\n            var location = self.layout.getNewChildLocation(node);\n            attached.moveTo(location.x, location.y, true);\n            self.layout.moveNodeToEmptyPlace(attached, false);\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\n\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\n        });\n\n        if(node.folded){\n            self.foldSubtree(node, node.folded, false);\n        }\n\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n\n    }\n\n    pasteToNewLocation(point) {\n        this.data.saveState();\n        var self = this;\n        self.clearSelection();\n        var nodesToAttach = this.copiedNodes;\n        self.copyNodes(this.copiedNodes);\n        nodesToAttach.forEach(toAttach=> {\n            var attached = this.data.attachSubtree(toAttach);\n            if(attached.folded){\n                self.foldSubtree(attached, attached.folded, false);\n            }\n            attached.moveTo(point.x, point.y, true);\n            self.layout.moveNodeToEmptyPlace(attached, false);\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\n\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\n        });\n\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n\n    }\n\n    convertNode(node, typeToConvertTo){\n        const self = this;\n        this.data.saveState();\n        this.data.convertNode(node, typeToConvertTo);\n        setTimeout(function(){\n            self.redraw(true);\n        },10)\n    }\n\n    performOperation(object, operation){\n        const self = this;\n        this.data.saveState();\n        this.config.performOperation(object, operation).then(() => {\n            setTimeout(function(){\n                self.redraw();\n                self.layout.update();\n            },10)\n        });\n    }\n\n    foldSubtree(node, fold = true, redraw=true){\n        const self = this;\n        node.folded = fold;\n\n        this.data.getAllDescendantNodes(node).forEach(n=>{\n            n.$hidden = fold;\n            n.folded = false;\n        });\n        this.data.getAllDescendantEdges(node).forEach(e=>e.$hidden = fold);\n\n        if(!redraw){\n            return;\n        }\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n    }\n\n    updateVisibility(node = null){\n        if(!node){\n            this.data.getRoots().forEach(n=>this.updateVisibility(n));\n            return;\n        }\n\n        if(node.folded){\n            this.foldSubtree(node, true, false);\n            return;\n        }\n\n        node.childEdges.forEach(e => this.updateVisibility(e.childNode));\n\n    }\n\n    moveNodeTo(x,y){\n\n    }\n\n    updateNodePosition(node) {\n        this.getNodeD3Selection(node).raise().attr('transform', 'translate('+node.location.x+' '+node.location.y+')');\n    }\n\n    updateTextPosition(text) {\n        this.getTextD3Selection(text).raise().attr('transform', 'translate('+text.location.x+' '+text.location.y+')');\n    }\n\n    getNodeD3Selection(node){\n        return this.getNodeD3SelectionById(node.id);\n    }\n\n    getNodeD3SelectionById(id){\n        return this.mainGroup.select('#node-'+id);\n    }\n    getTextD3Selection(text){\n        return this.getTextD3SelectionById(text.id);\n    }\n    getTextD3SelectionById(id){\n        return this.mainGroup.select('#text-'+id);\n    }\n\n    getSelectedNodes(visibleOnly = false) {\n        let selectedVisible = this.mainGroup.selectAll(\".node.selected\").data();\n        if(visibleOnly){\n            return selectedVisible;\n        }\n\n        let allSelected  = [];\n        allSelected.push(...selectedVisible);\n\n        selectedVisible.forEach(n=>{\n            if(n.folded){\n                let descendants = this.data.getAllDescendantNodes(n);\n                if(descendants){\n                    allSelected.push(...descendants);\n                }\n            }\n        });\n\n        return allSelected;\n    }\n\n    getSelectedTexts(){\n        return this.mainGroup.selectAll(\".floating-text.selected\").data();\n    }\n\n    clearSelection(){\n        this.mainGroup.selectAll(\".edge.selected\").select('path').attr(\"marker-end\", d => \"url(#arrow\"+(this.isOptimal(d)?'-optimal':'')+\")\")\n        this.mainGroup.selectAll(\".selected\").classed('selected', false);\n        this.config.onSelectionCleared();\n    }\n\n    selectEdge(edge, clearSelectionBeforeSelect){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n        this.config.onEdgeSelected(edge);\n        this.mainGroup.select('#edge-'+edge.id)\n            .classed('selected', true)\n            .select('path')\n            .attr(\"marker-end\", d => \"url(#arrow-selected)\")\n    }\n\n    isNodeSelected(node){\n        return this.getNodeD3Selection(node).classed('selected');\n    }\n\n    selectNode(node, clearSelectionBeforeSelect, skipCallback){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n\n        if(!skipCallback){\n            this.config.onNodeSelected(node);\n        }\n\n        this.getNodeD3SelectionById(node.id).classed('selected', true);\n    }\n\n    selectText(text, clearSelectionBeforeSelect, skipCallback){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n\n        if(!skipCallback){\n            this.config.onTextSelected(text)\n        }\n\n        this.getTextD3SelectionById(text.id).classed('selected', true);\n    }\n\n    selectSubTree(node, clearSelectionBeforeSelect,skipCallback) {\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n        this.selectNode(node, false, skipCallback);\n        node.childEdges.forEach(e=>this.selectSubTree(e.childNode, false, true));\n    }\n\n    selectAllNodes() {\n        this.mainGroup.selectAll(\".node\").classed('selected', true);\n    }\n\n    autoLayout(type, withoutStateSaving){\n        this.layout.autoLayout(type, withoutStateSaving);\n    }\n\n    updateDiagramTitle(titleValue){\n        if(!titleValue){\n            titleValue = '';\n        }\n        this.diagramTitle = titleValue;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(true);\n    }\n\n    redrawDiagramTitle(){\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\n\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\n        title.text(this.diagramTitle);\n        Layout.setHangingPosition(title);\n\n        var marginTop = parseInt(this.config.title.margin.top);\n        this.titleContainer.attr('transform', 'translate('+(svgWidth/2)+','+( marginTop)+')');\n    }\n    redrawDiagramDescription(){\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\n\n        var desc = this.titleContainer.selectOrAppend('text.sd-description');\n\n        if(!this.config.description.show){\n            desc.remove();\n            return;\n        }\n\n        var lines = this.diagramDescription ? this.diagramDescription.split('\\n') : [];\n        var tspans = desc.selectAll('tspan').data(lines);\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n        Layout.setHangingPosition(desc);\n\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\n\n        var marginTop = 0;\n        if(this.diagramTitle){\n            marginTop += title.node().getBBox().height;\n            marginTop+= Math.max(parseInt(this.config.description.margin.top), 0);\n        }\n\n\n        desc.attr('transform', 'translate(0,'+( marginTop)+')');\n    }\n\n    updateDiagramDescription(descriptionValue){\n        if(!descriptionValue){\n            descriptionValue = '';\n        }\n        this.diagramDescription = descriptionValue;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(true);\n    }\n\n\n    getTitleGroupHeight(withMargins){\n        if(!this.titleContainer){\n            return 0;\n        }\n        var h = this.titleContainer.node().getBBox().height;\n        if(withMargins){\n            h+= parseInt(this.config.title.margin.bottom);\n            h+= parseInt(this.config.title.margin.top);\n        }\n        return h;\n    }\n\n}\n","export * from './src/index'\n"]}