{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app-utils.js","src/context-menu/context-menu.js","src/context-menu/edge-context-menu.js","src/context-menu/main-context-menu.js","src/context-menu/node-context-menu.js","src/context-menu/text-context-menu.js","src/d3-extensions.js","src/d3.js","src/i18n/de.json","src/i18n/en.json","src/i18n/fr.json","src/i18n/i18n.js","src/i18n/it.json","src/i18n/pl.json","src/index.js","src/layout.js","src/node-drag-handler.js","src/symbols/circle.js","src/symbols/triangle.js","src/templates.js","src/templates/growl_message.html","src/text-drag-handler.js","src/tooltip.js","src/tree-designer.js","index.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","1","module","d3","_interopRequireWildcard","_templates","_i18n","_sdUtils","AppUtils","textD3Obj","textString","width","textObj","node","textContent","getComputedTextLength","x","getSubStringLength","substring","tooltip","placeTextWithEllipsis","on","d","transition","duration","style","html","event","pageX","pageY","element","window","getComputedStyle","getPropertyValue","transform","g","document","createElementNS","setAttributeNS","matrix","baseVal","consolidate","pathNode","point","best","bestLength","scan","scanDistance","pathLength","getTotalLength","precision","bestDistance","Infinity","scanLength","distance2","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","y","distance","Math","sqrt","p","dx","dy","message","type","arguments","undefined","position","time","Templates","get","select","selectOrAppend","append","remove","tag","attribs","parent","el","createElement","deepExtend","appendChild","parentNode","removeChild","text","replace","createTextNode","div","innerHTML","name","evt","createEvent","initEvent","dispatchEvent","fireEvent","data","CustomEvent","detail","initCustomEvent","error","Utils","isString","key","i18n","selection","classed","_show","exact","display","offsetParent","url","callback","xhr","XMLHttpRequest","open","responseType","onload","status","response","send","sanitizeHeight","height","container","parseInt","sanitizeWidth","availableHeight","margin","max","top","bottom","availableWidth","left","right","ContextMenu","menu","opts","self","this","openCallback","onOpen","closeCallback","onClose","selectAll","enter","attr","index","elm","preventDefault","stopPropagation","ret","divider","disabled","action","title","_contextMenu","EdgeContextMenu","_ContextMenu","treeDesigner","push","injectDecisionNode","injectChanceNode","_this","_sdModel","MainContextMenu","mousePosition","newNode","domain","DecisionNode","addNode","ChanceNode","newText","Text","addText","pasteToNewLocation","copiedNodes","selectAllNodes","clearSelection","Point","mouse","svg","move","getMainGroupTranslation","NodeContextMenu","operationsForObject","copyMenuItem","selectNode","isNodeSelected","copySelectedNodes","cutMenuItem","cutSelectedNodes","pasteMenuItem","pasteToNode","folded","deleteMenuItem","removeSelectedNodes","TerminalNode","$TYPE","addNodeConversionOptions","addDecisionNode","addChanceNode","addTerminalNode","selectSubTree","foldSubtree","operations","forEach","op","performOperation","canPerform","conversionOptions","getNodeConversionOptions","options","allAllowedTypes","childEdges","$parent","filter","getNodeConversionOption","typeToConvertTo","convertNode","TextContextMenu","selectText","removeSelectedTexts","D3Extensions","prototype","insertSelector","selector","appendSelector","selectOrInsert","operation","selectorParts","split","shift","selectorModifier","selectorItem","insertOrAppendSelector","empty","Object","keys","_d3Dispatch","_d3Scale","_d3Selection","_d3Shape","_d3Drag","_d3Brush","_d3Array","_d3Hierarchy","_d3TimeFormat","contextMenu","main","paste","copy","cut","delete","convert","decision","chance","terminal","selectSubtree","fold","unfold","flipSubtree","edge","validation","incompletePath","probabilityDoNotSumUpTo1","invalidProbability","invalidPayoff","growl","brushDisabled","brushEnabled","payoff","default","named","aggregatedPayoff","probabilityToEnter","probability","_i18next","en","pl","it","de","fr","lng","language","resources","$instance","_i18next2","createInstance","err","opt","_treeDesigner","_appUtils","_tooltip","_d3Extensions","extend","Layout","config","nodeTypeToSymbol","symbolSquare","onAutoLayoutChanged","nodeTypeOrder","treeMargin","targetSymbolSize","nodeSeparation","b","nodeSymbolSize","sort","childNode","location","isManualLayout","autoLayout","moveNodeToEmptyPlace","redraw","MANUAL_LAYOUT_NAME","getNodeMinX","getNodeMinY","gridWidth","$linePoints","redrawIfChanged","findCollidingNode","find","nodesSortedByX","nodeSize","nodes","slice","colidingNode","stepX","stepY","changed","newLocation","moveTo","_fireOnAutoLayoutChangedCallbacks","path","nodeSymbol","symbol","size","$id","each","box","getBBox","min","set","setHangingPosition","fontSize","getFontSize","items","displayValue","isArray","aggregatedPayoffs","line","dX","sign","slantStartXOffset","slantWidth","edgeSlantWidthMax","point1","point2","point3","point4","datum","len","previousSibling","childNodes","minX","bb","getTextD3Selection","minY","Number","MAX_SAFE_INTEGER","getMinMarginBetweenNodes","$hidden","withoutStateSaving","saveState","setGridWidth","update","gridHeight","setGridHeight","setNodeSize","fitNodesInPlottingRegion","getRoots","setEdgeSlantWidthMax","currentLayout","newLayout","prevTreeMaxY","layout","root","hierarchy","map","cluster","tree","separation","maxY","pivot","limit","limitNodePositioning","backupNodeLocation","maxX","getNodeMaxX","revertX","$location","updateNodePosition","texts","limitTextPositioning","getTextMinX","getTextMaxX","getTextMinY","updateTextPosition","c","isHidden","NodeDragHandler","drag","subject","getTranslation","dragStarted","onDrag","dragEnded","ignoreDrag","ignoredDrag","hide","selectedNodes","getSelectedNodes","prevDragEvent","dragEventCount","draggedNode","moveNodes","redrawEdges","updatePlottingRegionSize","pi","PI","context","dist","bezierCurveTo","lineTo","closePath","templateName","variables","compiled","template","imports","include","v","props","styleProp","styleName","variableName","clazz","treeDesignerSelector","treeDesignerStyles","styleRule","nodeSelector","edgeSelector","TextDragHandler","draggedText","moveTexts","Tooltip","xOffset","yOffset","getContainer","updatePosition","target","htmlOrFn","isFunction","show","_mainContextMenu","_nodeContextMenu","_layout","_nodeDragHandler","_textDragHandler","_textContextMenu","_edgeContextMenu","Hammer","TreeDesignerConfig","custom","scale","fontFamily","fontWeight","fontStyle","description","readOnly","disableAnimations","forceFullEdgeRedraw","hideLabels","hidePayoffs","hideProbabilities","raw","payoffNumberFormatter","probabilityNumberFormatter","onNodeSelected","onEdgeSelected","onTextSelected","onSelectionCleared","payoffNames","maxPayoffsToDisplay","TreeDesigner","dataModel","setConfig","initContainer","init","updateCustomStyles","initSvg","initLayout","initI18n","initBrush","initEdgeMarkers","initMainContextMenu","initNodeContextMenu","initEdgeContextMenu","initNodeDragHandler","initTextDragHandler","initTextContextMenu","nodeDragHandler","textDragHandler","withTransitions","redrawDiagramTitle","redrawDiagramDescription","updateScale","updateMargin","transitionPrev","redrawNodes","redrawFloatingTexts","updateValidationMessages","computeAvailableSpace","wrapperGroup","mainGroup","mc","Manager","touchAction","add","Press","Pinch","disableBrush","waitForFinalEvent","enableBrush","group","topMargin","diagramTitle","diagramDescription","getTitleGroupHeight","clone","setMargin","setScale","containerIdOrElem","trim","startsWith","_parents","svgWidth","svgHeight","mainGroupBox","newSvgWidth","newSvgHeight","updateBrushExtent","exit","nodesEnter","labelEnter","payoffEnter","indicatorEnter","aggregatedPayoffEnter","probabilityToEnterEnter","nodesMerge","merge","isOptimal","nodesMergeT","drawNodeSymbol","nodeLabelPosition","labelMergeT","updateTextLines","payoffTspans","item","payoffTspansM","val","isNaN","attachPayoffTooltip","payoffT","nodePayoffPosition","aggregatedPayoffTspans","aggregatedPayoffTspansM","aggregatedPayoffT","nodeAggregatedPayoffPosition","attach","probabilityToEnterT","nodeProbabilityToEnterPosition","indicator","nodeIndicatorPosition","nodeContextMenu","pointerType","cancelDrag","button","nodeUnfoldButtonPosition","payoffFiledName","object","value","number","lines","reverse","tspans","edgesContainer","edges","edgesEnter","probabilityEnter","edgesMerge","optimalClassName","edgesMergeT","edgeLineD","selectEdge","edgeLabelPosition","_","displayPayoff","payoffTextT","edgePayoffPosition","displayProbability","probabilityMerge","probabilityMergeT","edgeProbabilityPosition","raise","edgeContextMenu","POINTER_TOUCH","textsEnter","textsMerge","textsMergeT","replaceUrls","escapeHtml","textContextMenu","validationResults","validationResult","isValid","getOwnPropertyNames","objectIdToError","id","errors","nodeSelection","_this2","getNodeD3SelectionById","tooltipHtml","getValidationMessage","initArrowMarker","brush","extent","brushContainer","hoveredEdge","mainGroupTranslation","offset","m","mgt","closest","cp","closestPoint","invert","translation","mainContextMenu","getNewChildLocation","injectNode","getInjectedNodeLocation","removeNode","removeNodes","selectedTexts","getSelectedTexts","removeTexts","notClearPrevSelection","cloneSubtree","copyNode","selectedRoots","findSubtreeRoots","copyNodes","_this3","nodesToAttach","toAttach","attached","_this4","attachSubtree","getAllDescendantNodes","_this5","perform","getAllDescendantEdges","_this6","updateVisibility","getNodeD3Selection","getTextD3SelectionById","visibleOnly","selectedVisible","allSelected","apply","_toConsumableArray","descendants","_this7","_this8","clearSelectionBeforeSelect","skipCallback","_this9","titleValue","titleContainer","marginTop","desc","descriptionValue","withMargins","h","_index"],"mappings":"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","file":"sd-tree-designer.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import * as d3 from \"./d3\";\nimport {Templates} from \"./templates\";\nimport {i18n} from \"./i18n/i18n\";\nimport {Utils} from \"sd-utils\";\n\nexport class AppUtils {\n\n    static sanitizeHeight = function (height, container) {\n        return (height || parseInt(container.style('height'), 10) || 400);\n    };\n\n    static sanitizeWidth = function (width, container) {\n        return (width || parseInt(container.style('width'), 10) || 960);\n    };\n\n    static availableHeight = function (height, container, margin) {\n        return Math.max(0, AppUtils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n    };\n\n    static availableWidth = function (width, container, margin) {\n        return Math.max(0, AppUtils.sanitizeWidth(width, container) - margin.left - margin.right);\n    };\n\n    //places textString in textObj, adds an ellipsis if text can't fit in width\n    static placeTextWithEllipsis(textD3Obj, textString, width) {\n        var textObj = textD3Obj.node();\n        textObj.textContent = textString;\n\n        var margin = 0;\n        var ellipsisLength = 9;\n        //ellipsis is needed\n        if (textObj.getComputedTextLength() > width + margin) {\n            for (var x = textString.length - 3; x > 0; x -= 1) {\n                if (textObj.getSubStringLength(0, x) + ellipsisLength <= width + margin) {\n                    textObj.textContent = textString.substring(0, x) + \"...\";\n                    return true;\n                }\n            }\n            textObj.textContent = \"...\"; //can't place at all\n            return true;\n        }\n        return false;\n    }\n\n    static placeTextWithEllipsisAndTooltip(textD3Obj, textString, width, tooltip) {\n        var ellipsisPlaced = AppUtils.placeTextWithEllipsis(textD3Obj, textString, width);\n        if (ellipsisPlaced && tooltip) {\n            textD3Obj.on(\"mouseover\", function (d) {\n                tooltip.transition()\n                    .duration(200)\n                    .style(\"opacity\", .9);\n                tooltip.html(textString)\n                    .style(\"left\", (d3.event.pageX + 5) + \"px\")\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\n            });\n\n            textD3Obj.on(\"mouseout\", function (d) {\n                tooltip.transition()\n                    .duration(500)\n                    .style(\"opacity\", 0);\n            });\n        }\n\n    }\n\n    static getFontSize(element) {\n        return window.getComputedStyle(element, null).getPropertyValue(\"font-size\");\n    }\n\n    static getTranslation(transform) {\n        // Create a dummy g for calculation purposes only. This will never\n        // be appended to the DOM and will be discarded once this function\n        // returns.\n        var g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n\n        // Set the transform attribute to the provided string value.\n        g.setAttributeNS(null, \"transform\", transform);\n\n        // consolidate the SVGTransformList containing all transformations\n        // to a single SVGTransform of type SVG_TRANSFORM_MATRIX and get\n        // its SVGMatrix.\n        var matrix = g.transform.baseVal.consolidate().matrix;\n\n        // As per definition values e and f are the ones for the translation.\n        return [matrix.e, matrix.f];\n    }\n\n\n    static closestPoint(pathNode, point) {\n        var pathLength = pathNode.getTotalLength(),\n            precision = 8,\n            best,\n            bestLength,\n            bestDistance = Infinity;\n\n        // linear scan for coarse approximation\n        for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n            if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n                best = scan, bestLength = scanLength, bestDistance = scanDistance;\n            }\n        }\n\n        // binary search for precise estimate\n        precision /= 2;\n        while (precision > 0.5) {\n            var before,\n                after,\n                beforeLength,\n                afterLength,\n                beforeDistance,\n                afterDistance;\n            if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n                best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n            } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n                best = after, bestLength = afterLength, bestDistance = afterDistance;\n            } else {\n                precision /= 2;\n            }\n        }\n\n        best = [best.x, best.y];\n        best.distance = Math.sqrt(bestDistance);\n        return best;\n\n        function distance2(p) {\n            var dx = p.x - point[0],\n                dy = p.y - point[1];\n            return dx * dx + dy * dy;\n        }\n    }\n\n    static growl(message, type='info', position='right', time = 2000){\n        var html = Templates.get('growl', {message:message, type:type})\n\n        var g = d3.select('body').selectOrAppend('div.sd-growl-list.'+position).append('div').html(html);\n        setTimeout(function(){\n            g.remove();\n        }, time)\n    }\n\n\n    static createElement(tag, attribs, parent) {\n        var el = document.createElement(tag);\n\n        if (attribs) {\n            AppUtils.deepExtend(el, attribs);\n        }\n        if (parent) {\n            parent.appendChild(el);\n        }\n        return el;\n    };\n\n    static removeElement(element) {\n        element.parentNode.removeChild(element);\n    }\n\n    static replaceUrls(text){\n        if(!text){\n            return text;\n        }\n        var urlRegexp = /((ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?)/\n\n        return text.replace(urlRegexp, '<a href=\"$1\" target=\"_blank\">$1</a>');\n    }\n\n    static escapeHtml(html)\n    {\n        var text = document.createTextNode(html);\n        var div = document.createElement('div');\n        div.appendChild(text);\n        return div.innerHTML;\n    }\n\n    static dispatchHtmlEvent(element, name){\n        if (\"createEvent\" in document) {\n            var evt = document.createEvent(\"HTMLEvents\");\n            evt.initEvent(name, false, true);\n            element.dispatchEvent(evt);\n        }\n        else\n            element.fireEvent(\"on\"+name);\n    }\n\n    static dispatchEvent(name, data){\n        var event;\n        try{\n            event = new  CustomEvent(name,{ 'detail': data });\n        }catch (e){ //IE\n            event = document.createEvent('CustomEvent');\n            event.initCustomEvent(name, false, false, data);\n        }\n        document.dispatchEvent(event);\n    }\n\n    static getValidationMessage(error){\n        if(Utils.isString(error)){\n            error = {name: error};\n        }\n        var key = 'validation.' + error.name;\n        return i18n.t(key, error.data);\n    }\n\n    static hide(selection){\n        selection.classed('sd-hidden', true);\n    }\n\n    static show(selection, show=true){\n        selection.classed('sd-hidden', !show);\n    }\n\n\n\n    static isHidden(el, exact = true) {\n        if(!el){\n            return true;\n        }\n        if(exact){\n            var style = window.getComputedStyle(el);\n            return (style.display === 'none')\n        }\n        return (el.offsetParent === null)\n    }\n\n    static getJSON(url, callback) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('get', url, true);\n        xhr.responseType = 'json';\n        xhr.onload = function () {\n            var status = xhr.status;\n            if (status == 200) {\n                callback(xhr.response, null);\n            } else {\n                callback(null, status);\n            }\n        };\n        xhr.send();\n    }\n}\n","import * as d3 from '../d3'\n\n/*based on:\n * github.com/patorjk/d3-context-menu */\n\nexport class ContextMenu {\n    openCallback;\n    closeCallback;\n\n    constructor(menu, opts) {\n        var self = this;\n\n        if (typeof opts === 'function') {\n            self.openCallback = opts;\n        } else {\n            opts = opts || {};\n            self.openCallback = opts.onOpen;\n            self.closeCallback = opts.onClose;\n        }\n\n        // create the div element that will hold the context menu\n        d3.selectAll('.d3-context-menu').data([1])\n            .enter()\n            .append('div')\n            .attr('class', 'd3-context-menu');\n\n        // close menu\n        d3.select('body').on('click.d3-context-menu', function () {\n            d3.select('.d3-context-menu').style('display', 'none');\n            if (self.closeCallback) {\n                self.closeCallback();\n            }\n        });\n\n        // this gets executed when a contextmenu event occurs\n        return function (data, index) {\n            var elm = this;\n\n            d3.selectAll('.d3-context-menu').html('');\n            var list = d3.selectAll('.d3-context-menu')\n                .on('contextmenu', function (d) {\n                    d3.select('.d3-context-menu').style('display', 'none');\n                    d3.event.preventDefault();\n                    d3.event.stopPropagation();\n                })\n                .append('ul');\n            list.selectAll('li').data(typeof menu === 'function' ? menu(data) : menu).enter()\n                .append('li')\n                .attr('class', function (d) {\n                    var ret = '';\n                    if (d.divider) {\n                        ret += ' is-divider';\n                    }\n                    if (d.disabled) {\n                        ret += ' is-disabled';\n                    }\n                    if (!d.action) {\n                        ret += ' is-header';\n                    }\n                    return ret;\n                })\n                .html(function (d) {\n                    if (d.divider) {\n                        return '<hr>';\n                    }\n                    if (!d.title) {\n                        console.error('No title attribute set. Check the spelling of your options.');\n                    }\n                    return (typeof d.title === 'string') ? d.title : d.title(data);\n                })\n                .on('click', function (d, i) {\n                    if (d.disabled) return; // do nothing if disabled\n                    if (!d.action) return; // headers have no \"action\"\n                    d.action(elm, data, index);\n                    d3.select('.d3-context-menu').style('display', 'none');\n\n                    if (self.closeCallback) {\n                        self.closeCallback();\n                    }\n                });\n\n            // the openCallback allows an action to fire before the menu is displayed\n            // an example usage would be closing a tooltip\n            if (self.openCallback) {\n                if (self.openCallback(data, index) === false) {\n                    return;\n                }\n            }\n\n            // display context menu\n            d3.select('.d3-context-menu')\n                .style('left', (d3.event.pageX - 2) + 'px')\n                .style('top', (d3.event.pageY - 2) + 'px')\n                .style('display', 'block');\n\n            d3.event.preventDefault();\n            d3.event.stopPropagation();\n        };\n    };\n\n    static hide() {\n        d3.select('.d3-context-menu').style('display', 'none');\n    }\n\n}\n","import {ContextMenu} from './context-menu'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class EdgeContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var menu = function (d) {\n\n            var menu = [];\n\n            menu.push({\n                title: i18n.t('contextMenu.edge.injectDecisionNode'),\n                action: function (elm, d, i) {\n                    treeDesigner.injectDecisionNode(d)\n                }\n            });\n            menu.push({\n                title: i18n.t('contextMenu.edge.injectChanceNode'),\n                action: function (elm, d, i) {\n                    treeDesigner.injectChanceNode(d)\n                }\n            });\n\n\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {domain as model} from 'sd-model'\nimport * as d3 from '../d3'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class MainContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var mousePosition = null;\n        var menu = function (d) {\n\n            var menu = [];\n            menu.push({\n                title: i18n.t('contextMenu.main.addDecisionNode'),\n                action: function (elm, d, i) {\n                    var newNode = new model.DecisionNode(mousePosition);\n                    treeDesigner.addNode(newNode)\n                }\n            });\n            menu.push({\n                title: i18n.t('contextMenu.main.addChanceNode'),\n                action: function (elm, d, i) {\n                    var newNode = new model.ChanceNode(mousePosition);\n                    treeDesigner.addNode(newNode)\n                }\n            });\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.main.addText'),\n                action: function (elm, d, i) {\n                    var newText = new model.Text(mousePosition);\n                    treeDesigner.addText(newText);\n                },\n\n            });\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.main.paste'),\n                action: function (elm, d, i) {\n                    treeDesigner.pasteToNewLocation(mousePosition);\n                },\n                disabled: !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\n\n            });\n            menu.push({divider: true});\n\n            menu.push({\n                title: i18n.t('contextMenu.main.selectAllNodes'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectAllNodes();\n                }\n            });\n            return menu;\n        };\n\n        super(menu, {onOpen: () => {\n            treeDesigner.clearSelection();\n            mousePosition = new model.Point(d3.mouse(treeDesigner.svg.node())).move(treeDesigner.getMainGroupTranslation(true));\n\n        }});\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {domain as model} from 'sd-model'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class NodeContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner, operationsForObject) {\n        var menu = function (d) {\n\n            var copyMenuItem = {\n                title: i18n.t('contextMenu.node.copy'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.copySelectedNodes();\n                }\n            };\n            var cutMenuItem = {\n                title: i18n.t('contextMenu.node.cut'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.cutSelectedNodes();\n                }\n            };\n            var pasteMenuItem = {\n                title: i18n.t('contextMenu.node.paste'),\n                action: function (elm, d, i) {\n                    treeDesigner.pasteToNode(d);\n                },\n                disabled: d.folded || !treeDesigner.copiedNodes || !treeDesigner.copiedNodes.length\n\n            };\n            var deleteMenuItem = {\n                title: i18n.t('contextMenu.node.delete'),\n                action: function (elm, d, i) {\n\n                    treeDesigner.selectNode(d, !treeDesigner.isNodeSelected(d));\n                    treeDesigner.removeSelectedNodes();\n\n                }\n            };\n\n            var menu = [];\n            if (d.type == model.TerminalNode.$TYPE) {\n                menu = [copyMenuItem, cutMenuItem, deleteMenuItem];\n                NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\n                return menu;\n            }\n\n            if(!d.folded){\n                menu.push({\n                    title: i18n.t('contextMenu.node.addDecisionNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addDecisionNode(d)\n                    }\n                });\n                menu.push({\n                    title: i18n.t('contextMenu.node.addChanceNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addChanceNode(d)\n                    }\n                });\n                menu.push({\n                    title: i18n.t('contextMenu.node.addTerminalNode'),\n                    action: function (elm, d, i) {\n                        treeDesigner.addTerminalNode(d)\n                    }\n                });\n                menu.push({divider: true});\n            }\n\n            menu.push(copyMenuItem);\n            menu.push(cutMenuItem);\n            menu.push(pasteMenuItem);\n            menu.push(deleteMenuItem);\n\n            NodeContextMenu.addNodeConversionOptions(d, menu, treeDesigner);\n            menu.push({divider: true});\n            menu.push({\n                title: i18n.t('contextMenu.node.selectSubtree'),\n                action: function (elm, d, i) {\n                    treeDesigner.selectSubTree(d, true);\n                }\n            });\n\n            if(!d.folded){\n                menu.push({\n                    title: i18n.t('contextMenu.node.fold'),\n                    action: function (elm, d, i) {\n                        treeDesigner.foldSubtree(d);\n                    }\n                });\n            }else{\n                menu.push({\n                    title: i18n.t('contextMenu.node.unfold'),\n                    action: function (elm, d, i) {\n                        treeDesigner.foldSubtree(d, false);\n                    }\n                });\n            }\n\n            if(operationsForObject){\n                var operations = operationsForObject(d);\n                if(operations.length) {\n                    menu.push({divider: true});\n                    operations.forEach(op=>{\n                        menu.push({\n                            title: i18n.t('contextMenu.node.'+op.name),\n                            action: function (elm, d, i) {\n                                treeDesigner.performOperation(d, op);\n                            },\n                            disabled: !op.canPerform(d)\n                        });\n                    })\n                }\n            }\n\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n\n    static addNodeConversionOptions(d, menu, treeDesigner){\n        var conversionOptions = NodeContextMenu.getNodeConversionOptions(d, treeDesigner);\n        if(conversionOptions.length){\n            menu.push({divider: true});\n            conversionOptions.forEach(o=>menu.push(o));\n\n        }\n    }\n\n    static getNodeConversionOptions(d, treeDesigner){\n        var options = [];\n\n        if(d.folded){\n            return [];\n        }\n\n        var allAllowedTypes = [model.DecisionNode.$TYPE, model.ChanceNode.$TYPE, model.TerminalNode.$TYPE];\n\n        if(!d.childEdges.length && d.$parent){\n            allAllowedTypes.filter(t=>t!==d.type).forEach(type=>{\n                options.push(NodeContextMenu.getNodeConversionOption(type, treeDesigner))\n            })\n        }else{\n            if(d instanceof model.DecisionNode){\n                options.push(NodeContextMenu.getNodeConversionOption(model.ChanceNode.$TYPE, treeDesigner))\n            }else{\n                options.push(NodeContextMenu.getNodeConversionOption(model.DecisionNode.$TYPE, treeDesigner))\n            }\n        }\n        return options;\n    }\n\n    static getNodeConversionOption(typeToConvertTo, treeDesigner){\n        return {\n            title: i18n.t('contextMenu.node.convert.'+typeToConvertTo),\n            action: function (elm, d, i) {\n                treeDesigner.convertNode(d, typeToConvertTo);\n            },\n        }\n    }\n}\n","import {ContextMenu} from './context-menu'\nimport {i18n} from \"../i18n/i18n\";\n\nexport class TextContextMenu extends ContextMenu {\n    treeDesigner;\n\n    constructor(treeDesigner) {\n        var menu = function (d) {\n\n\n            var deleteMenuItem = {\n                title: i18n.t('contextMenu.text.delete'),\n                action: function (elm, d, i) {\n\n                    treeDesigner.selectText(d, true, true);\n                    treeDesigner.removeSelectedTexts()\n\n                }\n            };\n            var menu = [];\n            menu.push(deleteMenuItem);\n            return menu;\n        };\n\n        super(menu);\n        this.treeDesigner = treeDesigner;\n    }\n}\n","import * as d3 from './d3'\n\nexport class D3Extensions {\n\n    static extend() {\n\n        d3.selection.prototype.enter.prototype.insertSelector =\n            d3.selection.prototype.insertSelector = function (selector, before) {\n                return D3Extensions.insertSelector(this, selector, before);\n            };\n\n\n        d3.selection.prototype.enter.prototype.appendSelector =\n            d3.selection.prototype.appendSelector = function (selector) {\n                return D3Extensions.appendSelector(this, selector);\n            };\n\n        d3.selection.prototype.enter.prototype.selectOrAppend =\n            d3.selection.prototype.selectOrAppend = function (selector) {\n                return D3Extensions.selectOrAppend(this, selector);\n            };\n\n        d3.selection.prototype.enter.prototype.selectOrInsert =\n            d3.selection.prototype.selectOrInsert = function (selector, before) {\n                return D3Extensions.selectOrInsert(this, selector, before);\n            };\n\n\n    }\n\n    static insertOrAppendSelector(parent, selector, operation, before) {\n\n        var selectorParts = selector.split(/([\\.\\#])/);\n        var element = parent[operation](selectorParts.shift(), before);//\":first-child\"\n\n        while (selectorParts.length > 1) {\n            var selectorModifier = selectorParts.shift();\n            var selectorItem = selectorParts.shift();\n            if (selectorModifier === \".\") {\n                element = element.classed(selectorItem, true);\n            } else if (selectorModifier === \"#\") {\n                element = element.attr('id', selectorItem);\n            }\n        }\n        return element;\n    }\n\n    static insertSelector(parent, selector, before) {\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"insert\", before);\n    }\n\n    static appendSelector(parent, selector) {\n        return D3Extensions.insertOrAppendSelector(parent, selector, \"append\");\n    }\n\n    static selectOrAppend(parent, selector, element) {\n        var selection = parent.select(selector);\n        if (selection.empty()) {\n            if (element) {\n                return parent.append(element);\n            }\n            return D3Extensions.appendSelector(parent, selector);\n\n        }\n        return selection;\n    };\n\n    static selectOrInsert(parent, selector, before) {\n        var selection = parent.select(selector);\n        if (selection.empty()) {\n            return D3Extensions.insertSelector(parent, selector, before);\n        }\n        return selection;\n    };\n}\n","export * from 'd3-dispatch';\nexport * from 'd3-scale';\nexport * from 'd3-selection';\nexport * from 'd3-shape'\nexport * from 'd3-drag';\nexport * from 'd3-brush'\nexport * from 'd3-array'\nexport * from 'd3-hierarchy'\nexport * from 'd3-time-format'\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\n            \"addText\": \"Text hinzufügen \",\n            \"paste\": \"Einfügen\",\n            \"selectAllNodes\": \"Alle Knoten auswählen\"\n        },\n        \"node\":{\n            \"copy\": \"Kopieren\",\n            \"cut\": \"Ausschneiden\",\n            \"paste\": \"Einfügen\",\n            \"delete\": \"Löschen\",\n            \"addDecisionNode\": \"Entscheidungsknoten hinzufügen\",\n            \"addChanceNode\": \"Zufall Knoten hinzufügen\",\n            \"addTerminalNode\": \"Endknotten hinzufügen\",\n            \"convert\":{\n                \"decision\": \"Als Entscheidungsknoten\",\n                \"chance\": \"Als Zufall Knoten\",\n                \"terminal\": \"Als Endknoten\"\n            },\n            \"selectSubtree\": \"Teilbaum wählen\",\n            \"fold\": \"Teilbaum falten\",\n            \"unfold\": \"Teilbaum entfalten\",\n\t\t\t\n            \"flipSubtree\": \"Teilbaum umdrehen\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Entscheidungsknoten Injizieren\",\n            \"injectChanceNode\": \"Zufall Knoten Injizieren\"\n        },\n        \"text\":{\n            \"delete\": \"Löschen\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Pfad, der nicht mit dem Endknoten endet\",\n        \"probabilityDoNotSumUpTo1\": \"Die Summe der Wahrscheinlichkeiten ist nicht gleich 1\",\n        \"invalidProbability\": \"Ungültige Wahrscheinlichkeit im Zweig #{{number}}\",\n        \"invalidPayoff\": \"Ungültige Auszahlung in Zweig #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Auswahlbürste deaktiviert\",\n        \"brushEnabled\": \"Auswahlbürste aktiviert\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Auszahlung {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Aggregierte Auszahlung {{number}}\",\n                \"named\": \"Aggregierte {{name}}\"\n            },\n            \"probabilityToEnter\": \"Wahrscheinlichkeit\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Auszahlung {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Wahrscheinlichkeit: {{value}}\"\n        }\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Add Decision Node\",\n            \"addChanceNode\": \"Add Chance Node\",\n            \"addText\": \"Add Text\",\n            \"paste\": \"Paste\",\n            \"selectAllNodes\": \"Select all nodes\"\n        },\n        \"node\":{\n            \"copy\": \"Copy\",\n            \"cut\": \"Cut\",\n            \"paste\": \"Paste\",\n            \"delete\": \"Delete\",\n            \"addDecisionNode\": \"Add Decision Node\",\n            \"addChanceNode\": \"Add Chance Node\",\n            \"addTerminalNode\": \"Add Terminal Node\",\n            \"convert\":{\n                \"decision\": \"As Decision Node\",\n                \"chance\": \"As Chance Node\",\n                \"terminal\": \"As Terminal Node\"\n            },\n            \"selectSubtree\": \"Select subtree\",\n            \"fold\": \"Fold subtree\",\n            \"unfold\": \"Unfold subtree\",\n            \"flipSubtree\": \"Flip subtree\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Inject Decision Node\",\n            \"injectChanceNode\": \"Inject Chance Node\"\n        },\n        \"text\":{\n            \"delete\": \"Delete\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Path not ending with terminal node\",\n        \"probabilityDoNotSumUpTo1\": \"Probabilities do not sum up to 1\",\n        \"invalidProbability\": \"Invalid probability in edge #{{number}}\",\n        \"invalidPayoff\": \"Invalid payoff in edge #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Selection brush disabled\",\n        \"brushEnabled\": \"Selection brush enabled\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Payoff {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Aggregated Payoff {{number}}\",\n                \"named\": \"Aggregated {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probability to enter\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Payoff {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probability: {{value}}\"\n        }\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Ajouter noud de décision\",\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\n            \"addText\": \"Ajouter du texte\",\n            \"paste\": \"Coller\",\n            \"selectAllNodes\": \"Sélectionner tous les nouds\"\n        },\n        \"node\":{\n            \"copy\": \"Copie\",\n            \"cut\": \"Couper\",\n            \"paste\": \"Coller\",\n            \"delete\": \"Effacer\",\n            \"addDecisionNode\": \"Ajouter noud de décision\",\n            \"addChanceNode\": \"Ajouter noud aléatoire\",\n            \"addTerminalNode\": \"Ajouter un noeud terminal\",\n            \"convert\":{\n                \"decision\": \"Comme noud de décision\",\n                \"chance\": \"Comme noud aléatoire\",\n                \"terminal\": \"Comme un noeud terminal\"\n            },\n            \"selectSubtree\": \"Sélectionner une sous-arborescence\",\n            \"fold\": \"Plier sous-arbre\",\n            \"unfold\": \"Déplier arbre sous-arbre\",\n            \"flipSubtree\": \"Basculer sous-arbre\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Injecter un noeud de décision\",\n            \"injectChanceNode\": \"Injecter un noeud de chance\"\n        },\n        \"text\":{\n            \"delete\": \"Effacer\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Parcours non terminé par noeud terminal\",\n        \"probabilityDoNotSumUpTo1\": \"La somme des probabilités n'est pas 1 ou plus\",\n        \"invalidProbability\": \"Probabilité invalide - le bord #{{number}}\",\n        \"invalidPayoff\": \"Avantage invalide - le bord #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Brosse de sélection désactivée\",\n        \"brushEnabled\": \"Brosse de sélection activée\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Avantage {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Avantage agrégé {{number}}\",\n                \"named\": \"Agrégé  {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probabilité d'entrée\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Avantage {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probabilité: {{value}}\"\n        }\n    }\n}\n","import i18next from 'i18next';\nimport * as en from './en.json'\nimport * as pl from './pl.json'\nimport * as it from './it.json'\nimport * as de from './de.json'\nimport * as fr from './fr.json'\n\nexport class i18n{\n\n    static $instance;\n    static language;\n\n    static init(lng){\n        i18n.language = lng;\n        let resources = {\n            en: {\n                translation: en\n            },\n            pl: {\n                translation: pl\n            },\n            it: {\n                translation: it\n            },\n            de: {\n                translation: de\n            },\n            fr: {\n                translation: fr\n            }\n        };\n        i18n.$instance = i18next.createInstance({\n            lng: lng,\n            fallbackLng: 'en',\n            resources: resources\n        }, (err, t) => {\n        });\n    }\n\n    static t(key, opt){\n        return i18n.$instance.t(key, opt)\n    }\n}\n","module.exports={\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\n            \"addText\": \"Aggiungi testo\",\n            \"paste\": \"Incolla\",\n            \"selectAllNodes\": \"Seleziona tutti i nodi\"\n        },\n        \"node\":{\n            \"copy\": \"Copia\",\n            \"cut\": \"Taglia\",\n            \"paste\": \"Incolla\",\n            \"delete\": \"Cancella\",\n            \"addDecisionNode\": \"Aggiungi un nodo di decisione\",\n            \"addChanceNode\": \"Aggiungi un nodo opportunità\",\n            \"addTerminalNode\": \"Aggiungi un nodo terminale\",\n            \"convert\":{\n                \"decision\": \"Come Decision Node\",\n                \"chance\": \"Come Chance Node\",\n                \"terminal\": \"Come Terminal Node\"\n            },\n            \"selectSubtree\": \"Seleziona Sotto-albero\",\n            \"fold\": \"Piega sotto-albero\",\n            \"unfold\": \"Dispiegarsi sotto-albero\",\t\t\t\n            \"flipSubtree\": \"Ribalta sotto-albero\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Inietta nodo di decisione\",\n            \"injectChanceNode\": \"Inietta nodo opportunità\"\n        },\n        \"text\":{\n            \"delete\": \"Cancella\"\n        }\n    },\n    \"validation\":{\n        \"incompletePath\": \"Percorso senza nodo terminale\",\n        \"probabilityDoNotSumUpTo1\": \"La somma delle probabilità è diversa da 1\",\n        \"invalidProbability\": \"Probabilità non valida - bordo #{{number}}\",\n        \"invalidPayoff\": \"Saldo non valido - bordo #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Selezione pennello disabilitata\",\n        \"brushEnabled\": \"Selezione pennello abilitata\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Saldo {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Saldo aggregato {{number}}\",\n                \"named\": \"Aggregato {{name}}\"\n            },\n            \"probabilityToEnter\": \"Probabilità da inserire\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Saldo {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Probabilità: {{value}}\"\n        }\n    }\n}\n","module.exports={\n\n    \"contextMenu\":{\n        \"main\":{\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\n            \"addText\": \"Dodaj Tekst\",\n            \"paste\": \"Wklej\",\n            \"selectAllNodes\": \"Zaznacz wszystkie węzły\"\n        },\n        \"node\":{\n            \"copy\": \"Kopiuj\",\n            \"cut\": \"Wytnij\",\n            \"paste\": \"Wklej\",\n            \"delete\": \"Usuń\",\n            \"addDecisionNode\": \"Dodaj Węzeł Decyzyjny\",\n            \"addChanceNode\": \"Dodaj Węzeł Losowy\",\n            \"addTerminalNode\": \"Dodaj Węzeł Końcowy\",\n            \"convert\":{\n                \"decision\": \"Jako Węzeł Decyzyjny\",\n                \"chance\": \"Jako Węzeł Losowy\",\n                \"terminal\": \"Jako Węzeł Końcowy\"\n            },\n            \"selectSubtree\": \"Zaznacz poddrzewo\",\n            \"fold\": \"Zwiń poddrzewo\",\n            \"unfold\": \"Rozwiń poddrzewo\",\n            \"flipSubtree\": \"Przewróć poddrzewo\"\n        },\n        \"edge\":{\n            \"injectDecisionNode\": \"Wstrzyknij Węzeł Decyzyjny\",\n            \"injectChanceNode\": \"Wstrzyknij Węzeł Losowy\"\n        },\n        \"text\":{\n            \"delete\": \"Usuń\"\n        }\n    },\n\n    \"validation\":{\n        \"incompletePath\": \"Ostatnim węzłem w ścieżce powinien być Węzeł Końcowy\",\n        \"probabilityDoNotSumUpTo1\": \"Prawdopodobieństwa nie sumują sie do 1\",\n        \"invalidProbability\": \"Niepoprawne prawdopodobieństwo na krawędzi #{{number}}\",\n        \"invalidPayoff\": \"Niepoprawna wypłata na krawędzi #{{number}}\"\n    },\n    \"growl\":{\n        \"brushDisabled\": \"Zaznaczanie wyłączone\",\n        \"brushEnabled\": \"Zaznaczanie włączone\"\n    },\n    \"tooltip\":{\n        \"node\":{\n            \"payoff\": {\n                \"default\": \"Wypłata {{number}}\",\n                \"named\": \"{{name}}\"\n            },\n            \"aggregatedPayoff\": {\n                \"default\": \"Zagregowana wypłata {{number}}\",\n                \"named\": \"Zagregowana {{name}}\"\n            },\n            \"probabilityToEnter\": \"Prawdopodobieństwo wejścia\"\n        },\n        \"edge\":{\n            \"payoff\": {\n                \"default\": \"Wypłata {{number}}: {{value}}\",\n                \"named\": \"{{name}}: {{value}}\"\n            },\n            \"probability\": \"Prawdopodobieństwo: {{value}}\"\n        }\n    }\n}\n","import {D3Extensions} from './d3-extensions'\nD3Extensions.extend();\n\nexport * from './tree-designer'\nexport * from './app-utils'\nexport * from './templates'\nexport * from './tooltip'\nexport * from './d3-extensions'\nexport {default as d3} from './d3'\n\n\n","import {Utils} from 'sd-utils'\nimport {domain as model} from 'sd-model'\nimport * as d3 from './d3'\nimport circleSymbol from './symbols/circle'\nimport triangleSymbol from './symbols/triangle'\nimport {AppUtils} from \"./app-utils\";\n\n/*Tree layout manager*/\nexport class Layout{\n\n    treeDesigner;\n    data;\n    config;\n\n    nodeTypeToSymbol = {\n        'decision': d3.symbolSquare,\n        'chance': circleSymbol,\n        \"terminal\": triangleSymbol\n    };\n\n    static MANUAL_LAYOUT_NAME = 'manual';\n\n\n    onAutoLayoutChanged=[];\n\n    nodeTypeOrder = {\n        'decision' : 0,\n        'chance': 0,\n        'terminal': 1\n    };\n\n    treeMargin = 50;\n    targetSymbolSize={};\n    nodeSeparation = (a, b) => a.parent === b.parent ? 1 : 1.2\n\n    constructor(treeDesigner, data, config){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n        this.config = config;\n\n    }\n\n    update(node){\n        if(node && node.$parent){\n            node.$parent.childEdges.sort((a,b)=>a.childNode.location.y - b.childNode.location.y)\n        }\n        if(!this.isManualLayout()){\n            return this.autoLayout(this.config.type, true);\n        }\n        if(node){\n            this.moveNodeToEmptyPlace(node);\n        }else{\n            this.treeDesigner.redraw(true);\n        }\n    }\n\n    isManualLayout(){\n        return this.config.type === Layout.MANUAL_LAYOUT_NAME;\n    }\n\n    getNewChildLocation(parent){\n        if(!parent){\n            return new model.Point(this.getNodeMinX(), this.getNodeMinY())\n        }\n        var x = parent.location.x + this.config.gridWidth;\n        var y = parent.location.y;\n        if(parent.childEdges.length){\n            y = parent.childEdges[parent.childEdges.length-1].childNode.location.y+1;\n        }\n\n        return new model.Point(x, y)\n    }\n\n    getInjectedNodeLocation(edge){\n\n        var p = edge.$linePoints[2];\n\n        return new model.Point(p[0], p[1])\n    }\n\n    moveNodeToEmptyPlace(node, redrawIfChanged=true){\n        var positionMap = {};\n        var self = this;\n        node.location.x = Math.max(this.getNodeMinX(node), node.location.x);\n        node.location.y = Math.max(this.getNodeMinY(node), node.location.y);\n\n\n        this.nodesSortedByX = this.data.nodes.slice();\n        this.nodesSortedByX.sort((a,b)=>a.location.x - b.location.x);\n\n        function findCollidingNode(node, location){\n            return Utils.find(self.nodesSortedByX, n=>{\n                if(node == n){\n                    return false;\n                }\n\n                var margin = self.config.nodeSize/3;\n                var x = n.location.x;\n                var y = n.location.y;\n\n                return (location.x - margin <= x && location.x + margin >= x\n                    && location.y - margin <= y && location.y + margin >= y)\n            });\n        }\n\n        var stepX = this.config.nodeSize/2;\n        var stepY = this.config.nodeSize+10;\n        var stepXsameParent = 0;\n        var stepYsameParent = 75;\n        var changed = false;\n        var colidingNode;\n        var newLocation = new model.Point(node.location);\n        while(colidingNode = findCollidingNode(node, newLocation)){\n            changed=true;\n            var sameParent = node.$parent && colidingNode.$parent && node.$parent===colidingNode.$parent;\n            if(sameParent){\n                newLocation.move(stepXsameParent, stepYsameParent);\n            }else{\n                newLocation.move(stepX, stepY);\n            }\n        }\n        if(changed){\n            node.moveTo(newLocation.x,newLocation.y, true);\n            if(redrawIfChanged){\n                this.treeDesigner.redraw(true);\n            }\n        }\n    }\n\n    disableAutoLayout(){\n        this.config.type = Layout.MANUAL_LAYOUT_NAME;\n        this._fireOnAutoLayoutChangedCallbacks();\n    }\n\n\n    nodeSymbolSize = {};\n    drawNodeSymbol(path, transition){\n\n        var self = this;\n        var nodeSize = this.config.nodeSize;\n        this.nodeSymbol = d3.symbol().type(d=> self.nodeTypeToSymbol[d.type])\n            .size(d=>self.nodeSymbolSize[d.$id] ? Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", 64) : 64);\n\n        path\n            .each(function (d) {\n                var path = d3.select(this);\n                var prev = path.attr(\"d\");\n                if(!prev){\n                    path.attr(\"d\", self.nodeSymbol);\n                }\n                var size = Utils.get(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\");\n                if(!size){\n                    var box = path.node().getBBox();\n                    var error = Math.min(nodeSize / box.width, nodeSize / box.height);\n                    size = error * error * (self.nodeSymbolSize[d.$id]||64);\n                    Utils.set(self.targetSymbolSize, d.type+\"['\"+self.config.nodeSize+\"']\", size);\n                }\n                if(transition){\n                    path =  path.transition();\n\n                }else{\n                    self.nodeSymbolSize[d.$id] = size;\n                }\n                path.attr(\"d\", self.nodeSymbol);\n                if(transition){\n                    self.nodeSymbolSize[d.$id] = size;\n                }\n            });\n    }\n\n    nodeLabelPosition(selection) {\n        return selection\n            .attr('x', 0)\n            .attr('y', -this.config.nodeSize / 2 - 7)\n    }\n\n    nodePayoffPosition(selection) {\n        return Layout.setHangingPosition(selection)\n            .attr('x', 0)\n            .attr('y', this.config.nodeSize / 2 + 7)\n            .attr('text-anchor', 'middle')\n    }\n\n    nodeAggregatedPayoffPosition(selection) {\n        var x = this.config.nodeSize / 2 + 7;\n        var self = this;\n        selection\n            .attr('x', x)\n            .attr('y', function(d){\n                let fontSize = parseInt(AppUtils.getFontSize(this));\n                let items = d.displayValue('aggregatedPayoff');\n                let number = Utils.isArray(items) ? items.filter(it=>it !== undefined).length : 1;\n                if(number>1){\n                    return -this.getBBox().height/2 + fontSize/2;\n                }\n                return -Math.max(2, 1.8* self.config.nodeSize/fontSize);\n            });\n\n        selection.selectAll('tspan').attr('x', x);\n        return selection;\n            // .attr('text-anchor', 'middle')\n            // .attr('dominant-baseline', 'hanging')\n    }\n\n    nodeProbabilityToEnterPosition(selection) {\n        var self = this;\n\n        return Layout.setHangingPosition(selection)\n            .attr('x', this.config.nodeSize / 2 + 7)\n            .attr('y', function(d){\n                let fontSize = parseInt(AppUtils.getFontSize(this));\n                let aggregatedPayoffs = d.displayValue('aggregatedPayoff');\n                let aggregatedPayoffsNumber = Utils.isArray(aggregatedPayoffs) ? aggregatedPayoffs.filter(it=>it !== undefined).length : 1;\n                if(aggregatedPayoffsNumber>1){\n\n                    return fontSize*0.6\n                }\n\n                return Math.max(2, 1.8* self.config.nodeSize/fontSize);\n            })\n            // .attr('text-anchor', 'middle')\n            // .attr('dominant-baseline', 'central')\n    }\n\n    nodeIndicatorPosition(selection) {\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 8)\n            .attr('y', - this.config.nodeSize/2)\n            .attr('dominant-baseline', 'central')\n            .attr('text-anchor', 'middle')\n    }\n\n    nodeUnfoldButtonPosition(selection) {\n\n        return selection\n            .attr('x', this.config.nodeSize / 2 + 5)\n            .attr('y', 0)\n            .attr('dominant-baseline', 'central')\n    }\n\n    edgeLineD(edge){\n        var line = d3.line()\n            .x(d=> d[0])\n            .y(d=> d[1]);\n        // .curve(d3.curveCatmullRom.alpha(0.5));\n\n\n        var parentNode = edge.parentNode;\n        var childNode = edge.childNode;\n\n        var dX = childNode.location.x - parentNode.location.x;\n        var dY = childNode.location.y - parentNode.location.y;\n\n        var sign = dX>=0 ? 1 : -1;\n\n        var slantStartXOffset = Math.min(dX/2, this.config.nodeSize/2+10);\n        var slantWidth = Math.min(this.config.edgeSlantWidthMax, Math.max(dX/2 - slantStartXOffset, 0));\n\n        var point1 = [parentNode.location.x +this.config.nodeSize/2 + 1, parentNode.location.y];\n        var point2 = [Math.max(parentNode.location.x+slantStartXOffset, point1[0]), parentNode.location.y];\n        var point3 = [parentNode.location.x+slantStartXOffset+slantWidth, childNode.location.y];\n        var point4 = [childNode.location.x - (sign*(Math.max(0, Math.min(this.config.nodeSize/2+8, dX/2)))), childNode.location.y];\n        // var point2 = [parentNode.location.x+dX/2-slantWidth/2, parentNode.location.y];\n        // var point3 = [childNode.location.x-(dX/2-slantWidth/2), childNode.location.y];\n\n        edge.$linePoints = [point1, point2, point3, point4];\n        return line(edge.$linePoints);\n    }\n\n    edgePayoffPosition(selection) {\n        Layout.setHangingPosition(selection)\n            .attr('x', d=>d.$linePoints[2][0] + 2)\n            .attr('y', d=>d.$linePoints[2][1] + 7);\n\n        selection.selectAll('tspan').attr('x', function(d){\n            return d3.select(this.parentNode).datum().$linePoints[2][0] + 2\n        });\n        return selection;\n\n    }\n\n    edgeLabelPosition(selection) {\n        return selection\n            .attr('transform', d=>'translate('+(d.$linePoints[2][0] + 2)+','+(d.$linePoints[2][1] - 7)+')')\n            // .attr('x', d=>d.$linePoints[2][0] + 2)\n            // .attr('y', d=>d.$linePoints[2][1] - 7)\n\n    }\n\n    edgeProbabilityPosition(selection) {\n        return Layout.setHangingPosition(selection)\n            .attr('x', function (d) {\n                var len = this.getComputedTextLength();\n                var min = d.$linePoints[2][0] + 2 + this.previousSibling.childNodes[0].getComputedTextLength() + 7 + len;\n                return Math.max(min, d.$linePoints[3][0] - 8);\n            })\n            .attr('y', d=>d.$linePoints[2][1] + 7)\n    }\n\n    getMinMarginBetweenNodes(){\n      return this.config.nodeSize + 30;\n    }\n\n    getTextMinX(d){\n        let minX = 0;\n        if(d){\n            let bb = this.treeDesigner.getTextD3Selection(d).select('text').node().getBBox();\n            if (bb.x < 0) {\n                minX -= bb.x;\n            }\n        }\n        return minX;\n    }\n\n    getTextMinY(d){\n        let minY = 0;\n        if(d){\n            let bb = this.treeDesigner.getTextD3Selection(d).select('text').node().getBBox();\n            if (bb.y < 0) {\n                minY -= bb.y;\n            }\n        }\n        return minY;\n    }\n\n    getTextMaxX(d){\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n\n    getNodeMinX(d){\n        var self = this;\n        if(d && d.$parent){// && !self.isNodeSelected(d.$parent)\n            return d.$parent.location.x + self.getMinMarginBetweenNodes();\n        }\n        return self.config.nodeSize/2;\n    }\n\n    getNodeMinY(d){\n        return this.config.nodeSize/2;\n    }\n\n    getNodeMaxX(d){\n        var self = this;\n\n        if(d && d.childEdges.length){\n            return d3.min(d.childEdges, e=>!e.childNode.$hidden ? e.childNode.location.x : 9999999)-self.getMinMarginBetweenNodes();\n        }\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    setGridWidth(width, withoutStateSaving){\n        var self=this;\n        if(this.config.gridWidth===width){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    gridWidth: self.config.gridWidth\n                },\n                onUndo: (data)=> {\n                    self.setGridWidth(data.gridWidth, true);\n                },\n                onRedo: (data)=> {\n                    self.setGridWidth(width, true);\n                }\n            });\n        }\n\n        this.config.gridWidth=width;\n        this.update();\n    }\n\n    setGridHeight(gridHeight, withoutStateSaving){\n        var self=this;\n        if(this.config.gridHeight===gridHeight){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    gridHeight: self.config.gridHeight\n                },\n                onUndo: (data)=> {\n                    self.setGridHeight(data.gridHeight, true);\n                },\n                onRedo: (data)=> {\n                    self.setGridHeight(gridHeight, true);\n                }\n            });\n        }\n\n        this.config.gridHeight=gridHeight;\n        this.update();\n    }\n\n    setNodeSize(nodeSize, withoutStateSaving){\n        var self=this;\n        if(this.config.nodeSize===nodeSize){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    nodeSize: self.config.nodeSize\n                },\n                onUndo: (data)=> {\n                    self.setNodeSize(data.nodeSize, true);\n                },\n                onRedo: (data)=> {\n                    self.setNodeSize(nodeSize, true);\n                }\n            });\n        }\n\n        this.config.nodeSize=nodeSize;\n        this.update();\n        if(this.isManualLayout()){\n            this.fitNodesInPlottingRegion(self.data.getRoots());\n            this.treeDesigner.redraw(true);\n        }\n    }\n\n    setEdgeSlantWidthMax(width, withoutStateSaving){\n        var self=this;\n        if(this.config.edgeSlantWidthMax===width){\n            return;\n        }\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    edgeSlantWidthMax: self.config.edgeSlantWidthMax\n                },\n                onUndo: (data)=> {\n                    self.setEdgeSlantWidthMax(data.edgeSlantWidthMax, true);\n                },\n                onRedo: (data)=> {\n                    self.setEdgeSlantWidthMax(width, true);\n                }\n            });\n        }\n\n        this.config.edgeSlantWidthMax=width;\n        this.treeDesigner.redraw(true);\n    }\n\n    autoLayout(type, withoutStateSaving){\n        var self=this;\n\n\n\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    newLayout: type,\n                    currentLayout: self.config.type\n                },\n                onUndo: (data)=> {\n                    self.config.type = data.currentLayout;\n                    self._fireOnAutoLayoutChangedCallbacks();\n                },\n                onRedo: (data)=> {\n                    self.autoLayout(data.newLayout, true);\n                }\n            });\n        }\n        this.config.type = type;\n        if(!this.data.nodes.length){\n            this._fireOnAutoLayoutChangedCallbacks();\n            return;\n        }\n\n        var prevTreeMaxY = self.getNodeMinY();\n        this.data.getRoots().forEach(r=>{\n            var root = d3.hierarchy(r, d=>{\n                return d.childEdges.filter(e=>!e.$hidden).map(e=>e.childNode);\n            });\n\n            // root.sort((a,b)=>self.nodeTypeOrder[a.data.type]-self.nodeTypeOrder[b.data.type]);\n            root.sort((a,b)=>a.data.location.y - b.data.location.y);\n\n\n            var layout;\n            if(type==='cluster'){\n                layout = d3.cluster();\n            }else{\n                layout = d3.tree();\n            }\n            layout.nodeSize([self.config.gridHeight, self.config.gridWidth]);\n            layout.separation(self.nodeSeparation);\n\n            layout(root);\n            var minY = 999999999;\n            root.each(d=>{\n                minY = Math.min(minY, d.x);\n            });\n\n            var dy = root.x - minY + prevTreeMaxY;\n            var dx = self.getNodeMinX();\n            var maxY=0;\n            root.each(d=>{\n                d.data.location.x = d.y + dx;\n                d.data.location.y = d.x + dy;\n\n                maxY = Math.max(maxY, d.data.location.y);\n            });\n\n            prevTreeMaxY = maxY + self.config.nodeSize+self.treeMargin;\n        });\n\n\n        // this.transition = true;\n        this.treeDesigner.redraw(true);\n        // this.transition = false;\n\n        this._fireOnAutoLayoutChangedCallbacks();\n        return this;\n    }\n\n    fitNodesInPlottingRegion(nodes){\n        var self = this;\n        var topY = d3.min(nodes, n=>n.location.y);\n        var minY = self.getNodeMinY();\n        var dy = topY - minY;\n\n        var minX = d3.min(nodes, n=>n.location.x);\n        var dx = minX - self.getNodeMinX();\n\n        if(dy<0 ||  dx<0){\n            nodes.forEach(n=>n.move(-dx, -dy));\n        }\n    }\n\n    moveNodes(nodes, dx, dy, pivot){\n        var self = this;\n        var limit = self.config.limitNodePositioning;\n        if(limit){\n            if(dx<0){\n                nodes.sort((a,b)=>a.location.x-b.location.x);\n            }else{\n                nodes.sort((a,b)=>b.location.x-a.location.x);\n            }\n        }\n\n\n        var minY = d3.min(nodes, d=>d.location.y);\n        if(minY + dy < self.getNodeMinY()){\n            dy = self.getNodeMinY() - minY;\n        }\n\n        nodes.forEach(d=>{\n            if(limit){\n                Layout.backupNodeLocation(d);\n                var minX = self.getNodeMinX(d);\n                var maxX = self.getNodeMaxX(d);\n\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\n                d.location.y += dy;\n            }else{\n                d.location.x +=dx;\n                d.location.y += dy;\n            }\n\n        });\n\n\n        var revertX = pivot && self.config.limitNodePositioning && (pivot.location.x === pivot.$location.x);\n\n        nodes.forEach(d=>{\n            if(revertX){\n                d.location.x = d.$location.x;\n            }\n            self.treeDesigner.updateNodePosition(d);\n        });\n\n\n    }\n\n    moveTexts(texts, dx, dy){\n        let self = this;\n        let limit = self.config.limitTextPositioning;\n        if(limit){\n            if(dx<0){\n                texts.sort((a,b)=>a.location.x-b.location.x);\n            }else{\n                texts.sort((a,b)=>b.location.x-a.location.x);\n            }\n        }\n\n\n\n        texts.forEach(d=>{\n\n\n\n\n            if(limit){\n                let minX = self.getTextMinX(d);\n                let maxX = self.getTextMaxX(d);\n                let minY = self.getTextMinY(d);\n\n\n                d.location.x = Math.min(Math.max(d.location.x+dx, minX), maxX);\n                d.location.y = Math.max(d.location.y+dy, minY);\n\n            }else{\n                d.location.move(dx, dy);\n            }\n            self.treeDesigner.updateTextPosition(d);\n\n        });\n\n    }\n\n    static backupNodeLocation(node) {\n        node.$location = new model.Point(node.location);\n    }\n\n    _fireOnAutoLayoutChangedCallbacks(){\n        this.onAutoLayoutChanged.forEach(c=>c(this.config.type));\n    }\n\n    static setHangingPosition(selection){\n        // window.setTimeout(function(){\n        //     selection.each(function(){\n        //         var h =  this.getBBox().height;\n        //         d3.select(this).attr('dy', h);\n        //     });\n        // },0);\n\n        if(AppUtils.isHidden(selection.node())){ // setting hanging position of hidden elements fails on firefox\n            return selection;\n        }\n\n\n        selection.each(function(){\n            var h =  this.getBBox().height;\n            d3.select(this).attr('dy', '0.75em');\n        });\n\n        return selection;\n    }\n\n}\n\n\n","import {AppUtils} from './app-utils'\nimport * as d3 from './d3'\nimport {ContextMenu} from './context-menu/context-menu'\n\nexport class NodeDragHandler{\n\n    treeDesigner;\n    data;\n    config;\n\n    drag;\n\n\n    constructor(treeDesigner, data){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n\n        var self = this;\n        this.drag = d3.drag()\n            .subject(function(d) {\n                if(d==null){\n                    return  {\n                        x: event.x,\n                        y: event.y\n                    };\n                }\n                var t = d3.select(this);\n                return {\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\n                };\n            })\n            .on(\"start\", function(d){\n                self.dragStarted.call(this,d, self)\n            })\n            .on(\"drag\", function (d) {\n                self.onDrag.call(this, d, self);\n            })\n            .on(\"end\", function (d) {\n                self.dragEnded.call(this, d, self);\n            })\n    }\n\n\n    dragStarted(d,self) {\n        if(self.ignoreDrag){\n            self.ignoreDrag=false;\n            self.ignoredDrag=true;\n            return;\n        }\n        self.ignoredDrag=false;\n\n        // self.treeDesigner.layout.disableAutoLayout();\n        ContextMenu.hide();\n        var node = d3.select(this);\n        if(!node.classed(\"selected\")){\n            self.treeDesigner.clearSelection();\n        }\n\n        self.treeDesigner.selectNode(d);\n        node.classed(\"selected dragging\", true);\n        self.selectedNodes = self.treeDesigner.getSelectedNodes(true);\n        self.prevDragEvent = d3.event;\n        self.dragEventCount = 0;\n    }\n\n    onDrag(draggedNode, self){\n        if(self.ignoredDrag){\n            return;\n        }\n\n        if(self.dragEventCount==2){\n            self.data.saveState();\n        }\n        self.dragEventCount++;\n        if(self.selectedNodes.length>5 && self.dragEventCount%2!=1){\n            return;\n        }\n\n        var dx = d3.event.x - self.prevDragEvent.x;\n        var dy = d3.event.y- self.prevDragEvent.y;\n        self.treeDesigner.layout.moveNodes(self.selectedNodes, dx, dy, draggedNode);\n\n\n        self.prevDragEvent = d3.event;\n        self.treeDesigner.redrawEdges();\n        self.treeDesigner.updatePlottingRegionSize();\n    }\n\n    dragEnded(draggedNode, self){\n        var node = d3.select(this).classed(\"dragging\", false);\n        if(self.ignoredDrag){\n            return;\n        }\n        self.treeDesigner.layout.update(draggedNode)\n    }\n\n    cancelDrag(){\n        this.ignoreDrag = true;\n    }\n\n}\n\n\n","var epsilon = 1e-12;\nvar pi = Math.PI;\nvar halfPi = pi / 2;\nvar tau = 2 * pi;\n\nexport default {\n    /*draw: function(context, size) {\n        var r = Math.sqrt(size / pi);\n        context.moveTo(r, 0);\n        context.arc(0, 0, r, 0, tau);\n    }*/\n    draw: function(context, size) {\n\n        var r = Math.sqrt(size / pi);\n        var dist =0.552284749831 * r;\n\n        context.moveTo(-r, 0)\n        // context.lineTo(2*r, 2*r)\n        // context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\n        context.bezierCurveTo(-r, -dist, -dist, -r, 0,-r);\n\n        context.bezierCurveTo(dist, -r, r, -dist, r,0);\n\n        context.bezierCurveTo(r, dist, dist, r, 0, r);\n\n        context.bezierCurveTo(-dist, r, -r, dist, -r, 0);\n    }\n};\n","var sqrt3 = Math.sqrt(3);\n\nexport default {\n    draw: function(context, size) {\n        var r = Math.sqrt(size / Math.PI);\n        context.moveTo(-r, 0);\n        context.lineTo(0.9*r, -r);\n        context.lineTo(0.9*r, r);\n        context.closePath();\n    }\n};\n","import {Utils} from \"sd-utils\";\nimport {i18n} from './i18n/i18n'\n\nexport class Templates{\n\n    static growl = require('./templates/growl_message.html');\n\n    static get(templateName, variables){\n        var compiled = Utils.template(Templates[templateName],{ 'imports': { 'i18n': i18n, 'Templates': Templates, 'include': function(n, v) {return Templates.get(n, v)} } });\n        if(variables){\n            variables.variables = variables;\n        }else{\n            variables = {variables:{}}\n        }\n        return compiled(variables)\n\n    }\n\n    static styleRule(selector, props){\n        var s = selector+ '{';\n        props.forEach(p=> s+=Templates.styleProp(p[0], p[1]));\n        s+='} ';\n        return s;\n    }\n    static styleProp(styleName, variableName){\n        return  styleName+': <%= '+variableName+' %>; '\n    }\n\n    static treeDesignerSelector = 'svg.sd-tree-designer';\n    static nodeSelector(type, clazz){\n        var s = Templates.treeDesignerSelector+' .node';\n        if(type){\n            s+='.'+type+'-node';\n        }\n        if(clazz){\n            s+='.'+clazz;\n        }\n        return s;\n    }\n    static edgeSelector(clazz){\n        var s = Templates.treeDesignerSelector+' .edge';\n        if(clazz){\n            s+='.'+clazz;\n        }\n        return s;\n    }\n\n    static treeDesignerStyles =\n\n        Templates.styleRule(Templates.treeDesignerSelector,[\n            ['font-size', 'fontSize'],\n            ['font-family', 'fontFamily'],\n            ['font-weight', 'fontWeight'],\n            ['font-style', 'fontStyle']\n        ])+\n        //   node\n        Templates.styleRule(Templates.nodeSelector()+' path',[\n            ['fill', 'node.fill'],\n            ['stroke-width', 'node.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('decision', 'optimal')+' path, '+Templates.nodeSelector('chance', 'optimal')+' path,' +Templates.nodeSelector('terminal', 'optimal')+' path',[\n            ['stroke', 'node.optimal.stroke'],\n            ['stroke-width', 'node.optimal.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .label',[\n            ['font-size', 'node.label.fontSize'],\n            ['fill', 'node.label.color']\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .payoff',[\n            ['font-size', 'node.payoff.fontSize'],\n            ['fill', 'node.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.nodeSelector()+' .payoff.negative',[\n            ['fill', 'node.payoff.negativeColor'],\n        ])+\n\n        //    decision node\n        Templates.styleRule(Templates.nodeSelector('decision')+' path',[\n            ['fill', 'node.decision.fill'],\n            ['stroke', 'node.decision.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('decision', 'selected')+' path',[\n            ['fill', 'node.decision.selected.fill']\n        ])+\n\n        //    chance node\n        Templates.styleRule(Templates.nodeSelector('chance')+' path',[\n            ['fill', 'node.chance.fill'],\n            ['stroke', 'node.chance.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('chance', 'selected')+' path',[\n            ['fill', 'node.chance.selected.fill']\n        ])+\n\n        //    terminal node\n        Templates.styleRule(Templates.nodeSelector('terminal')+' path',[\n            ['fill', 'node.terminal.fill'],\n            ['stroke', 'node.terminal.stroke']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal', 'selected')+' path',[\n            ['fill', 'node.terminal.selected.fill']\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff',[\n            ['font-size', 'node.terminal.payoff.fontSize'],\n            ['fill', 'node.terminal.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.nodeSelector('terminal')+' .aggregated-payoff.negative',[\n            ['fill', 'node.terminal.payoff.negativeColor'],\n        ])+\n\n\n        //probability\n        Templates.styleRule(Templates.treeDesignerSelector+' .node .probability-to-enter, '+Templates.treeDesignerSelector+' .edge .probability',[\n            ['font-size', 'probability.fontSize'],\n            ['fill', 'probability.color']\n        ])+\n\n        //edge\n        Templates.styleRule(Templates.edgeSelector()+' path',[\n            ['stroke', 'edge.stroke'],\n            ['stroke-width', 'edge.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow path',[\n            ['fill', 'edge.stroke'],\n        ])+\n        Templates.styleRule(Templates.edgeSelector('optimal')+' path',[\n            ['stroke', 'edge.optimal.stroke'],\n            ['stroke-width', 'edge.optimal.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-optimal path',[\n            ['fill', 'edge.optimal.stroke'],\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector('selected')+' path',[\n            ['stroke', 'edge.selected.stroke'],\n            ['stroke-width', 'edge.selected.strokeWidth']\n        ])+\n        Templates.styleRule(Templates.treeDesignerSelector+' marker#arrow-selected path',[\n            ['fill', 'edge.selected.stroke'],\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector()+' .label',[\n            ['font-size', 'edge.label.fontSize'],\n            ['fill', 'edge.label.color']\n        ])+\n\n        Templates.styleRule(Templates.edgeSelector()+' .payoff',[\n            ['font-size', 'edge.payoff.fontSize'],\n            ['fill', 'edge.payoff.color'],\n        ])+\n        Templates.styleRule(Templates.edgeSelector()+' .payoff.negative',[\n            ['fill', 'edge.payoff.negativeColor'],\n        ])+\n\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-title',[\n            ['font-size', 'title.fontSize'],\n            ['font-weight', 'title.fontWeight'],\n            ['font-style', 'title.fontStyle'],\n            ['fill', 'title.color']\n        ]) +\n        Templates.styleRule(Templates.treeDesignerSelector+' .sd-title-container text.sd-description',[\n            ['font-size', 'description.fontSize'],\n            ['font-weight', 'description.fontWeight'],\n            ['font-style', 'description.fontStyle'],\n            ['fill', 'description.color']\n        ])\n}\n\n\n\n\n","module.exports = \"module.exports = \\\"<div class=\\\\\\\"sd-growl-message <%=type%>\\\\\\\">\\\\n    <div class=\\\\\\\"sd-growl-message-text\\\\\\\">\\\\n        <%= message %>\\\\n    </div>\\\\n</div>\\\\n\\\";\\n\";\n","import {AppUtils} from './app-utils'\nimport * as d3 from './d3'\nimport {ContextMenu} from './context-menu/context-menu'\n\nexport class TextDragHandler{\n\n    treeDesigner;\n    data;\n    config;\n\n    drag;\n\n\n    constructor(treeDesigner, data){\n        this.treeDesigner = treeDesigner;\n        this.data = data;\n\n        var self = this;\n        this.drag = d3.drag()\n            .subject(function(d) {\n                if(d==null){\n                    return  {\n                        x: event.x,\n                        y: event.y\n                    };\n                }\n                var t = d3.select(this);\n                return {\n                    x: t.attr(\"x\") + AppUtils.getTranslation(t.attr(\"transform\"))[0],\n                    y: t.attr(\"y\") + AppUtils.getTranslation(t.attr(\"transform\"))[1]\n                };\n            })\n            .on(\"start\", function(d){\n                self.dragStarted.call(this,d, self)\n            })\n            .on(\"drag\", function (d) {\n                self.onDrag.call(this, d, self);\n            })\n            .on(\"end\", function (d) {\n                self.dragEnded.call(this, d, self);\n            })\n    }\n\n\n    dragStarted(d,self) {\n        // self.treeDesigner.layout.disableAutoLayout();\n        ContextMenu.hide();\n        var text = d3.select(this);\n        if(!text.classed(\"selected\")){\n            self.treeDesigner.clearSelection();\n        }\n\n        self.treeDesigner.selectText(d);\n        text.classed(\"selected dragging\", true);\n        self.selectedNodes = self.treeDesigner.getSelectedNodes();\n        self.prevDragEvent = d3.event;\n        self.dragEventCount = 0;\n    }\n\n    onDrag(draggedText, self){\n        if(self.dragEventCount==2){\n            self.data.saveState();\n        }\n        self.dragEventCount++;\n\n        var dx = d3.event.x - self.prevDragEvent.x;\n        var dy = d3.event.y- self.prevDragEvent.y;\n\n        self.treeDesigner.layout.moveTexts([draggedText], dx, dy);\n\n        self.prevDragEvent = d3.event;\n        self.treeDesigner.updatePlottingRegionSize();\n    }\n\n    dragEnded(draggedNode, self){\n         d3.select(this).classed(\"dragging\", false);\n    }\n\n}\n\n\n","import * as d3 from './d3'\nimport {Utils} from 'sd-utils'\n\nexport class Tooltip {\n    static getContainer(){\n        return d3.select(\"body\").selectOrAppend('div.sd-tooltip');\n    }\n\n    static show(html, xOffset = 5, yOffset = 28, event, duration=null) {\n        var container = Tooltip.getContainer()\n            .style(\"opacity\", 0);\n        container.transition()\n            .duration(200)\n            .style(\"opacity\", .98);\n        container.html(html);\n        Tooltip.updatePosition(xOffset, yOffset, event);\n        if(duration){\n            setTimeout(function(){\n                Tooltip.hide();\n            }, duration)\n        }\n    }\n\n    static updatePosition(xOffset = 5, yOffset = 28, event) {\n        event = event || d3.event;\n        Tooltip.getContainer()\n            .style(\"left\", (event.pageX + xOffset) + \"px\")\n            .style(\"top\", (event.pageY - yOffset) + \"px\");\n    }\n\n    static hide(duration = 500) {\n        var t = Tooltip.getContainer();\n        if(duration){\n            t = t.transition().duration(duration)\n        }\n        t.style(\"opacity\", 0);\n    }\n\n    static attach(target, htmlOrFn, xOffset, yOffset) {\n        target.on('mouseover', function (d, i) {\n            var html = null;\n            if (Utils.isFunction(htmlOrFn)) {\n                html = htmlOrFn(d, i);\n            } else {\n                html = htmlOrFn;\n            }\n\n            if (html !== null && html !== undefined && html !== '') {\n                Tooltip.show(html, xOffset, yOffset);\n            }else{\n                Tooltip.hide(0);\n            }\n\n        }).on('mousemove', function (d) {\n            Tooltip.updatePosition(xOffset, yOffset);\n        }).on(\"mouseout\", function (d) {\n            Tooltip.hide();\n        });\n    }\n}\n","import * as d3 from \"./d3\";\nimport {Utils} from \"sd-utils\";\nimport {AppUtils} from \"./app-utils\";\nimport {domain as model} from \"sd-model\";\nimport {ContextMenu} from \"./context-menu/context-menu\";\nimport {MainContextMenu} from \"./context-menu/main-context-menu\";\nimport {NodeContextMenu} from \"./context-menu/node-context-menu\";\nimport {Layout} from \"./layout\";\nimport {NodeDragHandler} from \"./node-drag-handler\";\nimport {Tooltip} from \"./tooltip\";\nimport {Templates} from \"./templates\";\nimport {TextDragHandler} from \"./text-drag-handler\";\nimport {TextContextMenu} from \"./context-menu/text-context-menu\";\nimport {EdgeContextMenu} from \"./context-menu/edge-context-menu\";\nimport * as Hammer from \"hammerjs\";\nimport {i18n} from \"./i18n/i18n\";\n\n\nexport class TreeDesignerConfig {\n    width = undefined;\n    height = undefined;\n    margin = {\n        left: 25,\n        right: 25,\n        top: 25,\n        bottom: 25\n    };\n    scale = 1;\n    lng = 'en';\n    layout= {\n        type: 'tree',\n        nodeSize: 40,\n        limitNodePositioning: true,\n        limitTextPositioning: true,\n        gridHeight: 75,\n        gridWidth: 150,\n        edgeSlantWidthMax: 20\n    };\n    fontFamily = 'sans-serif';\n    fontSize = '12px';\n    fontWeight = 'normal';\n    fontStyle = 'normal';\n    node = {\n        strokeWidth: '1px',\n        optimal: {\n            stroke: '#006f00',\n            strokeWidth: '1.5px',\n        },\n        label: {\n            fontSize: '1em',\n            color: 'black'\n        },\n        payoff: {\n            fontSize: '1em',\n            color: 'black',\n            negativeColor: '#b60000'\n        },\n        decision: {\n            fill: '#ff7777',\n            stroke: '#660000',\n\n            selected: {\n                fill: '#aa3333',\n                // stroke: '#666600'\n            }\n        },\n        chance: {\n            fill: '#ffff44',\n            stroke: '#666600',\n\n            selected: {\n                fill: '#aaaa00',\n                // stroke: '#666600'\n            }\n        },\n        terminal:{\n            fill: '#44ff44',\n            stroke: 'black',\n            selected: {\n                fill: '#00aa00',\n                // stroke: 'black'\n            },\n            payoff: {\n                fontSize: '1em',\n                color: 'black',\n                negativeColor: '#b60000'\n            },\n        }\n    };\n    edge={\n        stroke: '#424242',\n        strokeWidth: '1.5',\n        optimal:{\n            stroke: '#006f00',\n            strokeWidth: '2.4',\n        },\n        selected:{\n            stroke: '#045ad1',\n            strokeWidth: '3.5',\n        },\n        label: {\n            fontSize: '1em',\n            color: 'back'\n        },\n        payoff:{\n            fontSize: '1em',\n            color: 'black',\n            negativeColor: '#b60000'\n        }\n\n    };\n    probability = {\n        fontSize: '1em',\n        color: '#0000d7'\n    };\n    title = {\n        fontSize: '16px',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        color: '#000000',\n        margin:{\n            top: 15,\n            bottom: 10\n        }\n    };\n    description = {\n        show: true,\n        fontSize: '12px',\n        fontWeight: 'bold',\n        fontStyle: 'normal',\n        color: '#000000',\n        margin:{\n            top: 5,\n            bottom: 10\n        }\n    };\n\n    readOnly= false;\n    disableAnimations=false;\n    forceFullEdgeRedraw=false;\n    hideLabels=false;\n    hidePayoffs=false;\n    hideProbabilities=false;\n    raw=false;\n\n\n    payoffNumberFormatter = (v, i)=> v;\n    probabilityNumberFormatter  = (v)=> v;\n\n    onNodeSelected = (node) => {};\n    onEdgeSelected = (edge) => {};\n    onTextSelected = (text) => {};\n    onSelectionCleared = () => {};\n\n    operationsForObject = (o) => [];\n\n    payoffNames = [null, null];\n    maxPayoffsToDisplay = 1;\n\n    constructor(custom) {\n        if (custom) {\n            Utils.deepExtend(this, custom);\n        }\n    }\n}\n\n\nexport class TreeDesigner {\n\n    config;\n    container;\n    data; //data model manager\n    svg;\n\n    constructor(container, dataModel, config){\n        this.setConfig(config);\n        this.data = dataModel;\n        this.initContainer(container);\n        this.init();\n    }\n\n    setConfig(config) {\n        this.config = new TreeDesignerConfig(config);\n        if(this.layout){\n            this.layout.config=this.config.layout;\n        }\n        this.updateCustomStyles();\n        return this;\n    }\n\n    init(){\n\n        this.initSvg();\n        this.initLayout();\n        this.initI18n();\n        this.initBrush();\n        this.initEdgeMarkers();\n\n        this.updateCustomStyles();\n        if(!this.config.readOnly){\n            this.initMainContextMenu();\n            this.initNodeContextMenu();\n            this.initEdgeContextMenu();\n            this.initNodeDragHandler();\n            this.initTextDragHandler();\n            this.initTextContextMenu();\n        }\n        this.redraw();\n    }\n\n    initI18n() {\n        i18n.init(this.config.lng);\n    }\n\n\n    updateCustomStyles(){\n        d3.select('head').selectOrAppend('style#sd-tree-designer-style').html(Templates.get('treeDesignerStyles', this.config));\n        return this;\n    }\n\n    initLayout(){\n        this.layout = new Layout(this, this.data, this.config.layout);\n    }\n\n    initNodeDragHandler(){\n        this.nodeDragHandler = new NodeDragHandler(this, this.data);\n    }\n\n    initTextDragHandler(){\n        this.textDragHandler = new TextDragHandler(this, this.data);\n    }\n\n    redraw(withTransitions=false){\n\n        var self = this;\n        withTransitions = !self.config.disableAnimations && withTransitions;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateScale(withTransitions);\n        this.updateMargin(withTransitions);\n        if(withTransitions){\n            self.transitionPrev = self.transition;\n            self.transition = true;\n        }\n        this.redrawNodes();\n        this.redrawEdges();\n        this.redrawFloatingTexts();\n        this.updateValidationMessages();\n        if(withTransitions){\n            self.transition =  self.transitionPrev;\n        }\n        setTimeout(function(){\n            self.updatePlottingRegionSize();\n        },10);\n\n        return this;\n    }\n\n    computeAvailableSpace(){\n        this.availableHeight = AppUtils.sanitizeHeight(this.config.height, this.container, this.config.margin);\n        this.availableWidth = AppUtils.sanitizeWidth(this.config.width, this.container, this.config.margin);\n    }\n\n    initSvg() {\n        var c = this;\n        var self = this;\n        this.computeAvailableSpace();\n        this.svg = this.container.selectOrAppend('svg.sd-tree-designer');\n        this.svg.attr('width', this.availableWidth).attr('height', this.availableHeight);\n\n        this.wrapperGroup = this.svg.selectOrAppend('g.sd-wrapper-group');\n        this.mainGroup = this.wrapperGroup.selectOrAppend('g.main-group');\n        this.updateScale();\n        this.updateMargin();\n\n\n        if (!this.config.width) {\n            d3.select(window)\n                .on(\"resize.tree-designer\", function () {\n                    self.updatePlottingRegionSize();\n                    self.redrawDiagramTitle();\n                });\n        }\n\n        var mc = new Hammer.Manager(this.svg.node(), {touchAction : 'auto'});\n        mc.add(new Hammer.Press({\n            pointerType: 'touch'\n        }));\n\n        mc.add(new Hammer.Pinch({\n            pointerType: 'touch'\n        }));\n\n        var cancel;\n        mc.on('pinchstart', function(){\n            self.disableBrush();\n        })\n        mc.on('pinch', function(){\n            cancel = Utils.waitForFinalEvent(()=>self.enableBrush(), 'pinchend', 5000)\n        })\n    }\n\n    updateMargin(withTransitions){\n        var self = this;\n        var margin = this.config.margin;\n        var group = this.mainGroup;\n        if(withTransitions){\n            group = group.transition();\n        }\n\n        this.topMargin = margin.top;\n        if(this.diagramTitle||this.diagramDescription){\n            this.topMargin = parseInt(this.diagramTitle ? this.config.title.margin.top : 0) + this.getTitleGroupHeight()\n                +  Math.max(this.topMargin, parseInt(this.config.title.margin.bottom));\n        }\n\n        group.attr(\"transform\", \"translate(\" + margin.left + \",\" + this.topMargin + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\n    }\n\n    setMargin(margin, withoutStateSaving){\n        var self=this;\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    margin: Utils.clone(self.config.margin)\n                },\n                onUndo: (data)=> {\n                    self.setMargin(data.margin, true);\n                },\n                onRedo: (data)=> {\n                    self.setMargin(margin, true);\n                }\n            });\n        }\n        Utils.deepExtend(this.config.margin, margin);\n        this.redrawDiagramTitle();\n        this.updateMargin(true);\n    }\n\n\n    updateScale(withTransitions){\n        var self = this;\n        var scale = this.config.scale;\n        var group = this.wrapperGroup;\n        if(withTransitions){\n            group = group.transition();\n        }\n\n        group.attr(\"transform\", \"scale(\" + scale + \")\").on(\"end\", ()=> self.updatePlottingRegionSize());\n    }\n\n    setScale(scale, withoutStateSaving){\n        var self=this;\n        if(!withoutStateSaving){\n            this.data.saveState({\n                data:{\n                    scale: Utils.clone(self.config.scale)\n                },\n                onUndo: (data)=> {\n                    self.setScale(data.scale, true);\n                },\n                onRedo: (data)=> {\n                    self.setScale(scale, true);\n                }\n            });\n        }\n        this.config.scale = scale;\n        this.updateScale(true);\n    }\n\n    initContainer(containerIdOrElem) {\n        if (Utils.isString(containerIdOrElem)) {\n            var selector = containerIdOrElem.trim();\n\n            if (!Utils.startsWith(selector, '#') && !Utils.startsWith(selector, '.')) {\n                selector = '#' + selector;\n            }\n            this.container = d3.select(selector);\n        } else if(containerIdOrElem._parents){\n            this.container = containerIdOrElem\n        }else{\n            this.container = d3.select(containerIdOrElem);\n        }\n    }\n\n    updatePlottingRegionSize() {\n        var changed = false;\n        this.computeAvailableSpace();\n        var margin = this.config.margin;\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        var mainGroupBox = this.mainGroup.node().getBBox();\n        let boxWidth = mainGroupBox.width;\n        var newSvgWidth = boxWidth+mainGroupBox.x+margin.left+margin.right;\n        newSvgWidth  *= this.config.scale;\n        this.container.classed('with-overflow-x', newSvgWidth>=this.availableWidth);\n        newSvgWidth = Math.max(newSvgWidth, this.availableWidth);\n        if(svgWidth!=newSvgWidth){\n            changed = true;\n            this.svg.attr('width', newSvgWidth);\n        }\n        let boxHeight = mainGroupBox.height;\n        var newSvgHeight = boxHeight+mainGroupBox.y+this.topMargin+margin.bottom;\n        newSvgHeight *= this.config.scale;\n        this.container.classed('with-overflow-y', newSvgHeight>=this.availableHeight);\n        newSvgHeight = Math.max(newSvgHeight, this.availableHeight);\n        if(svgHeight!=newSvgHeight){\n            changed=true;\n            this.svg.attr('height', newSvgHeight);\n        }\n        if(changed){\n            this.updateBrushExtent()\n        }\n\n\n    }\n\n    redrawNodes() {\n        var self = this;\n\n\n        var nodesContainer = this.mainGroup.selectOrAppend('g.nodes');\n        var nodes = nodesContainer.selectAll('.node').data(this.data.nodes.filter(d=>!d.$hidden), (d,i)=> d.$id);\n        nodes.exit().remove();\n        var nodesEnter = nodes.enter().append('g')\n            .attr('id', d=>'node-'+d.$id)\n            .attr('class', d=>d.type+'-node node')\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\n        nodesEnter.append('path');\n\n        var labelEnter = nodesEnter.append('text').attr('class', 'label');\n        var payoffEnter = nodesEnter.append('text').attr('class', 'payoff computed');\n        var indicatorEnter = nodesEnter.append('text').attr('class', 'error-indicator').text('!!');\n        var aggregatedPayoffEnter = nodesEnter.append('text').attr('class', 'aggregated-payoff');\n        var probabilityToEnterEnter = nodesEnter.append('text').attr('class', 'probability-to-enter');\n\n        var nodesMerge = nodesEnter.merge(nodes);\n        nodesMerge.classed('optimal', (d)=>self.isOptimal(d));\n\n        var nodesMergeT = nodesMerge;\n        if(this.transition){\n            nodesMergeT = nodesMerge.transition();\n            nodesMergeT.on('end', ()=> self.updatePlottingRegionSize())\n        }\n        nodesMergeT\n            .attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')')\n\n        var path = nodesMerge.select('path');\n        this.layout.drawNodeSymbol(path,this.transition);\n\n        /*path\n            .style('fill', d=> {\n                // if(self.isNodeSelected(d)){\n                //     return self.config.node[d.type].selected.fill\n                // }\n                return self.config.node[d.type].fill\n            })\n            .style('stroke', d=> self.config.node[d.type].stroke)\n            .style('stroke-width', d=> {\n                if(self.config.node[d.type].strokeWidth!==undefined){\n                    return self.config.node[d.type].strokeWidth;\n                }\n                return self.config.node.strokeWidth;\n            });\n        */\n        this.layout.nodeLabelPosition(labelEnter);\n        var labelMerge = nodesMerge.select('text.label');\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\n        var labelMergeT = nodesMergeT.select('text.label');\n        labelMergeT.each(this.updateTextLines);\n        this.layout.nodeLabelPosition(labelMergeT)\n            .attr('text-anchor', 'middle')\n\n        var payoff = nodesMerge.select('text.payoff');\n\n        var payoffTspans = payoff.selectAll('tspan').data(d=>{\n            let item = d.displayValue('childrenPayoff');\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\n        });\n        payoffTspans.exit().remove();\n\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\n        payoffTspansM\n            // .attr('dominant-baseline', 'hanging')\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0')\n            .classed('negative', d=> {\n                return d!==null && d<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\n            .text((d, i)=> {\n                var val = d\n\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\n            });\n        this.attachPayoffTooltip(payoffTspansM);\n\n\n        var payoffT = payoff;\n        if(this.transition){\n            payoffT = payoff.transition();\n        }\n\n        this.layout.nodePayoffPosition(payoffEnter);\n        this.layout.nodePayoffPosition(payoffT);\n\n        var aggregatedPayoff = nodesMerge.select('text.aggregated-payoff');\n        var aggregatedPayoffTspans = aggregatedPayoff.selectAll('tspan').data(d=>{\n            let item = d.displayValue('aggregatedPayoff');\n            return Utils.isArray(item) ? item.filter(i=>i !== undefined) : [item]\n        });\n        aggregatedPayoffTspans.exit().remove();\n        var aggregatedPayoffTspansM = aggregatedPayoffTspans.enter().append('tspan').merge(aggregatedPayoffTspans)\n            .attr('dy', (d,i)=>i>0 ? '0.95em': undefined)\n            .classed('negative', d=> {\n                return d!==null && d<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs || this.config.raw)\n            .text((val, i)=> {\n                return val!==null ? (isNaN(val) ? val : self.config.payoffNumberFormatter(val, i)): ''\n            });\n\n        this.attachPayoffTooltip(aggregatedPayoffTspansM, 'aggregatedPayoff');\n\n        var aggregatedPayoffT = aggregatedPayoff;\n        if(this.transition){\n            aggregatedPayoffT = aggregatedPayoff.transition();\n        }\n\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffEnter);\n        this.layout.nodeAggregatedPayoffPosition(aggregatedPayoffT);\n\n        var probabilityToEnter = nodesMerge.select('text.probability-to-enter')\n            .text(d=>{\n                var val = d.displayValue('probabilityToEnter');\n                return val!==null ? (isNaN(val) ? val : self.config.probabilityNumberFormatter(val)): ''\n            })\n            .classed('sd-hidden', this.config.hideProbabilities || this.config.raw);\n        Tooltip.attach(probabilityToEnter, i18n.t('tooltip.node.probabilityToEnter'));\n\n\n        var probabilityToEnterT = probabilityToEnter;\n        if(this.transition){\n            probabilityToEnterT = probabilityToEnter.transition();\n        }\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterEnter);\n        this.layout.nodeProbabilityToEnterPosition(probabilityToEnterT);\n\n\n        var indicator = nodesMerge.select('text.error-indicator');\n        indicator.classed('sd-hidden', this.config.raw)\n        this.layout.nodeIndicatorPosition(indicatorEnter);\n        this.layout.nodeIndicatorPosition(indicator);\n\n        if(this.nodeDragHandler){\n            nodesMerge.call(this.nodeDragHandler.drag);\n        }\n\n        nodesMerge.on('contextmenu', this.nodeContextMenu);\n        nodesMerge.on('dblclick', this.nodeContextMenu)\n        nodesMerge.each(function(d, i){\n            var nodeElem = this;\n            var mc = new Hammer.Manager(nodeElem);\n            mc.add(new Hammer.Press({\n                pointerType: 'touch'\n            }));\n            mc.on('press', function(e){\n                if(e.pointerType=='touch'){\n                    self.nodeDragHandler.cancelDrag();\n                }\n            })\n\n\n            if(d.folded){\n                let button = d3.select(nodeElem).selectOrAppend('text.sd-unfold-button')\n                    .text(\"[+]\")\n                    .on('click dbclick mousedown', ()=>self.foldSubtree(d, false)); //firefox detects only mousedown event - related to drag handler\n\n                self.layout.nodeUnfoldButtonPosition(button);\n                Tooltip.attach(button, i18n.t('contextMenu.node.unfold'));\n            }else{\n                d3.select(nodeElem).select('.sd-unfold-button').remove();\n            }\n\n        })\n    }\n\n    attachPayoffTooltip(selection, payoffFiledName = 'payoff', object='node'){\n        var self = this;\n        Tooltip.attach(selection, (d, i)=>{\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\n                return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.named',{value: d.payoff, number: i+1, name: self.config.payoffNames[i]})\n            }\n            return i18n.t('tooltip.'+object+'.'+payoffFiledName+'.default',{value: d.payoff, number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\n        });\n    }\n\n    updateTextLines(d){ //helper method for splitting text to tspans\n        var lines = d.name ? d.name.split('\\n') : [];\n        lines.reverse();\n        var tspans = d3.select(this).selectAll('tspan').data(lines);\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .text(l=>l)\n            .attr('dy', (d,i)=>i>0 ? '-1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n    }\n\n    isOptimal(d){\n        return d.displayValue('optimal');\n    }\n\n    redrawEdges() {\n        var self = this;\n        var edgesContainer = this.mainGroup.selectOrAppend('g.edges');\n        if(self.config.forceFullEdgeRedraw){\n            edgesContainer.selectAll(\"*\").remove();\n        }\n\n        var edges = edgesContainer.selectAll('.edge').data(this.data.edges.filter(e=>!e.$hidden), (d,i)=> d.$id);\n        edges.exit().remove();\n        var edgesEnter = edges.enter().append('g')\n            .attr('id', d=>'edge-'+d.$id)\n            .attr('class', 'edge');\n\n\n        edgesEnter.append('path');\n        var labelEnter = edgesEnter.appendSelector('g.label-group');\n        labelEnter.append('text').attr('class', 'label');\n        var payoffEnter = edgesEnter.append('text').attr('class', 'payoff');\n        var probabilityEnter = edgesEnter.append('text').attr('class', 'probability');\n\n\n        var edgesMerge = edgesEnter.merge(edges);\n\n\n        var optimalClassName = 'optimal';\n        edgesMerge.classed(optimalClassName, (d)=>self.isOptimal(d));\n\n        var edgesMergeT = edgesMerge;\n        if(this.transition){\n            edgesMergeT = edgesMerge.transition();\n        }\n\n        edgesMergeT.select('path')\n            .attr('d', d=> this.layout.edgeLineD(d))\n            // .attr(\"stroke\", \"black\")\n            // .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .attr(\"marker-end\", function(d) {\n                var suffix = d3.select(this.parentNode).classed('selected') ? '-selected' : (self.isOptimal(d)?'-optimal':'');\n                return \"url(#arrow\"+ suffix+\")\"\n            });\n            // .attr(\"shape-rendering\", \"optimizeQuality\")\n\n\n        edgesMerge.on('click', d=>{\n            self.selectEdge(d, true)\n        });\n\n        this.layout.edgeLabelPosition(labelEnter);\n        edgesMergeT.select('text.label').each(this.updateTextLines);\n        var labelMerge = edgesMerge.select('g.label-group');\n        labelMerge.classed('sd-hidden', this.config.hideLabels);\n        var labelMergeT = edgesMergeT.select('g.label-group');\n        this.layout.edgeLabelPosition(labelMergeT);\n            // .text(d=>d.name);\n\n        var payoff = edgesMerge.select('text.payoff');\n\n        var payoffTspans = payoff.selectAll('tspan').data(d => {\n            let item = d.displayValue('payoff');\n            return Utils.isArray(item) ? item.slice(0, Math.min(item.length, self.config.maxPayoffsToDisplay)).map(_=>d) : [d];\n        });\n        payoffTspans.exit().remove();\n\n        var payoffTspansM = payoffTspans.enter().append('tspan').merge(payoffTspans);\n        payoffTspansM\n        // .attr('dominant-baseline', 'hanging')\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            // .attr('x', '0')\n\n            // .attr('dominant-baseline', 'hanging')\n            .classed('negative', (d, i)=> {\n                var val = d.displayPayoff(undefined, i);\n                return val!==null && val<0;\n            })\n            .classed('sd-hidden', this.config.hidePayoffs)\n            // .text(d=> isNaN(d.payoff) ? d.payoff : self.config.payoffNumberFormatter(d.payoff))\n            .text((d, i)=>{\n                if(this.config.raw){\n                    return d.payoff[i];\n                }\n\n                let item = d.displayValue('payoff');\n                let items = Utils.isArray(item) ? item : [item];\n\n                let val = items[i];\n                if (val !== null) {\n                    if (!isNaN(val)) {\n                        return self.config.payoffNumberFormatter(val, i);\n                    }\n                    if (Utils.isString(val)) {\n                        return val;\n                    }\n                }\n\n                if (d.payoff[i] !== null && !isNaN(d.payoff[i]))\n                    return self.config.payoffNumberFormatter(d.payoff[i], i);\n\n                return d.payoff[i];\n\n            });\n\n        Tooltip.attach(payoffTspansM, (d, i)=>{\n            if(self.config.payoffNames.length>i && self.config.payoffNames[i] !== null){\n                return i18n.t('tooltip.edge.payoff.named',{value: d.payoff[i], number: i+1, name: self.config.payoffNames[i]})\n            }\n            return i18n.t('tooltip.edge.payoff.default',{value: d.payoff[i], number: self.config.maxPayoffsToDisplay < 2 ? '' : i+1})\n        });\n\n        var payoffTextT = payoff;\n        if(this.transition){\n            payoffTextT = payoff.transition();\n        }\n        this.layout.edgePayoffPosition(payoffEnter);\n        this.layout.edgePayoffPosition(payoffTextT);\n\n        Tooltip.attach(edgesMerge.select('text.probability'), d=>i18n.t('tooltip.edge.probability',{value: d.probability=== undefined ? d.displayProbability() : d.probability}));\n\n        edgesMerge.select('text.probability')\n            .classed('sd-hidden', this.config.hideProbabilities);\n        var probabilityMerge = edgesMerge.select('text.probability');\n        probabilityMerge\n            .attr('text-anchor', 'end')\n            .text(d=>{\n                if(this.config.raw){\n                    return d.probability;\n                }\n                var val = d.displayProbability();\n\n                if(val!==null){\n                    if(!isNaN(val)){\n                        return self.config.probabilityNumberFormatter(val);\n                    }\n                    if(Utils.isString(val)){\n                        return val;\n                    }\n                }\n\n                if(d.probability!==null && !isNaN(d.probability))\n                    return self.config.probabilityNumberFormatter(d.probability);\n\n                return d.probability;\n            });\n        var probabilityMergeT = probabilityMerge;\n        if(this.transition){\n            probabilityMergeT = probabilityMerge.transition();\n        }\n\n        this.layout.edgeProbabilityPosition(probabilityEnter);\n        this.layout.edgeProbabilityPosition(probabilityMergeT);\n\n\n        edgesContainer.selectAll('.edge.'+optimalClassName).raise();\n\n        edgesMerge.on('contextmenu', this.edgeContextMenu);\n        edgesMerge.on('dblclick', this.edgeContextMenu);\n        edgesMerge.each(function(d, i){\n            var elem = this;\n            var mc = new Hammer.Manager(elem);\n            mc.add(new Hammer.Press({\n                pointerType: Hammer.POINTER_TOUCH\n            }));\n        })\n    }\n\n    redrawFloatingTexts() {\n        var self = this;\n\n\n        var textsContainer = this.mainGroup.selectOrAppend('g.floating-texts');\n        var texts = textsContainer.selectAll('.floating-text').data(this.data.texts, (d,i)=> d.$id);\n        texts.exit().remove();\n        var textsEnter = texts.enter().appendSelector('g.floating-text')\n            .attr('id', d=>'text-'+d.$id);\n\n\n        var rectWidth = 40;\n        var rectHeight = 20;\n\n        textsEnter.append('rect').attr('x', -5).attr('y', -16).attr('fill-opacity', 0);\n        textsEnter.append('text');\n\n        var textsMerge = textsEnter.merge(texts);\n        var textsMergeT = textsMerge;\n        if(this.transition){\n            textsMergeT = textsMerge.transition();\n        }\n\n        textsMergeT.attr('transform', d=>'translate(' + d.location.x + '  ' + d.location.y + ')');\n\n        var tspans = textsMerge.select('text').selectAll('tspan').data(d=>d.value ? d.value.split('\\n') : []);\n\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n        textsMerge.classed('sd-empty', d=>!d.value || !d.value.trim());\n        textsMerge.select('rect').attr('width', rectWidth).attr('height', rectHeight);\n\n        textsMerge.each(function(d){\n            if(!d.value){\n                return;\n            }\n            var bb = d3.select(this).select('text').node().getBBox();\n           d3.select(this).select('rect')\n               .attr('y', bb.y-5)\n               .attr('width', Math.max(bb.width+10, rectWidth))\n               .attr('height', Math.max(bb.height+10, rectHeight))\n        });\n\n        if(this.textDragHandler){\n            textsMerge.call(this.textDragHandler.drag);\n        }\n        textsMerge.on('contextmenu', this.textContextMenu);\n        textsMerge.on('dblclick', this.textContextMenu);\n        textsMerge.each(function(d, i){\n            var elem = this;\n            var mc = new Hammer.Manager(elem);\n            mc.add(new Hammer.Press({\n                pointerType: 'touch'\n            }));\n        })\n\n    }\n\n    updateValidationMessages() {\n        var nodes = this.mainGroup.selectAll('.node');\n        nodes.classed('error', false);\n\n        this.data.validationResults.forEach(validationResult=>{\n            if(validationResult.isValid()){\n                return;\n            }\n\n            Object.getOwnPropertyNames(validationResult.objectIdToError).forEach(id=>{\n                var errors = validationResult.objectIdToError[id];\n                var nodeSelection = this.getNodeD3SelectionById(id);\n                nodeSelection.classed('error', true);\n                var tooltipHtml = '';\n                errors.forEach(e=>{\n                    if(tooltipHtml){\n                        tooltipHtml+='<br/>'\n                    }\n                    tooltipHtml+=AppUtils.getValidationMessage(e);\n                });\n\n                Tooltip.attach(nodeSelection.select('.error-indicator'), tooltipHtml);\n\n\n            })\n        });\n    }\n\n\n    initEdgeMarkers() {\n        var defs = this.svg.append(\"svg:defs\");\n\n        this.initArrowMarker(\"arrow\");\n        this.initArrowMarker(\"arrow-optimal\");\n        this.initArrowMarker(\"arrow-selected\");\n    }\n\n    initArrowMarker(id) {\n\n        var defs = this.svg.select(\"defs\");\n        defs.append(\"marker\")\n            .attr(\"id\",id)\n            .attr(\"viewBox\",\"0 -5 10 10\")\n            .attr(\"refX\",5)\n            .attr(\"refY\",0)\n            .attr(\"markerWidth\",4)\n            .attr(\"markerHeight\",4)\n            .attr(\"orient\",\"auto\")\n            .append(\"path\")\n            .attr(\"d\", \"M0,-5L10,0L0,5\")\n            .attr(\"class\",\"arrowHead\");\n    }\n\n    updateBrushExtent() {\n        var self =this;\n        this.brush.extent([[0, 0], [self.svg.attr('width'), self.svg.attr('height')]]);\n        this.brushContainer.call(this.brush);\n    }\n    initBrush() {\n        var self = this;\n\n        var brushContainer = self.brushContainer = this.brushContainer= this.wrapperGroup.selectOrInsert(\"g.brush\", \":first-child\")\n            .attr(\"class\", \"brush\");\n\n        var brush = this.brush = d3.brush()\n            .on(\"start\", brushstart)\n            .on(\"brush\", brushmove)\n            .on(\"end\", brushend);\n\n\n\n        this.updateBrushExtent();\n\n        brushContainer.select('.overlay').on(\"mousemove.edgeSelection\", mousemoved);\n        function mousemoved() {\n            var m = d3.mouse(this);\n            var mgt = self.getMainGroupTranslation();\n            var margin = 10;\n\n            var closest = [null, 999999999];\n            var closeEdges = [];\n            self.mainGroup.selectAll('.edge').each(function(d){\n                var selection = d3.select(this);\n                selection.classed('sd-hover', false);\n                var pathNode = selection.select('path').node();\n                var b = pathNode.getBBox();\n                if(b.x+mgt[0] <=m[0] && b.x+b.width+mgt[0] >= m[0] &&\n                   b.y+mgt[1]-margin <=m[1] && b.y+b.height+mgt[1]+margin >= m[1]){\n\n                    var cp = AppUtils.closestPoint(pathNode, [m[0]-mgt[0], m[1]-mgt[1]]);\n                    if(cp.distance < margin && cp.distance<closest[1]){\n                        closest = [selection, cp.distance];\n                    }\n                }\n\n            });\n\n            self.hoveredEdge = null;\n            if(closest[0]){\n                closest[0].classed('sd-hover', true);\n                self.hoveredEdge = closest[0];\n            }\n\n        }\n\n        function brushstart() {\n            if (!d3.event.selection) return;\n            if(self.hoveredEdge){\n                self.selectEdge(self.hoveredEdge.datum(), true)\n            }else{\n                self.clearSelection();\n            }\n            ContextMenu.hide();\n        }\n\n        // Highlight the selected nodes.\n        function brushmove() {\n            var s = d3.event.selection;\n            if(!s)return;\n\n            self.mainGroup.selectAll(\".node\").classed('selected', function (d) {\n                var mainGroupTranslation = self.getMainGroupTranslation();\n                var x = d.location.x+mainGroupTranslation[0];\n                var y = d.location.y+mainGroupTranslation[1];\n                var nodeSize = self.config.layout.nodeSize;\n                var offset = nodeSize*0.25;\n                return s[0][0] <= x+offset && x-offset <= s[1][0]\n                    && s[0][1] <= y+offset && y-offset <= s[1][1];\n            });\n        }\n        // If the brush is empty, select all circles.\n        function brushend() {\n            if (!d3.event.selection) return;\n            brush.move(brushContainer, null);\n\n            var selectedNodes = self.getSelectedNodes();\n            if(selectedNodes && selectedNodes.length === 1){\n                self.selectNode(selectedNodes[0]);\n            }\n            // if (!d3.event.selection) self.mainGroup.selectAll(\".selected\").classed('selected', false);\n        }\n    }\n\n    disableBrush(){\n        if(!this.brushDisabled){\n            AppUtils.growl(i18n.t('growl.brushDisabled'), 'info', 'left')\n        }\n        this.brushDisabled = true;\n        this.brushContainer.remove();\n    }\n\n    enableBrush(){\n        if(this.brushDisabled){\n            AppUtils.growl(i18n.t('growl.brushEnabled'), 'info', 'left')\n            this.initBrush();\n            this.brushDisabled = false;\n        }\n\n\n    }\n\n    getMainGroupTranslation(invert) {\n        var translation = AppUtils.getTranslation(this.mainGroup.attr(\"transform\"));\n        if(invert){\n            translation[0] = -translation[0];\n            translation[1] = -translation[1]\n        }\n        return translation;\n    }\n\n    initNodeContextMenu() {\n        this.nodeContextMenu = new NodeContextMenu(this, this.config.operationsForObject);\n    }\n\n    initEdgeContextMenu() {\n        this.edgeContextMenu = new EdgeContextMenu(this);\n    }\n\n    initTextContextMenu() {\n        this.textContextMenu = new TextContextMenu(this);\n    }\n\n\n\n    initMainContextMenu() {\n        this.mainContextMenu = new MainContextMenu(this);\n        this.svg.on('contextmenu',this.mainContextMenu);\n        this.svg.on('dblclick',this.mainContextMenu);\n    }\n\n    addText(text){\n        this.data.saveState();\n        this.data.addText(text);\n        this.redraw();\n        this.selectText(text);\n    }\n\n    addNode(node, parent, redraw=false){\n        this.data.saveState();\n        this.data.addNode(node, parent);\n        this.redraw(true);\n        this.layout.update(node);\n        return node;\n    }\n\n    addDecisionNode(parent){\n        var newNode = new model.DecisionNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n    addChanceNode(parent){\n        var newNode = new model.ChanceNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n    addTerminalNode(parent){\n        var newNode = new model.TerminalNode(this.layout.getNewChildLocation(parent));\n        this.addNode(newNode, parent)\n    }\n\n    injectNode(node, edge){\n        this.data.saveState();\n        this.data.injectNode(node, edge);\n        this.redraw();\n        this.layout.update(node);\n        return node;\n    }\n\n    injectDecisionNode(edge){\n        var newNode = new model.DecisionNode(this.layout.getInjectedNodeLocation(edge));\n        this.injectNode(newNode, edge);\n\n    }\n\n    injectChanceNode(edge){\n        var newNode = new model.ChanceNode(this.layout.getInjectedNodeLocation(edge));\n        this.injectNode(newNode, edge);\n    }\n\n    removeNode(node) {\n        this.data.saveState();\n        this.data.removeNode(node);\n\n\n        if(!this.layout.isManualLayout()){\n            this.layout.update();\n        }else{\n            this.redraw();\n        }\n    }\n\n    removeSelectedNodes() {\n        var selectedNodes = this.getSelectedNodes();\n        if(!selectedNodes.length){\n            return;\n        }\n        this.data.saveState();\n        this.data.removeNodes(selectedNodes);\n        this.clearSelection();\n        this.redraw();\n        this.layout.update();\n    }\n\n    removeSelectedTexts(){\n        var selectedTexts = this.getSelectedTexts();\n\n        if(!selectedTexts.length){\n            return;\n        }\n        this.data.saveState();\n        this.data.removeTexts(selectedTexts);\n        this.clearSelection();\n        this.redraw();\n    }\n\n    copyNode(d, notClearPrevSelection) {\n        var clone = this.data.cloneSubtree(d);\n        if(notClearPrevSelection){\n            if(!this.copiedNodes){\n                this.copiedNodes=[];\n            }\n            this.copiedNodes.push(clone);\n        }else{\n            this.copiedNodes = [clone];\n        }\n\n    }\n\n    cutNode(d) {\n        this.copyNode(d);\n        this.removeNode(d);\n    }\n\n    cutSelectedNodes(){\n        var selectedNodes = this.getSelectedNodes();\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\n        this.copyNodes(selectedRoots);\n        this.removeSelectedNodes();\n    }\n\n    copySelectedNodes() {\n        var self;\n        var selectedNodes = this.getSelectedNodes();\n\n        var selectedRoots = this.data.findSubtreeRoots(selectedNodes);\n        this.copyNodes(selectedRoots);\n\n\n    }\n\n    copyNodes(nodes){\n        this.copiedNodes = nodes.map(d=>this.data.cloneSubtree(d));\n    }\n\n\n\n    pasteToNode(node) {\n        if(!this.copiedNodes || !this.copiedNodes.length){\n            return;\n        }\n        this.data.saveState();\n        var self = this;\n        self.clearSelection();\n        var nodesToAttach = this.copiedNodes;\n        self.copyNodes(this.copiedNodes);\n        nodesToAttach.forEach(toAttach=>{\n            var attached = this.data.attachSubtree(toAttach, node).childNode;\n            if(attached.folded){\n                self.foldSubtree(attached, attached.folded, false);\n            }\n            var location = self.layout.getNewChildLocation(node);\n            attached.moveTo(location.x, location.y, true);\n            self.layout.moveNodeToEmptyPlace(attached, false);\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\n\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\n        });\n\n        if(node.folded){\n            self.foldSubtree(node, node.folded, false);\n        }\n\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n\n    }\n\n    pasteToNewLocation(point) {\n        this.data.saveState();\n        var self = this;\n        self.clearSelection();\n        var nodesToAttach = this.copiedNodes;\n        self.copyNodes(this.copiedNodes);\n        nodesToAttach.forEach(toAttach=> {\n            var attached = this.data.attachSubtree(toAttach);\n            if(attached.folded){\n                self.foldSubtree(attached, attached.folded, false);\n            }\n            attached.moveTo(point.x, point.y, true);\n            self.layout.moveNodeToEmptyPlace(attached, false);\n            self.layout.fitNodesInPlottingRegion(this.data.getAllDescendantNodes(attached));\n\n            self.selectSubTree(attached, false, nodesToAttach.length>1);\n        });\n\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n\n    }\n\n    convertNode(node, typeToConvertTo){\n        var self = this;\n        this.data.saveState();\n        this.data.convertNode(node, typeToConvertTo);\n        setTimeout(function(){\n            self.redraw(true);\n        },10)\n    }\n\n    performOperation(object, operation){\n        var self = this;\n        this.data.saveState();\n        operation.perform(object);\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n    }\n\n    foldSubtree(node, fold = true, redraw=true){\n        let self = this;\n        node.folded = fold;\n\n        this.data.getAllDescendantNodes(node).forEach(n=>{\n            n.$hidden = fold;\n            n.folded = false;\n        });\n        this.data.getAllDescendantEdges(node).forEach(e=>e.$hidden = fold);\n\n        if(!redraw){\n            return;\n        }\n        setTimeout(function(){\n            self.redraw();\n            self.layout.update();\n        },10)\n    }\n\n    updateVisibility(node = null){\n        if(!node){\n            this.data.getRoots().forEach(n=>this.updateVisibility(n));\n            return;\n        }\n\n        if(node.folded){\n            this.foldSubtree(node, true, false);\n            return;\n        }\n\n        node.childEdges.forEach(e => this.updateVisibility(e.childNode));\n\n    }\n\n    moveNodeTo(x,y){\n\n    }\n\n    updateNodePosition(node) {\n        this.getNodeD3Selection(node).raise().attr('transform', 'translate('+node.location.x+' '+node.location.y+')');\n    }\n\n    updateTextPosition(text) {\n        this.getTextD3Selection(text).raise().attr('transform', 'translate('+text.location.x+' '+text.location.y+')');\n    }\n\n    getNodeD3Selection(node){\n        return this.getNodeD3SelectionById(node.$id);\n    }\n\n    getNodeD3SelectionById(id){\n        return this.mainGroup.select('#node-'+id);\n    }\n    getTextD3Selection(text){\n        return this.getTextD3SelectionById(text.$id);\n    }\n    getTextD3SelectionById(id){\n        return this.mainGroup.select('#text-'+id);\n    }\n\n    getSelectedNodes(visibleOnly = false) {\n        let selectedVisible = this.mainGroup.selectAll(\".node.selected\").data();\n        if(visibleOnly){\n            return selectedVisible;\n        }\n\n        let allSelected  = [];\n        allSelected.push(...selectedVisible);\n\n        selectedVisible.forEach(n=>{\n            if(n.folded){\n                let descendants = this.data.getAllDescendantNodes(n);\n                if(descendants){\n                    allSelected.push(...descendants);\n                }\n            }\n        });\n\n        return allSelected;\n    }\n\n    getSelectedTexts(){\n        return this.mainGroup.selectAll(\".floating-text.selected\").data();\n    }\n\n    clearSelection(){\n        this.mainGroup.selectAll(\".edge.selected\").select('path').attr(\"marker-end\", d => \"url(#arrow\"+(this.isOptimal(d)?'-optimal':'')+\")\")\n        this.mainGroup.selectAll(\".selected\").classed('selected', false);\n        this.config.onSelectionCleared();\n    }\n\n    selectEdge(edge, clearSelectionBeforeSelect){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n        this.config.onEdgeSelected(edge);\n        this.mainGroup.select('#edge-'+edge.$id)\n            .classed('selected', true)\n            .select('path')\n            .attr(\"marker-end\", d => \"url(#arrow-selected)\")\n    }\n\n    isNodeSelected(node){\n        return this.getNodeD3Selection(node).classed('selected');\n    }\n\n    selectNode(node, clearSelectionBeforeSelect, skipCallback){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n\n        if(!skipCallback){\n            this.config.onNodeSelected(node);\n        }\n\n        this.getNodeD3SelectionById(node.$id).classed('selected', true);\n    }\n\n    selectText(text, clearSelectionBeforeSelect, skipCallback){\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n\n        if(!skipCallback){\n            this.config.onTextSelected(text)\n        }\n\n        this.getTextD3SelectionById(text.$id).classed('selected', true);\n    }\n\n    selectSubTree(node, clearSelectionBeforeSelect,skipCallback) {\n        if(clearSelectionBeforeSelect){\n            this.clearSelection();\n        }\n        this.selectNode(node, false, skipCallback);\n        node.childEdges.forEach(e=>this.selectSubTree(e.childNode, false, true));\n    }\n\n    selectAllNodes() {\n        this.mainGroup.selectAll(\".node\").classed('selected', true);\n    }\n\n    autoLayout(type, withoutStateSaving){\n        this.layout.autoLayout(type, withoutStateSaving);\n    }\n\n    updateDiagramTitle(titleValue){\n        if(!titleValue){\n            titleValue = '';\n        }\n        this.diagramTitle = titleValue;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(true);\n    }\n\n    redrawDiagramTitle(){\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\n\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\n        title.text(this.diagramTitle);\n        Layout.setHangingPosition(title);\n\n        var marginTop = parseInt(this.config.title.margin.top);\n        this.titleContainer.attr('transform', 'translate('+(svgWidth/2)+','+( marginTop)+')');\n    }\n    redrawDiagramDescription(){\n        var svgWidth = this.svg.attr('width');\n        var svgHeight = this.svg.attr('height');\n        this.titleContainer = this.svg.selectOrAppend('g.sd-title-container');\n\n        var desc = this.titleContainer.selectOrAppend('text.sd-description');\n\n        if(!this.config.description.show){\n            desc.remove();\n            return;\n        }\n\n        var lines = this.diagramDescription ? this.diagramDescription.split('\\n') : [];\n        var tspans = desc.selectAll('tspan').data(lines);\n        tspans.enter().append('tspan')\n            .merge(tspans)\n            .html(l=>AppUtils.replaceUrls(AppUtils.escapeHtml(l)))\n            .attr('dy', (d,i)=>i>0 ? '1.1em': undefined)\n            .attr('x', '0');\n\n        tspans.exit().remove();\n        Layout.setHangingPosition(desc);\n\n        var title = this.titleContainer.selectOrAppend('text.sd-title');\n\n        var marginTop = 0;\n        if(this.diagramTitle){\n            marginTop += title.node().getBBox().height;\n            marginTop+= Math.max(parseInt(this.config.description.margin.top), 0);\n        }\n\n\n        desc.attr('transform', 'translate(0,'+( marginTop)+')');\n    }\n\n    updateDiagramDescription(descriptionValue){\n        if(!descriptionValue){\n            descriptionValue = '';\n        }\n        this.diagramDescription = descriptionValue;\n        this.redrawDiagramTitle();\n        this.redrawDiagramDescription();\n        this.updateMargin(true);\n    }\n\n\n    getTitleGroupHeight(withMargins){\n        if(!this.titleContainer){\n            return 0;\n        }\n        var h = this.titleContainer.node().getBBox().height;\n        if(withMargins){\n            h+= parseInt(this.config.title.margin.bottom);\n            h+= parseInt(this.config.title.margin.top);\n        }\n        return h;\n    }\n\n}\n","export * from './src/index'\n"]}